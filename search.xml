<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch11_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F5.JUC%2FOldPaper%2FFuture%2F</url>
    <content type="text"><![CDATA[Future在前面的文章中我们讲述了创建线程的2种方式，一种是直接继承Thread，另外一种就是实现Runnable接口。 这2种方式都有一个缺陷就是：在执行完任务之后无法获取执行结果。 如果需要获取执行结果，就必须通过共享变量或者使用线程通信的方式来达到效果，这样使用起来就比较麻烦。 而自从Java 1.5开始，就提供了Callable和Future，通过它们可以在任务执行完毕之后得到任务执行结果。 Interface Future代表一次异步计算的结果，它提供方法来查看计算是否完成、获取计算结果、取消计算。 方法与描述 cancel(boolean mayInterruptIfRunning)尝试取消执行该任务 get()一直等待直到任务完成 get(long timeout, TimeUnit unit)最多等待指定的时间 isCancelled()是否成功取消该任务 isDone()任务是否已完成 ScheduledFutureInterface A delayed result-bearing action that can be cancelled. Usually a scheduled future is the result of scheduling a task with a ScheduledExecutorService. RunnableFutureInterface 一个Runnable的Future，在成功执行玩run方法后，可以获取其结果。 FutureTaskFuture接口的基本实现。 RunnableScheduledFutureA ScheduledFuture that is Runnable. Successful execution of the run method causes completion of the Future and allows access to its results.]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch11_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F5.JUC%2FOldPaper%2F3.Executor%2F</url>
    <content type="text"><![CDATA[Executor执行用户提交上来的任务（Runnable）。该接口提供了一种方法来对任务的提交和任务的运行机制进行解耦。 ExecutorServiceExecutor，提供管理终止的方法和可以生成Future以跟踪一个或多个异步任务进度的方法。 ExecutorService是可以关闭，这将导致它拒绝新任务。有两种方法关闭它。shutdown（）方法将允许先前提交的任务在终止之前执行，而shutdownNow（）方法则阻止等待任务启动并尝试停止当前正在执行的任务。 终止时，执行程序没有正在执行的任务，没有等待执行的任务，也没有任何新任务可以提交。 应关闭未使用的ExecutorService以允许回收其资源。 ThreadPoolExecutor一个ExecutorService，通过线程池来进行用户提交的任务。 ScheduledExecutorService一个ExecutorService，等待给定的时间后执行命令或者定期执行。 ScheduledThreadPoolExecutor一个ThreadPoolExecutor，等待给定的时间后执行命名或者定期执行。 Java线程池ThreadPoolExecutorThreadPoolExecutor类是Java线程池的核心类。 继承关系ThreadPoolExecutor &gt;&gt; AbstractExecutorService &gt;&gt; ExecutorService &gt;&gt;Executor 构造器1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465public class ThreadPoolExecutor extends AbstractExecutorService &#123; /** * 他有四个构造器 * corePoolSize 核心线程池大小 * maximumPoolSize 最大线程池大小 * keepAliveTime 当前线程数量大于核心数时，空闲的线程可以存活多久 * unit keepAliveTime的单位 * workQueue * ThreadFactory 线程工厂 * handler */ public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue) &#123; this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, Executors.defaultThreadFactory(), defaultHandler); &#125; public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory) &#123; this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, defaultHandler); &#125; public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, RejectedExecutionHandler handler) &#123; this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, Executors.defaultThreadFactory(), handler); &#125; public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) &#123; if (corePoolSize &lt; 0 || maximumPoolSize &lt;= 0 || maximumPoolSize &lt; corePoolSize || keepAliveTime &lt; 0) throw new IllegalArgumentException(); if (workQueue == null || threadFactory == null || handler == null) throw new NullPointerException(); this.acc = System.getSecurityManager() == null ? null : AccessController.getContext(); this.corePoolSize = corePoolSize; this.maximumPoolSize = maximumPoolSize; this.workQueue = workQueue; this.keepAliveTime = unit.toNanos(keepAliveTime); this.threadFactory = threadFactory; this.handler = handler; &#125;&#125; 重要方法在ThreadPoolExecutor类中有几个非常重要的方法： execute() execute()方法实际上是Executor中声明的方法，在ThreadPoolExecutor进行了具体的实现，这个方法是ThreadPoolExecutor的核心方法，通过这个方法可以向线程池提交一个任务，交由线程池去执行。 submit() submit()方法是在ExecutorService中声明的方法，在AbstractExecutorService就已经有了具体的实现，在ThreadPoolExecutor中并没有对其进行重写，这个方法也是用来向线程池提交任务的，但是它和execute()方法不同，它能够返回任务执行的结果，去看submit()方法的实现，会发现它实际上还是调用的execute()方法，只不过它利用了Future来获取任务执行结果。 shutdown() shutdownNow() 尝试停止正在执行的任务，返回等待执行的任务。 深入线程池任务缓存队列及排队策略在前面我们多次提到了任务缓存队列，即workQueue，它用来存放等待执行的任务。 workQueue的类型为BlockingQueue，通常可以取下面三种类型： 1）ArrayBlockingQueue：基于数组的先进先出队列，此队列创建时必须指定大小； 2）LinkedBlockingQueue：基于链表的先进先出队列，如果创建时没有指定此队列大小，则默认为Integer.MAX_VALUE； 3）synchronousQueue：这个队列比较特殊，它不会保存提交的任务，而是将直接新建一个线程来执行新来的任务。 任务拒绝策略当线程池的任务缓存队列已满并且线程池中的线程数目达到maximumPoolSize，如果还有任务到来就会采取任务拒绝策略，通常有以下四种策略： ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常 ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。 ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程） ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务 线程池容量的动态调整ThreadPoolExecutor提供了动态调整线程池容量大小的方法：setCorePoolSize()和setMaximumPoolSize()， setCorePoolSize：设置核心池大小 setMaximumPoolSize：设置线程池最大能创建的线程数目大小 当上述参数从小变大时，ThreadPoolExecutor进行线程赋值，还可能立即创建新的线程来执行任务。 ExecutorsJava并不提倡我们直接使用ThreadPoolExecutor，而是使用Executors类中提供的几个静态方法来创建线程池： 123456Executors.newCachedThreadPool(); //创建一个缓冲池，缓冲池容量大小为Integer.MAX_VALUEExecutors.newSingleThreadExecutor(); //创建容量为1的缓冲池Executors.newFixedThreadPool(int); //创建固定容量大小的缓冲池// 上面三个方法都是使用ThreadPoolExecutor来创建线程池newScheduledThreadPool(int);newWorkStealingPool(int); ##]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch11_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F5.JUC%2FOldPaper%2F2.Future%2F</url>
    <content type="text"><![CDATA[Future在前面的文章中我们讲述了创建线程的2种方式，一种是直接继承Thread，另外一种就是实现Runnable接口。 这2种方式都有一个缺陷就是：在执行完任务之后无法获取执行结果。 如果需要获取执行结果，就必须通过共享变量或者使用线程通信的方式来达到效果，这样使用起来就比较麻烦。 而自从Java 1.5开始，就提供了Callable和Future，通过它们可以在任务执行完毕之后得到任务执行结果。 Interface Future代表一次异步计算的结果，它提供方法来查看计算是否完成、获取计算结果、取消计算。 方法与描述 cancel(boolean mayInterruptIfRunning)尝试取消执行该任务 get()一直等待直到任务完成 get(long timeout, TimeUnit unit)最多等待指定的时间 isCancelled()是否成功取消该任务 isDone()任务是否已完成 ScheduledFutureInterface A delayed result-bearing action that can be cancelled. Usually a scheduled future is the result of scheduling a task with a ScheduledExecutorService. RunnableFutureInterface 一个Runnable的Future，在成功执行玩run方法后，可以获取其结果。 FutureTaskFuture接口的基本实现。 RunnableScheduledFutureA ScheduledFuture that is Runnable. Successful execution of the run method causes completion of the Future and allows access to its results.]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch11_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F5.JUC%2FOldPaper%2F1.Callable%2F</url>
    <content type="text"><![CDATA[Callable一个可以返回结果和抛出异常的任务。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch11_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F5.JUC%2FOldPaper%2FExecutorServiceAndThreadPool%2F</url>
    <content type="text"><![CDATA[Executors框架前面我们已经学了如何通过继承Thread类或者实现Runnable接口来创建线程。 如果只是创建几个线程还好，如果要创建的线程数量比较多，那么这种不断创建和销毁线程的方法，其实是大大降低对系统资源的利用度的。 为了解决这个问题，JDK为我们提供了Executor框架，一个用来创建和管理线程的框架。 Executor框架具有以下的作用： 创建线程：它提供了多种方法来创建线程，具体来说就是使用线程池维护线程，从线程池调用线程执行任务。 线程管理：通过线程池来维护线程的生命周期。 任务的提交与执行：它不仅提供了方法让你提交任务，还能让你决定任务是马上执行，还是延迟执行，甚至定期执行。 JUC提供了以下三个接口，这三个接口定义所有创建和管理线程所需要的方法。 Executor：一个只包含execute（）方法的接口，通过接收一个runnable对象来执行任务。 ExecutorService：Executor的子接口，添加了管理任务生命周期的功能。同时还提供了submit()方法可以接收Runnable和Callable对象。Callable与Runnable类似，只不过前者可以返回执行后的结果。 ScheduledExecutorService：ExecutorService的子接口，It adds functionality to schedule the execution of the tasks. 除了上面三个接口，JUC还提供了一个Executors类，提供了一些工厂方法来创建不同类型的ExecutorService。 ExecutorService Example12345678910111213141516171819202122import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;public class ExecutorsExample &#123; public static void main(String[] args) &#123; System.out.println("Inside : " + Thread.currentThread().getName()); System.out.println("Creating Executor Service..."); ExecutorService executorService = Executors.newSingleThreadExecutor(); System.out.println("Creating a Runnable..."); Runnable runnable = () -&gt; &#123; System.out.println("Inside : " + Thread.currentThread().getName()); &#125;; System.out.println("Submit the task."); executorService.submit(runnable); System.out.println("Shutting down the executor"); executorService.shutdown(); &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243public class ExecutorsExample &#123; public static void main(String[] args) &#123; System.out.println("Inside : " + Thread.currentThread().getName()); System.out.println("Creating Executor Service with a thread pool of Size 2"); ExecutorService executorService = Executors.newFixedThreadPool(2); Runnable task1 = () -&gt; &#123; System.out.println("Executing Task1 inside : " + Thread.currentThread().getName()); try &#123; TimeUnit.SECONDS.sleep(2); &#125; catch (InterruptedException ex) &#123; throw new IllegalStateException(ex); &#125; &#125;; Runnable task2 = () -&gt; &#123; System.out.println("Executing Task2 inside : " + Thread.currentThread().getName()); try &#123; TimeUnit.SECONDS.sleep(4); &#125; catch (InterruptedException ex) &#123; throw new IllegalStateException(ex); &#125; &#125;; Runnable task3 = () -&gt; &#123; System.out.println("Executing Task3 inside : " + Thread.currentThread().getName()); try &#123; TimeUnit.SECONDS.sleep(3); &#125; catch (InterruptedException ex) &#123; throw new IllegalStateException(ex); &#125; &#125;; System.out.println("Submitting the tasks for execution..."); executorService.submit(task1); executorService.submit(task2); executorService.submit(task3); executorService.shutdown(); &#125;&#125; ScheduledExecutorService exampleScheduledExecutorService用来定期或者延期执行任务。 123456// 延迟执行public static void main(String[] args) &#123; ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1); Runnable task = () -&gt; System.out.println("老婆听电话！"); executorService.schedule(task, 2, TimeUnit.MINUTES);&#125; 123456// 定时执行任务public static void main(String[] args) &#123; ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1); Runnable task = () -&gt; System.out.println("老婆听电话！"); executorService.scheduleAtFixedRate(task, 2, 2, TimeUnit.MINUTES);&#125; Callable And Future在上面的例子，我们都是使用Runnable对象来定义任务，这种方法很方便，但是有个缺陷，那就是它不能返回任务执行后的结果。 JDK为我们提供了Callable接口用它来定义的任务，可以在执行完毕后返回结果。 12345678910Callable&lt;String&gt; task = new Callable&lt;String&gt;() &#123; @Override public String call() throws Exception &#123; return "hello world"; &#125;&#125;;Callable&lt;String&gt; task = () -&gt; &#123; return "hello world";&#125;; 12345678910111213141516public static void main(String[] args) throws ExecutionException, InterruptedException &#123; Callable&lt;String&gt; task = () -&gt; &#123; // Perform some computation System.out.println("Entered Callable"); Thread.sleep(2000); return "Hello from Callable"; &#125;; ExecutorService executorService = Executors.newSingleThreadExecutor(); Future&lt;String&gt; result = executorService.submit(task); // Future.get() blocks until the result is available String s = result.get(); System.out.println(s); executorService.shutdown();&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch11_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F5.JUC%2Ftools%2F</url>
    <content type="text"><![CDATA[CountDownLatch一个同步辅助工具，允许一个或多个线程处于等待直到其它线程中执行的一组操作完成。 构造CountDownLatch的时候需要给定一个计数量（count），每次调用countDown()方法就会减少一次，当计量数为0的时候，唤醒所有等待中的线程。 方法和描述 void await()Causes the current thread to wait until the latch has counted down to zero, unless the thread is interrupted. boolean await(long timeout, TimeUnit unit)Causes the current thread to wait until the latch has counted down to zero, unless the thread is interrupted, or the specified waiting time elapses. void countDown()Decrements the count of the latch, releasing all waiting threads if the count reaches zero. long getCount()Returns the current count. String toString()Returns a string identifying this latch, as well as its state. 例子 12345678910111213141516171819202122232425262728class Driver &#123; // ... void main() throws InterruptedException &#123; CountDownLatch doneSignal = new CountDownLatch(N); Executor e = ... for (int i = 0; i &lt; N; ++i) // create and start threads e.execute(new WorkerRunnable(doneSignal, i)); doneSignal.await(); // wait for all to finish &#125; &#125; class WorkerRunnable implements Runnable &#123; private final CountDownLatch doneSignal; private final int i; WorkerRunnable(CountDownLatch doneSignal, int i) &#123; this.doneSignal = doneSignal; this.i = i; &#125; public void run() &#123; try &#123; doWork(i); doneSignal.countDown(); &#125; catch (InterruptedException ex) &#123;&#125; // return; &#125; void doWork() &#123; ... &#125; &#125; CyclicBarrier允许一组线程全部等待彼此到达共同的障碍点。 CyclicBarrier支持可选的Runnable命令，该命令在每个障碍点运行一次，在聚会中的最后一个线程到达之后，但在释放任何线程之前。 方法和描述 int await()Waits until all parties have invoked await on this barrier. int await(long timeout, TimeUnit unit)Waits until all parties have invoked await on this barrier, or the specified waiting time elapses. int getNumberWaiting()Returns the number of parties currently waiting at the barrier. int getParties()Returns the number of parties required to trip this barrier. boolean isBroken()Queries if this barrier is in a broken state. void reset()Resets the barrier to its initial state. SemaphoreSemaphore是一种基于计数的信号量。它可以设定一个阈值，基于此，多个线程竞争获取许可信号，做完自己的申请后归还，超过阈值后，线程申请许可信号将会被阻塞。Semaphore可以用来构建一些对象池，资源池之类的，比如数据库连接池，我们也可以创建计数为1的Semaphore，将其作为一种类似互斥锁的机制，这也叫二元信号量，表示两种互斥状态。 123456789101112131415161718192021222324252627282930313233343536373839404142class Pool &#123; private static final int MAX_AVAILABLE = 100; private final Semaphore available = new Semaphore(MAX_AVAILABLE, true); public Object getItem() throws InterruptedException &#123; available.acquire(); return getNextAvailableItem(); &#125; public void putItem(Object x) &#123; if (markAsUnused(x)) available.release(); &#125; // Not a particularly efficient data structure; just for demo protected Object[] items = ... whatever kinds of items being managed protected boolean[] used = new boolean[MAX_AVAILABLE]; protected synchronized Object getNextAvailableItem() &#123; for (int i = 0; i &lt; MAX_AVAILABLE; ++i) &#123; if (!used[i]) &#123; used[i] = true; return items[i]; &#125; &#125; return null; // not reached &#125; protected synchronized boolean markAsUnused(Object item) &#123; for (int i = 0; i &lt; MAX_AVAILABLE; ++i) &#123; if (item == items[i]) &#123; if (used[i]) &#123; used[i] = false; return true; &#125; else return false; &#125; &#125; return false; &#125;&#125; Executors此包中定义的Executor，ExecutorService，ScheduledExecutorService，ThreadFactory和Callable类的工厂和实用方法。 该类支持以下几种方法： Methods that create and return an ExecutorService set up with commonly useful configuration settings. Methods that create and return a ScheduledExecutorService set up with commonly useful configuration settings. Methods that create and return a “wrapped” ExecutorService, that disables reconfiguration by making implementation-specific methods inaccessible. Methods that create and return a ThreadFactory that sets newly created threads to a known state. Methods that create and return a Callable out of other closure-like forms, so they can be used in execution methods requiring Callable. Exchanger]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch11_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2Fx.JMM%2F</url>
    <content type="text"><![CDATA[1.并行、并发、高并发、线程安全性并行、并发、高并发 并行：如果某个系统支持两个或以上个动作同时存在，那么这个系统就是一个并发系统。并发：如果某个系统支持两个或以上个动作同时执行，那么这个系统就是一个并行系统。 并发系统与并行系统这两个定义之间的关键差异在于“执行”这个词。在并发程序中可以同时拥有两个或以上个线程。这意味着，如果程序在单核处理器上运行，那么这些线程将交替的执行。这些线程是同时“存在”的——每个线程都处于执行过程中的某个状态。如果程序能够并行执行，那么就一定是运行在多核处理器上。此时，程序中的每个线程都将分配到一个独立的处理器核上，因此可以同时运行。 高并发：通常是指，通过设计保证系统能够同时并行处理很多请求。 线程安全性：一个类无论被多少个线程访问，该类始终能表现出正确的行为，那么就称这个类是线程安全的。 2.并发编程的问题在并发编程中，我们会遇到某些问题，例如原子性问题、可见性问题、有序性问题等等。 解决问题，我们要有方法论以及具体实现。在Java并发编程中，这个方法论就是Java内存模型，而具体实现就是Java提供的一系列和并发处理相关的关键字，比如volatile、synchronized、final以及concurrent包等等。 我们先来学习其中的方法论，再来学习具体实现。 Java内存模型，顾名思义就是一种内存模型，那么我们有必要先了解一下什么是内存模型。 2.1内存模型内存模型的作用是定义共享内存的正确性。具体的做法就是内存模型提供了一些关于内存读写的规则。通过这些规则来规范对内存的读写操作，从而保证指令执行的正确性。 2.1CPU缓存一致性背景知识：CPU的高速缓存 总所周知，CPU和内存并不是直接交换数据的，它们之间还隔着一个高速缓存。高速缓存是对程序员透明的，这意味在编程的时候是感知不到CPU的缓存的存在的。一般情况下确实如此，但在，在某些特殊的情形下（多核多线程），就不能忽略缓存的存在了。这其实是和缓存的设计有关系，一般多处理器下的每个CPU都有一个自己的缓存，存储在这个缓存的数据是其它CPU是无法查看的。 引入问题1：缓存一致性 问题来了，由于缓存是每个CPU私有的，那么在多线程环境下，某个CPU修改了变量x后保存在本地缓存，对于其它CPU，何时才能发现变量x被修改呢？如何保证其它CPU的缓存中持有的x的值是最新的呢？这就是缓存一致性问题。 缓存一致性问题是由于引入缓存而导致的，所以，这是很多CPU厂商必须解决的问题。为了解决前面提到的缓存数据不一致的问题，人们提出过很多方案，通常来说有以下2种方案： 通过在总线加LOCK#锁的方式。 通过缓存一致性协议（Cache Coherence Protocol）。 LOCK# 在早期的CPU当中，是通过在总线上加LOCK#锁的形式来解决缓存不一致的问题。因为CPU和其他部件进行通信都是通过总线来进行的，如果对总线加LOCK#锁的话，也就是说阻塞了其他CPU对其他部件访问（如内存），从而使得只能有一个CPU能使用这个变量的内存。在总线上发出了LCOK#锁的信号，那么只有等待这段代码完全执行完毕之后，其他CPU才能从其内存读取变量，然后进行相应的操作。这样就解决了缓存不一致的问题。但是由于在锁住总线期间，其他CPU无法访问内存，会导致效率低下。因此出现了第二种解决方案，通过缓存一致性协议来解决缓存一致性问题。 缓存一致性协议 缓存一致性协议（Cache Coherence Protocol），最出名的就是Intel 的MESI协议，MESI协议的作用就是保证每个缓存中使用的共享变量的副本是一致的。MESI的核心的思想是：当CPU写数据时，如果发现操作的变量是共享变量，即在其他CPU中也存在该变量的副本，会发出信号通知其他CPU将该变量的缓存行置为无效状态，因此当其他CPU需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取。 在MESI协议中，每个缓存可能有有4个状态，它们分别是： M(Modified)：这行数据有效，数据被修改了，和内存中的数据不一致，数据只存在于本Cache中。 E(Exclusive)：这行数据有效，数据和内存中的数据一致，数据只存在于本Cache中。 S(Shared)：这行数据有效，数据和内存中的数据一致，数据存在于很多Cache中。 I(Invalid)：这行数据无效。 关于MESI的更多细节这里就不详细介绍了，我们只要知道，MESI是一种比较常用的缓存一致性协议，他可以用来解决缓存之间的数据一致性问题就可以了。 通过缓存一致性协议之后，内存可见性问题似乎是得以解决了。但是，这里面还隐藏着另外一个问题：乱序执行！ 2.1.2乱序执行乱序，指的是程序指令实际上执行的顺序，和我们书写的指令的顺序不一致。乱序分两种，分别是编译器的指令重排和CPU的乱序执行。本意上乱序是为了优化指令执行的速度而产生的。并且为了维护程序原来的语义，编译器和CPU不会对两个有数据依赖的指令重排（reorder）。这种保护在单线程的环境下是可以工作的，但是到了多线程，就可能出问题了。 举个例子，CPU-0将要执行两条指令，分别是： 121. STORE x2. LOAD y 当CPU-0执行指令1的时候，发现这个变量x的当前状态为Shared，这意味着其它CPU也持有了x，因此根据缓存一致性协议，CPU-0在修改x之前必须通知其它CPU，直到收到来自其它CPU的ack才会执行真正的修改x。但是，事情没有这么简单。现代CPU缓存通常都有一个Store Buffer，其存在的目的是，先将要Store的变量记下来，注意此时并不真的执行Store操作，然后待时机合适的时候再执行实际的Store。有了这个Store Buffer，CPU-0在向其它CPU发出disable消息之后并不是干等着，而是转而执行指令2（由于指令1和指令2在CPU-0看来并不存在数据依赖）。这样做效率是有了，但是也带来了问题。虽然我们在写程序的时候，是先STORE x再执行LOAD y，但是实际上CPU却是先LOAD y再STORE x，这个便是CPU乱序执行（reorder）的一种情况！ 当你的程序要求指令1、2有逻辑上的先后顺序时，CPU这样的优化就是有问题的。但是，CPU并不知道指令之间蕴含着什么样的逻辑顺序，在你告诉它之前，它只是假设指令之间都没有逻辑关联，并且尽最大的努力优化执行速度。因此我们需要一种机制能告诉CPU：这段指令执行的顺序是不可被重排的！做这种事的就是内存屏障（memory barrier）！ 123STORE xWMB (Write memory barrier)LOAD y 例如，通过在STORE x之后加上这个写内存屏障，就能保证在之后LOAD y指令不会被重排到STORE x之前了。 2.1.3总结前面讲了那么多，那么内存模型是什么呢？由于每个CPU设计都是不同的，每个CPU对指令乱序的程度也是不一样的。比较保守的如x86仅会对Store Load乱序，但是一些优化激进的CPU（PS的Power）会允许更多情况的乱序产生。如果目标是写一个跨平台多线程的程序，那么势必要了解每一个CPU的细节，来插入确切的、足够的内存屏障来保证程序的正确性。这是多么的不科学啊！科学的做法应该是，编写一套抽象的程序，然后在不同的平台下让编程语言、编译器来生成合适的内存屏障以及处理缓存一致性问题。因此，我们有了内存模型的概念。我们只需要根据这个抽象的内存模型来编写程序即可。 2.2原子性、可见性、有序性 可见性：指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。 原子性：指在一个操作中cpu不可以在中途暂停然后再调度，既不被中断操作，要不执行完成，要不就不执行。 有序性：程序执行的顺序按照代码的先后顺序执行。 有没有发现，缓存一致性问题其实就是可见性问题。CPU乱序执行就是原子性问题，编译器指令重排就是有序性问题。所以说Java内存模型是解决这些问题的方法论。 3.Java内存模型3.1什么是Java内存模型Java内存模型（Java Memory Model ,JMM）就是一种符合内存模型规范的，屏蔽了各种硬件和操作系统的访问差异的，保证了Java程序在各种平台下对内存的访问都能保证效果一致的机制及规范。 提到Java内存模型，一般指的是JDK 5 开始使用的新的内存模型，主要由JSR-133: JavaTM Memory Model and Thread Specification 描述。 Java内存模型规定了所有的变量都存储在主内存中，每条线程还有自己的工作内存，线程的工作内存保存了主内存中该线程使用到的变量的副本，线程对变量的所有操作都必须在工作内存中进行，而不能直接读写主内存。不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量的传递均需要自己的工作内存和主存之间进行数据同步进行。 3.2Java内存模型的实现在Java中提供了一系列和并发处理相关的关键字，比如volatile、synchronized、final等等。其实这些就是Java内存模型封装了底层的实现后提供给程序员使用的一些关键字。 在开发多线程的代码的时候，我们可以直接使用synchronized等关键字来控制并发，从来就不需要关心底层的编译器优化、缓存一致性等问题。所以，Java内存模型，除了定义了一套规范，还提供了一系列原语，封装了底层实现后，供开发者直接使用。 下面我们看看在Java中分别使用什么方式解决原子性、有序性和一致性等问题。 3.2.1原子性问题 原子变量类 synchronized 在Java中，为了保证原子性，提供了两个高级的字节码指令monitorenter和monitorexit。在synchronized的实现原理文章中，介绍过，这两个字节码，在Java中对应的关键字就是synchronized。因此，在Java中可以使用synchronized来保证方法和代码块内的操作是原子性的。 3.2.2可见性问题Java内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值的这种依赖主内存作为传递媒介的方式来实现的。Java中的volatile关键字提供了一个功能，那就是被其修饰的变量在被修改后可以立即同步到主内存，被其修饰的变量在每次是用之前都从主内存刷新。因此，可以使用volatile来保证多线程操作时变量的可见性。除了volatile，Java中的synchronized和final两个关键字也可以实现可见性。只不过实现方式不同，这里不再展开了。 3.2.3有序性问题在Java中，可以使用synchronized和volatile来保证多线程之间操作的有序性。实现方式有所区别： volatile关键字会禁止指令重排。 synchronized关键字保证同一时刻只允许一条线程操作。进出锁住的代码块是串行的，因为只能有一个线程拿到锁，这就使得使用同一个锁的两个执行过程A和B之间，A看B的操作是有序的，B看A的操作也是有序的，是因为执行过程内部无论会不会指令重排序，结果都是一致的。但是锁的内部代码依然会指令重排序。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch11_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F5.JUC%2Flocks%2F</url>
    <content type="text"><![CDATA[locks我们知道，synchronized 是Java的关键字，是Java的内置特性，在JVM层面实现了对临界资源的同步互斥访问，但 synchronized 在处理实际问题时存在诸多局限性，比如响应中断等。Lock 提供了比 synchronized更广泛的锁操作，它能以更优雅的方式处理线程同步问题。 lock是控制多线程获取共享资源的工具，只有在获取到锁的情况下，才能对共享资源进行操作，而在同一个时间只能有一个线程获取到锁。当然也有些锁是运行并发获取共享资源的，例如ReadWriteLock中的读锁。 每个对象都藏有一个监视器锁（monitor lock），synchronized关键字就是用来获取这个锁的，synchronized要求对锁的占用和释放都必须在代码块或方法块中进行。这就导致synchronized用起来简单，但是它不够灵活，在某些情景下，我们需要更加灵活的锁。例如用于遍历并发访问的数据结构的一些算法需要使用“手动”或“链锁”：获取节点A的锁定，然后获取节点B，然后释放A并获取C，然后释放B并获取D等等。Lock接口的实现类允许在不同的作用域中获取和释放锁，还允许以任何的顺序获取或释放多个锁。 由于它允许你在不同的作用域使用锁，因此你需要手动的对锁进行释放。 Lock12345678public interface Lock &#123; void lock(); void lockInterruptibly() throws InterruptedException; boolean tryLock(); boolean tryLock(long time, TimeUnit unit) throws InterruptedException; void unlock(); Condition newCondition();&#125; 在Lock中声明了四个方法来获取锁，下面来讲讲这四个方法有何区别。 lock() 用来获取锁。如果锁已被其他线程获取，则一直等待。 tryLock()tryLock() 尝试获取锁，如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false，也就说这个方法无论如何都会立即返回。在拿不到锁时不会一直在那等待。 tryLock(long time, TimeUnit unit) 和tryLock()方法是类似的，只不过区别在于这个方法在拿不到锁时会等待一定的时间，在时间期限之内如果还拿不到锁，就返回false。如果如果一开始拿到锁或者在等待期间内拿到了锁，则返回true。 lockInterruptibly() 获取锁，unless the current thread is interrupted. ReentrantLockReentrantLock是目前JUC中唯一实现了Lock接口的类，并且ReentrantLock提供了更多的方法。下面通过一些实例看具体看一下如何使用ReentrantLock。 ReentrantReadWriteLock.ReadLockThe lock returned by method ReentrantReadWriteLock.readLock(). ReentrantReadWriteLock.WriteLockConditionCondition接口可以让线程暂停执行，直到给定的条件（Condition）为真。 Lock用来代替synchronized，Condition用来代替Object的监控方法（wait, notify and notifyAll）。 方法和描述 void await()线程进入等待状态直到接收到信号或者被打断 boolean await(long time, TimeUnit unit)Causes the current thread to wait until it is signalled or interrupted, or the specified waiting time elapses. long awaitNanos(long nanosTimeout)Causes the current thread to wait until it is signalled or interrupted, or the specified waiting time elapses. void awaitUninterruptibly()线程进入等待状态直到接收到信号 boolean awaitUntil(Date deadline)Causes the current thread to wait until it is signalled or interrupted, or the specified deadline elapses. void signal()Wakes up one waiting thread. void signalAll()Wakes up all waiting threads. 例子 12345678910111213141516171819202122232425262728293031323334353637class BoundedBuffer &#123; final Lock lock = new ReentrantLock(); final Condition notFull = lock.newCondition(); final Condition notEmpty = lock.newCondition(); final Object[] items = new Object[100]; int putptr, takeptr, count; public void put(Object x) throws InterruptedException &#123; lock.lock(); try &#123; while (count == items.length) notFull.await(); items[putptr] = x; if (++putptr == items.length) putptr = 0; ++count; notEmpty.signal(); &#125; finally &#123; lock.unlock(); &#125; &#125; public Object take() throws InterruptedException &#123; lock.lock(); try &#123; while (count == 0) notEmpty.await(); Object x = items[takeptr]; if (++takeptr == items.length) takeptr = 0; --count; notFull.signal(); return x; &#125; finally &#123; lock.unlock(); &#125; &#125;&#125; ReadWriteLockReadWriteLock维护一对关联的锁，一个用于只读操作，另一个用于写入。只要没有写入，读锁定可以由多个读取器线程同时保持。写锁是独占的。 方法和描述 Lock readLock()Returns the lock used for reading. Lock writeLock()Returns the lock used for writing. ReentrantReadWriteLockReadWriteLock的实现，支持与ReentrantLock类似的语义。 123456789101112131415161718192021222324252627class RWDictionary &#123; private final Map&lt;String, Data&gt; m = new TreeMap&lt;String, Data&gt;(); private final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock(); private final Lock r = rwl.readLock(); private final Lock w = rwl.writeLock(); public Data get(String key) &#123; r.lock(); try &#123; return m.get(key); &#125; finally &#123; r.unlock(); &#125; &#125; public String[] allKeys() &#123; r.lock(); try &#123; return m.keySet().toArray(); &#125; finally &#123; r.unlock(); &#125; &#125; public Data put(String key, Data value) &#123; w.lock(); try &#123; return m.put(key, value); &#125; finally &#123; w.unlock(); &#125; &#125; public void clear() &#123; w.lock(); try &#123; m.clear(); &#125; finally &#123; w.unlock(); &#125; &#125;&#125; LockSupportconcurrent包的基础Doug Lea 的神作concurrent包是基于AQS (AbstractQueuedSynchronizer)框架，AQS框架借助于两个类：Unsafe(提供CAS操作)和LockSupport(提供park/unpark操作)。因此，LockSupport可谓构建concurrent包的基础之一。理解concurrent包，就从这里开始。 两个重点 操作对象 归根结底，LockSupport调用的Unsafe中的native代码： 12public native void unpark(Thread jthread); public native void park(boolean isAbsolute, long time); 两个函数声明清楚地说明了操作对象：park函数是将当前Thread阻塞，而unpark函数则是将另一个Thread唤醒。 与Object类的wait/notify机制相比，park/unpark有两个优点：1. 以thread为操作对象更符合阻塞线程的直观定义；2. 操作更精准，可以准确地唤醒某一个线程（notify随机唤醒一个线程，notifyAll唤醒所有等待的线程），增加了灵活性。 关于许可 在上面的文字中，我使用了阻塞和唤醒，是为了和wait/notify做对比。其实park/unpark的设计原理核心是“许可”。park是等待一个许可。unpark是为某线程提供一个许可。如果某线程A调用park，那么除非另外一个线程调用unpark(A)给A一个许可，否则线程A将阻塞在park操作上。 有一点比较难理解的，是unpark操作可以再park操作之前。也就是说，先提供许可。当某线程调用park时，已经有许可了，它就消费这个许可，然后可以继续运行。这其实是必须的。考虑最简单的生产者(Producer)消费者(Consumer)模型：Consumer需要消费一个资源，于是调用park操作等待；Producer则生产资源，然后调用unpark给予Consumer使用的许可。非常有可能的一种情况是，Producer先生产，这时候Consumer可能还没有构造好（比如线程还没启动，或者还没切换到该线程）。那么等Consumer准备好要消费时，显然这时候资源已经生产好了，可以直接用，那么park操作当然可以直接运行下去。如果没有这个语义，那将非常难以操作。 其它细节理解了以上两点，我觉得应该把握了关键，其它细节就不是那么关键，也容易理解了，不作分析。 Lock和synchronized的选择总结来说，Lock和synchronized有以下几点不同： 1）Lock是一个接口，而synchronized是Java中的关键字，synchronized是内置的语言实现； 2）synchronized在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而Lock在发生异常时，如果没有主动通过unLock()去释放锁，则很可能造成死锁现象，因此使用Lock时需要在finally块中释放锁； 3）Lock可以让等待锁的线程响应中断，而synchronized却不行，使用synchronized时，等待的线程会一直等待下去，不能够响应中断； 4）通过Lock可以知道有没有成功获取锁，而synchronized却无法办到。 5）Lock可以提高多个线程进行读操作的效率。 在性能上来说，如果竞争资源不激烈，两者的性能是差不多的，而当竞争资源非常激烈时（即有大量线程同时竞争），此时Lock的性能要远远优于synchronized。所以说，在具体使用时要根据适当情况选择。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch11_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F5.JUC%2Fexecutor%2F</url>
    <content type="text"><![CDATA[Executors框架前面我们已经学了如何通过继承Thread类或者实现Runnable接口来创建线程。 如果只是创建几个线程还好，如果要创建的线程数量比较多，那么这种不断创建和销毁线程的方法，其实是大大降低对系统资源的利用度的。 为了解决这个问题，JDK为我们提供了Executor框架，一个用来创建和管理线程的框架。 Executor框架具有以下的作用： 创建线程：它提供了多种方法来创建线程，具体来说就是使用线程池维护线程，从线程池调用线程执行任务。 线程管理：通过线程池来维护线程的生命周期。 任务的提交与执行：它不仅提供了方法让你提交任务，还能让你决定任务是马上执行，还是延迟执行，甚至定期执行。 JUC提供了以下三个接口，这三个接口定义所有创建和管理线程所需要的方法。 Executor：一个只包含execute（）方法的接口，通过接收一个runnable对象来执行任务。 ExecutorService：Executor的子接口，添加了管理任务生命周期的功能。同时还提供了submit()方法可以接收Runnable和Callable对象。Callable与Runnable类似，只不过前者可以返回执行后的结果。 ScheduledExecutorService：ExecutorService的子接口，It adds functionality to schedule the execution of the tasks. 除了上面三个接口，JUC还提供了一个Executors类，提供了一些工厂方法来创建不同类型的ExecutorService。 ExecutorService Example12345678910111213141516171819202122import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;public class ExecutorsExample &#123; public static void main(String[] args) &#123; System.out.println("Inside : " + Thread.currentThread().getName()); System.out.println("Creating Executor Service..."); ExecutorService executorService = Executors.newSingleThreadExecutor(); System.out.println("Creating a Runnable..."); Runnable runnable = () -&gt; &#123; System.out.println("Inside : " + Thread.currentThread().getName()); &#125;; System.out.println("Submit the task."); executorService.submit(runnable); System.out.println("Shutting down the executor"); executorService.shutdown(); &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243public class ExecutorsExample &#123; public static void main(String[] args) &#123; System.out.println("Inside : " + Thread.currentThread().getName()); System.out.println("Creating Executor Service with a thread pool of Size 2"); ExecutorService executorService = Executors.newFixedThreadPool(2); Runnable task1 = () -&gt; &#123; System.out.println("Executing Task1 inside : " + Thread.currentThread().getName()); try &#123; TimeUnit.SECONDS.sleep(2); &#125; catch (InterruptedException ex) &#123; throw new IllegalStateException(ex); &#125; &#125;; Runnable task2 = () -&gt; &#123; System.out.println("Executing Task2 inside : " + Thread.currentThread().getName()); try &#123; TimeUnit.SECONDS.sleep(4); &#125; catch (InterruptedException ex) &#123; throw new IllegalStateException(ex); &#125; &#125;; Runnable task3 = () -&gt; &#123; System.out.println("Executing Task3 inside : " + Thread.currentThread().getName()); try &#123; TimeUnit.SECONDS.sleep(3); &#125; catch (InterruptedException ex) &#123; throw new IllegalStateException(ex); &#125; &#125;; System.out.println("Submitting the tasks for execution..."); executorService.submit(task1); executorService.submit(task2); executorService.submit(task3); executorService.shutdown(); &#125;&#125; ScheduledExecutorService exampleScheduledExecutorService用来定期或者延期执行任务。 123456// 延迟执行public static void main(String[] args) &#123; ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1); Runnable task = () -&gt; System.out.println("老婆听电话！"); executorService.schedule(task, 2, TimeUnit.MINUTES);&#125; 123456// 定时执行任务public static void main(String[] args) &#123; ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1); Runnable task = () -&gt; System.out.println("老婆听电话！"); executorService.scheduleAtFixedRate(task, 2, 2, TimeUnit.MINUTES);&#125; Callable And Future在上面的例子，我们都是使用Runnable对象来定义任务，这种方法很方便，但是有个缺陷，那就是它不能返回任务执行后的结果。 JDK为我们提供了Callable接口用它来定义的任务，可以在执行完毕后返回结果。 12345678910Callable&lt;String&gt; task = new Callable&lt;String&gt;() &#123; @Override public String call() throws Exception &#123; return "hello world"; &#125;&#125;;Callable&lt;String&gt; task = () -&gt; &#123; return "hello world";&#125;; 12345678910111213141516public static void main(String[] args) throws ExecutionException, InterruptedException &#123; Callable&lt;String&gt; task = () -&gt; &#123; // Perform some computation System.out.println("Entered Callable"); Thread.sleep(2000); return "Hello from Callable"; &#125;; ExecutorService executorService = Executors.newSingleThreadExecutor(); Future&lt;String&gt; result = executorService.submit(task); // Future.get() blocks until the result is available String s = result.get(); System.out.println(s); executorService.shutdown();&#125; CompletionService对生成新的异步任务和消费任务完成后的结果进行解耦。生产者提交需要被执行的任务，消费按顺序消费产物，先生产出来的，先消费。通常，CompletionService依赖于单独的Executor来实际执行任务，在这种情况下，CompletionService仅管理内部完成队列。 ExecutorCompletionService类提供了此方法的实现。 方法和描述 Future&lt;V&gt; poll()Retrieves and removes the Future representing the next completed task, or null if none are present. Future&lt;V&gt; poll(long timeout, TimeUnit unit)Retrieves and removes the Future representing the next completed task, waiting if necessary up to the specified wait time if none are yet present. Future&lt;V&gt; submit(Callable&lt;V&gt; task)Submits a value-returning task for execution and returns a Future representing the pending results of the task. Future&lt;V&gt; submit(Runnable task, V result)Submits a Runnable task for execution and returns a Future representing that task. Future&lt;V&gt; take()Retrieves and removes the Future representing the next completed task, waiting if none are yet present. ExecutorCompletionService一个CompletionService，它使用提供的Executor来执行任务。该类安排提交的任务在完成后放置在可使用take访问的队列中。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch11_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F5.JUC%2Fatomic%2F</url>
    <content type="text"><![CDATA[1.何谓Atomic？ Atomic一词跟原子有点关系，后者曾被人认为是最小物质的单位。计算机中的Atomic是指不能分割成若干部分的意思。如果一段代码被认为是Atomic，则表示这段代码在执行过程中，是不能被中断的。通常来说，原子指令由硬件提供，供软件来实现原子方法（某个线程进入该方法后，就不会被中断，直到其执行完成） 在x86 平台上，CPU提供了在指令执行期间对总线加锁的手段。CPU芯片上有一条引线#HLOCK pin，如果汇编语言的程序中在一条指令前面加上前缀”LOCK”，经过汇编以后的机器代码就使CPU在执行这条指令的时候把#HLOCK pin的电位拉低，持续到这条指令结束时放开，从而把总线锁住，这样同一总线上别的CPU就暂时不能通过总线访问内存了，保证了这条指令在多处理器环境中的原子性。 2.原子操作类当多个线程同时更新公共变量，会导致线程不安全，通常大家可以会想到使用synchronized关键字或者Lock来解决这个问题，synchronized和Lock可以保证多个线程不会同时更新该公共变量。为了使用更简单，性能更高效，jdk1.5提出原子操作类。 原子操作类主要集中在Atomic（java.util.concurrent.atomic）包下，按照原子更新方式，这些原子操作类大致可以分为四种：原子更新基本类型、原子更新数组、原子更新引用以及原子更新属性，接下来就这四种类型原子操作类的具体实现做相关分析。 2.1原子更新基本类型Atomic包主要提供三个类来更新基本类型变量： AtomicBoolean：用来更新布尔型变量； AtomicInteger：用来更新整型变量； AtomicLong：用来更新长整型变量； 2.2原子更新数组Atomic包提供三个类来以原子的方式更新数组里的元素： AtomicIntegerArray：用来更新整型数组里的元素； AtomicLongArray：用来更新长整型数组里的元素； AtomicReferenceArray：用来更新引用类型数组里的元素。 2.3原子更新引用类型原子更新基本类型每次只能更新一个变量，假如需要更新多个变量怎么办呢？针对这个问题，Atomic包提供引用类型类来一次更新多个变量： AtomicReference：用于更新引用类型，可以理解为更新Object； AtomicMarkableReference：用于更新带有标记位的引用类型； AtomicStampedReference：用于更新带有版本号的引用类型，该类将版本号与引用类型关联起来，可以解决使用CAS进行原子更新时可能会出现的ABA问题。 2.4原子更新属性AtomicReference系列可以更新Object，同样的，针对Object的属性，Atomic提供一下方法来更新Object的属性： AtomicIntegerFieldUpdater：用于更新Object的整型属性； AtomicLongFieldUpdater：用于更新Object的长整型属性； AtomicReferenceFieldUpdater：用于更新Object的引用类型属性。 3.原子操作类源码分析3.1原子更新基本类型对于原子跟新基本类型，我们以AtomicLong为切入点，分析一下具体的源码实现。 AtomicLong有以下比较常用的方法： boolean compareAndSet(long expect, long update) long getAndSet(long newValue) add系列方法 long addAndGet(long delta)和long getAndAdd(long delta) increment系列方法 decrement系列方法 void lazySet(long newValue) compareAndSet 12345// 使用了CAS机制：CAS机制当中使用了3个基本操作数：内存地址V，旧的预期值A，要修改的新值B。// 调用Unsafe的compareAndSwapLong方法实现比较设置，如果当前value与预期值expect相等，则将value设置为update的值。public final boolean compareAndSet(long expect, long update) &#123; return unsafe.compareAndSwapLong(this, valueOffset, expect, update);&#125; 1234// 当对象是数组的时候，offset才有用的，如果其他，offset其实是没用的public final native boolean compareAndSwapLong(Object o, long offset, long expected, long x); getAndSet 123public final long getAndSet(long newValue) &#123; return unsafe.getAndSetLong(this, valueOffset, newValue);&#125; 1234567public final long getAndSetLong(Object o, long offset, long newValue) &#123; long v; do &#123; v = getLongVolatile(o, offset); &#125; while (!compareAndSwapLong(o, offset, v, newValue)); return v;&#125; add系列方法 AtomicLong提供addAndGet方法和getAndAdd方法来做加法运算。 123public final long getAndAdd(long delta) &#123; return unsafe.getAndAddLong(this, valueOffset, delta);&#125; 123public final long addAndGet(long delta) &#123; return unsafe.getAndAddLong(this, valueOffset, delta) + delta;&#125; increment系列方法 同add一样，AtomicLong同样提供两个方法：incrementAndGet和getAndIncrement方法来做自增操作。 decrement系列方法 同样的，AtomicLong也提供两个方法：decrementAndGet和getAndDecrement方法来做自减操作。 lazySet方法 练习 实现自增计数器，要求线程安全。 3.2原子更新数组Atomic包提供三个类来以原子的方式更新数组里的元素： AtomicIntegerArray：用来更新整型数组里的元素； AtomicLongArray：用来更新长整型数组里的元素； AtomicReferenceArray：用来更新引用类型数组里的元素。 接下来还是以AtomicLongArray为例，分析具体的源码实现。 AtomicLongArray同AtomicLong对外提供的方法大致一致，只不过前者是操作数组，后者是操作基本类型。 12//AtomicLongArray自己维护一个长整型数组array，对数组元素的操作实质是对array的操作。private final long[] array; 3.3原子更新引用类型原子更新基本类型每次只能更新一个变量，假如需要更新多个变量怎么办呢？针对这个问题，Atomic包提供引用类型类来一次更新多个变量： AtomicReference：用于更新引用类型，可以理解为更新Object； AtomicMarkableReference：用于更新带有标记位的引用类型； AtomicStampedReference：用于更新带有版本号的引用类型，该类将版本号与引用类型关联起来，可以解决使用CAS进行原子更新时可能会出现的ABA问题。 3.4原子更新属性AtomicReference系列可以更新Object，同样的，针对Object的属性，Atomic提供一下方法来更新Object的属性： AtomicIntegerFieldUpdater：用于更新Object的整型属性； AtomicLongFieldUpdater：用于更新Object的长整型属性； AtomicReferenceFieldUpdater：用于更新Object的引用类型属性。 以AtomicIntegerFieldUpdater为例，分析一下源码的具体实现。 在使用AtomicIntegerFieldUpdater来更改Object整型属性大致分为两步： 使用静态方法newUpdater创建一个更新器，设置需要更新的类和属性； 调用相关CAS系列方法更新属性，需要注意的是，更新的属性必须使用public volatile修饰。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch12_%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%BA%93%2FScanner%2F</url>
    <content type="text"><![CDATA[Scannerjava.util.Scanner A simple text scanner which can parse primitive(原始的) types and strings using regular expressions. 一个简单的文本扫描器,可以通过使用正则表达式解析基本数据类型和字符串, primitive types : 基本数据类型 A Scanner breaks its input into tokens(记号) using a delimiter(分隔符) pattern,which by default matches whitespace. The resulting tokens may then be converted into values of different types using the various next methods. 文本扫描器会根据你设置的分隔符,对输入的内容进行分隔,默认的分隔符是空格. 你可以通过使用各种各样的 next 方法来读取内容.]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch12_%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%BA%93%2F7.2_%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%2F</url>
    <content type="text"><![CDATA[系统相关System类System类代表当前Java程序的运行平台,它是final修饰的类,你知道我在说什么吗? 就是它不能有子类. 它提供了代表标准输入 输出 和错误输出的类变量, 还提供了一些静态方法,用于访问环境变量、系统属性的方法、还提供了加载文件和动态链接库的方法. 常用方法: ① getenv() 以字典的形式返回系统所有环境变量 ② getProperty(“”)获取系统属性 ③getProperties()获取所有系统属性 ④currentTimeMillis()返回long型整数格式的时间. ⑤identityHashCode(Object x) 获取某个对象的hashCode值. hashCode值相同,绝对是同一个对象. 123456789101112131415161718// getenv();获取环境变量 getProperty("")获取系统属性 getProperties()获取系统所有属性.import java.util.Map;import java.util.Properties;public class Demo &#123; public static void main(String[] args) &#123; // 获取系统所有的环境变量. Map&lt;String,String&gt; env = System.getenv(); for (String name: env.keySet()) &#123; System.out.println(name+":"+env.get(name)); &#125; // 获取系统所有属性 Properties props = System.getProperties(); System.out.println(props); &#125;&#125; Runtime类Runtime类代表着Java程序运行时环境,每个Java程序都有一个与之对应的Runtime实例.]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch10_%E6%B3%A8%E8%A7%A3%2F%E6%B3%A8%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[注解自定义注解类型12public @interface MyAnnotation&#123;&#125; 上面的代码等价于 1public class MyAnnotation implements java.lang.annotation.Annotation 标识型注解注解体为空时，不包含任何成员的注解就是标识型注解。 成员的可选类型 String Class 基本类型 枚举类型 注解类型 以及上述类型的数组 1234567public @interface MyAnnotation &#123; String value() default "默认构造方法"; Class type() default void.class;&#125; 用于注解类的注解JDK内置了一些注解，让我们可以对自定义的注解类进行更加灵活的配置 @Target指出该注解类适用于那些目标 12345678@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)public @interface MyAnnotation &#123; String value() default "默认构造方法"; Class type() default void.class;&#125; 选项 描述 ANNOTATION_TYPE 注解类型 TYPE 各种Java类型，包括类、接口、枚举类、注解类型 CONSTRUCTOR 构造方法 FIELD 成员变量 METHOD 成员方法 PARAMETER 方法参数 LOCAL_VARIABLE 局部变量 PACKAGE 包 @Retention指定当前注解的有效范围 选项 描述 SOURCE 仅保存在源码中，不会引入到编译后的class文件中 CLASS 会把程序中对注解类型的引用编译到类文件中 RUNTIME 包含以上CLASS的范围，并且还能在运行时把注解加载到虚拟机中 @Document标识型注解。表示注解类型包含的信息会被加入到JavaDoc文档中。 @Inherited表示该注解类可被继承 补充@SuppressWarnings用于关闭编译时产生的特定警告信息 选项 描述 deprecation 使用了过时的类或方法的警告 unchecked 使用了未检查的类型转换的警告 fallthrough switch语句中没有Break的警告 path serial final all 以上所有警告]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch12_%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%BA%93%2F7.3_%E5%B8%B8%E7%94%A8%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[常用类Object类Object类常用方法 123456boolean equlas(Object obj); // 判断两个对象是否同一个对象protected void finalize(); //当系统中没有引用变量引用到该对象时,垃圾回收器来该方法回收对象.Class&lt;T&gt; getClass()//获取该对象的运行时类int hashCode() // 返回该对象的hashCode值.结果默认跟System那个方法一致.String toString()//默认返回字符串,运行时类名@十六进制hashCodeprotected clone() // 对对象进行浅克隆 clone()方法 ①自定义类实现Cloneable接口 ②自定义类实现自己的clone()方法 123456789101112131415class User implements Cloneable &#123; public User clone() throws CloneNotSupportedException &#123; return (User) super.clone(); &#125;&#125;public class Demo &#123; public static void main(String[] args) throws CloneNotSupportedException &#123; User u1 = new User(); User u2 = u1.clone(); System.out.println(u1 == u2); //不是同一个对象 &#125;&#125; Objects类 String、StringBuffer、StringBuilder类String类是不可变类. StringBuffer类代表一个字符序列可变的字符串.该对象具有append() insert() reverse() setCharAt() setLength()等方法. 一旦通过StringBuffer类生成了最终想要的字符串,就可以通过toString()方法获得一个String对象. ##]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch12_%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%BA%93%2F7.1_%E4%B8%8E%E7%94%A8%E6%88%B7%E4%BA%92%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[与用户互动运行Java程序的参数在运行Java程序时输入参数 123456789101112public class Demo&#123; public static void main(String[] args) &#123; for(String arg : args) &#123; System.out.println(arg); &#125; &#125;&#125;//------// java Demo Hello World 使用Scanner获取键盘参数Scanner类可以方便的获取用户的键盘输入,它是一个基于正则表达式的文本扫描器. 它可以从文件,输入流,字符串中解析出基本数据类型和字符串值. 123456789101112131415// useDelimiter("定义分隔符"); hasNext();是否有内容; Next()输出内容; close(); 关闭扫描器import java.util.Scanner;public class Demo&#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); sc.useDelimiter("\n"); while(sc.hasNext()) &#123; System.out.println(sc.next()); &#125; sc.close(); &#125;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2FMySQL%2F4.%E5%85%B6%E4%BB%96%2F4.%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%2F</url>
    <content type="text"><![CDATA[MySQL主从复制 简介MySQL数据库提供的主从复制功能可以方便的实现数据的多处自动备份，实现数据库的拓展。多个数据备份不仅可以加强数据的安全性，也可以通过读写分离进一步提升数据库的负载性能。 工作原理MySQL之间数据复制的基础是二进制日志文件（binary log file）。一台MySQL数据库一旦启用二进制日志后，它的数据库中所有操作都会以“事件”的方式记录在二进制日志中，其他数据库作为slave通过一个I/O线程与主服务器保持通信，并监控master的二进制日志文件的变化，如果发现master二进制日志文件发生变化，则会把变化复制到自己的中继日志中，然后slave的一个SQL线程会把相关的“事件”执行到自己的数据库中，以此实现从数据库和主数据库的一致性，也就实现了主从复制。 实现MySQL主从复制需要进行的配置： 主服务器： 开启二进制日志 配置唯一的server-id 获得master二进制日志文件名及位置 创建一个用于slave和master通信的用户账号 从服务器： 配置唯一的server-id 使用master分配的用户账号读取master二进制日志 启用slave服务 实践主数据库master修改： 1.修改mysql配置 找到主数据库的配置文件my.cnf(或者my.ini)，我的在/etc/mysql/my.cnf,在[mysqld]部分插入如下两行： 123[mysqld]log-bin=mysql-bin #开启二进制日志server-id=1 #设置server-id 2.重启mysql，创建用于同步的用户账号 打开mysql会话shell&gt;mysql -hlocalhost -uname -ppassword 创建用户并授权：用户：rel1密码：slavepass 123456# 创建用户CREATE USER &apos;slaver&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos;;# 分配权限GRANT REPLICATION SLAVE ON *.* TO &apos;slaver&apos;@&apos;%&apos;;# 刷新权限flush privileges; 3.查看master状态，记录二进制文件名(mysql-bin.000003)和位置(73)： 123456mysql &gt; SHOW MASTER STATUS;+------------------+----------+--------------+------------------+| File | Position | Binlog_Do_DB | Binlog_Ignore_DB |+------------------+----------+--------------+------------------+| mysql-bin.000001 | 1026 | | |+------------------+----------+--------------+------------------+ 二、从服务器slave修改： 1.修改mysql配置 同样找到my.cnf配置文件，添加server-id 12[mysqld]server-id=2 #设置server-id，必须唯一 2.重启mysql，打开mysql会话，执行同步SQL语句(需要主服务器主机名，登陆凭据，二进制文件的名称和位置)： 123456change master to master_host=&apos;xxxxxx&apos;, master_user=&apos;slaver&apos;, master_password=&apos;123456&apos;, master_log_file=&apos;mysql-bin.000001&apos;, master_log_pos=1026; 3.启动slave同步进程： 1mysql&gt;start slave; 4.查看slave状态： 1234567mysql&gt; show slave status\G;*************************** 1. row *************************** ... Slave_IO_Running: Yes Slave_SQL_Running: Yes ...# 当Slave_IO_Running和Slave_SQL_Running都为YES的时候就表示主从同步设置成功了。 master开启二进制日志后默认记录所有库所有表的操作，可以通过配置来指定只记录指定的数据库甚至指定的表的操作，具体在mysql配置文件的[mysqld]可添加修改如下选项： 1234567# 不同步哪些数据库 binlog-ignore-db = mysql binlog-ignore-db = test binlog-ignore-db = information_schema # 只同步哪些数据库，除此之外，其他不同步 binlog-do-db = game 常见问题Slave_IO_Running:No 设置从服务器的bind-address = * 主服务器的端口是否开放了 信息设置是否正确 Slave_SQL_Running:NOGoogle…….]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2FRedis%2F2.SpringDataRedis%2F</url>
    <content type="text"><![CDATA[1.连接到Redisorg.springframework.data.redis.connection包提供了 RedisConnection RedisConnectionFactory 这两个接口用来从Redis中获取connection。 12345678910111213@Configuration@ComponentScan("com.hdr.hello.redis")public class AppConfig &#123; @Bean public LettuceConnectionFactory redisConnectionFactory() &#123; RedisStandaloneConfiguration redisConf = new RedisStandaloneConfiguration(); redisConf.setHostName("localhost"); redisConf.setPort(6379); redisConf.setPassword("!@#$"); return new LettuceConnectionFactory(redisConf); &#125;&#125; 12345678910@Autowiredprivate RedisConnectionFactory redisConnectionFactory;@Testpublic void main() &#123; RedisConnection connection = redisConnectionFactory.getConnection(); RedisStringCommands sc = connection.stringCommands(); sc.set("name".getBytes(), "黄大仁".getBytes()); connection.close();&#125; 2.RedisTemplateRedisConnection提供的方法都是对二进制数据进行操作，所以我们一般使用RedisTemplate来对Redis进行操作。 RedisTemplate使用基于Java的序列化机制对对象或二进制数据进行序列化和反序列化。 org.springframework.data.redis.serializer提供了其他的序列化机制。 You can also set any of the serializers to null and use RedisTemplate with raw byte arrays by setting the enableDefaultSerializer property to false. Note that the template requires all keys to be non-null. However, values can be null as long as the underlying serializer accepts them. Read the Javadoc of each serializer for more information. 123456@Beanpublic RedisTemplate redisTemplate() &#123; RedisTemplate redisTemplate = new RedisTemplate(); redisTemplate.setConnectionFactory(redisConnectionFactory()); return redisTemplate;&#125; 12345678910111213@Resource(name = "redisTemplate")private ListOperations&lt;String, List&lt;String&gt;&gt; listOpts;@Testpublic void rTemplate()&#123; ArrayList&lt;String&gt; sList = new ArrayList&lt;&gt;(); sList.add("hello"); sList.add("world"); listOpts.rightPush("text", sList); List&lt;String&gt; text = listOpts.leftPop("text"); System.out.println(text);&#125; StringRedisTemplate因为String用的多，所以特别提供了一个StringRedisTemplate。 1234@Beanpublic StringRedisTemplate stringRedisTemplate() &#123; return new StringRedisTemplate(redisConnectionFactory());&#125; 12345678@Autowiredprivate StringRedisTemplate stringRedisTemplate;@Testpublic void sRT() &#123; ListOperations&lt;String, String&gt; listOpts = stringRedisTemplate.opsForList(); listOpts.rightPushAll("books","java 8 in action","redis in action","spring in action");&#125; 3.序列化器org.springframework.data.redis.serializer提供了两种类型的序列化器： Two-way serializers based on RedisSerializer. Element readers and writers that use RedisElementReader and RedisElementWriter. The main difference between these variants is that RedisSerializer primarily serializes to byte[] while readers and writers use ByteBuffer. Multiple implementations are available (including two that have been already mentioned in this documentation): JdkSerializationRedisSerializer, which is used by default for RedisCache and RedisTemplate. the StringRedisSerializer. However one can use OxmSerializer for Object/XML mapping through Spring OXM support or Jackson2JsonRedisSerializer or GenericJackson2JsonRedisSerializer for storing data in JSON format. Do note that the storage format is not limited only to values. It can be used for keys, values, or hashes without any restrictions. 4.Hash mappingSpring Data Redis提供了各种将数据映射到哈希的策略。 Using HashMapper and HashOperations Direct mapping, by using HashOperations and a serializer Using Redis Repositories 4.1Hash Mappers BeanUtilsHashMapper using Spring’s BeanUtils. Jackson2HashMapper using FasterXML Jackson. ObjectHashMapper using Object-to-Hash Mapping. ObjectHashMapper12345678910111213141516171819@Resource(name = "redisTemplate")HashOperations&lt;String, byte[], byte[]&gt; hashOperations;HashMapper&lt;Object, byte[], byte[]&gt; hashMapper = new ObjectHashMapper();@Testpublic void writeHash() &#123; String key = "person"; Person person = new Person("大仁", "黄"); Map&lt;byte[], byte[]&gt; mappedHash = hashMapper.toHash(person); hashOperations.putAll(key, mappedHash);&#125;@Testpublic void loadHash() &#123; String key = "person"; Map&lt;byte[], byte[]&gt; loadedHash = hashOperations.entries(key); System.out.println(((Person) hashMapper.fromHash(loadedHash)));&#125; Jackson2HashMapper12345678910111213141516@Beanpublic RedisTemplate redisTemplate() &#123; RedisTemplate redisTemplate = new RedisTemplate&lt;&gt;(); redisTemplate.setConnectionFactory(redisConnectionFactory()); return redisTemplate;&#125;@Beanpublic ObjectMapper objectMapper() &#123; return new ObjectMapper();&#125;@Beanpublic Jackson2HashMapper jackson2HashMapper() &#123; return new Jackson2HashMapper(objectMapper(), false);&#125; 123456789101112131415161718@Autowiredprivate Jackson2HashMapper jackson2HashMapper;String key = "pig";@Testpublic void writeHash() &#123; Person person = new Person("佩琪", "猪",new Address("GuangZhou", "China")); Map&lt;String, Object&gt; mappedHash = jackson2HashMapper.toHash(person); hashOperations.putAll(key, mappedHash);&#125;@Testpublic void loadHash() &#123; Map&lt;String, Object&gt; entries = hashOperations.entries(key); Object map = jackson2HashMapper.fromHash(entries); Person person = new ObjectMapper().convertValue(map, Person.class); System.out.println(person);&#125; 这里没用到其他序列化器也，同样也能实现把Json转化，不太懂0.0 5.Redis Repositories1234567@RedisHash("people")public class Person &#123; @Id String id; String firstname; String lastname; Address address;&#125; 123public interface PersonRepository extends CrudRepository&lt;Person, String&gt; &#123; // 继承CrudRepository，获取基本的CRUD操作&#125; 12345678910111213141516@Configuration@EnableRedisRepositoriespublic class ApplicationConfig &#123; @Bean public RedisConnectionFactory connectionFactory() &#123; return new JedisConnectionFactory(); &#125; @Bean public RedisTemplate&lt;?, ?&gt; redisTemplate() &#123; RedisTemplate&lt;byte[], byte[]&gt; redisTemplate = new RedisTemplate&lt;&gt;(); redisTemplate.setConnectionFactory(redisConnectionFactory()); return redisTemplate; &#125;&#125; 1234567891011@Autowired PersonRepository repo;public void basicCrudOperations() &#123; Person rand = new Person("rand", "al'thor"); rand.setAddress(new Address("emond's field", "andor")); repo.save(rand); repo.findOne(rand.getId()); repo.count(); repo.delete(rand); &#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2FRedis%2F1.Redis%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[谈谈你对Redis的认识。 Redis是一个高性能的key-value数据库，它为我们提供了5种数据结构，分别是字符串、列表、哈希、有序集合、无序集合，常用的场景有session缓存、热点数据缓存、排行榜等等。Redis 提供了两种持久化方式:RDB（默认） 和AOF 基本数据结构redis为我们提供了5种数据结构 String list hash set zset（有序集合） String类型的CRUDRedis的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配，当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M的空间。需要注意的是字符串最大长度为 512M。 1234567891011121314# 添加set key valuesetnx key value# 删除del key# 查exists keyget key# 批量处理mset key1 value1 key2 value2mget key1 key2 # 过期expire key secondsetex key value second listRedis 的列表相当于 Java 语言里面的 LinkedList，注意它是链表而不是数组。这意味着 list 的插入和删除操作非常快，时间复杂度为 O(1)，但是索引定位很慢，时间复杂度为 O(n)，当列表弹出了最后一个元素之后，该数据结构自动被删除，内存被回收。 Redis 的列表结构常用来做异步队列使用。将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理。 12345678# 右边进入rpush books python java golang# 左边进入 这个有点反人类，一般从从右边进即可lpush books python java golang# 右边出rpop books# 左边出lpop books hash1234567hset books java "think in java"hset books golang "concurrency in go"hset books python "python cookbook"hget books golanghlen bookshgetall books Set12345sadd books pythonsmembers bookssismember books javascard books # 获取长度相当于 count()spop books zset(有序集合)zset它类似于 Java 的 SortedSet 和 HashMap 的结合体，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以给每个 value 赋予一个 score，代表这个 value 的排序权重。 zset可以用来存粉丝列表，value 值是粉丝的用户 ID，score 是关注时间。我们可以对粉丝列表按关注时间进行排序。 zset 还可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们可以对成绩按分数进行排序就可以得到他的名次。 123456789101112zadd books 9.0 "think in java"zadd books 8.9 "java concurrency"zadd books 8.6 "java cookbook"zrange books 0 -1 # 按 score 排序列出，参数区间为排名范围zrevrange books 0 -1 # 按 score 逆序列出，参数区间为排名范围zcard books # 相当于 count()# 获取指定 value 的 score score 使用 double 类型进行存储，所以存在小数点精度问题zscore books "java concurrency" zrem books "java concurrency" Redis的数据持久化Redis提供两种机制实现数据的持久化，分别是RDB和AOF。 RDBRDB是Redis DataBase的缩写，RDB是一个经过压缩的二进制文件，通过该文件可以还原生成RDB时的数据库状态。 RDB的创建与载入 有两个命令创建RDB文件，分别是SAVE、BGSAVE。 前者会阻塞Redis服务器进程，直到RDB文件创建完毕，后者则是创建一个子进程，由子进程生成RDB文件。 RDB文件的载入工作是在服务器启动时自动执行的，因为没有专门用于载入RDB文件的命令。载入RDB文件的期间，Redis服务器会处于阻塞状态。 AOFAOF Append Only File，通过保存Redis服务器所执行的命令来记录数据库状态。 当AOF持久化功能打开后，服务器执行完一个命令后，会将指令添加到缓冲区，然后再把缓冲区中的数据写入到AOF文件。AOF文件会越来越大，Redis提供了一条执行让我们重写AOF文件，从而减少文件的大小 BGREWRITEAOF。 Redis缓存常见问题缓存雪崩缓存失效了，导致大量的请求发送到数据库上，导致数据库瘫痪。 发生的原因：1.Redis出故障挂掉了 2.对缓存数据设置相同的过期时间，导致某段时间内大量缓存失效。 对于Redis出故障事发前：实现Redis的高可用，避免Redis挂掉这种情况的发生事发中：万一Redis真的挂了，我们可以设置本地缓存(ehcache)+限流(hystrix)事发后：redis持久化，重启后自动从磁盘上加载数据，快速恢复缓存数据。 对于过期时间相近在缓存的时候给过期时间加上一个随机值，这样就会大幅度的减少缓存在同一时间过期。 缓存穿透黑客特意请求缓存中不存在的数据，例如向ID为正数的表请求负数的ID，导致所有请求都发送到数据库上。 解决方案有两种： 1.使用布隆过滤器或者压缩filter提前拦截 2.当我们从数据库找不到的时候，我们也将这个空对象设置到缓存里边去。一般会为空对象设置一个较短的过期时间。 缓存与数据库双写一致数据更新的时候可能造成数据库和缓存的数据不一致。 一般来说，执行更新操作时，我们会有两种选择： 先操作数据库，再操作缓存 先操作缓存，再操作数据库 首先，要明确的是，无论我们选择哪个，我们都希望这两个操作要么同时成功，要么同时失败。所以，这会演变成一个分布式事务的问题。 所以，如果原子性被破坏了，可能会有以下的情况： 操作数据库成功了，操作缓存失败了。 操作缓存成功了，操作数据库失败了。 对于缓存，一般我们都是采取删除缓存缓存策略的，直接删除缓存，等再次读取时，到数据库找，在数据库找到再写到缓存里边。 先更新数据库，再删除缓存 先操作数据库，成功； 再删除缓存，也成功； 如果第一步(操作数据库)就失败了，我们可以直接返回错误(Exception)，不会出现数据不一致。 第一步成功(操作数据库)，第二步失败(删除缓存)，会导致数据库里是新数据，而缓存里是旧数据。 具体看这里 主从复制哨兵集群发布与订阅Redis有哪些架构？讲讲各自的特点https://www.cnblogs.com/jasontec/p/9699242.html]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2FMySQL%2F4.%E5%85%B6%E4%BB%96%2F5.%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[一. 创建用户命令:1234CREATE USER &apos;username&apos;@&apos;host&apos; IDENTIFIED BY &apos;password&apos;;# username：你将创建的用户名# host：指定该用户在哪个主机上可以登陆，如果想让该用户可以从任意远程主机登陆，可以使用通配符`%`# password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器 例子：12345CREATE USER &apos;dog&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;123456&apos;;CREATE USER &apos;pig&apos;@&apos;192.168.1.101_&apos; IDENDIFIED BY &apos;123456&apos;;CREATE USER &apos;pig&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos;;CREATE USER &apos;pig&apos;@&apos;%&apos; IDENTIFIED BY &apos;&apos;;CREATE USER &apos;pig&apos;@&apos;%&apos;; 二. 授权:命令:12345GRANT privileges ON databasename.tablename TO &apos;username&apos;@&apos;host&apos;# privileges：用户的操作权限，如`SELECT`，`INSERT`，`UPDATE`等，如果要授予所的权限则使用`ALL`# databasename：数据库名 tablename：表名# 如果要授予该用户对所有数据库和表的相应操作权限则可用`*`表示，如`*.*`flush privileges; # 刷新权限 例子:123GRANT SELECT, INSERT ON test.user TO &apos;pig&apos;@&apos;%&apos;;GRANT ALL ON *.* TO &apos;pig&apos;@&apos;%&apos;;GRANT ALL ON maindataplus.* TO &apos;pig&apos;@&apos;%&apos;; 注意:用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令: 1GRANT privileges ON databasename.tablename TO &apos;username&apos;@&apos;host&apos; WITH GRANT OPTION; 三.设置与更改用户密码命令:1SET PASSWORD FOR &apos;username&apos;@&apos;host&apos; = PASSWORD(&apos;newpassword&apos;); 如果是当前登陆用户用: 1SET PASSWORD = PASSWORD(&quot;newpassword&quot;); 例子:1SET PASSWORD FOR &apos;pig&apos;@&apos;%&apos; = PASSWORD(&quot;123456&quot;); 四. 撤销用户权限命令:1REVOKE privilege ON databasename.tablename FROM &apos;username&apos;@&apos;host&apos;; 例子:1REVOKE SELECT ON *.* FROM &apos;pig&apos;@&apos;%&apos;; 注意:假如你在给用户&#39;pig&#39;@&#39;%&#39;授权的时候是这样的（或类似的）：GRANT SELECT ON test.user TO &#39;pig&#39;@&#39;%&#39;，则在使用REVOKE SELECT ON *.* FROM &#39;pig&#39;@&#39;%&#39;;命令并不能撤销该用户对test数据库中user表的SELECT 操作。相反，如果授权使用的是GRANT SELECT ON *.* TO &#39;pig&#39;@&#39;%&#39;;则REVOKE SELECT ON test.user FROM &#39;pig&#39;@&#39;%&#39;;命令也不能撤销该用户对test数据库中user表的Select权限。 具体信息可以用命令SHOW GRANTS FOR &#39;pig&#39;@&#39;%&#39;; 查看。 五.删除用户命令:1DROP USER &apos;username&apos;@&apos;host&apos;;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2FRedis%2F3.RedisSession%2F</url>
    <content type="text"><![CDATA[Spring Redis Session原理Spring Redis Session的工作原理就是，通过使用一个最高优先级的Filter，先对请求进行拦截，然后对请求和响应对象进行包装，从而使它们使用Redis记录Session。 1234567891011121314151617181920212223@Configuration@EnableWebMvc@EnableRedisHttpSession@ComponentScan("com.hdr.spring.session")public class AppConfig implements WebMvcConfigurer &#123; // 用于提供Redis连接 @Bean public LettuceConnectionFactory connectionFactory() &#123; RedisStandaloneConfiguration conf = new RedisStandaloneConfiguration("127.0.0.1", 6379); conf.setPassword("!@#$"); return new LettuceConnectionFactory(conf); &#125; // redis序列化器 @Bean public RedisSerializer&lt;Object&gt; springSessionDefaultRedisSerializer()&#123; return new GenericJackson2JsonRedisSerializer(om()); &#125; private ObjectMapper om() &#123; return new ObjectMapper(); &#125;&#125; 1234567public class SpringSessionInitializer extends AbstractHttpSessionApplicationInitializer &#123; public SpringSessionInitializer() &#123; // 有两个构造方法，一个无参，一个Class&lt;?&gt;... configurationClasses // 这其中涉及到ContextLoaderListener的问题 super(); &#125;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2FMySQL%2F4.%E5%85%B6%E4%BB%96%2F3.%E9%94%81%2F</url>
    <content type="text"><![CDATA[InnoDB中的锁和事务模型要实现大规模，繁忙或高度可靠的数据库应用程序，从不同的数据库系统移植大量代码，或调整MySQL性能，我们需要了解InnoDB的锁和事务模型。 1.InnoDB中的锁1.1共享锁和独占锁InnoDB实现了两种类型的行锁，分别是共享锁和独占锁。 共享锁允许持有该锁的事务读取行。 独占锁允许持有该锁的事务更新和删除行。 如果事务T1持有行r的共享锁，那么另一个事务T2只能获取该行的共享锁，也就是只能读取行数据。 如果事务T1持有行r的独占锁，那么另一个事务T2将什么锁都无法获取。 1.2Intention LocksInnoDB支持多种粒度锁，允许行锁和表锁共存。例如语句LOCK TABLES ... WRITE会获取指定表的独占锁。为了实现多个粒度级别的锁定，InnoDB使用Intention Locks（意向锁）。意向锁是表级锁，指示事务稍后对表中的行所需的锁定类型（共享或独占）。意向锁有两种类型： 意向共享锁（IS）表示事务打算在表中的某几行上设置共享锁。 意向排他锁（IX）表示事务打算在表中的某几行上设置独占锁。 例如，SELECT ... LOCK IN SHARE MODE设置IS锁定，SELECT ... FOR UPDATE设置IX锁定。 意向锁协议如下： 在事务可以获取表中某一行的共享锁之前，它必须首先在表上获取IS锁或更高级别的IX锁。 在事务可以获取表中某一行的独占锁之前，它必须首先获取表上的IX锁。 1.3记录锁记录锁（record locks）用于索引记录上。例如SELECT c1 FROM t WHERE c1 = 10 FOR UPDATE；防止其它事务对 t.c1 is 10的行进行增删改。 1.4Gap LocksGap Lock是锁定索引记录之间的间隙，或锁定在第一个或最后一个索引记录之前的间隙。例如SELECT c1 FROM t WHERE c1 BETWEEN 10 and 20 FOR UPDATE 2.InnoDB事务模型2.1事务的隔离级别事务的隔离级别（Transaction Isolation Levels）]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2FMySQL%2F4.%E5%85%B6%E4%BB%96%2F2.%E8%A7%86%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[视图和存储程序1.视图​ 视图是从一个或几个基本表（或视图）导出的表。它与基本表不同，是一个虚表。数据库只存放视图的定义，而不存放视图对应的数据，这些数据仍存放在原来的基本表中。所以基本表中的数据发生变化，从视图中查询出的数据也就随之改变了。从这个意义上讲，视图就像一个窗口，透过它可以看到数据库中自己感兴趣的数据及其变化。 创建视图 1CREATE VIEW vpres AS SELECT last_name, first_name, city, state FROM president; 默认情况下，视图里列明与其SELECT语句里输出列的名字相同。 使用视图 12SELECT * FROM vpres；SELECT * FROM vpres WHERE last_name = 'Admas'; 修改视图 1ALTER VIEW vpres AS SELECT last_name, first_name, city FROM president; 删除视图 1DROP VIEW vpres； 视图的意义 1、视图可以将复杂的SQL查询语句进行了封装，简化了SQL语句 2、视图的存在: 主要是为了对外提供数据支持(外部系统) 隐藏基表字段(隐私) 保证了数据库的数据安全(保护数据库内部的数据结构) 可以灵活的控制对外的数据: 保证针对每个接口都有一个单独的数据支持: 增强了用户友好性. 3、视图利于权限控制: 有助于数据库对权限进行管理. 更多内容请点击这里]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2FMySQL%2F4.%E5%85%B6%E4%BB%96%2F1.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[MySQL数据类型MySQL数据类型主要分为以下三种： 数字类型 字符串类型 时态类型 1.数字类型1.1精确值数字类型 各种INT DECIMAL 12num1 INT(10) DEFAULT NULL,num2 DECIMAL(4,1) NOT NULL, 注意：在定义精确值数字类型时，可以指定显示宽度，例如上面的10，使用这东西，占用的存储内存不变，而且如果内容长度超过指定的显示宽度，内容不会被截断，而是会完整的实现出来。 1.2近似值数字类型 FLOAT DOUBLE 1.3BIT数据类型1.4数字类型的属性UNSINGED属性可以防止出现负值。（除了BIT以外的所有数字类型都能用） 12itiny TINYINT，--值范围 -128~-127itiny_u TINYINT UNSINGED, --值范围 0~255 2.串类型2.1字符串类型 CHAR：长度固定，不足的长度用空格补充，检索出来的结果会把后面的空格全部去掉 VARCHAR：长度可变，不补充空格，不删除空格 TEXT：存储大文本 2.2二进制串类型 BINARY VARBINARY BLOB 2.3ENUM和SET123color ENUM('red','green')gender ENUM('male','female') -- 单选hoddy SET('football','basketball') -- 多选 3.时态类型3.1DATE、TIME、DATETIME DATE:CCYY-MM-DD TIME:hh:mm:ss[.uuuuuu] DATETIME:CCYY-MM-DD hh:mm:ss[.uuuuuu] 3.2TIMESTAMP3.3YEAR]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2FMySQL%2F3.%E4%BA%8B%E5%8A%A1%2F2.Spring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[Spring事务管理Spring事务管理 Spring事务管理的三个接口 PlatformTransactionManager TransactionDefinition TransactionStatus PlatformTransactionManagerSpring并不直接管理事务，而是提供了多种事务管理器，他们将事务管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事务来实现。 Spring事务管理器的接口是PlatformTransactionManager，通过这个接口，Spring为各个平台如JDBC、Hibernate等都提供了对应的事务管理器，但是具体的实现就是各个平台自己的事情了。 123456public interface PlatformTransactionManager &#123; TransactionStatus getTransaction(@Nullable TransactionDefinition definition) throws TransactionException; void commit(TransactionStatus status) throws TransactionException; void rollback(TransactionStatus status) throws TransactionException;&#125; TransactionDefinitionTransactionDefinition类定义了一些基本的事务属性。 事务属性： 传播行为 当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。 1234567PROPAGATION_REQUIRED 支持当前事务，如果不存在 就新建一个PROPAGATION_SUPPORTS 支持当前事务，如果事务不存在，就不使用事务PROPAGATION_MANDATORY 支持当前事务，如果不存在，则抛出异常PROPAGATION_REQUIRES_NEW 如果有事务存在，挂起当前事务，创建一个新的事务PROPAGATION_NOT_SUPPORTED 以非事务的方式运行，如果有事务存在，挂起当前事务PROPAGATION_NEVER 以非事务的方式运行，如果有事务存在，抛出异常PROPAGATION_NESTED 如果当前事务存在，则嵌套事务执行 隔离级别 read uncommited：是最低的事务隔离级别，它允许另外一个事务可以看到这个事务未提交的数据。 read commited：保证一个事物提交后才能被另外一个事务读取。另外一个事务不能读取该事物未提交的数据。 repeatable read：这种事务隔离级别可以防止脏读，不可重复读。但是可能会出现幻象读。它除了保证一个事务不能被另外一个事务读取未提交的数据之外还避免了以下情况产生（不可重复读）。 serializable：这是花费最高代价但最可靠的事务隔离级别。事务被处理为顺序执行。除了防止脏读，不可重复读之外，还避免了幻象读 回滚规则 事务超时 所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。 是否只读 只读事务用于客户代码只读但不修改数据的情形，只读事务用于特定情景下的优化，比如使用Hibernate的时候。 TransactionStatus编程式和声明式事务管理Spring将事务管理分为了两类： 编程式事务管理（很少用） 声明式事务管理 基于TransactionProxyFactoryBean的方式（很少用） 基于注解的方式（常用） 基于AspectJ的方式（常用） 基于注解的事务管理 用@EnableTransactionManagement修饰@Configuration类 用@Transactional修饰DAO类 @Transactional只能用于接口、接口中的方法、类、类里面的公共方法。如果要对非公共方法进行事务管理，请考虑使用AspectJ。 Spring推荐修饰类、类里面的公共方法而不是接口和接口方法，因为当你使用基于类的代理方式，例如cglib，或者是使用AspectJ的时候，接口中的事务管理注解会失效。 例子12345678910111213141516171819202122232425262728293031323334353637383940@Configuration@PropertySource("classpath:application.properties")@ComponentScan("com.hdr.learn.spring.transaction")@EnableTransactionManagementpublic class AppConfig &#123; @Value("$&#123;jdbc.driver&#125;") private String driver; @Value("$&#123;jdbc.url&#125;") private String url; @Value("$&#123;jdbc.user&#125;") private String user; @Value("$&#123;jdbc.pwd&#125;") private String pwd; // 注册数据源 @Bean public DataSource dataSource() &#123; ComboPooledDataSource dataSource = new ComboPooledDataSource(); try &#123; dataSource.setDriverClass(driver); &#125; catch (PropertyVetoException e) &#123; e.printStackTrace(); &#125; dataSource.setJdbcUrl(url); dataSource.setUser(user); dataSource.setPassword(pwd); return dataSource; &#125; // 注册事务管理器 @Bean public PlatformTransactionManager transactionManager() &#123; DataSourceTransactionManager transactionManager = new DataSourceTransactionManager(); transactionManager.setDataSource(dataSource()); return transactionManager; &#125;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2FMySQL%2F3.%E4%BA%8B%E5%8A%A1%2F1.%E4%BA%8B%E5%8A%A1%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[事务简介事务：事务是由一组操作组成的最小的不可再分的工作单元 事务管理：在执行事务的过程中出错，则撤销该事务所做过的操作，只有当事务的所有操作都成功，才提交事务。 事务的四大特性事务的四种特性ACDI 原子性（Atomicity） 事务是由一组操作组成的最小的不可再分的工作单元，事务中操作的执行要么全部成功，要么全部失败，不会结束在中间某个环节。如果事务执行过程中发生错误，则回滚到事务开始前的状态，就像这个事务从来没有执行过一样。 一致性（Consistency） 一个事务执行之前和执行之后数据库都必须处于一致性状态。如果事务成功地完成，那么系统中所有变化将正确地应用，系统处于有效状态。如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态。 隔离性（Isolation） 指的是在并发环境中，当不同的事务对象相同的数据进行操作时，每个事务都有各自的完整数据空间。并发事务之间所做的修改相互隔离。事务查看到的数据，要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，它不会查看到修改过程中的状态。 持久性（Durability） 指的是只要事务成功提交，它对数据库所做的更新就必须永久保存下来。即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态。 事务的隔离级别事务的隔离是用来防止事务的并发问题，让我们先来看看事务的并发问题 脏读：在数据库访问中，事务T1将某一值修改，然后事务T2读取该值，此后T1因为某种原因撤销对该值的修改，这就导致了T2所读取到的数据是无效的。 不可重复读：在数据库访问中，一个事务范围内两个相同的查询却返回了不同数据。这是由于查询时系统中其他事务修改的提交而引起的。比如事务T1读取某一数据，事务T2读取并修改了该数据，T1为了对读取值进行检验而再次读取该数据，便得到了不同的结果。 幻读：一个事务在执行过程中突然看到一个从未见过的行。 不可重复读与幻读的区别 不可重复读的重点是修改:同样的条件, 你读取过的数据, 再次读取出来发现值不一样了 幻读的重点在于新增或者删除：同样的条件, 第1次和第2次读出来的记录数不一样 从总的结果来看, 似乎不可重复读和幻读都表现为两次读取的结果不一致。但如果你从控制的角度来看, 两者的区别就比较大。对于前者, 只需要锁住满足条件的记录。对于后者, 要锁住满足条件及其相近的记录。 事务的隔离级别分为四种 read uncommited：是最低的事务隔离级别，它允许另外一个事务可以看到这个事务未提交的数据。 read commited：保证一个事物提交后才能被另外一个事务读取。另外一个事务不能读取该事物未提交的数据。 repeatable read：这种事务隔离级别可以防止脏读，不可重复读。但是可能会出现幻象读。它除了保证一个事务不能被另外一个事务读取未提交的数据之外还避免了以下情况产生（不可重复读）。 serializable：这是花费最高代价但最可靠的事务隔离级别。事务被处理为顺序执行。除了防止脏读，不可重复读之外，还避免了幻象读 MySQL中的事务提交与回滚在MySQL中，默认情况下，事务是自动提交的，也就是说，只要执行一条DML语句就开启了事物，并且提交了事务。 1234567891011-- MySQL自动提交SET AUTOCOMMIT=0; -- 启动自动提交SET AUTOCOMMIT=1; -- 关闭自动提交-- 提交操作start transaction; -- 手动开启事务insert into t_user(name) values('pp');commit; -- commit之后即可改变底层数据库数据-- 操作回滚start transaction;insert into t_user(name) values('yy');rollback;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2FJava%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%2FHashMap%2F</url>
    <content type="text"><![CDATA[HashMap简介HashMap是基于哈希表的Map接口实现。它跟HashTable大致相同，除了它是不同步的，而且它能接受null，无论是key还是value。 对于HashMap的实例，有个两个参数可以影响它的性能，分别是initial capacity（初始容量）以及load factor（负载因子）。容量指的是哈希表中有多少个桶。负载因子定义为： = 填入表中的元素个数 / 散列表的长度。当哈希表中的条目数超过加载因子和当前容量的乘积时，哈希表将被重新哈希（即，重建内部数据结构），以便哈希表具有大约两倍的桶数。 在看源码之前，需要有点位运算的知识。可能是最通俗易懂的位运算讲解。 Put函数的实现1.HashMap底层使用Node&lt;K,V&gt;[]作为哈希表。 12transient Node&lt;K,V&gt;[] table;static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; 2.对key进行hash运算，key的hashCode低16位与高16位异或。 1234static final int hash(Object key) &#123; int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);&#125; 3.根据hash值计算出索引 1i = (n - 1) &amp; hash // n是哈希表的容量 4.根据索引从哈希表中查找元素 如果元素不存在，则直接插入哈希表 12if ((p = tab[i = (n - 1) &amp; hash]) == null) tab[i] = newNode(hash, key, value, null); 如果元素存在 判断key是否相同，相同则修改value。 判断是否是红黑树（TreeNode），从红黑树找出节点，如果没有则创建，然后写入value。 剩余就是链表了，遍历链表，如果不存在节点，则直接插入，然后判断是否需要转换成红黑树，如果存在则修改value。 123public V put(K key, V value) &#123; return putVal(hash(key), key, value, false, true);&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) &#123; Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i; // table为null或者内容为空 if ((tab = table) == null || (n = tab.length) == 0) n = (tab = resize()).length; /* i = (n - 1) &amp; hash hash值与索引的关系 */ if ((p = tab[i = (n - 1) &amp; hash]) == null) tab[i] = newNode(hash, key, value, null); else &#123; Node&lt;K,V&gt; e; K k; if (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != null &amp;&amp; key.equals(k)))) e = p; else if (p instanceof TreeNode) e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value); else &#123; for (int binCount = 0; ; ++binCount) &#123; if ((e = p.next) == null) &#123; p.next = newNode(hash, key, value, null); if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st treeifyBin(tab, hash); break; &#125; if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) break; p = e; &#125; &#125; if (e != null) &#123; // existing mapping for key V oldValue = e.value; if (!onlyIfAbsent || oldValue == null) e.value = value; afterNodeAccess(e); return oldValue; &#125; &#125; ++modCount; if (++size &gt; threshold) resize(); afterNodeInsertion(evict); return null;&#125; GET1234public V get(Object key) &#123; Node&lt;K,V&gt; e; return (e = getNode(hash(key), key)) == null ? null : e.value;&#125; 12345678910111213141516171819final Node&lt;K,V&gt; getNode(int hash, Object key) &#123; Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k; if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp; (first = tab[(n - 1) &amp; hash]) != null) &#123; if (first.hash == hash &amp;&amp; // always check first node ((k = first.key) == key || (key != null &amp;&amp; key.equals(k)))) return first; if ((e = first.next) != null) &#123; if (first instanceof TreeNode) return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key); do &#123; if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) return e; &#125; while ((e = e.next) != null); &#125; &#125; return null;&#125; REMOVE12345public V remove(Object key) &#123; Node&lt;K,V&gt; e; return (e = removeNode(hash(key), key, null, false, true)) == null ? null : e.value;&#125; RESIZE其他HashMap工作原理]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2FJava%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%2FPriporityQueue%2F</url>
    <content type="text"><![CDATA[PriorityQueue注意：我会跳过1.8相关的知识，例如forEach方法等等 优先队列 定义123public class PriorityQueue&lt;E&gt; extends AbstractQueue&lt;E&gt; implements java.io.Serializable &#123; // 。。。&#125; 字段1234567891011private static final long serialVersionUID = -7720805057305804111L;private static final int DEFAULT_INITIAL_CAPACITY = 11; // 默认初始化容量transient Object[] queue; // 为了方便内部类获取该字段，所以不设置为privateprivate int size = 0; // 队列中元素个数private final Comparator&lt;? super E&gt; comparator; // 用来做对比transient int modCount = 0; //队列的结构被修改过多少次，为了方便内部类获取该字段，所以不设置为private 构造器12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152public PriorityQueue() &#123; this(DEFAULT_INITIAL_CAPACITY, null);&#125;// 指定初始化容量public PriorityQueue(int initialCapacity) &#123; this(initialCapacity, null);&#125;// 指定Comparatorpublic PriorityQueue(Comparator&lt;? super E&gt; comparator) &#123; this(DEFAULT_INITIAL_CAPACITY, comparator);&#125;// 指定初始化容量 和 Comparatorpublic PriorityQueue(int initialCapacity, Comparator&lt;? super E&gt; comparator) &#123; // Note: This restriction of at least one is not actually needed, // but continues for 1.5 compatibility if (initialCapacity &lt; 1) throw new IllegalArgumentException(); this.queue = new Object[initialCapacity]; this.comparator = comparator;&#125;@SuppressWarnings("unchecked")public PriorityQueue(Collection&lt;? extends E&gt; c) &#123; if (c instanceof SortedSet&lt;?&gt;) &#123; SortedSet&lt;? extends E&gt; ss = (SortedSet&lt;? extends E&gt;) c; this.comparator = (Comparator&lt;? super E&gt;) ss.comparator(); initElementsFromCollection(ss); &#125; else if (c instanceof PriorityQueue&lt;?&gt;) &#123; PriorityQueue&lt;? extends E&gt; pq = (PriorityQueue&lt;? extends E&gt;) c; this.comparator = (Comparator&lt;? super E&gt;) pq.comparator(); initFromPriorityQueue(pq); &#125; else &#123; this.comparator = null; initFromCollection(c); &#125;&#125;@SuppressWarnings("unchecked")public PriorityQueue(PriorityQueue&lt;? extends E&gt; c) &#123; this.comparator = (Comparator&lt;? super E&gt;) c.comparator(); initFromPriorityQueue(c);&#125;@SuppressWarnings("unchecked")public PriorityQueue(SortedSet&lt;? extends E&gt; c) &#123; this.comparator = (Comparator&lt;? super E&gt;) c.comparator(); initElementsFromCollection(c);&#125; 方法真正执行初始化的方法从构造器中，我们可以看到几个有趣的方法 initFromPriorityQueue initElementsFromCollection initFromCollection 123456789101112131415161718192021222324252627282930313233private void initFromPriorityQueue(PriorityQueue&lt;? extends E&gt; c) &#123; // getClass方法，返回运行时类型，如果是PriorityQueue，则直接使用 // 否则使用initFromCollection if (c.getClass() == PriorityQueue.class) &#123; this.queue = c.toArray(); this.size = c.size(); &#125; else &#123; initFromCollection(c); &#125;&#125;private void initFromCollection(Collection&lt;? extends E&gt; c) &#123; initElementsFromCollection(c); // 对数组结构进行调整，是之符合优先队列的要求 heapify();&#125;private void initElementsFromCollection(Collection&lt;? extends E&gt; c) &#123; Object[] a = c.toArray(); // If c.toArray incorrectly doesn't return Object[], copy it. if (a.getClass() != Object[].class) a = Arrays.copyOf(a, a.length, Object[].class); int len = a.length; // 当数组长度为1，或者该队列具有comparator的情况下，该数组内不能存有null // 当长度为1，内容为null，则是空数组，不合理 // 如果具有comparator，null.comparaTo方法更是不合理 if (len == 1 || this.comparator != null) for (int i = 0; i &lt; len; i++) if (a[i] == null) throw new NullPointerException(); this.queue = a; this.size = a.length;&#125; 扩容12345678910111213141516171819private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;private void grow(int minCapacity) &#123; int oldCapacity = queue.length; // Double size if small; else grow by 50% int newCapacity = oldCapacity + ((oldCapacity &lt; 64) ? (oldCapacity + 2) : (oldCapacity &gt;&gt; 1)); // 如果新容量超过最大允许值，则扩容至最少需要的容量 if (newCapacity - MAX_ARRAY_SIZE &gt; 0) newCapacity = hugeCapacity(minCapacity); queue = Arrays.copyOf(queue, newCapacity);&#125;private static int hugeCapacity(int minCapacity) &#123; if (minCapacity &lt; 0) // overflow throw new OutOfMemoryError(); return (minCapacity &gt; MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE;&#125; 添加元素12345678910111213141516171819public boolean add(E e) &#123; return offer(e);&#125;public boolean offer(E e) &#123; if (e == null) throw new NullPointerException(); modCount++; int i = size; // 是否要扩容 if (i &gt;= queue.length) grow(i + 1); size = i + 1; if (i == 0) queue[0] = e; else siftUp(i, e); return true;&#125; 上浮操作123456789101112131415161718192021222324252627282930313233private void siftUp(int k, E x) &#123; if (comparator != null) siftUpUsingComparator(k, x); else siftUpComparable(k, x);&#125;@SuppressWarnings("unchecked")private void siftUpComparable(int k, E x) &#123; Comparable&lt;? super E&gt; key = (Comparable&lt;? super E&gt;) x; while (k &gt; 0) &#123; int parent = (k - 1) &gt;&gt;&gt; 1; Object e = queue[parent]; if (key.compareTo((E) e) &gt;= 0) break; queue[k] = e; k = parent; &#125; queue[k] = key;&#125;@SuppressWarnings("unchecked")private void siftUpUsingComparator(int k, E x) &#123; while (k &gt; 0) &#123; int parent = (k - 1) &gt;&gt;&gt; 1; Object e = queue[parent]; if (comparator.compare(x, (E) e) &gt;= 0) break; queue[k] = e; k = parent; &#125; queue[k] = x;&#125; 查看顶元素123public E peek() &#123; return (size == 0) ? null : (E) queue[0];&#125; 删除元素12345678910111213141516171819202122232425262728private int indexOf(Object o) &#123; if (o != null) &#123; for (int i = 0; i &lt; size; i++) if (o.equals(queue[i])) return i; &#125; return -1;&#125;// 根据equeue方法删除对象public boolean remove(Object o) &#123; int i = indexOf(o); if (i == -1) return false; else &#123; removeAt(i); return true; &#125;&#125;// 根据==删除对象boolean removeEq(Object o) &#123; for (int i = 0; i &lt; size; i++) &#123; if (o == queue[i]) &#123; removeAt(i); return true; &#125; &#125; return false;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F3.Tree%2F%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[遍历二叉树前序遍历12345678910111213141516public List&lt;Integer&gt; preorderTraversal(TreeNode root) &#123; LinkedList&lt;Integer&gt; resList = new LinkedList&lt;&gt;(); Deque&lt;TreeNode&gt; rights = new LinkedList&lt;&gt;(); TreeNode cur = root; while(cur != null || !rights.isEmpty())&#123; resList.add(cur.val); if(cur.right != null)&#123; rights.offerFirst(cur.right); &#125; // 没有元素的时候pollFirst能返回null这个很关键 cur = cur.left == null ? rights.pollFirst() : cur.left; &#125; return resList;&#125; 后序遍历1234567891011121314151617public List&lt;Integer&gt; postorderTraversal(TreeNode root) &#123; LinkedList&lt;Integer&gt; resList = new LinkedList&lt;&gt;(); Deque&lt;TreeNode&gt; lefts = new LinkedList&lt;&gt;(); TreeNode cur = root; while(cur != null || !lefts.isEmpty())&#123; resList.offerFirst(cur.val); if(cur.left != null)&#123; lefts.offerFirst(cur.left); &#125; cur = cur.right == null ? lefts.pollFirst() : cur.right; &#125; return resList;&#125; 中序遍历123456789101112131415161718 public List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123;List&lt;Integer&gt; resList = new ArrayList&lt;&gt;();Deque&lt;TreeNode&gt; nodes = new LinkedList&lt;&gt;();TreeNode cur = root;while(cur != null || !nodes.isEmpty())&#123; while(cur != null)&#123; nodes.offerFirst(cur); cur = cur.left; &#125; cur = nodes.pollFirst(); resList.add(cur.val); cur = cur.right;&#125;return resList; &#125; 层级遍历12345678910111213141516171819202122232425public List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123; List&lt;List&lt;Integer&gt;&gt; resList = new ArrayList&lt;&gt;(); Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;(); if (root == null) &#123; return resList; &#125; queue.offer(root); TreeNode cur; while (!queue.isEmpty()) &#123; int levelNodes = queue.size(); List&lt;Integer&gt; subList = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; levelNodes; i++) &#123; cur = queue.poll(); if (cur.left != null) queue.offer(cur.left); if (cur.right != null) queue.offer(cur.right); subList.add(cur.val); &#125; resList.add(subList); &#125; return resList;&#125; 二叉树的最大深度123public int maxDepth(TreeNode root) &#123; return (root == null)? 0 : Math.max(maxDepth(root.left), maxDepth(root.right))+1;&#125; 对称树123456789101112public boolean isSymmetric(TreeNode root) &#123; if(root == null) return true; return isSymmetric(root.left, root.right);&#125;private boolean isSymmetric(TreeNode left, TreeNode right)&#123; if(left==null || right==null) return left==right; if(left.val!=right.val) return false; return isSymmetricHelp(left.left, right.right) &amp;&amp; isSymmetricHelp(left.right, right.left);&#125; 路径和123456789public class Solution &#123; public boolean hasPathSum(TreeNode root, int sum) &#123; if(root == null) return false; if(root.left == null &amp;&amp; root.right == null &amp;&amp; sum - root.val == 0) return true; return hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val); &#125;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2FReadme%2F</url>
    <content type="text"><![CDATA[学习路线先把前三章的底层结构写一遍，然后再写一遍应用结构，基础就算告一段落。 然后就是Java集合框架+LeetCode]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F2.Heap%2FReadme%2F</url>
    <content type="text"><![CDATA[堆堆（英语：heap)是计算机科学中一类特殊的数据结构的统称。堆通常是一个可以被看做一棵树的数组对象。 堆总是满足下列性质： 堆中某个节点的值总是不大于或不小于其父节点的值； 堆总是一棵完全二叉树； 将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。 父子节点对应索引的关系 从索引为0开始存储数据 父节点的索引 =（子节点索引-1）/ 2 左节点的索引 =（父节点索引*2）+ 1 右节点的索引 =（父节点索引*2）+ 2 方法与调用关系 add addLast —&gt; 把数据添加到数组末端 siftUp —&gt; 把数据上浮到合适的位置 —&gt; 与父节点比较，如果比父节点大则交换位置 extractMax 删除并且返回堆顶部元素，然后把最后的数据放到堆顶，最后对堆顶元素进行下沉操作 findMax swap removeLast siftDown 12345678910111213141516private void siftDown(int k)&#123; while(leftChild(k) &lt; data.getSize())&#123; int leftChildIndex = leftChild(k); // 在此轮循环中,data[k]和data[j]交换位置 int rightChildIndex = leftIndex + 1; int maxChildIndex = rightChildIndex &lt; data.getSize() &amp;&amp; data.get(rightChildIndex).compareTo(data.get(leftChildIndex)&gt;0) ? rightChildIndex : leftChildIndex; if(data.get(k).compareTo(data.get(maxChildIndex)) &gt;= 0 ) break; data.swap(k, maxChildIndex); k = maxChildIndex; &#125;&#125; 应用 优先队列]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2FMySQL%2F2.%E7%B4%A2%E5%BC%95%2F%E7%B4%A2%E5%BC%95%2F</url>
    <content type="text"><![CDATA[索引什么是索引？ 数据库索引是帮助数据库高效获取数据的一种数据结构。在MySQL中有B+Tree索引、Hash索引。 Hash索引的优点：在元素分布均匀的时候，查询速度是最快的。 Hash索引的缺点：无法进行范围查找，在Hash碰撞严重的情况，性能还不如B+Tree索引。 1.索引的类型PRIMARY KEY主键索引 不允许出现相同的值,且不能为NULL值,一个表只能有一个主键索引 UNIQUE唯一索引 不可以出现相同的值,可以有NULL值 INDEX普通索引 允许出现相同的索引内容 FULLTEXT INDEX 全文索引 上述三种索引都是针对列的值发挥作用,但全文索引,可以针对值中的某个单词,比如一篇文章中的某个词. 只有myisam以及英文支持,并且效率让人不敢恭维,可以用coreseek和xunsearch等第三方应用来完成这个需求 2.索引的CURD2.1创建索引123456789101112131415ALTER TABLE table_name ADD INDEX index_name (index_columns)；ALTER TABLE table_name ADD UNIQUE index_name (index_columns)；ALTER TABLE table_name ADD PRIMARY KEY index_name (index_columns)；ALTER TABLE table_name ADD FULLTEXT index_name (index_columns)；CREATE TABLE `test1` ( `id` smallint(5) UNSIGNED AUTO_INCREMENT NOT NULL, -- 注意,下面创建了主键索引,这里就不用创建了 `username` varchar(64) NOT NULL COMMENT '用户名', `nickname` varchar(50) NOT NULL COMMENT '昵称/姓名', `intro` text, PRIMARY KEY (`id`), UNIQUE KEY `unique1` (`username`), -- 索引名称,可要可不要,不要就是和列名一样 KEY `index1` (`nickname`), FULLTEXT KEY `intro` (`intro`)) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COMMENT='后台用户表'; 2.2查看索引1SHOW INDEX FROM tablename； 2.3删除索引1ALTER TABLE table_name DROP INDEX index_name; 2.4修改索引在MySQL中并没有提供修改索引的直接指令，一般情况下，我们需要先删除掉原索引，再根据需要创建一个同名的索引，从而变相地实现修改索引操作。 3.深入理解B-Tree索引B-Tree是为磁盘等外存储设备设计的一种平衡查找树。 机械硬盘的逻辑结构主要分为磁道、扇区和拄面。 硬盘的磁道密度非常高，通常一面上就有上千个磁道。但是相邻的磁道之间并不是紧挨着的，这是因为磁化单元相隔太近会相互产生影响。 在磁盘上每个同心圆是磁道，从圆心向外呈放射状地产生分割线（扇骨），将每个磁道等分为若干弧段，每个弧段就是一个扇区。每个扇区的大小是固定的，为 512Byte。扇区也是磁盘的最小存储单位。 柱面又是什么呢？如果硬盘是由多个盘片组成的，每个盘面都被划分为数目相等的磁道，那么所有盘片都会从外向内进行磁道编号，最外侧的就是 0 磁道。具有相同编号的磁道会形成一个圆柱，这个圆柱就被称作磁盘的柱面。 块：块是一个虚拟概念，并不是真是存在于磁盘上，操作系统从磁盘读取数据到内存时是以块（block）为基本单位的，位于同一个磁盘块中的数据会被一次性读取出来。因为磁盘进行读写的基本单位是扇区，而操作系统与磁盘之间是块，所以系统想进行读写，最节省的方式就是扇区的整数倍。现在块的大小一般都是4096kb（4M）。 直接看这个视频吧 BTree和B+Tree详解 漫画：什么是B-树 漫画：什么是B+树 MySQL索引背后的数据结构与算法原理 4.创建索引的技巧 维度高的列创建索引 数据列中不重复值的个数越多,维度就越高，如数据表中存在8行数据a ,b ,c,d,a,b,c,d这个表的维度为4。 要为维度高的列创建索引,如性别和年龄,那年龄的维度就高于性别，性别这样的列不适合创建索引,因为维度过低。 对 where,on,group by,order by 中出现的列使用索引 对较小的数据列使用索引,这样会使索引文件更小,同时内存中也可以装载更多的索引键 为较长的字符串使用前缀索引 不要过多创建索引,除了增加额外的磁盘空间外,对于DML操作的速度影响很大,因为其每增删改一次就得从新建立索引 使用组合索引,可以减少文件索引大小,在使用时速度要优于多个单列索引 4.1组合索引与前缀索引注意,这两种称呼是对建立索引技巧的一种称呼,并非索引的类型。 4.1.1组合索引MySQL单列索引和组合索引究竟有何区别呢？ 为了形象地对比两者,先建一个表： 12345678CREATE TABLE `myIndex` ( `i_testID` INT NOT NULL AUTO_INCREMENT, `vc_Name` VARCHAR(50) NOT NULL, `vc_City` VARCHAR(50) NOT NULL, `i_Age` INT NOT NULL, `i_SchoolID` INT NOT NULL, PRIMARY KEY (`i_testID`) ); 假设表内已有1000条数据,在这 10000 条记录里面分布了 5 条vc_Name=&quot;erquan&quot; 的记录,只不过 city,age,school 的组合各不相同。来看这条 T-SQL： 1SELECT `i_testID` FROM `myIndex` WHERE `vc_Name`='erquan' AND `vc_City`='郑州' AND `i_Age`=25; -- 关联搜索; 首先考虑建MySQL单列索引： 在 vc_Name 列上建立了索引。执行 T-SQL 时,MYSQL 很快将目标锁定在了 vc_Name=erquan 的 5 条记录上,取出来放到一中间结果集。在这个结果集里,先排除掉 vc_City 不等于”郑州”的记录,再排除 i_Age 不等于 25 的记录,最后筛选出唯一的符合条件的记录。虽然在 vc_Name 上建立了索引,查询时MYSQL不用扫描整张表,效率有所提高,但离我们的要求还有一定的距离。同样的,在 vc_City 和i_Age分别建立的MySQL单列索引的效率相似。 为了进一步榨取 MySQL 的效率,就要考虑建立组合索引。就是将vc_Name,vc_City,i_Age建到一个索引里： 1ALTER TABLE `myIndex` ADD INDEX `name_city_age` (vc_Name(10),vc_City,i_Age); 建表时,vc_Name 长度为 50,这里为什么用 10 呢？这就是下文要说到的前缀索引,因为一般情况下名字的长度不会超过 10,这样会加速索引查询速度,还会减少索引文件的大小,提高 INSERT 的更新速度。 执行 T-SQL 时,MySQL 无须扫描任何记录就到找到唯一的记录！！ 如果分别在 vc_Name,vc_City,i_Age 上建立单列索引,让该表有 3 个单列索引,查询时和上述的组合索引效率一样吗？答案是大不一样,远远低于我们的组合索引。虽然此时有了三个索引,但 MySQL 只能用到其中的那个它认为似乎是最有效率的单列索引,另外两个是用不到的。 建立这样的组合索引,其实是相当于分别建立了 123vc_Name,vc_City,i_Agevc_Name,vc_Cityvc_Name 这样的三个组合索引！为什么没有 vc_City,i_Age 等这样的组合索引呢？这是因为 mysql 组合索引“最左前缀”的结果。简单的理解就是只从最左面的开始组合。并不是只要包含这三列的查询都会用到该组合索引,下面的几个 T-SQL 会用到： 12SELECT * FROM myIndex WHREE vc_Name=&quot;erquan&quot; AND vc_City=&quot;郑州&quot;SELECT * FROM myIndex WHREE vc_Name=&quot;erquan&quot; 而下面几个则不会用到： 12SELECT * FROM myIndex WHREE i_Age=20 AND vc_City=&quot;郑州&quot;SELECT * FROM myIndex WHREE vc_City=&quot;郑州&quot; 也就是,name_city_age (vc_Name(10),vc_City,i_Age) 从左到右进行索引,如果没有左前索引Mysql不执行索引查询 4.1.2前缀索引如果索引列长度过长,这种列索引时将会产生很大的索引文件,不便于操作,可以使用前缀索引方式进行索引前缀索引应该控制在一个合适的点,控制在0.31黄金值即可(大于这个值就可以创建) 12345SELECT COUNT(DISTINCT(LEFT(`title`,10)))/COUNT(*) FROM Arctic; -- 这个值大于0.31就可以创建前缀索引,Distinct去重复ALTER TABLE `user` ADD INDEX `uname`(title(10)); -- 增加前缀索引SQL,将人名的索引建立在10,这样可以减少索引文件大小,加快索引查询速度 4.2不用索引的SQL要尽量避免这些不走索引的SQL 1234567891011121314151617181920SELECT `sname` FROM `stu` WHERE `age`+10=30;-- 不会使用索引,因为所有索引列参与了计算SELECT `sname` FROM `stu` WHERE LEFT(`date`,4) &lt;1990; -- 不会使用索引,因为使用了函数运算,原理与上面相同SELECT * FROM `houdunwang` WHERE `uname` LIKE'后盾%' -- 走索引SELECT * FROM `houdunwang` WHERE `uname` LIKE "%后盾%" -- 不走索引-- 正则表达式不使用索引,这应该很好理解,所以为什么在SQL中很难看到regexp关键字的原因-- 字符串与数字比较不使用索引;CREATE TABLE `a` (`a` char(10));EXPLAIN SELECT * FROM `a` WHERE `a`="1" -- 走索引EXPLAIN SELECT * FROM `a` WHERE `a`=1 -- 不走索引select * from dept where dname='xxx' or loc='xx' or deptno=45 --如果条件中有or,即使其中有条件带索引也不会使用。--换言之,就是要求使用的所有字段,都必须建立索引, 我们建议大家尽量避免使用or关键字-- 如果mysql估计使用全表扫描要比使用索引快,则不使用索引 4.3索引的弊端不要盲目的创建索引,只为查询操作频繁的列创建索引,创建索引会使查询操作变得更加快速,但是会降低增加、删除、更新操作的速度,因为执行这些操作的同时会对索引文件进行重新排序或更新; 但是,在互联网应用中,查询的语句远远大于DML的语句,甚至可以占到80%~90%,所以也不要太在意,只是在大数据导入时,可以先删除索引,再批量插入数据,最后再添加索引; X.Explain优化查询检测EXPLAIN可以帮助开发人员分析SQL问题,EXPLAIN显示了MySQL如何使用索引来处理SELECT语句以及连接表,可以帮助选择更好的索引和写出更优化的查询语句.]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E5%85%AC%E4%BC%97%E5%8F%B7%2FLeetCode%2F%E7%AC%AC%E4%B8%89%E5%A4%A9%2F12.%E9%98%BF%E6%8B%89%E4%BC%AF%E6%95%B0%E5%AD%97%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%2F</url>
    <content type="text"><![CDATA[题目描述题目：12.阿拉伯数字转罗马数字 给你一个整数，转换成罗马数字的形式，整数的范围是0~3999. 解题思路代码实现1234567public static String intToRoman(int num) &#123; String M[] = &#123;"", "M", "MM", "MMM"&#125;; String C[] = &#123;"", "C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM"&#125;; String X[] = &#123;"", "X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC"&#125;; String I[] = &#123;"", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"&#125;; return M[num/1000] + C[(num%1000)/100] + X[(num%100)/10] + I[num%10];&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E5%B7%A5%E5%85%B7%2F%E7%BF%BB%E5%A2%99%2Fv2ray%2F</url>
    <content type="text"><![CDATA[V2Ray什么是v2ray？个人觉得是跟SSR类似的软件，不过SSR已经不再更新了，v2ray是未来潮流。 安装v2ray 安装ubuntu18.04 sudo su bash &lt;(curl -s -L https://233yes.com/v2ray.sh) 其他内容查看这里 V2Ray 的 WebSocket + Cloudflare 拯救被墙的 IPCloudflare 注册账号：https://www.cloudflare.com/ 详细内容]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E5%B7%A5%E5%85%B7%2FNginx%2FNginx%2F</url>
    <content type="text"><![CDATA[安装：Ubuntu16.04安装Nginx]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E5%85%AC%E4%BC%97%E5%8F%B7%2FLeetCode%2F%E7%AC%AC%E5%9B%9B%E5%A4%A9%2F%E7%AC%AC%E5%9B%9B%E5%A4%A9%2F</url>
    <content type="text"><![CDATA[题目描述题目：遍历二叉树 解题思路遍历二叉树分为前序遍历、中序遍历、后序遍历、层级遍历 代码实现1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768// 前序遍历public List&lt;Integer&gt; preorderTraversal(TreeNode root) &#123; List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); // 用来存放右节点的栈 Deque&lt;TreeNode&gt; rights = new LinkedList&lt;&gt;(); TreeNode cur = root; while (cur != null || !rights.isEmpty()) &#123; list.add(cur.val); if (cur.right != null) rights.offerFirst(cur.right); cur = cur.left != null ? cur.left : rights.pollFirst(); &#125; return list;&#125;// 中序遍历public List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123;houxubianli List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); Deque&lt;TreeNode&gt; nodeStack = new LinkedList&lt;&gt;(); TreeNode cur = root; while (cur != null || !nodeStack.isEmpty()) &#123; while (cur != null) &#123; nodeStack.offerFirst(cur); cur = cur.left; &#125; cur = nodeStack.pollFirst(); list.add(cur.val); cur = cur.right; &#125; return list;&#125;// 后序遍历public List&lt;Integer&gt; postorderTraversal(TreeNode root) &#123; LinkedList&lt;Integer&gt; list = new LinkedList&lt;&gt;(); Deque&lt;TreeNode&gt; lefts = new LinkedList&lt;&gt;(); TreeNode cur = root; while (cur != null || !lefts.isEmpty()) &#123; list.addFirst(cur.val); if (cur.left != null) lefts.offerFirst(cur.left); cur = cur.right != null ? cur.right : lefts.pollFirst(); &#125; return list;&#125;// 层级遍历public List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123; if(root == null) return new ArrayList&lt;&gt;(); List&lt;List&lt;Integer&gt;&gt; resList = new ArrayList&lt;&gt;(); Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;(); TreeNode cur = root; queue.offer(cur); while(!queue.isEmpty())&#123; int nodeNums = queue.size(); List&lt;Integer&gt; subList = new ArrayList&lt;&gt;(); for(int i=0;i&lt;nodeNums;i++)&#123; cur = queue.poll(); subList.add(cur.val); if(cur.left != null) queue.offer(cur.left); if(cur.right != null) queue.offer(cur.right); &#125; resList.add(subList); &#125; return resList;&#125; 题目描述题目：反转链表 代码实现12345678910111213public ListNode reverseList(ListNode head) &#123; if(head==null) return head; ListNode newList = null; ListNode cur = head; while(cur != null)&#123; ListNode next = cur.next; cur.next = newList; newList = cur; cur = next; &#125; return newList;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E5%85%AC%E4%BC%97%E5%8F%B7%2FLeetCode%2F%E7%AC%AC%E4%B8%89%E5%A4%A9%2F%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[题目描述题目：11.装最多的水 给你一个非负的整形数组，通过柱形图的形式表示每一个数字，求出柱形图中，两条柱子能组成的最大矩形面积。 解题思路一开始就能想到的解决方案是嵌套遍历。 但是认真观察上图，会发现面积取决于宽度和高度，高度取决于低的柱子。 代码实现12345678910public int maxArea(int[] height) &#123; int l = 0, r = height.length - 1; int area = 0; while (l &lt; r) &#123; area = Math.max(area, (r - l) * Math.min(height[l], height[r])); if (height[l] &lt; height[r]) l++; else r--; &#125; return area;&#125; 题目描述题目：12.阿拉伯数字转罗马数字 给你一个整数，转换成罗马数字的形式，整数的范围是0~3999. 解题思路代码实现1234567public static String intToRoman(int num) &#123; String M[] = &#123;"", "M", "MM", "MMM"&#125;; String C[] = &#123;"", "C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM"&#125;; String X[] = &#123;"", "X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC"&#125;; String I[] = &#123;"", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"&#125;; return M[num/1000] + C[(num%1000)/100] + X[(num%100)/10] + I[num%10];&#125; 题目描述题目：13罗马数字转阿拉伯数字 解题思路代码实现12345678910111213141516171819public int romanToInt(String s) &#123; HashMap&lt;Character, Integer&gt; map = new HashMap&lt;&gt;(8); // @formatter:off map.put('I', 1);map.put('V', 5); map.put('X', 10);map.put('L', 50); map.put('C', 100);map.put('D', 500); map.put('M', 1000); // @formatter:on int result = map.get(s.charAt(0)); for (int i = 1; i &lt; s.length(); i++) &#123; int prev = map.get(s.charAt(i - 1)); int cur = map.get(s.charAt(i)); if (prev&lt;cur) result += cur - 2 * prev; else result += cur; &#125; return result;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E5%85%AC%E4%BC%97%E5%8F%B7%2FLeetCode%2F%E7%AC%AC%E4%B8%89%E5%A4%A9%2F13.%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E9%98%BF%E6%8B%89%E4%BC%AF%E6%95%B0%E5%AD%97%2F</url>
    <content type="text"><![CDATA[题目描述题目：13罗马数字转阿拉伯数字 解题思路代码实现12345678910111213141516171819public int romanToInt(String s) &#123; HashMap&lt;Character, Integer&gt; map = new HashMap&lt;&gt;(8); // @formatter:off map.put('I', 1);map.put('V', 5); map.put('X', 10);map.put('L', 50); map.put('C', 100);map.put('D', 500); map.put('M', 1000); // @formatter:on int result = map.get(s.charAt(0)); for (int i = 1; i &lt; s.length(); i++) &#123; int prev = map.get(s.charAt(i - 1)); int cur = map.get(s.charAt(i)); if (prev&lt;cur) result += cur - 2 * prev; else result += cur; &#125; return result;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E5%89%8D%E7%AB%AF%2FJS%2F%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[基本语法声明变量 1var name = "hdr"; 条件语句 循环语句 变量提升 对象定义 简单说，对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。 1234var obj = &#123; foo: 'Hello', bar: 'World'&#125;; 属性可以动态创建，不必在对象声明时就指定。 1obj.age = 18; 属性的CRUD 123456789101112131415161718192021# 读取属性obj.fooobj['bar']# 添加属性obj.foo = 'Hello';obj['bar'] = 'World';# 修改属性同上# 删除属性 delete命令只能删除对象本身的属性，无法删除继承的属性delete obj.foo# 查看是否具有属性'p' in obj obj.hasOwnProperty('toString') # 只查看自身具有的属性# 遍历属性var obj = &#123;a: 1, b: 2, c: 3&#125;;for (var i in obj) &#123; console.log('键名：', i); console.log('键值：', obj[i]);&#125;# 它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。# 它不仅遍历对象自身的属性，还遍历继承的属性。 函数声明 123456789# JavaScript 有三种声明函数的方法。# 1. function关键字function print(s) &#123; console.log(s);&#125;var print = function(s) &#123; # 把匿名函数赋值给一个变量 console.log(s);&#125;;# 2. Function构造器（几乎没人用） 函数的属性和方法 123# 函数的name属性返回函数的名字。# 函数的length属性返回函数所需参数个数。# 函数的toString方法返回一个字符串，内容是函数的源码。 函数的作用域 作用域分为：全局作用于、局部作用域 函数可以层层递进，寻找它需要的变量 12345678910var n = 999;function f1() &#123; return function () &#123; return function () &#123; console.log(n); &#125; &#125;&#125;var f = f1()();f(); 闭包 函数内部可以访问函数外部的变量，反过来则不行。如果我们非要从函数外部读取函数内部的数据呢，那要怎么实现？这就要使用闭包了，闭包就是能够读取其他函数内部变量的函数，在JS中可以把闭包简单理解成“定义在一个函数内部的函数”，原理就是通过函数A中的函数B来操作函数A中的变量。 123456789function A() &#123; var name = "黄大仁"; function B() &#123; console.log(name); &#125; return B;&#125; 闭包的最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些内部变量始终保持在内存中。 123456789101112function createIncrementor(start) &#123; return function () &#123; return ++start; &#125;;&#125;var inc = createIncrementor(5);console.log(inc()); // 6console.log(inc()); // 7var inc2 = createIncrementor(10);console.log(inc2()); // 11 上面代码中，start是函数createIncrementor的内部变量。通过闭包，start的状态被保留了，每一次调用都是在上一次调用的基础上进行计算。从中可以看到，闭包inc使得函数createIncrementor的内部环境，一直存在。为什么会这样呢？原因就在于inc始终在内存中，而inc的存在依赖于createIncrementor，因此也始终在内存中，不会在调用结束后，被垃圾回收机制回收。 闭包的另一个用处，是封装对象的私有属性和私有方法。 12345678910111213141516171819function Person(name) &#123; var _age; function setAge(n) &#123; _age = n; &#125; function getAge() &#123; return _age; &#125; return &#123; name: name, getAge: getAge, setAge: setAge &#125;;&#125;var p1 = Person('张三');p1.setAge(25);p1.getAge() // 25 面向对象编程构造函数JS中使用构造函数来作为创建对象的模板。构造函数顾名思义就是一个函数，不过它有自己的特征和用法。 123456789101112function Vehicle () &#123; 'use strict'; # 使用严格模式，避免没有使用new 关键字调用构造函数 this.price = 1000;&#125;;# 或者function Fubar(foo, bar) &#123; if (!(this instanceof Fubar)) &#123; return new Fubar(foo, bar); &#125; this._foo = foo; this._bar = bar;&#125; 上面代码中，Vehicle就是构造函数。为了与普通函数区别，构造函数名字的第一个字母通常大写。 构造函数的特点有两个。 函数体内部使用了this关键字，代表了所要生成的对象实例。 生成对象的时候，必须使用new命令。 new关键字new命令的作用，就是执行构造函数，返回一个实例对象。 使用new命令时，它后面的函数依次执行下面的步骤。 创建一个空对象，作为将要返回的对象实例。 将这个空对象的原型，指向构造函数的prototype属性。 将这个空对象赋值给函数内部的this关键字。 开始执行构造函数内部的代码。 也就是说，构造函数内部，this指的是一个新生成的空对象，所有针对this的操作，都会发生在这个空对象上。构造函数之所以叫“构造函数”，就是说这个函数的目的，就是操作一个空对象（即this对象），将其“构造”为需要的样子。 12345678910111213141516171819202122function Person(name) &#123; 'use strict'; this.name = name; var _age; // getter this.getAge = function () &#123; return _age; &#125;; // setter this.setAge = function (age) &#123; if (age &gt;= 120) &#123; console.log("too damn old !") &#125; else if (age &lt; 0) &#123; console.log("r u fucking kidding me ?") &#125; else &#123; _age = age; &#125; &#125;;&#125; this关键字1var obj = &#123; foo: 5 &#125;; 上面的代码将一个对象赋值给变量obj。JavaScript 引擎会先在内存里面，生成一个对象{ foo: 5 }，然后把这个对象的内存地址赋值给变量obj。也就是说，变量obj是一个地址（reference）。后面如果要读取obj.foo，引擎先从obj拿到内存地址，然后再从该地址读出原始的对象，返回它的foo属性。 原始的对象以字典结构保存，每一个属性名都对应一个属性描述对象。举例来说，上面例子的foo属性，实际上是以下面的形式保存的。 12345678&#123; foo: &#123; [[value]]: 5 [[writable]]: true [[enumerable]]: true [[configurable]]: true &#125;&#125; 注意，foo属性的值保存在属性描述对象的value属性里面。 这样的结构是很清晰的，问题在于属性的值可能是一个函数。 1var obj = &#123; foo: function () &#123;&#125; &#125;; 这时，引擎会将函数单独保存在内存中，然后再将函数的地址赋值给foo属性的value属性。 123456&#123; foo: &#123; [[value]]: 函数的地址 ... &#125;&#125; 由于函数是一个单独的值，所以它可以在不同的环境（上下文）执行。 12345678var f = function () &#123;&#125;;var obj = &#123; f: f &#125;;// 单独执行f()// obj 环境执行obj.f() JavaScript 允许在函数体内部，引用当前环境的其他变量。 123var f = function () &#123; console.log(x);&#125;; 上面代码中，函数体里面使用了变量x。该变量由运行环境提供。 现在问题就来了，由于函数可以在不同的运行环境执行，所以需要有一种机制，能够在函数体内部获得当前的运行环境（context）。所以，this就出现了，它的设计目的就是在函数体内部，指代函数当前的运行环境。 123456789101112131415function sayHi() &#123; if (this.name != null) &#123; console.log("Hello I am " + this.name); &#125;else&#123; console.log("Hello"); &#125;&#125;var tom = &#123; name: "tom", sayHi: sayHi&#125;;sayHi();tom.sayHi(); 对象的继承构造函数有一个缺点，同一个构造函数的多个实例之间，无法共享属性，从而造成对系统资源的浪费。例如一个构造函数中的方法，每个对象都会创建这些方法，从而导致内存的浪费。为了解决这个问题，我们需要使用继承。 JavaScript 继承机制的设计思想就是，原型对象的所有属性和方法，都能被实例对象共享。也就是说，如果属性和方法定义在原型上，那么所有实例对象就能共享，不仅节省了内存，还体现了实例对象之间的联系。 123456789function Animal(name) &#123; this.name = name;&#125;typeof Animal.prototype; // objectAnimal.prototype.color = 'white';var cat1 = new Animal('大毛');var cat2 = new Animal('二毛');cat1.color // 'white'cat2.color // 'white' 原型对象的属性不是实例对象自身的属性。只要修改原型对象，变动就立刻会体现在所有实例对象上。 异步操作定时器setTimeout()setTimeout函数用来指定某个函数或某段代码，在多少毫秒之后执行。它返回一个整数，表示定时器的编号，以后可以用来取消这个定时器。 123456789101112131415161718192021222324var timerId = setTimeout(func|code, delay);setTimeout(f)// 等同于setTimeout(f, 0)// 除了前两个参数，setTimeout还允许更多的参数。它们将依次传入推迟执行的函数（回调函数）。setTimeout(function (a,b) &#123; console.log(a + b);&#125;, 1000, 1, 1);// 上面代码中，setTimeout共有4个参数。最后那两个参数，将在1000毫秒之后回调函数执行时，作为回调函数的参数。//如果回调函数是对象的方法，那么setTimeout使得方法内部的this关键字指向全局环境，而不是定义时所在的那个对象。var x = 1;var obj = &#123; x: 2, y: function () &#123; console.log(this.x); &#125;&#125;;setTimeout(obj.y, 1000) // 1// 为了防止出现这个问题，一种解决方法是将obj.y放入函数。setTimeout(function () &#123; obj.y();&#125;, 1000);// 2// 另一种解决方法是，使用bind方法，将obj.y这个方法绑定在obj上面。setTimeout(obj.y.bind(obj), 1000) setInterval()setInterval函数的用法与setTimeout完全一致，区别仅仅在于setInterval指定某个任务每隔一段时间就执行一次，也就是无限次的定时执行。 1234567891011var $div = $("div");var opacity = 1;var fader = setInterval(function () &#123; if (opacity &gt; 0) &#123; $div.css("opacity", opacity -= 0.1); &#125; else &#123; clearInterval(fader); &#125;&#125;, 500);// clearTimeout()，clearInterval()]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E5%89%8D%E7%AB%AF%2FJS%2FJQuery%2F</url>
    <content type="text"><![CDATA[1.选择器CSS选择器 选择器 语法 描述 Id选择器 #ID{} 类选择器 E.className{} 群组选择器 E1,E2,E3{} 后代选择器 E F{} 通配选择符 *{} JQuery选择器 基本选择器、层次选择器、过滤选择器、表单选择器。 基本选择器通过元素Id、class、标签名等查找DOM元素。 实例 返回 描述 $(“#test”) 单个元素 选取id为test的元素 $(“.test”) 元素集合 选取所有class为test的元素 $(“p”) 元素集合 选取所有p标签元素 $(“*”) 元素集合 选取所有元素 $(“div,span,p.myClass”) 元素集合 选取div、span、class=myClass的p 层次选择器通过DOM元素之间的层次关系获取特定元素，例如后代元素、子元素、相邻元素、兄弟元素。 实例 返回 描述 $(“div span”) 集合元素 选div中的所有span元素 $(“div &gt; span”) 集合元素 选div中span子元素 $(“.one + div”) 集合元素 选取class为one的下一个div元素（注意是下一个） $(“#two~div”) 集合元素 选取id为two的元素后面所有div兄弟元素 过滤选择器基本过滤选择器内容过滤选择器可见性过滤选择器属性过滤选择器子元素过滤选择器表单对象属性过滤选择器表单选择器 实例 返回 描述 $(“:input”) 集合元素 $(“:text”) 集合元素 $(“:password”) 集合元素 $(“:radio”) 集合元素 $(“:checkbox”) 集合元素 $(“:submit”) 集合元素 $(“:image”) 集合元素 $(“:reset”) 集合元素 $(“:button”) 集合元素 $(“:file”) 集合元素 $(“:hidden”) 集合元素 2.JQuery操作DOM获取元素节点中的属性 1$("input").attr("nmae"); 创建节点123$("&lt;li&gt;&lt;/li&gt;");$("&lt;li&gt;雪梨&lt;/li&gt;")$("&lt;li title='雪梨'&gt;雪梨&lt;/li&gt;") 插入节点1234$("p").append($li);($li).appendTo("p");# prepend prependTo# after insertAfter before insertBefore 删除节点123$("ul li:eq(1)").remove(); # 删除所有匹配的节点$("ul li").remove("li[title!=菠萝]");$("ul li:eq(1)").empty(); # 清空所有后代元素 复制节点123$("ul li").click(function()&#123; $(this).clone().appendTo("ul"); # clone(true) 也复制行为&#125;); 替换节点12$("p").replaceWith("&lt;div&gt;hello&lt;/div&gt;");$("&lt;div&gt;hello&lt;/div&gt;").replaceAll("p"); 包裹节点123$("strong").wrap("&lt;b&gt;&lt;/b&gt;"); # 用b标签包裹strong标签 (一对一)$("strong").wrapAll("&lt;b&gt;&lt;/b&gt;"); # 用一个b标签包裹所有strong标签 (一对多)$("strong").wrapInner("&lt;b&gt;&lt;/b&gt;"); # 用b标签包裹strong标签的内部 属性操作123456789$("strong").attr(attrName,attrValue);$("strong").removeAttr(attrName);# attr操作是替换或删除原来的属性# 对于像class这种具有多个属性值的 JQuery提供了addClass()方法$("p").addClass("another");$("p").removeClass("another");$("p").removeClass("another high");$("p").hasClass("another");$("p").toggleClass("another"); 设置和获取HTML、文本和值1234567891011# &lt;p&gt;我有一只&lt;strong&gt;小毛驴&lt;/strong&gt;&lt;/p&gt;$("p").html(); # 我有一只&lt;strong&gt;小毛驴&lt;/strong&gt;$("p").text(); # 我有一只小毛驴$("input").val("请输入邮箱密码"); # 用于操作标签中的value属性$("input").focus(function()&#123; # focus console.log($(this).attr("name")+"focus");&#125;)$("input").blur(function()&#123; # blur console.log($(this).attr("name")+"blur");&#125;) 遍历节点12345$("p").children(); # 遍历子节点$("p").prev();$("p").next();$("p").siblings();$("p").closest("li"); # 符合规则的临近节点 CSS-DOM操作12$("p").css("color","read");$("p").css(&#123;"font-size":"30px","background-color":"#888888"&#125;); 3.Jquery中的时间和动画]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E5%85%AC%E4%BC%97%E5%8F%B7%2FLeetCode%2F%E7%AC%AC%E4%B8%89%E5%A4%A9%2F11.%E8%A3%85%E6%9C%80%E5%A4%9A%E7%9A%84%E6%B0%B4%2F</url>
    <content type="text"><![CDATA[题目描述题目：11.装最多的水 给你一个非负的整形数组，通过柱形图的形式表示每一个数字，求出柱形图中，两条柱子能组成的最大矩形面积。 解题思路一开始就能想到的解决方案是嵌套遍历。 但是认真观察上图，会发现面积取决于宽度和高度，高度取决于低的柱子。 代码实现12345678910public int maxArea(int[] height) &#123; int l = 0, r = height.length - 1; int area = 0; while (l &lt; r) &#123; area = Math.max(area, (r - l) * Math.min(height[l], height[r])); if (height[l] &lt; height[r]) l++; else r--; &#125; return area;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FLinux%2FMacterial%2Fgtk-3.0%2Fgtk%2F</url>
    <content type="text"><![CDATA[@keyframes switch_ripple_effect { from { background-image: radial-gradient(circle farthest-corner at center, #71c837 0%, transparent 0%); } to { background-image: radial-gradient(circle farthest-corner at center, #71c837 100%, transparent 0%); } } @keyframes header_ripple_effect { from { background-image: radial-gradient(circle farthest-corner at center, rgba(55, 55, 55, 0.98) 0%, transparent 0%); } to { background-image: radial-gradient(circle farthest-corner at center, rgba(55, 55, 55, 0.98) 100%, transparent 0%); } } * { background-clip: padding-box; -GtkToolButton-icon-spacing: 4; -GtkTextView-error-underline-color: #FC4138; -GtkScrolledWindow-scrollbar-spacing: 0; -GtkToolItemGroup-expander-size: 11; -GtkWidget-text-handle-width: 20; -GtkWidget-text-handle-height: 20; -GtkDialog-button-spacing: 4; -GtkDialog-action-area-border: 0; outline-color: alpha(currentColor,0.3); outline-style: dashed; outline-offset: -3px; outline-width: 0px; -gtk-outline-radius: 5px; } .background { color: #dedede; background-color: #262626; } .background.csd, .background.ssd, .background.osd { border-radius: 0 0 6px 6px; } .background.maximized, .background.solid-csd { border-radius: 0; } .popup.background { background-color: transparent; } *:disabled { -gtk-icon-effect: dim; } .gtkstyle-fallback { background-color: #333333; color: #dedede; } .gtkstyle-fallback:hover { background-color: #4d4d4d; color: #dedede; } .gtkstyle-fallback:active { background-color: #1a1a1a; color: #dedede; } .gtkstyle-fallback:disabled { background-color: #383838; color: rgba(222, 222, 222, 0.45); } .gtkstyle-fallback:selected { background-color: #498dff; color: #ffffff; } .view, iconview, .view text, iconview text, textview text { color: #dedede; background-color: #242424; transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); } .view:hover, iconview:hover, .view text:hover, iconview text:hover, textview text:hover { background-color: #2c2c2c; } .view:selected, iconview:selected, .view:selected:focus, iconview:selected:focus, .view text:selected, iconview text:selected, textview text:selected, .view text:selected:focus, iconview text:selected:focus, textview text:selected:focus { transition: all 350ms cubic-bezier(0.25, 0.46, 0.45, 0.94); border-radius: 5px; } textview border { background-color: #2c2c2c; } rubberband, flowbox rubberband, treeview.view rubberband, .content-view rubberband, .rubberband { border: 1px solid #166dff; background-color: rgba(22, 109, 255, 0.2); } flowbox flowboxchild { padding: 3px; border-radius: 5px; } flowbox flowboxchild:selected { outline-offset: -2px; } label.separator, popover label.separator, popover.background label.separator { color: #dedede; } label selection { color: #ffffff; background-color: #498dff; } .dim-label, label.separator, popover label.separator, popover.background label.separator, headerbar .subtitle, .titlebar:not(headerbar) .subtitle, .budgie-notification .notification-body, .budgie-switcher .notification-body { opacity: 0.55; } assistant .sidebar { background-color: #242424; border-top: 1px solid rgba(255, 255, 255, 0.12); } assistant.csd .sidebar { border-top-style: none; } assistant .sidebar label { padding: 6px 12px; } assistant .sidebar label.highlight { background-color: #498dff; color: #ffffff; } textview { background-color: #242424; } popover.osd, popover.magnifier, .csd popover.osd, .csd popover.magnifier, popover.background.osd, popover.background.magnifier, .csd popover.background.osd, .csd popover.background.magnifier, .osd .scale-popup, .osd { color: #dedede; border: none; background-color: rgba(36, 36, 36, 0.95); background-clip: padding-box; box-shadow: none; } @keyframes spin { to { -gtk-icon-transform: rotate(1turn); } } spinner { background: none; opacity: 0; -gtk-icon-source: -gtk-icontheme("process-working-symbolic"); } spinner:checked { opacity: 1; animation: spin 1s linear infinite; } spinner:checked:disabled { opacity: 0.5; } entry { min-height: 22px; border: 1px solid; padding: 2px 8px; caret-color: currentColor; border-radius: 5px; transition: all 0.2s cubic-bezier(0, 0, 0.2, 1); color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: #242424; } entry.search { border-radius: 5px; } entry image { color: #b9b9b9; } entry image.left { padding-left: 0; padding-right: 5px; } entry image.right { padding-right: 0; padding-left: 5px; } entry.flat, .raven .raven-background spinbutton:not(.vertical), entry.flat:focus, .raven .raven-background spinbutton:focus:not(.vertical) { min-height: 0; padding: 2px; background-image: none; border-color: transparent; border-radius: 0; } entry:focus { background-clip: border-box; color: #dedede; border-color: #8eb9ff; background-color: #242424; box-shadow: inset 0 0 0 2px #8eb9ff; } entry:disabled { color: rgba(222, 222, 222, 0.45); border-color: rgba(255, 255, 255, 0.12); background-color: rgba(36, 36, 36, 0.55); } entry.warning { color: white; border-color: rgba(255, 255, 255, 0.12); background-color: #a0562e; } entry.warning image { color: white; } entry.warning:focus { color: white; background-color: #F27835; box-shadow: none; } entry.warning selection, entry.warning selection:focus { background-color: white; color: #F27835; } entry.error { color: white; border-color: rgba(255, 255, 255, 0.12); background-color: #a63530; } entry.error image { color: white; } entry.error:focus { color: white; background-color: #FC4138; box-shadow: none; } entry.error selection, entry.error selection:focus { background-color: white; color: #FC4138; } entry.search-missing { color: white; border-color: rgba(255, 255, 255, 0.12); background-color: #a63530; } entry.search-missing image { color: white; } entry.search-missing:focus { color: white; background-color: #FC4138; box-shadow: none; } entry.search-missing selection, entry.search-missing selection:focus { background-color: white; color: #FC4138; } entry:drop(active):focus, entry:drop(active) { border-color: #F08437; box-shadow: none; } .osd entry { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(92, 92, 92, 0.35); } .osd entry image, .osd entry image:hover { color: inherit; } .osd entry:focus { color: #ffffff; border-color: rgba(255, 255, 255, 0.12); background-color: #498dff; } .osd entry:disabled { color: #dedede; background-color: rgba(92, 92, 92, 0.2); } .osd entry selection:focus, .osd entry selection { color: #498dff; background-color: #ffffff; } entry progress { margin: 0 -6px; border-radius: 0; border-width: 0 0 2px; border-color: #498dff; border-style: solid; background-image: none; background-color: transparent; box-shadow: none; } .linked:not(.vertical) > entry + button.combo { padding-left: 0; } .linked.vertical > entry + button.combo { padding: 0; } treeview entry.flat, treeview .raven .raven-background spinbutton:not(.vertical), .raven .raven-background treeview spinbutton:not(.vertical), treeview entry { border-radius: 0; background-image: none; background-color: #242424; } treeview entry.flat:focus, treeview .raven .raven-background spinbutton:focus:not(.vertical), .raven .raven-background treeview spinbutton:focus:not(.vertical), treeview entry:focus { border-color: #498dff; } .entry-tag { margin: 8px; border-radius: 50px; box-shadow: none; background-color: #f8464c; color: #ffffff; border: none; } .entry-tag:hover { box-shadow: 0 0 0 1px rgba(255, 255, 255, 0.12); } :dir(ltr) .entry-tag { margin-left: 8px; margin-right: 0px; padding-left: 8px; padding-right: 4px; } :dir(rtl) .entry-tag { margin-left: 0px; margin-right: 8px; padding-left: 4px; padding-right: 8px; } .entry-tag.button { box-shadow: none; border: none; background-color: transparent; } .entry-tag.button:not(:hover):not(:active) { color: rgba(222, 222, 222, 0.45); } @keyframes needs_attention { from { background-image: -gtk-gradient(radial, center center, 0, center center, 0.01, to(#498dff), to(transparent)); } to { background-image: -gtk-gradient(radial, center center, 0, center center, 0.5, to(#498dff), to(transparent)); } } button { outline-color: #8eb9ff; outline-style: solid; outline-offset: -1px; outline-width: 3px; -gtk-outline-radius: 6px; } button { min-height: 26px; min-width: 16px; transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); border: 1px solid; border-radius: 5px; padding: 0 6px; color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: #484848; } button separator { margin: 4px 1px; } .linked:not(.vertical) > button, .linked.vertical > button, combobox, popover button, popover.background button, button.flat, button.budgie-menu-launcher, .budgie-panel #tasklist-button, .budgie-panel button.flat.launcher, button.osd, button.sidebar-button, button.circular-button { outline-color: alpha(currentColor,0.3); outline-style: dashed; outline-offset: -3px; outline-width: 1px; } button.flat, button.budgie-menu-launcher, .budgie-panel #tasklist-button, .budgie-panel button.flat.launcher { border: none; background-color: transparent; box-shadow: none; transition: none; } button.flat:hover, button.budgie-menu-launcher:hover, .budgie-panel #tasklist-button:hover, .budgie-panel button.flat.launcher:hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); transition-duration: 350ms; } button.flat:hover:active, button.budgie-menu-launcher:hover:active, .budgie-panel #tasklist-button:hover:active { transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); } button.flat:active, button.budgie-menu-launcher:active, .budgie-panel #tasklist-button:active, .budgie-panel button.flat.launcher:active, button.flat:checked, button.budgie-menu-launcher:checked, .budgie-panel #tasklist-button:checked, .budgie-panel button.flat.launcher:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } button.flat:disabled, button.budgie-menu-launcher:disabled, .budgie-panel #tasklist-button:disabled, .budgie-panel button.flat.launcher:disabled { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; } button:hover { color: #c5c5c5; border-color: rgba(255, 255, 255, 0.12); background-color: #5c5c5c; box-shadow: none; -gtk-icon-effect: highlight; } button:active, button:checked { color: #ffffff; background-color: #0e6bff; border-color: #0e6bff; background-image: linear-gradient(180deg, #4c97fe 0%, #0564e3 100%); box-shadow: none; background-clip: padding-box; transition-duration: 200ms; } button:active:not(:disabled) label:disabled, button:checked:not(:disabled) label:disabled { color: inherit; opacity: 0.6; } button:active { color: #dedede; } button:active:hover, button:checked { color: #ffffff; } button:disabled { border-color: rgba(255, 255, 255, 0.12); background-color: rgba(72, 72, 72, 0.55); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } button:disabled label, button:disabled { color: rgba(222, 222, 222, 0.45); } button:disabled:active, button:disabled:checked { border-color: rgba(73, 141, 255, 0.75); background-color: rgba(73, 141, 255, 0.75); box-shadow: none; opacity: 0.6; } button:disabled:active label, button:disabled:active, button:disabled:checked label, button:disabled:checked { color: rgba(255, 255, 255, 0.8); } button.image-button { min-width: 28px; padding-left: 5px; padding-right: 5px; } button.text-button { padding-left: 12px; padding-right: 12px; } button.text-button.image-button { padding-left: 5px; padding-right: 5px; } button.text-button.image-button label:first-child { padding-left: 8px; padding-right: 2px; } button.text-button.image-button label:last-child { padding-right: 8px; padding-left: 2px; } button.text-button.image-button label:only-child { padding-left: 8px; padding-right: 8px; } button.text-button.image-button.popup { padding-right: 8px; padding-left: 8px; } button:drop(active), combobox:drop(active) button.combo { color: #F08437; border-color: #F08437; box-shadow: none; } button.osd { color: #dedede; background-color: rgba(36, 36, 36, 0.95); border-color: rgba(16, 16, 16, 0.95); } button.osd.image-button { padding: 0; min-height: 42px; min-width: 42px; } button.osd:hover { color: #498dff; } button.osd:active, button.osd:checked { color: #ffffff; border-color: rgba(255, 255, 255, 0.12); background-color: #498dff; } button.osd:disabled { color: #5c5c5c; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(92, 92, 92, 0.2); } .osd button { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(92, 92, 92, 0.35); } .osd button:hover { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(110, 110, 110, 0.45); } .osd button:active, .osd button:checked { background-clip: padding-box; color: #ffffff; border-color: rgba(255, 255, 255, 0.12); background-color: #498dff; } .osd button:disabled { color: #5c5c5c; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(92, 92, 92, 0.2); } .osd button.flat, .osd button.budgie-menu-launcher, .osd .budgie-panel #tasklist-button, .budgie-panel .osd #tasklist-button, .osd .budgie-panel button.flat.launcher, .budgie-panel .osd button.flat.launcher { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; box-shadow: none; } .osd button.flat:hover, .osd button.budgie-menu-launcher:hover, .osd .budgie-panel #tasklist-button:hover, .budgie-panel .osd #tasklist-button:hover { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(110, 110, 110, 0.45); } .osd button.flat:disabled, .osd button.budgie-menu-launcher:disabled, .osd .budgie-panel #tasklist-button:disabled, .budgie-panel .osd #tasklist-button:disabled { color: #5c5c5c; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(92, 92, 92, 0.2); background-image: none; } .osd button.flat:active, .osd button.budgie-menu-launcher:active, .osd .budgie-panel #tasklist-button:active, .budgie-panel .osd #tasklist-button:active, .osd button.flat:checked, .osd button.budgie-menu-launcher:checked, .osd .budgie-panel #tasklist-button:checked, .budgie-panel .osd #tasklist-button:checked { color: #ffffff; border-color: rgba(255, 255, 255, 0.12); background-color: #498dff; } .osd .linked:not(.vertical):not(.path-bar) > button:hover:not(:checked):not(:active):not(:only-child), .osd .linked:not(.vertical):not(.path-bar) > button:hover:not(:checked):not(:active) + button:not(:checked):not(:active) { box-shadow: none; } button.suggested-action { background-clip: border-box; color: white; background-color: #3484e2; border-color: #1c6bc7; background-image: none; } button.suggested-action.flat, button.suggested-action.budgie-menu-launcher, .budgie-panel .suggested-action#tasklist-button, .budgie-panel button.suggested-action.flat.launcher { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; color: #3484e2; } button.suggested-action:hover { background-clip: border-box; color: white; background-color: #619fe8; border-color: #3484e2; background-image: none; } button.suggested-action:active, button.suggested-action:checked { background-clip: border-box; color: white; background-color: #1c6bc7; border-color: #16539a; background-image: none; box-shadow: none; } button.suggested-action.flat:disabled, button.suggested-action.budgie-menu-launcher:disabled, .budgie-panel .suggested-action#tasklist-button:disabled { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; color: rgba(222, 222, 222, 0.45); } button.suggested-action:disabled { border-color: rgba(255, 255, 255, 0.12); background-color: rgba(72, 72, 72, 0.55); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } button.suggested-action:disabled label, button.suggested-action:disabled { color: rgba(222, 222, 222, 0.45); } button.destructive-action { background-clip: border-box; color: white; background-color: #f8464c; border-color: #f6151c; background-image: none; } button.destructive-action.flat, button.destructive-action.budgie-menu-launcher, .budgie-panel .destructive-action#tasklist-button, .budgie-panel button.destructive-action.flat.launcher { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; color: #f8464c; } button.destructive-action:hover { background-clip: border-box; color: white; background-color: #fa777c; border-color: #f8464c; background-image: none; } button.destructive-action:active, button.destructive-action:checked { background-clip: border-box; color: white; background-color: #f6151c; border-color: #d0080f; background-image: none; box-shadow: none; } button.destructive-action.flat:disabled, button.destructive-action.budgie-menu-launcher:disabled, .budgie-panel .destructive-action#tasklist-button:disabled { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; color: rgba(222, 222, 222, 0.45); } button.destructive-action:disabled { border-color: rgba(255, 255, 255, 0.12); background-color: rgba(72, 72, 72, 0.55); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } button.destructive-action:disabled label, button.destructive-action:disabled { color: rgba(222, 222, 222, 0.45); } .stack-switcher > button { outline-offset: -3px; } .stack-switcher > button > label { padding-left: 6px; padding-right: 6px; } .stack-switcher > button > image { padding-left: 6px; padding-right: 6px; padding-top: 3px; padding-bottom: 3px; } .stack-switcher > button.text-button { padding-left: 10px; padding-right: 10px; } .stack-switcher > button.image-button { padding-left: 2px; padding-right: 2px; } .stack-switcher > button.needs-attention:active > label, .stack-switcher > button.needs-attention:active > image, .stack-switcher > button.needs-attention:checked > label, .stack-switcher > button.needs-attention:checked > image { animation: none; background-image: none; } .stack-switcher > button.needs-attention > label, .stack-switcher > button.needs-attention > image, button stacksidebar row.needs-attention > label, stacksidebar button row.needs-attention > label { animation: needs_attention 150ms ease-in; background-image: -gtk-gradient(radial, center center, 0, center center, 0.5, to(#498dff), to(transparent)); background-size: 6px 6px, 6px 6px; background-repeat: no-repeat; background-position: right 3px, right 2px; } .stack-switcher > button.needs-attention > label:dir(rtl), .stack-switcher > button.needs-attention > image:dir(rtl), button stacksidebar row.needs-attention > label:dir(rtl), stacksidebar button row.needs-attention > label:dir(rtl) { background-position: left 3px, left 2px; } button.font separator, button.file separator { background-color: transparent; } .inline-toolbar button, .inline-toolbar button:backdrop { border-radius: 5px; } .inline-toolbar toolbutton > button { min-height: 20px; border: none; background-color: transparent; box-shadow: none; } .inline-toolbar toolbutton > button:hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); } .inline-toolbar toolbutton > button:active, .inline-toolbar toolbutton > button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } .inline-toolbar toolbutton > button:disabled { background-color: transparent; } .inline-toolbar toolbutton > button:disabled label, .inline-toolbar toolbutton > button:disabled { color: rgba(222, 222, 222, 0.45); } .inline-toolbar toolbutton > button:disabled:active, .inline-toolbar toolbutton > button:disabled:checked { background-color: white; border-color: white; opacity: 0.6; } .inline-toolbar toolbutton > button:disabled:active label, .inline-toolbar toolbutton > button:disabled:active, .inline-toolbar toolbutton > button:disabled:checked label, .inline-toolbar toolbutton > button:disabled:checked { color: rgba(255, 255, 255, 0.8); } .linked:not(.vertical):not(.path-bar) > entry + entry { border-left-color: rgba(255, 255, 255, 0); } .linked:not(.vertical):not(.path-bar) > entry.error + entry, .linked:not(.vertical):not(.path-bar) > entry + entry.error { border-left-color: rgba(255, 255, 255, 0); } .linked:not(.vertical):not(.path-bar) > entry.warning + entry, .linked:not(.vertical):not(.path-bar) > entry + entry.warning { border-left-color: rgba(255, 255, 255, 0); } .linked:not(.vertical):not(.path-bar) > entry.error + entry.warning, .linked:not(.vertical):not(.path-bar) > entry.warning + entry.error { border-left-color: rgba(255, 255, 255, 0); } .linked:not(.vertical):not(.path-bar) > entry + entry:focus:not(:last-child), .linked:not(.vertical):not(.path-bar) > entry + entry:focus:last-child { border-left-color: #8eb9ff; } .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + entry, .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + button, .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + combobox > box > button.combo { border-left-color: #8eb9ff; } .linked:not(.vertical):not(.path-bar) > entry + entry:drop(active):not(:last-child), .linked:not(.vertical):not(.path-bar) > entry + entry:drop(active):last-child { border-left-color: #F08437; } .linked:not(.vertical):not(.path-bar) > entry:drop(active):not(:only-child) + entry, .linked:not(.vertical):not(.path-bar) > entry:drop(active):not(:only-child) + button, .linked:not(.vertical):not(.path-bar) > entry:drop(active):not(:only-child) + combobox > box > button.combo { border-left-color: #F08437; } .linked:not(.vertical):not(.path-bar) > entry + entry.warning:focus:not(:last-child), .linked:not(.vertical):not(.path-bar) > entry + entry.warning:focus:last-child { border-left-color: #F27835; } .linked:not(.vertical):not(.path-bar) > entry.warning:focus:not(:only-child) + entry, .linked:not(.vertical):not(.path-bar) > entry.warning:focus:not(:only-child) + button, .linked:not(.vertical):not(.path-bar) > entry.warning:focus:not(:only-child) + combobox > box > button.combo { border-left-color: #F27835; } .linked:not(.vertical):not(.path-bar) > entry + entry.error:focus:not(:last-child), .linked:not(.vertical):not(.path-bar) > entry + entry.error:focus:last-child { border-left-color: #FC4138; } .linked:not(.vertical):not(.path-bar) > entry.error:focus:not(:only-child) + entry, .linked:not(.vertical):not(.path-bar) > entry.error:focus:not(:only-child) + button, .linked:not(.vertical):not(.path-bar) > entry.error:focus:not(:only-child) + combobox > box > button.combo { border-left-color: #FC4138; } .linked:not(.vertical):not(.path-bar) > button:active + entry, .linked:not(.vertical):not(.path-bar) > button:checked + entry { border-left-color: #8eb9ff; } .linked:not(.vertical):not(.path-bar) > button + button { border-left-style: none; } .linked:not(.vertical).path-bar > button + button { border-left-style: solid; } .linked.vertical > entry + entry { border-top-color: rgba(255, 255, 255, 0); } .linked.vertical > entry.error + entry, .linked.vertical > entry + entry.error { border-top-color: rgba(255, 255, 255, 0); } .linked.vertical > entry.warning + entry, .linked.vertical > entry + entry.warning { border-top-color: rgba(255, 255, 255, 0); } .linked.vertical > entry.error + entry.warning, .linked.vertical > entry.warning + entry.error { border-top-color: rgba(255, 255, 255, 0); } .linked.vertical > entry + entry:focus:not(:last-child), .linked.vertical > entry + entry:focus:last-child { border-top-color: #8eb9ff; } .linked.vertical > entry:focus:not(:only-child) + entry, .linked.vertical > entry:focus:not(:only-child) + button, .linked.vertical > entry:focus:not(:only-child) + combobox > box > button.combo { border-top-color: #8eb9ff; } .linked.vertical > entry + entry:drop(active):not(:last-child), .linked.vertical > entry + entry:drop(active):last-child { border-top-color: #F08437; } .linked.vertical > entry:drop(active):not(:only-child) + entry, .linked.vertical > entry:drop(active):not(:only-child) + button, .linked.vertical > entry:drop(active):not(:only-child) + combobox > box > button.combo { border-top-color: #F08437; } .linked.vertical > entry + entry.warning:focus:not(:last-child), .linked.vertical > entry + entry.warning:focus:last-child { border-top-color: #F27835; } .linked.vertical > entry.warning:focus:not(:only-child) + entry, .linked.vertical > entry.warning:focus:not(:only-child) + button, .linked.vertical > entry.warning:focus:not(:only-child) + combobox > box > button.combo { border-top-color: #F27835; } .linked.vertical > entry + entry.error:focus:not(:last-child), .linked.vertical > entry + entry.error:focus:last-child { border-top-color: #FC4138; } .linked.vertical > entry.error:focus:not(:only-child) + entry, .linked.vertical > entry.error:focus:not(:only-child) + button, .linked.vertical > entry.error:focus:not(:only-child) + combobox > box > button.combo { border-top-color: #FC4138; } .linked.vertical > button:active + entry, .linked.vertical > button:checked + entry { border-top-color: #8eb9ff; } .linked.vertical > button + button { border-top-style: none; } .linked:not(.vertical) > entry, .linked:not(.vertical) > entry:focus, .inline-toolbar button, .inline-toolbar button:backdrop, .linked:not(.vertical) > button, .linked:not(.vertical) > button:hover, .linked:not(.vertical) > button:active, .linked:not(.vertical) > button:checked, toolbar.inline-toolbar toolbutton > button.flat, .inline-toolbar toolbutton > button.flat, toolbar.inline-toolbar toolbutton > button.budgie-menu-launcher, .inline-toolbar toolbutton > button.budgie-menu-launcher, .inline-toolbar .budgie-panel toolbutton > #tasklist-button, .budgie-panel .inline-toolbar toolbutton > #tasklist-button, .inline-toolbar .budgie-panel toolbutton > button.flat.launcher, .budgie-panel .inline-toolbar toolbutton > button.flat.launcher, spinbutton:not(.vertical) button, spinbutton:not(.vertical) entry, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:hover, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:active, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:checked, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:disabled, headerbar .linked:not(.vertical).path-bar > button, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button, headerbar .linked:not(.vertical).path-bar > button:hover, headerbar .linked:not(.vertical).path-bar > button:active, headerbar .linked:not(.vertical).path-bar > button:checked, headerbar .linked:not(.vertical).path-bar > button:disabled, .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button, .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:hover, .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:active, .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:checked, .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:disabled, .linked:not(.vertical) > combobox > box > button.combo:dir(ltr), .linked:not(.vertical) > combobox > box > button.combo:dir(rtl) { border-radius: 0; border-right-style: none; } .linked:not(.vertical) > entry:first-child, .inline-toolbar button:first-child, .linked:not(.vertical) > button:first-child, .inline-toolbar toolbutton > button.flat:first-child, .inline-toolbar toolbutton > button.budgie-menu-launcher:first-child, .inline-toolbar .budgie-panel toolbutton > #tasklist-button:first-child, .budgie-panel .inline-toolbar toolbutton > #tasklist-button:first-child, .inline-toolbar .budgie-panel toolbutton > button.flat.launcher:first-child, spinbutton:not(.vertical) button:first-child, spinbutton:not(.vertical) entry:first-child, .linked:not(.vertical) > combobox:first-child > box > button.combo, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:first-child, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:first-child, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:first-child:hover, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:first-child:active, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:first-child:checked, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:first-child:disabled, headerbar .linked:not(.vertical).path-bar > button:first-child, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button:first-child, headerbar .linked:not(.vertical).path-bar > button:first-child:hover, headerbar .linked:not(.vertical).path-bar > button:first-child:active, headerbar .linked:not(.vertical).path-bar > button:first-child:checked, headerbar .linked:not(.vertical).path-bar > button:first-child:disabled { border-top-left-radius: 5px; border-bottom-left-radius: 5px; } .linked:not(.vertical) > entry:last-child, .inline-toolbar button:last-child, .linked:not(.vertical) > button:last-child, .inline-toolbar toolbutton > button.flat:last-child, .inline-toolbar toolbutton > button.budgie-menu-launcher:last-child, .inline-toolbar .budgie-panel toolbutton > #tasklist-button:last-child, .budgie-panel .inline-toolbar toolbutton > #tasklist-button:last-child, .inline-toolbar .budgie-panel toolbutton > button.flat.launcher:last-child, spinbutton:not(.vertical) button:last-child, spinbutton:not(.vertical) entry:last-child, .linked:not(.vertical) > combobox:last-child > box > button.combo, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:last-child, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:last-child, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:last-child:hover, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:last-child:active, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:last-child:checked, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:last-child:disabled, headerbar .linked:not(.vertical).path-bar > button:last-child, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button:last-child, headerbar .linked:not(.vertical).path-bar > button:last-child:hover, headerbar .linked:not(.vertical).path-bar > button:last-child:active, headerbar .linked:not(.vertical).path-bar > button:last-child:checked, headerbar .linked:not(.vertical).path-bar > button:last-child:disabled { border-top-right-radius: 5px; border-bottom-right-radius: 5px; border-right-style: solid; } .linked:not(.vertical) > entry:only-child, .inline-toolbar button:only-child, .linked:not(.vertical) > button:only-child, .inline-toolbar toolbutton > button.flat:only-child, .inline-toolbar toolbutton > button.budgie-menu-launcher:only-child, .inline-toolbar .budgie-panel toolbutton > #tasklist-button:only-child, .budgie-panel .inline-toolbar toolbutton > #tasklist-button:only-child, .inline-toolbar .budgie-panel toolbutton > button.flat.launcher:only-child, spinbutton:not(.vertical) button:only-child, spinbutton:not(.vertical) entry:only-child, .linked:not(.vertical) > combobox:only-child > box > button.combo, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:only-child, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:only-child, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:only-child:hover, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:only-child:active, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:only-child:checked, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:only-child:disabled, headerbar .linked:not(.vertical).path-bar > button:only-child, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button:only-child, headerbar .linked:not(.vertical).path-bar > button:only-child:hover, headerbar .linked:not(.vertical).path-bar > button:only-child:active, headerbar .linked:not(.vertical).path-bar > button:only-child:checked, headerbar .linked:not(.vertical).path-bar > button:only-child:disabled { border-radius: 5px; border-style: solid; } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:first-child { border-top-left-radius: 5px; border-bottom-left-radius: 0; } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:last-child { border-top-right-radius: 5px; border-bottom-right-radius: 0; border-right-style: solid; } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:only-child { border-radius: 5px 5px 0 0; border-style: solid; } .linked.vertical > entry, .linked.vertical > entry:focus, .linked.vertical > button, .linked.vertical > button:hover, .linked.vertical > button:active, .linked.vertical > button:checked, spinbutton.vertical button, spinbutton.vertical entry, .linked.vertical > combobox > box > button.combo { border-radius: 0; border-bottom-style: none; } .linked.vertical > entry:first-child, .linked.vertical > button:first-child, spinbutton.vertical button:first-child, spinbutton.vertical entry:first-child, .linked.vertical > combobox:first-child > box > button.combo { border-top-left-radius: 5px; border-top-right-radius: 5px; } .linked.vertical > entry:last-child, .linked.vertical > button:last-child, spinbutton.vertical button:last-child, spinbutton.vertical entry:last-child, .linked.vertical > combobox:last-child > box > button.combo { border-bottom-left-radius: 5px; border-bottom-right-radius: 5px; border-bottom-style: solid; } .linked.vertical > entry:only-child, .linked.vertical > button:only-child, spinbutton.vertical button:only-child, spinbutton.vertical entry:only-child, .linked.vertical > combobox:only-child > box > button.combo { border-radius: 5px; border-style: solid; } menuitem.button.flat, modelbutton.flat, button:link, button:visited, button:link:hover, button:link:active, button:link:checked, button:visited:hover, button:visited:active, button:visited:checked, notebook > header > tabs > tab button.flat:hover, notebook > header > tabs > tab button.budgie-menu-launcher:hover, notebook > header > tabs > tab .budgie-panel #tasklist-button:hover, .budgie-panel notebook > header > tabs > tab #tasklist-button:hover, notebook > header > tabs > tab .budgie-panel button.flat.launcher:hover, .budgie-panel notebook > header > tabs > tab button.flat.launcher:hover, notebook > header > tabs > tab button.flat:active, notebook > header > tabs > tab button.budgie-menu-launcher:active, notebook > header > tabs > tab .budgie-panel #tasklist-button:active, .budgie-panel notebook > header > tabs > tab #tasklist-button:active, notebook > header > tabs > tab .budgie-panel button.flat.launcher:active, .budgie-panel notebook > header > tabs > tab button.flat.launcher:active, notebook > header > tabs > tab button.flat:active:hover, notebook > header > tabs > tab button.budgie-menu-launcher:active:hover, .app-notification button, calendar.button, calendar.raven-calendar.button { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; } menuitem.button.flat, modelbutton.flat { transition: all 0.2s cubic-bezier(0, 0, 0.2, 1); min-height: 26px; padding-left: 8px; padding-right: 8px; outline-offset: -3px; border-radius: 5px; } menuitem.button.flat:hover, modelbutton.flat:hover { background-color: #444444; transition-duration: 50ms; } menuitem.button.flat:active, menuitem.button.flat:active arrow, menuitem.button.flat:selected, menuitem.button.flat:selected arrow, modelbutton.flat:active, modelbutton.flat:active arrow, modelbutton.flat:selected, modelbutton.flat:selected arrow { color: #ffffff; background-color: rgba(132, 132, 132, 0.98); background-image: none; border-color: rgba(255, 255, 255, 0.12); border-top-color: rgba(255, 255, 255, 0.12); border-bottom-color: rgba(255, 255, 255, 0.12); text-shadow: none; -gtk-icon-shadow: none; box-shadow: none; transition: none; animation: none; } menuitem.button.flat:checked, modelbutton.flat:checked { color: #dedede; } menuitem.button.flat:disabled, modelbutton.flat:disabled { color: rgba(222, 222, 222, 0.45); } menuitem.button.flat check:last-child, menuitem.button.flat radio:last-child, modelbutton.flat check:last-child, modelbutton.flat radio:last-child { margin-left: 8px; } menuitem.button.flat check:first-child, menuitem.button.flat radio:first-child, modelbutton.flat check:first-child, modelbutton.flat radio:first-child { margin-right: 8px; } modelbutton.flat arrow.left { -gtk-icon-source: -gtk-icontheme("pan-start-symbolic"); } modelbutton.flat arrow.right { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); } *:link, button:link, button:visited { color: #3484e2; } *:link:visited, button:visited { color: #b8b8b8; } *:selected *:link:visited, *:selected button:visited:link, *:selected button:visited { color: #b6d1ff; } *:link:hover, button:hover:link, button:hover:visited { color: #619fe8; } *:selected *:link:hover, *:selected button:hover:link, *:selected button:hover:visited { color: #edf4ff; } *:link:active, button:active:link, button:active:visited { color: #3484e2; } *:selected *:link:active, *:selected button:active:link, *:selected button:active:visited { color: #dbe8ff; } infobar.info *:link, infobar.info button:link, infobar.info button:visited, infobar.question *:link, infobar.question button:link, infobar.question button:visited, infobar.warning *:link, infobar.warning button:link, infobar.warning button:visited, infobar.error *:link, infobar.error button:link, infobar.error button:visited, *:link:selected, button:selected:link, button:selected:visited, headerbar.selection-mode .subtitle:link, .selection-mode.titlebar:not(headerbar) .subtitle:link, *:selected *:link, *:selected button:link, *:selected button:visited { color: #dbe8ff; } button:link > label, button:visited > label { text-decoration-line: underline; } spinbutton:drop(active) { box-shadow: none; } spinbutton button:active { color: #ffffff; } spinbutton:disabled { color: rgba(222, 222, 222, 0.45); } spinbutton:not(.vertical) entry { min-width: 28px; } spinbutton:not(.vertical):dir(ltr) entry, spinbutton:not(.vertical):dir(rtl) button.up { border-radius: 5px 0 0 5px; } spinbutton:not(.vertical) > button + button { border-left-style: none; } spinbutton:not(.vertical) > button:hover:not(:active), spinbutton:not(.vertical) > button:hover + button { box-shadow: inset 1px 0 rgba(255, 255, 255, 0.12); } spinbutton:not(.vertical) > button:disabled + button:not(:disabled):not(:active):not(:checked):not(:hover), spinbutton:not(.vertical) > button:not(:disabled):not(:active):not(:checked):not(:hover) + button:disabled { box-shadow: inset 1px 0 rgba(255, 255, 255, 0); } spinbutton:not(.vertical) > button:first-child:hover:not(:active), spinbutton:not(.vertical) > button.up:dir(rtl):hover:not(:active), spinbutton:not(.vertical) > entry + button:not(:active):hover { box-shadow: none; } spinbutton:not(.vertical) > entry:focus + button { border-left-color: #8eb9ff; } spinbutton:not(.vertical) > entry:drop(active) + button { border-left-color: #F08437; } .osd spinbutton:not(.vertical) > button:hover:not(:active), .osd spinbutton:not(.vertical) > button:hover + button { box-shadow: inset 1px 0 rgba(255, 255, 255, 0.12); } .osd spinbutton:not(.vertical) > button:first-child:hover:not(:active), .osd spinbutton:not(.vertical) > button.up:dir(rtl):hover:not(:active), .osd spinbutton:not(.vertical) > entry + button:not(:active):hover { box-shadow: none; } .osd spinbutton:not(.vertical) > entry:focus + button { border-left-color: #8eb9ff; } spinbutton.vertical button, spinbutton.vertical entry { padding-left: 4px; padding-right: 4px; min-width: 0; } spinbutton.vertical button.up { border-radius: 5px 5px 0 0; } spinbutton.vertical > entry:focus + button { border-top-color: #8eb9ff; } spinbutton.vertical > entry:drop(active) + button { border-top-color: #F08437; } combobox button.combo { min-width: 0; padding-left: 12px; padding-right: 12px; } combobox arrow { -gtk-icon-source: -gtk-scaled(url("assets/combobox-arrow.png"), url("assets/combobox-arrow@2.png")); min-height: 16px; min-width: 20px; padding: 0; margin: -1px -13px -1px -1px; border-radius: 0 5px 5px 0; color: #ffffff; border: 1px solid #686868; background-color: #498dff; background-image: linear-gradient(180deg, #686868 0%, #686868 100%); } .linked:not(.vertical) > combobox > box > button.combo arrow { border-radius: 0; } .linked:not(.vertical) > combobox:last-child > box > button.combo arrow { border-radius: 0 5px 5px 0; } toolbar, .inline-toolbar { -GtkWidget-window-dragging: true; padding: 4px; background-color: rgba(55, 55, 55, 0.98); border-bottom: 1px solid rgba(255, 255, 255, 0.12); } toolbar separator, .inline-toolbar separator { background: none; } toolbar.horizontal separator, .horizontal.inline-toolbar separator { margin: 0 6px; } toolbar.vertical separator, .vertical.inline-toolbar separator { margin: 6px 0; } .osd toolbar, .osd .inline-toolbar { background-color: transparent; } toolbar.osd, .osd.inline-toolbar { padding: 8px; border: 1px solid rgba(255, 255, 255, 0.12); border-radius: 5px; background-color: rgba(36, 36, 36, 0.85); } toolbar.osd.left, .osd.left.inline-toolbar, toolbar.osd.right, .osd.right.inline-toolbar, toolbar.osd.top, .osd.top.inline-toolbar, toolbar.osd.bottom, .osd.bottom.inline-toolbar { border-radius: 0; } toolbar.osd.top, .osd.top.inline-toolbar { border-width: 0 0 1px 0; } toolbar.osd.bottom, .osd.bottom.inline-toolbar { border-width: 1px 0 0 0; } toolbar.osd.left, .osd.left.inline-toolbar { border-width: 0 1px 0 0; } toolbar.osd.right, .osd.right.inline-toolbar { border-width: 0 0 0 1px; } toolbar:not(.inline-toolbar) switch, .inline-toolbar:not(.inline-toolbar) switch, toolbar:not(.inline-toolbar) scale, .inline-toolbar:not(.inline-toolbar) scale, toolbar:not(.inline-toolbar) entry, .inline-toolbar:not(.inline-toolbar) entry, toolbar:not(.inline-toolbar) spinbutton, .inline-toolbar:not(.inline-toolbar) spinbutton, toolbar:not(.inline-toolbar) button, .inline-toolbar:not(.inline-toolbar) button { margin-right: 1px; margin-bottom: 1px; } toolbar:not(.inline-toolbar) .linked > button, .inline-toolbar:not(.inline-toolbar) .linked > button, toolbar:not(.inline-toolbar) .linked > entry, .inline-toolbar:not(.inline-toolbar) .linked > entry { margin-right: 0; } .primary-toolbar:not(.libreoffice-toolbar) { color: #dedede; background-color: transparent; box-shadow: none; border-width: 0 0 1px 0; border-style: solid; border-image: linear-gradient(to bottom, #4B4B4B, #4B4B4B) 1 0 1 0; } .inline-toolbar { background-color: #2b2b2b; border-style: solid; border-color: rgba(255, 255, 255, 0.12); border-width: 0 1px 1px; padding: 3px; border-radius: 0 0 5px 5px; } searchbar { background-color: #333333; border-style: solid; border-color: #4B4B4B; border-width: 0 0 1px; padding: 3px; } searchbar button.flat, searchbar button.budgie-menu-launcher, searchbar .budgie-panel #tasklist-button, .budgie-panel searchbar #tasklist-button, searchbar .budgie-panel button.flat.launcher, .budgie-panel searchbar button.flat.launcher { min-height: 16px; min-width: 16px; margin: 4px 6px; padding: 0 2px; border-radius: 100px; } actionbar { padding: 6px; border-top: 1px solid rgba(255, 255, 255, 0.12); background-color: #2b2b2b; border-radius: 0 0 6px 6px; } headerbar, .titlebar:not(headerbar) { min-height: 34px; padding: 0 8px; background-image: none; color: rgba(225, 219, 219, 0.8); background-color: #090909; border: none; } .csd headerbar, .csd .titlebar:not(headerbar) { background-image: none; background-color: #141414; border: none; } headerbar:backdrop, .titlebar:backdrop:not(headerbar) { transition: 200ms ease-out; color: rgba(225, 219, 219, 0.5); background-image: none; background-color: #141414; border: none; } .csd headerbar:backdrop, .csd .titlebar:backdrop:not(headerbar) { background-color: #141414; border: none; } .maximized headerbar, .maximized .titlebar:not(headerbar) { background-color: #090909; border: none; } .maximized headerbar:backdrop, .maximized .titlebar:backdrop:not(headerbar) { background-color: #141414; border: none; } headerbar .title, .titlebar:not(headerbar) .title { padding-left: 12px; padding-right: 12px; } headerbar .subtitle, .titlebar:not(headerbar) .subtitle { font-size: smaller; padding-left: 12px; padding-right: 12px; margin-top: -3px; } headerbar.selection-mode, .selection-mode.titlebar:not(headerbar) { color: #ffffff; background-color: #0e6bff; border-color: #0060f9; box-shadow: none; background-image: none; text-shadow: none; } headerbar.selection-mode:backdrop, .selection-mode.titlebar:backdrop:not(headerbar) { background-color: #0e6bff; color: rgba(255, 255, 255, 0.6); } headerbar.selection-mode .selection-menu, .selection-mode.titlebar:not(headerbar) .selection-menu { box-shadow: none; padding-left: 10px; padding-right: 10px; } headerbar.selection-mode .selection-menu GtkArrow, .selection-mode.titlebar:not(headerbar) .selection-menu GtkArrow { -GtkArrow-arrow-scaling: 1; } headerbar.selection-mode .selection-menu .arrow, .selection-mode.titlebar:not(headerbar) .selection-menu .arrow { -gtk-icon-source: -gtk-icontheme("pan-down-symbolic"); } .maximized headerbar.selection-mode, .maximized .selection-mode.titlebar:not(headerbar) { background-color: #0e6bff; } .tiled headerbar, .tiled headerbar:backdrop, .maximized headerbar, .maximized headerbar:backdrop, .tiled .titlebar:not(headerbar), .tiled .titlebar:backdrop:not(headerbar), .maximized .titlebar:not(headerbar), .maximized .titlebar:backdrop:not(headerbar) { border-radius: 0; } .maximized headerbar, .maximized .titlebar:not(headerbar) { background-color: #090909; border: none; } .maximized headerbar:backdrop, .maximized .titlebar:backdrop:not(headerbar) { background-color: #141414; } headerbar.default-decoration, .default-decoration.titlebar:not(headerbar) { min-height: 26px; padding: 0 6px; background-color: #090909; background-image: none; } .tiled headerbar.default-decoration, .maximized headerbar.default-decoration, .fullscreen headerbar.default-decoration, .tiled .default-decoration.titlebar:not(headerbar), .maximized .default-decoration.titlebar:not(headerbar), .fullscreen .default-decoration.titlebar:not(headerbar) { box-shadow: none; } headerbar.default-decoration button.titlebutton, .default-decoration.titlebar:not(headerbar) button.titlebutton { border: none; min-width: 16px; min-height: 16px; margin: 0; padding: 0; } headerbar.default-decoration, .csd headerbar.default-decoration, headerbar.default-decoration:backdrop, .csd headerbar.default-decoration:backdrop, .default-decoration.titlebar:not(headerbar), .csd .default-decoration.titlebar:not(headerbar), .default-decoration.titlebar:backdrop:not(headerbar), .csd .default-decoration.titlebar:backdrop:not(headerbar) { box-shadow: none; border: none; } .titlebar, .titlebar.background { border-radius: 6px 6px 0 0; } headerbar button, headerbar separator { margin-top: 6px; margin-bottom: 6px; } headerbar entry { margin-top: 5px; margin-bottom: 5px; } separator:first-child + headerbar, separator:first-child + headerbar:backdrop, headerbar:first-child, headerbar:first-child:backdrop { border-top-left-radius: 6px; } .maximized separator:first-child + headerbar, .tiled separator:first-child + headerbar, .maximized separator:first-child + headerbar:backdrop, .tiled separator:first-child + headerbar:backdrop, .maximized headerbar:first-child, .tiled headerbar:first-child, .maximized headerbar:first-child:backdrop, .tiled headerbar:first-child:backdrop { border-radius: 0; } headerbar:last-child, headerbar:last-child:backdrop { border-top-right-radius: 6px; } .maximized headerbar:last-child, .tiled headerbar:last-child, .maximized headerbar:last-child:backdrop, .tiled headerbar:last-child:backdrop { border-radius: 0; } window > .titlebar:not(headerbar), window > .titlebar:not(headerbar):backdrop, window.csd > .titlebar:not(headerbar), window.csd > .titlebar:not(headerbar):backdrop { padding: 0; background: none; background-image: none; border: none; box-shadow: none; } .titlebar:not(headerbar) > separator { background-color: none; } .titlebar:not(headerbar) > separator:backdrop { background-color: none; } .primary-toolbar:not(.libreoffice-toolbar) separator, headerbar separator.titlebutton, .titlebar:not(headerbar) separator.titlebutton { min-width: 0; min-height: 0; background-color: transparent; border: none; } .primary-toolbar:not(.libreoffice-toolbar) separator:backdrop, headerbar separator.titlebutton:backdrop, .titlebar:not(headerbar) separator.titlebutton:backdrop { opacity: 0.6; } headerbar entry, .nemo-window .primary-toolbar entry { border: none; color: rgba(225, 219, 219, 0.8); background-color: rgba(119, 119, 119, 0.58); background-image: none; } headerbar entry image, .nemo-window .primary-toolbar entry image, headerbar entry image:hover, .nemo-window .primary-toolbar entry image:hover { color: inherit; } headerbar entry:backdrop, .nemo-window .primary-toolbar entry:backdrop { opacity: 0.85; background-image: none; box-shadow: none; } headerbar entry:focus, .nemo-window .primary-toolbar entry:focus { border: none; box-shadow: 0 0 0 2px #8eb9ff, inset 0 0 0 1px #8eb9ff; border-color: #8eb9ff; background-image: none; background-clip: padding-box; } headerbar entry:focus image, .nemo-window .primary-toolbar entry:focus image { color: #498dff; } headerbar entry:disabled, .nemo-window .primary-toolbar entry:disabled { color: rgba(225, 219, 219, 0.35); background-color: rgba(111, 111, 111, 0.23); } headerbar entry selection:focus, .nemo-window .primary-toolbar entry selection:focus { background-color: #498dff; color: #ffffff; } headerbar entry progress, .nemo-window .primary-toolbar entry progress { border-color: #498dff; background-image: none; background-color: transparent; } headerbar entry.warning, .nemo-window .primary-toolbar entry.warning { color: white; border-color: rgba(24, 24, 24, 0.38); background-color: rgba(169, 95, 54, 0.992); } headerbar entry.warning:focus, .nemo-window .primary-toolbar entry.warning:focus { color: white; background-color: #F27835; } headerbar entry.warning selection, .nemo-window .primary-toolbar entry.warning selection, headerbar entry.warning selection:focus, .nemo-window .primary-toolbar entry.warning selection:focus { background-color: white; color: #F27835; } headerbar entry.error, .nemo-window .primary-toolbar entry.error { color: white; border-color: rgba(24, 24, 24, 0.38); background-color: rgba(175, 61, 56, 0.992); } headerbar entry.error:focus, .nemo-window .primary-toolbar entry.error:focus { color: white; background-color: #FC4138; } headerbar entry.error selection, .nemo-window .primary-toolbar entry.error selection, headerbar entry.error selection:focus, .nemo-window .primary-toolbar entry.error selection:focus { background-color: white; color: #FC4138; } paned.titlebar.horizontal headerbar button.flat.toggle.popup:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:not(.image-button), headerbar button, .nemo-window .primary-toolbar button { min-width: 22px; border-color: rgba(255, 255, 255, 0.12); color: rgba(225, 219, 219, 0.8); background-color: rgba(119, 119, 119, 0.58); background-image: none; box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); border: none; } paned.titlebar.horizontal headerbar button.flat.toggle.popup:backdrop:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:backdrop:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:backdrop:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:backdrop:not(.image-button), headerbar button:backdrop, .nemo-window .primary-toolbar button:backdrop { opacity: 0.7; background-image: none; box-shadow: none; } paned.titlebar.horizontal headerbar button.flat.toggle.popup:hover:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:hover:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:hover:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:hover:not(.image-button), headerbar button:hover, .nemo-window .primary-toolbar button:hover { border-color: rgba(255, 255, 255, 0.12); color: rgba(221, 213, 213, 0.8); background-color: rgba(119, 119, 119, 0.88); background-image: none; box-shadow: none; transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); } paned.titlebar.horizontal headerbar button.flat.toggle.popup:checked:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:checked:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:checked:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:checked:not(.image-button), headerbar button:checked, .nemo-window .primary-toolbar button:checked { color: #ffffff; background-color: rgba(132, 132, 132, 0.98); background-image: none; border-color: rgba(255, 255, 255, 0.12); border-top-color: rgba(255, 255, 255, 0.12); border-bottom-color: rgba(255, 255, 255, 0.12); text-shadow: none; -gtk-icon-shadow: none; box-shadow: none; background-clip: padding-box; transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); transition-duration: 300ms; } paned.titlebar.horizontal headerbar button.flat.toggle.popup:active:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:active:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:active:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:active:not(.image-button), headerbar button:active, .nemo-window .primary-toolbar button:active { color: #ffffff; background-color: rgba(119, 119, 119, 0.98); background-image: none; border-color: rgba(255, 255, 255, 0.12); text-shadow: none; -gtk-icon-shadow: none; box-shadow: none; transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); transition-duration: 300ms; background-clip: padding-box; } paned.titlebar.horizontal headerbar button.flat.toggle.popup:disabled:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:disabled:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:disabled:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:disabled:not(.image-button), headerbar button:disabled, .nemo-window .primary-toolbar button:disabled { background-color: rgba(119, 119, 119, 0.58); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } paned.titlebar.horizontal headerbar button.flat.toggle.popup:disabled:not(.image-button) label, paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:disabled:not(.image-button) label, paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:disabled:not(.image-button) label, .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:disabled:not(.image-button) label, paned.titlebar.horizontal headerbar button.flat.toggle.popup:disabled:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:disabled:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:disabled:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:disabled:not(.image-button), headerbar button:disabled label, .nemo-window .primary-toolbar button:disabled label, headerbar button:disabled, .nemo-window .primary-toolbar button:disabled { color: rgba(225, 219, 219, 0.35); } paned.titlebar.horizontal headerbar button.flat.toggle.popup:disabled:active:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:disabled:active:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:disabled:active:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:disabled:active:not(.image-button), paned.titlebar.horizontal headerbar button.flat.toggle.popup:disabled:checked:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:disabled:checked:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:disabled:checked:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:disabled:checked:not(.image-button), headerbar button:disabled:active, .nemo-window .primary-toolbar button:disabled:active, headerbar button:disabled:checked, .nemo-window .primary-toolbar button:disabled:checked { color: rgba(255, 255, 255, 0.75); background-color: rgba(119, 119, 119, 0.63); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } paned.titlebar.horizontal headerbar button.flat.toggle.popup:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:not(.image-button), headerbar button.flat, .nemo-window .primary-toolbar button.flat, headerbar button.budgie-menu-launcher, .nemo-window .primary-toolbar button.budgie-menu-launcher, headerbar .budgie-panel #tasklist-button, .budgie-panel headerbar #tasklist-button, .nemo-window .primary-toolbar .budgie-panel #tasklist-button, .budgie-panel .nemo-window .primary-toolbar #tasklist-button, headerbar .budgie-panel button.flat.launcher, .budgie-panel headerbar button.flat.launcher, .nemo-window .primary-toolbar .budgie-panel button.flat.launcher, .budgie-panel .nemo-window .primary-toolbar button.flat.launcher { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; } headerbar.selection-mode button, .nemo-window .selection-mode.primary-toolbar button, headerbar.selection-mode button.flat, .nemo-window .selection-mode.primary-toolbar button.flat, headerbar.selection-mode button.budgie-menu-launcher, .nemo-window .selection-mode.primary-toolbar button.budgie-menu-launcher, headerbar.selection-mode .budgie-panel #tasklist-button, .budgie-panel headerbar.selection-mode #tasklist-button, .nemo-window .selection-mode.primary-toolbar .budgie-panel #tasklist-button, .budgie-panel .nemo-window .selection-mode.primary-toolbar #tasklist-button, headerbar.selection-mode .budgie-panel button.flat.launcher, .budgie-panel headerbar.selection-mode button.flat.launcher { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; color: #ffffff; background-color: rgba(255, 255, 255, 0); } headerbar.selection-mode button:hover, .nemo-window .selection-mode.primary-toolbar button:hover { background-color: rgba(255, 255, 255, 0.25); } headerbar.selection-mode button:active, .nemo-window .selection-mode.primary-toolbar button:active, headerbar.selection-mode button:checked, .nemo-window .selection-mode.primary-toolbar button:checked { text-shadow: none; } headerbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child), .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child), headerbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child):hover, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child):hover, headerbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child):active, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child):active, headerbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child):checked, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child):checked, headerbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child):disabled, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child):disabled { margin-right: 1px; } headerbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) > button, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) > button { min-width: 20px; } headerbar .linked:not(.vertical):not(.path-bar) > button, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > button, headerbar .linked:not(.vertical):not(.path-bar) > button:hover, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > button:hover, headerbar .linked:not(.vertical):not(.path-bar) > button:active, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > button:active, headerbar .linked:not(.vertical):not(.path-bar) > button:checked, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > button:checked, headerbar .linked:not(.vertical):not(.path-bar) > button:disabled, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > button:disabled { border-radius: 5px; } headerbar .linked:not(.vertical):not(.path-bar) > entry, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > entry, headerbar .linked:not(.vertical):not(.path-bar) > entry:disabled, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > entry:disabled { border-radius: 5px; margin-right: 4px; margin-left: 3px; } headerbar .linked:not(.vertical):not(.path-bar) > button:active + entry, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > button:active + entry, headerbar .linked:not(.vertical):not(.path-bar) > button:checked + entry, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > button:checked + entry { border-left-color: rgba(255, 255, 255, 0.12); } headerbar .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + entry, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + entry, headerbar .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + button, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + button, headerbar .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + combobox > box > button.combo, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + combobox > box > button.combo { border-left-color: rgba(255, 255, 255, 0.12); } headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button, headerbar .linked:not(.vertical).path-bar > button, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button { border-color: rgba(255, 255, 255, 0.12); color: rgba(225, 219, 219, 0.8); background-color: rgba(119, 119, 119, 0.58); background-image: none; box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); border: none; } headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:hover, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:hover, headerbar .linked:not(.vertical).path-bar > button:hover, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button:hover { border-color: rgba(255, 255, 255, 0.12); color: rgba(221, 213, 213, 0.8); background-color: rgba(119, 119, 119, 0.88); background-image: none; box-shadow: none; } headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:active, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:active, headerbar .linked:not(.vertical).path-bar > button:active, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button:active { color: #ffffff; background-color: rgba(119, 119, 119, 0.98); background-image: none; border-color: rgba(255, 255, 255, 0.12); text-shadow: none; -gtk-icon-shadow: none; box-shadow: none; } headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:checked, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:checked, headerbar .linked:not(.vertical).path-bar > button:checked, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button:checked { color: #ffffff; background-color: rgba(132, 132, 132, 0.98); background-image: none; border-color: rgba(255, 255, 255, 0.12); border-top-color: rgba(255, 255, 255, 0.12); border-bottom-color: rgba(255, 255, 255, 0.12); text-shadow: none; -gtk-icon-shadow: none; box-shadow: none; } headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:disabled, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:disabled, headerbar .linked:not(.vertical).path-bar > button:disabled, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button:disabled { color: rgba(225, 219, 219, 0.4); } headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:backdrop, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:backdrop, headerbar .linked:not(.vertical).path-bar > button:backdrop, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button:backdrop { opacity: 0.7; background-image: none; box-shadow: none; } headerbar button.suggested-action, .nemo-window .primary-toolbar button.suggested-action { background-clip: border-box; color: white; background-color: #3484e2; border-color: #1c6bc7; background-image: none; } headerbar button.suggested-action.flat, .nemo-window .primary-toolbar button.suggested-action.flat, headerbar button.suggested-action.budgie-menu-launcher, .nemo-window .primary-toolbar button.suggested-action.budgie-menu-launcher, headerbar .budgie-panel .suggested-action#tasklist-button, .budgie-panel headerbar .suggested-action#tasklist-button, .nemo-window .primary-toolbar .budgie-panel .suggested-action#tasklist-button, .budgie-panel .nemo-window .primary-toolbar .suggested-action#tasklist-button, headerbar .budgie-panel button.suggested-action.flat.launcher, .budgie-panel headerbar button.suggested-action.flat.launcher, .nemo-window .primary-toolbar .budgie-panel button.suggested-action.flat.launcher, .budgie-panel .nemo-window .primary-toolbar button.suggested-action.flat.launcher { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; color: #3484e2; } headerbar button.suggested-action:hover, .nemo-window .primary-toolbar button.suggested-action:hover { background-clip: border-box; color: white; background-color: #619fe8; border-color: #3484e2; background-image: none; } headerbar button.suggested-action:active, .nemo-window .primary-toolbar button.suggested-action:active, headerbar button.suggested-action:checked, .nemo-window .primary-toolbar button.suggested-action:checked { background-clip: border-box; color: white; background-color: #1c6bc7; border-color: #16539a; background-image: none; box-shadow: none; } headerbar button.suggested-action.flat:disabled, .nemo-window .primary-toolbar button.suggested-action.flat:disabled, headerbar button.suggested-action.budgie-menu-launcher:disabled, .nemo-window .primary-toolbar button.suggested-action.budgie-menu-launcher:disabled, headerbar .budgie-panel .suggested-action#tasklist-button:disabled, .budgie-panel headerbar .suggested-action#tasklist-button:disabled, .nemo-window .primary-toolbar .budgie-panel .suggested-action#tasklist-button:disabled, .budgie-panel .nemo-window .primary-toolbar .suggested-action#tasklist-button:disabled, headerbar .budgie-panel button.suggested-action.flat.launcher:disabled, .budgie-panel headerbar button.suggested-action.flat.launcher:disabled, headerbar button.suggested-action:disabled, .nemo-window .primary-toolbar button.suggested-action:disabled { border-color: rgba(255, 255, 255, 0.12); background-color: rgba(72, 72, 72, 0.55); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } headerbar button.suggested-action.flat:disabled label, .nemo-window .primary-toolbar button.suggested-action.flat:disabled label, headerbar button.suggested-action.budgie-menu-launcher:disabled label, .nemo-window .primary-toolbar button.suggested-action.budgie-menu-launcher:disabled label, headerbar .budgie-panel .suggested-action#tasklist-button:disabled label, .budgie-panel headerbar .suggested-action#tasklist-button:disabled label, .nemo-window .primary-toolbar .budgie-panel .suggested-action#tasklist-button:disabled label, .budgie-panel .nemo-window .primary-toolbar .suggested-action#tasklist-button:disabled label, headerbar .budgie-panel button.suggested-action.flat.launcher:disabled label, .budgie-panel headerbar button.suggested-action.flat.launcher:disabled label, headerbar button.suggested-action.flat:disabled, .nemo-window .primary-toolbar button.suggested-action.flat:disabled, headerbar button.suggested-action.budgie-menu-launcher:disabled, .nemo-window .primary-toolbar button.suggested-action.budgie-menu-launcher:disabled, headerbar .budgie-panel .suggested-action#tasklist-button:disabled, .budgie-panel headerbar .suggested-action#tasklist-button:disabled, .nemo-window .primary-toolbar .budgie-panel .suggested-action#tasklist-button:disabled, .budgie-panel .nemo-window .primary-toolbar .suggested-action#tasklist-button:disabled, headerbar .budgie-panel button.suggested-action.flat.launcher:disabled, .budgie-panel headerbar button.suggested-action.flat.launcher:disabled, headerbar button.suggested-action:disabled label, .nemo-window .primary-toolbar button.suggested-action:disabled label, headerbar button.suggested-action:disabled, .nemo-window .primary-toolbar button.suggested-action:disabled { color: rgba(222, 222, 222, 0.45); } headerbar button.suggested-action:backdrop, .nemo-window .primary-toolbar button.suggested-action:backdrop, headerbar button.suggested-action:backdrop, .nemo-window .primary-toolbar button.suggested-action:backdrop { opacity: 0.8; } headerbar button.destructive-action, .nemo-window .primary-toolbar button.destructive-action { background-clip: border-box; color: white; background-color: #f8464c; border-color: #f6151c; background-image: none; } headerbar button.destructive-action.flat, .nemo-window .primary-toolbar button.destructive-action.flat, headerbar button.destructive-action.budgie-menu-launcher, .nemo-window .primary-toolbar button.destructive-action.budgie-menu-launcher, headerbar .budgie-panel .destructive-action#tasklist-button, .budgie-panel headerbar .destructive-action#tasklist-button, .nemo-window .primary-toolbar .budgie-panel .destructive-action#tasklist-button, .budgie-panel .nemo-window .primary-toolbar .destructive-action#tasklist-button, headerbar .budgie-panel button.destructive-action.flat.launcher, .budgie-panel headerbar button.destructive-action.flat.launcher, .nemo-window .primary-toolbar .budgie-panel button.destructive-action.flat.launcher, .budgie-panel .nemo-window .primary-toolbar button.destructive-action.flat.launcher { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; color: #f8464c; } headerbar button.destructive-action:hover, .nemo-window .primary-toolbar button.destructive-action:hover { background-clip: border-box; color: white; background-color: #fa777c; border-color: #f8464c; background-image: none; } headerbar button.destructive-action:active, .nemo-window .primary-toolbar button.destructive-action:active, headerbar button.destructive-action:checked, .nemo-window .primary-toolbar button.destructive-action:checked { background-clip: border-box; color: white; background-color: #f6151c; border-color: #d0080f; background-image: none; box-shadow: none; } headerbar button.destructive-action.flat:disabled, .nemo-window .primary-toolbar button.destructive-action.flat:disabled, headerbar button.destructive-action.budgie-menu-launcher:disabled, .nemo-window .primary-toolbar button.destructive-action.budgie-menu-launcher:disabled, headerbar .budgie-panel .destructive-action#tasklist-button:disabled, .budgie-panel headerbar .destructive-action#tasklist-button:disabled, .nemo-window .primary-toolbar .budgie-panel .destructive-action#tasklist-button:disabled, .budgie-panel .nemo-window .primary-toolbar .destructive-action#tasklist-button:disabled, headerbar .budgie-panel button.destructive-action.flat.launcher:disabled, .budgie-panel headerbar button.destructive-action.flat.launcher:disabled, headerbar button.destructive-action:disabled, .nemo-window .primary-toolbar button.destructive-action:disabled { border-color: rgba(255, 255, 255, 0.12); background-color: rgba(72, 72, 72, 0.55); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } headerbar button.destructive-action.flat:disabled label, .nemo-window .primary-toolbar button.destructive-action.flat:disabled label, headerbar button.destructive-action.budgie-menu-launcher:disabled label, .nemo-window .primary-toolbar button.destructive-action.budgie-menu-launcher:disabled label, headerbar .budgie-panel .destructive-action#tasklist-button:disabled label, .budgie-panel headerbar .destructive-action#tasklist-button:disabled label, .nemo-window .primary-toolbar .budgie-panel .destructive-action#tasklist-button:disabled label, .budgie-panel .nemo-window .primary-toolbar .destructive-action#tasklist-button:disabled label, headerbar .budgie-panel button.destructive-action.flat.launcher:disabled label, .budgie-panel headerbar button.destructive-action.flat.launcher:disabled label, headerbar button.destructive-action.flat:disabled, .nemo-window .primary-toolbar button.destructive-action.flat:disabled, headerbar button.destructive-action.budgie-menu-launcher:disabled, .nemo-window .primary-toolbar button.destructive-action.budgie-menu-launcher:disabled, headerbar .budgie-panel .destructive-action#tasklist-button:disabled, .budgie-panel headerbar .destructive-action#tasklist-button:disabled, .nemo-window .primary-toolbar .budgie-panel .destructive-action#tasklist-button:disabled, .budgie-panel .nemo-window .primary-toolbar .destructive-action#tasklist-button:disabled, headerbar .budgie-panel button.destructive-action.flat.launcher:disabled, .budgie-panel headerbar button.destructive-action.flat.launcher:disabled, headerbar button.destructive-action:disabled label, .nemo-window .primary-toolbar button.destructive-action:disabled label, headerbar button.destructive-action:disabled, .nemo-window .primary-toolbar button.destructive-action:disabled { color: rgba(222, 222, 222, 0.45); } headerbar button.destructive-action:backdrop, .nemo-window .primary-toolbar button.destructive-action:backdrop, headerbar button.destructive-action:backdrop, .nemo-window .primary-toolbar button.destructive-action:backdrop { opacity: 0.8; } headerbar spinbutton:not(.vertical):focus, .nemo-window .primary-toolbar spinbutton:not(.vertical):focus { color: rgba(225, 219, 219, 0.8); caret-color: rgba(225, 219, 219, 0.8); } headerbar spinbutton:not(.vertical) button, .nemo-window .primary-toolbar spinbutton:not(.vertical) button, headerbar spinbutton:not(.vertical) button:disabled, .nemo-window .primary-toolbar spinbutton:not(.vertical) button:disabled { border-color: rgba(255, 255, 255, 0.12); color: rgba(221, 213, 213, 0.8); background-color: rgba(119, 119, 119, 0.88); background-image: none; box-shadow: none; } headerbar spinbutton:not(.vertical) button:hover, .nemo-window .primary-toolbar spinbutton:not(.vertical) button:hover { background-color: rgba(157, 157, 157, 0.58); } headerbar spinbutton:not(.vertical) button:active, .nemo-window .primary-toolbar spinbutton:not(.vertical) button:active, headerbar spinbutton:not(.vertical) button:checked, .nemo-window .primary-toolbar spinbutton:not(.vertical) button:checked { color: #ffffff; background-color: rgba(119, 119, 119, 0.98); background-image: none; border-color: rgba(255, 255, 255, 0.12); text-shadow: none; -gtk-icon-shadow: none; box-shadow: none; } headerbar spinbutton:not(.vertical) button:disabled, .nemo-window .primary-toolbar spinbutton:not(.vertical) button:disabled { color: rgba(225, 219, 219, 0.4); } headerbar spinbutton:not(.vertical) > button + button, .nemo-window .primary-toolbar spinbutton:not(.vertical) > button + button { border-left-style: none; } headerbar spinbutton:not(.vertical) > button:hover:not(:active), .nemo-window .primary-toolbar spinbutton:not(.vertical) > button:hover:not(:active), headerbar spinbutton:not(.vertical) > button:hover + button, .nemo-window .primary-toolbar spinbutton:not(.vertical) > button:hover + button { box-shadow: inset 1px 0 rgba(255, 255, 255, 0.12); } headerbar spinbutton:not(.vertical) > button:first-child:hover:not(:active), .nemo-window .primary-toolbar spinbutton:not(.vertical) > button:first-child:hover:not(:active), headerbar spinbutton:not(.vertical) > entry + button:not(:active):hover, .nemo-window .primary-toolbar spinbutton:not(.vertical) > entry + button:not(:active):hover { box-shadow: none; } headerbar spinbutton:not(.vertical) > entry:focus + button, .nemo-window .primary-toolbar spinbutton:not(.vertical) > entry:focus + button { border-left-color: #8eb9ff; } headerbar combobox:disabled, .nemo-window .primary-toolbar combobox:disabled { color: rgba(225, 219, 219, 0.2); } headerbar combobox > .linked > button.combo, .nemo-window .primary-toolbar combobox > .linked > button.combo { border-radius: 5px; border: none; color: rgba(225, 219, 219, 0.8); background-color: rgba(119, 119, 119, 0.58); background-image: none; } headerbar combobox > .linked > button.combo image, .nemo-window .primary-toolbar combobox > .linked > button.combo image, headerbar combobox > .linked > button.combo image:hover, .nemo-window .primary-toolbar combobox > .linked > button.combo image:hover { color: inherit; } headerbar combobox > .linked > button.combo:hover, .nemo-window .primary-toolbar combobox > .linked > button.combo:hover { border: none; box-shadow: 0 0 0 2px #8eb9ff, inset 0 0 0 1px #8eb9ff; border-color: #8eb9ff; background-image: none; box-shadow: none; } headerbar combobox > .linked > button.combo:disabled, .nemo-window .primary-toolbar combobox > .linked > button.combo:disabled { color: rgba(225, 219, 219, 0.35); background-color: rgba(111, 111, 111, 0.23); } headerbar combobox > .linked > entry.combo, .nemo-window .primary-toolbar combobox > .linked > entry.combo { border-radius: 5px; } headerbar combobox > .linked > entry.combo:dir(ltr), .nemo-window .primary-toolbar combobox > .linked > entry.combo:dir(ltr) { border-right-style: none; } headerbar combobox > .linked > entry.combo:dir(ltr):focus, .nemo-window .primary-toolbar combobox > .linked > entry.combo:dir(ltr):focus { box-shadow: none; } headerbar combobox > .linked > entry.combo:dir(rtl), .nemo-window .primary-toolbar combobox > .linked > entry.combo:dir(rtl) { border-left-style: none; } headerbar combobox > .linked > entry.combo:dir(rtl):focus, .nemo-window .primary-toolbar combobox > .linked > entry.combo:dir(rtl):focus { box-shadow: none; } headerbar switch:backdrop, .nemo-window .primary-toolbar switch:backdrop { opacity: 0.75; } headerbar progressbar trough, .nemo-window .primary-toolbar progressbar trough { background-color: transparent; } headerbar progressbar:backdrop, .nemo-window .primary-toolbar progressbar:backdrop { opacity: 0.75; } headerbar scale:backdrop, .nemo-window .primary-toolbar scale:backdrop { opacity: 0.75; } headerbar scale slider, .nemo-window .primary-toolbar scale slider { background-color: #515151; border-color: rgba(0, 0, 0, 0.3); } headerbar scale slider:hover, .nemo-window .primary-toolbar scale slider:hover { background-color: #5d5d5d; border-color: rgba(0, 0, 0, 0.3); } headerbar scale slider:active, .nemo-window .primary-toolbar scale slider:active { background-color: #515151; border-color: rgba(0, 0, 0, 0.3); } headerbar scale slider:disabled, .nemo-window .primary-toolbar scale slider:disabled { background-color: rgba(73, 73, 73, 0.994); border-color: rgba(0, 0, 0, 0.3); } headerbar scale trough, .nemo-window .primary-toolbar scale trough { background-color: transparent; } headerbar scale trough:disabled, .nemo-window .primary-toolbar scale trough:disabled { background-color: transparent; } .path-bar button { min-width: 12px; } .path-bar button.text-button, .path-bar button.image-button, .path-bar button { padding-left: 6px; padding-right: 6px; } .path-bar button:hover { box-shadow: none; } .path-bar button:active, .path-bar button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.35); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); } .path-bar button.text-button.image-button label { padding-left: 0; padding-right: 0; } .path-bar button.text-button.image-button label:last-child, .path-bar button label:last-child { padding-right: 10px; } .path-bar button.text-button.image-button label:first-child, .path-bar button label:first-child { padding-left: 10px; } .path-bar button.slider-button, .path-bar button:not(.image-button):not(.text-button) { padding-left: 1px; padding-right: 1px; } .path-bar button image { padding-left: 4px; padding-right: 4px; } treeview.view { border-left-color: rgba(222, 222, 222, 0.15); border-top-color: rgba(0, 0, 0, 0.1); } * { -GtkTreeView-horizontal-separator: 4; -GtkTreeView-grid-line-width: 1; -GtkTreeView-grid-line-pattern: ''; -GtkTreeView-tree-line-width: 1; -GtkTreeView-tree-line-pattern: ''; -GtkTreeView-expander-size: 16; } treeview.view acceleditor > label { background-color: #498dff; } treeview.view:selected, treeview.view:selected:focus { border-radius: 0; border-left-color: #a4c6ff; border-top-color: rgba(222, 222, 222, 0.1); } treeview.view:disabled { color: rgba(222, 222, 222, 0.45); } treeview.view:disabled:selected { color: #92bbff; } treeview.view.separator { min-height: 2px; color: rgba(0, 0, 0, 0.1); } treeview.view:drop(active) { border-style: solid none; border-width: 1px; border-color: #94b6ef; } treeview.view:drop(active).after { border-top-style: none; } treeview.view:drop(active).before { border-bottom-style: none; } treeview.view.expander { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); color: #818181; } treeview.view.expander:dir(rtl) { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic-rtl"); } treeview.view.expander:hover { color: #dedede; } treeview.view.expander:selected { color: #c8ddff; } treeview.view.expander:selected:hover { color: #ffffff; } treeview.view.expander:checked { -gtk-icon-source: -gtk-icontheme("pan-down-symbolic"); } treeview.view.progressbar, treeview.view.progressbar:focus { color: #ffffff; border-radius: 5px; background-color: #498dff; } treeview.view.progressbar:selected, treeview.view.progressbar:selected:focus, treeview.view.progressbar:focus:selected, treeview.view.progressbar:focus:selected:focus { color: #498dff; box-shadow: none; background-color: #ffffff; } treeview.view.trough { color: #dedede; background-color: rgba(255, 255, 255, 0.12); border-radius: 5px; border-width: 0; } treeview.view.trough:selected, treeview.view.trough:selected:focus { color: #ffffff; background-color: rgba(0, 0, 0, 0.2); border-radius: 5px; border-width: 0; } treeview.view header button { min-height: 26px; min-width: 38px; padding: 0 6px; font-weight: bold; color: #b9b9b9; background-color: #242424; background-image: none; border-style: none solid none none; border-radius: 0; border-image: linear-gradient(to bottom, #242424 20%, rgba(255, 255, 255, 0.11) 20%, rgba(255, 255, 255, 0.11) 80%, #242424 80%) 0 1 0 0/0 1px 0 0 stretch; } treeview.view header button:hover { color: #498dff; } treeview.view header button:active { color: #dedede; } treeview.view header button:active, treeview.view header button:hover { background-color: #242424; } treeview.view header button:active:hover { color: #dedede; } treeview.view header button:disabled { border-color: #333333; background-image: none; } treeview.view header button:last-child { border-right-style: none; border-image: none; } treeview.view button.dnd, treeview.view button.dnd:selected, treeview.view button.dnd:hover, treeview.view button.dnd:active, treeview.view header.button.dnd, treeview.view header.button.dnd:selected, treeview.view header.button.dnd:hover, treeview.view header.button.dnd:active { padding: 0 6px; transition: none; color: #ffffff; background-color: #498dff; border-radius: 0; border-style: none; } menubar, .menubar { -GtkWidget-window-dragging: true; padding: 0px; background-color: #373737; background-image: none; color: rgba(225, 219, 219, 0.8); box-shadow: inset 0 -1px rgba(255, 255, 255, 0.12); } menubar:backdrop, .menubar:backdrop { color: rgba(225, 219, 219, 0.6); } menubar > menuitem, .menubar > menuitem { transition: all 0.2s cubic-bezier(0, 0, 0.2, 1); padding: 4px 8px; } menubar > menuitem menu, .menubar > menuitem menu { border-radius: 0 0 6px 6px; } menubar > menuitem menu menu, .menubar > menuitem menu menu { border-radius: 6px; } menubar > menuitem:hover, .menubar > menuitem:hover { background-color: #498dff; color: #ffffff; text-shadow: 0 -1px rgba(255, 255, 255, 0.04), -1px 0px rgba(32, 32, 32, 0.05), 1px 0px rgba(32, 32, 32, 0.05), 0px 1px rgba(32, 32, 32, 0.3), 0px 2px rgba(32, 32, 32, 0.05); } menubar > menuitem:disabled, .menubar > menuitem:disabled { color: rgba(225, 219, 219, 0.2); border-color: transparent; } menu, .menu { padding: 6px 0; border-radius: 8px; background-color: #191919; } menu separator, .csd menu separator, .menu separator, .csd .menu separator { margin: 0; min-height: 0; border-bottom: 1px solid rgba(255, 255, 255, 0.04); background-color: transparent; } menu menuitem, .menu menuitem { min-height: 20px; min-width: 40px; padding: 2px 6px; text-shadow: none; } menu menuitem:hover, .menu menuitem:hover { color: #ffffff; background-color: #498dff; text-shadow: 0 -2px rgba(255, 255, 255, 0.04), -1px 0px rgba(32, 32, 32, 0.05), 1px 0px rgba(32, 32, 32, 0.05), 0px 1px rgba(32, 32, 32, 0.3), 0px 2px rgba(32, 32, 32, 0.05); } menu menuitem:hover arrow, .menu menuitem:hover arrow { transition: none; color: #ffffff; -gtk-icon-shadow: none; } menu menuitem:hover menu arrow, .menu menuitem:hover menu arrow { color: #dedede; text-shadow: none; -gtk-icon-shadow: none; } menu menuitem:disabled, .menu menuitem:disabled { color: rgba(222, 222, 222, 0.45); } menu menuitem arrow, .menu menuitem arrow { min-height: 16px; min-width: 16px; background-color: transparent; background-image: none; border: none; color: #dedede; } menu menuitem arrow:dir(ltr), .menu menuitem arrow:dir(ltr) { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); margin-right: 0; } menu menuitem arrow:dir(rtl), .menu menuitem arrow:dir(rtl) { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic-rtl"); margin-left: 0; } menuitem accelerator { color: alpha(currentColor,0.55); } menuitem check, menuitem radio { min-height: 16px; min-width: 16px; } menuitem check:dir(ltr), menuitem radio:dir(ltr) { margin-right: 6px; margin-left: 2px; } menuitem check:dir(rtl), menuitem radio:dir(rtl) { margin-left: 6px; margin-right: 2px; } menu > arrow, .menu > arrow { min-width: 16px; min-height: 16px; padding: 2px; background-color: transparent; border-radius: 0; border: none; background-image: none; color: #dedede; } menu > arrow.top, .menu > arrow.top { margin: -8px 0 0 0; border-radius: 6px 6px 0 0; border-bottom: 1px solid rgba(255, 255, 255, 0.12); -gtk-icon-source: -gtk-icontheme("pan-up-symbolic"); } menu > arrow.bottom, .menu > arrow.bottom { margin: 0 0 -18px 0; border-radius: 0 0 6px 6px; border-top: 1px solid rgba(255, 255, 255, 0.12); -gtk-icon-source: -gtk-icontheme("pan-down-symbolic"); } menu > arrow:hover, .menu > arrow:hover { background-color: rgba(222, 222, 222, 0.08); } menu > arrow:disabled, .menu > arrow:disabled { color: transparent; background-color: transparent; border-color: transparent; } popover, popover.background { padding: 0; border-radius: 6px; background-clip: border-box; background-color: rgba(51, 51, 51, 0.98); box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.15); } .csd popover, popover, .csd popover.background, popover.background { border-radius: 6px; border: 1px solid rgba(255, 255, 255, 0.12); } popover separator, popover separator, .csd popover separator, popover.background separator, popover.background separator, .csd popover.background separator { margin: 4px -9px; min-height: 2px; border: none; background-color: rgba(255, 255, 255, 0.08); } popover > list, popover > .view, popover > iconview, popover > toolbar, popover > .inline-toolbar, popover.background > list, popover.background > .view, popover.background > iconview, popover.background > toolbar, popover.background > .inline-toolbar { border-style: none; background-color: transparent; } cursor-handle { background-color: transparent; background-image: none; box-shadow: none; border-style: none; } cursor-handle.top { -gtk-icon-source: -gtk-icontheme("selection-start-symbolic"); } cursor-handle.bottom { -gtk-icon-source: -gtk-icontheme("selection-end-symbolic"); } notebook { padding: 0; } notebook.frame { border: 1px solid rgba(255, 255, 255, 0.12); } notebook > stack:not(:only-child) { background-color: #242424; } notebook > header { padding: 0; background-color: rgba(30, 30, 30, 0.98); } notebook > header.top { box-shadow: inset 0 1px rgba(255, 255, 255, 0.12), inset 0 -1px rgba(255, 255, 255, 0.12); margin-top: -1px; } notebook > header.bottom { box-shadow: inset 0 1px rgba(255, 255, 255, 0.12), inset 0 -1px rgba(255, 255, 255, 0.12); margin-bottom: -1px; } notebook > header.right { box-shadow: inset 1px 0 rgba(255, 255, 255, 0.12), inset -1px 0 rgba(255, 255, 255, 0.12); margin-right: -1px; } notebook > header.left { box-shadow: inset 1px 0 rgba(255, 255, 255, 0.12), inset -1px 0 rgba(255, 255, 255, 0.12); margin-left: -1px; } notebook > header button.flat, notebook > header button.budgie-menu-launcher, notebook > header .budgie-panel #tasklist-button, .budgie-panel notebook > header #tasklist-button, notebook > header .budgie-panel button.flat.launcher, .budgie-panel notebook > header button.flat.launcher { min-height: 24px; min-width: 24px; padding: 0; border: none; box-shadow: none; margin: 2px; } notebook > header.top { padding: 0; } notebook > header.top > tabs > tab { padding: 2px 10px; min-width: 20px; min-height: 20px; border-radius: 0; outline-offset: -4px; } notebook > header.top > tabs > tab + tab { margin-left: -1px; } notebook > header.bottom { padding: 0; } notebook > header.bottom > tabs > tab { padding: 2px 10px; min-width: 20px; min-height: 20px; border-radius: 0; outline-offset: -4px; } notebook > header.bottom > tabs > tab + tab { margin-left: -1px; } notebook > header.right { padding: 0; } notebook > header.right > tabs > tab { padding: 2px 10px; min-width: 20px; min-height: 20px; border-radius: 0; outline-offset: -4px; } notebook > header.right > tabs > tab + tab { margin-top: -1px; } notebook > header.left { padding: 0; } notebook > header.left > tabs > tab { padding: 2px 10px; min-width: 20px; min-height: 20px; border-radius: 0; outline-offset: -4px; } notebook > header.left > tabs > tab + tab { margin-top: -1px; } notebook > header.top > tabs > arrow.up, notebook > header.bottom > tabs > arrow.up { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); } notebook > header.top > tabs > arrow.up:last-child, notebook > header.bottom > tabs > arrow.up:last-child { margin-left: 2px; } notebook > header.top > tabs > arrow.down, notebook > header.bottom > tabs > arrow.down { -gtk-icon-source: -gtk-icontheme("pan-start-symbolic"); } notebook > header.top > tabs > arrow.down:first-child, notebook > header.bottom > tabs > arrow.down:first-child { margin-right: 2px; } notebook > header.left > tabs > arrow.up, notebook > header.right > tabs > arrow.up { -gtk-icon-source: -gtk-icontheme("pan-down-symbolic"); } notebook > header.left > tabs > arrow.up:last-child, notebook > header.right > tabs > arrow.up:last-child { margin-top: 2px; } notebook > header.left > tabs > arrow.down, notebook > header.right > tabs > arrow.down { -gtk-icon-source: -gtk-icontheme("pan-up-symbolic"); } notebook > header.left > tabs > arrow.down:first-child, notebook > header.right > tabs > arrow.down:first-child { margin-bottom: 2px; } notebook > header > tabs > arrow { color: rgba(222, 222, 222, 0.45); } notebook > header > tabs > arrow:hover { color: rgba(222, 222, 222, 0.725); } notebook > header > tabs > arrow:active { color: #dedede; } notebook > header > tabs > arrow:disabled { color: rgba(222, 222, 222, 0.15); } notebook > header > tabs > tab { color: rgba(222, 222, 222, 0.45); background-color: rgba(36, 36, 36, 0); border: 1px solid transparent; } notebook > header > tabs > tab:hover:not(:checked) { color: rgba(222, 222, 222, 0.725); background-color: rgba(255, 255, 255, 0.05); border-color: rgba(68, 68, 68, 0.98); } notebook > header > tabs > tab:checked { color: #dedede; background-color: rgba(55, 55, 55, 0.98); border-color: rgba(68, 68, 68, 0.98); } notebook > header > tabs > tab button.flat, notebook > header > tabs > tab button.budgie-menu-launcher, notebook > header > tabs > tab .budgie-panel #tasklist-button, .budgie-panel notebook > header > tabs > tab #tasklist-button, notebook > header > tabs > tab .budgie-panel button.flat.launcher, .budgie-panel notebook > header > tabs > tab button.flat.launcher { min-height: 16px; min-width: 16px; border-radius: 3px; padding: 0; margin: 2px 0; color: #a2a2a2; } notebook > header > tabs > tab button.flat:hover, notebook > header > tabs > tab button.budgie-menu-launcher:hover, notebook > header > tabs > tab .budgie-panel #tasklist-button:hover, .budgie-panel notebook > header > tabs > tab #tasklist-button:hover, notebook > header > tabs > tab .budgie-panel button.flat.launcher:hover, .budgie-panel notebook > header > tabs > tab button.flat.launcher:hover { color: rgba(255, 0, 0, 0.5); background-color: rgba(222, 222, 222, 0.1); } notebook > header > tabs > tab button.flat:active, notebook > header > tabs > tab button.budgie-menu-launcher:active, notebook > header > tabs > tab .budgie-panel #tasklist-button:active, .budgie-panel notebook > header > tabs > tab #tasklist-button:active, notebook > header > tabs > tab .budgie-panel button.flat.launcher:active, .budgie-panel notebook > header > tabs > tab button.flat.launcher:active, notebook > header > tabs > tab button.flat:active:hover, notebook > header > tabs > tab button.budgie-menu-launcher:active:hover, notebook > header > tabs > tab .budgie-panel #tasklist-button:active:hover, .budgie-panel notebook > header > tabs > tab #tasklist-button:active:hover, .budgie-panel notebook > header > tabs > tab button.flat.launcher:active:hover { color: rgba(204, 0, 0, 0.5); background-color: rgba(222, 222, 222, 0.2); } scrollbar { background-color: transparent; transition: 300ms cubic-bezier(0.25, 0.46, 0.45, 0.94); border: none; } * { -GtkScrollbar-has-backward-stepper: false; -GtkScrollbar-has-forward-stepper: false; } scrollbar button { border: none; } scrollbar.vertical button.down { -gtk-icon-source: -gtk-icontheme("pan-down-symbolic"); } scrollbar.vertical button.up { -gtk-icon-source: -gtk-icontheme("pan-up-symbolic"); } scrollbar.horizontal button.down { -gtk-icon-source: -gtk-icontheme("pan-right-symbolic"); } scrollbar.horizontal button.up { -gtk-icon-source: -gtk-icontheme("pan-left-symbolic"); } scrollbar slider { min-width: 4px; min-height: 4px; margin: -1px; border: 4px solid transparent; border-radius: 8px; background-clip: padding-box; background-color: #777777; } scrollbar slider:hover { background-color: #666666; } scrollbar slider:hover:active { background-color: rgba(132, 132, 132, 0.98); } scrollbar slider:disabled { background-color: transparent; } scrollbar.fine-tune slider { min-width: 4px; min-height: 4px; } scrollbar.fine-tune.horizontal slider { border-width: 5px 4px; } scrollbar.fine-tune.vertical slider { border-width: 4px 5px; } scrollbar.overlay-indicator:not(.dragging):not(.hovering) { opacity: 0.4; border-color: transparent; background-color: transparent; } scrollbar.overlay-indicator:not(.dragging):not(.hovering) slider { margin: 0; min-width: 4px; min-height: 4px; background-color: #ababab; border: 1px solid rgba(255, 255, 255, 0.12); } scrollbar.overlay-indicator:not(.dragging):not(.hovering).horizontal slider { margin: 0 3px; min-width: 40px; } scrollbar.overlay-indicator:not(.dragging):not(.hovering).vertical slider { margin: 3px 0; min-height: 40px; } scrollbar.overlay-indicator.dragging, scrollbar.overlay-indicator.hovering { opacity: 0.99; } scrollbar.horizontal slider { min-width: 40px; } scrollbar.vertical slider { min-height: 40px; } row switch:not(:indeterminate), row switch:not(:indeterminate) slider:not(:indeterminate), .raven .raven-background switch:not(:indeterminate), .raven .raven-background switch:not(:indeterminate) slider:not(:indeterminate), row switch:disabled:not(:indeterminate), row switch:not(:indeterminate) slider:disabled:not(:indeterminate), .raven .raven-background switch:disabled:not(:indeterminate), .raven .raven-background switch:not(:indeterminate) slider:disabled:not(:indeterminate) { padding: 0; border: none; color: transparent; background: unset; background-image: unset; background-repeat: no-repeat; background-position: right center; box-shadow: none; animation: none; font-size: 0; outline-color: transparent; } row switch:dir(rtl):not(:indeterminate), row switch:not(:indeterminate) slider:dir(rtl):not(:indeterminate), .raven .raven-background switch:dir(rtl):not(:indeterminate), .raven .raven-background switch:not(:indeterminate) slider:dir(rtl):not(:indeterminate), row switch:disabled:dir(rtl):not(:indeterminate), row switch:not(:indeterminate) slider:disabled:dir(rtl):not(:indeterminate), .raven .raven-background switch:disabled:dir(rtl):not(:indeterminate), .raven .raven-background switch:not(:indeterminate) slider:disabled:dir(rtl):not(:indeterminate) { background-position: left center; } row switch:not(:indeterminate) { min-width: 40px; min-height: 24px; margin: 0; background-size: 40px 24px; transition: all 350ms cubic-bezier(0.25, 0.46, 0.45, 0.94); background-image: -gtk-scaled(url("assets/switch.png"), url("assets/switch@2.png")); } row switch:not(:indeterminate) slider:not(:indeterminate) { margin: 0; background-size: 40px 24px; } row switch:not(:indeterminate):hover { transition: all 350ms cubic-bezier(0.25, 0.46, 0.45, 0.94); background-image: -gtk-scaled(url("assets/switch-hover.png"), url("assets/switch-hover@2.png")); } row switch:not(:indeterminate):checked { transition: all 350ms cubic-bezier(0.25, 0.46, 0.45, 0.94); background-image: -gtk-scaled(url("assets/switch-active.png"), url("assets/switch-active@2.png")); } row switch:not(:indeterminate):checked:hover { background-image: -gtk-scaled(url("assets/switch-active-hover.png"), url("assets/switch-active-hover@2.png")); } row switch:not(:indeterminate):checked:disabled, row switch:not(:indeterminate):checked:disabled:hover { background-image: -gtk-scaled(url("assets/switch-active-insensitive.png"), url("assets/switch-active-insensitive@2.png")); } row switch:not(:indeterminate):disabled, row switch:not(:indeterminate):disabled:hover { background-image: -gtk-scaled(url("assets/switch-insensitive.png"), url("assets/switch-insensitive@2.png")); } .raven .raven-background switch:not(:indeterminate) { min-width: 50px; min-height: 20px; margin: 6px 2px; background-size: 50px 20px; transition: all 350ms cubic-bezier(0.25, 0.46, 0.45, 0.94); background-image: -gtk-scaled(url("assets/toggle-off.svg")); } .raven .raven-background switch:not(:indeterminate) slider:not(:indeterminate) { margin: 0; background-size: 50px 20px; } .raven .raven-background switch:not(:indeterminate):checked { transition: all 350ms cubic-bezier(0.25, 0.46, 0.45, 0.94); background-image: -gtk-scaled(url("assets/toggle-on.svg")); } .raven .raven-background switch:not(:indeterminate):checked:disabled { background-image: -gtk-scaled(url("assets/toggle-on-disabled.svg")); } .raven .raven-background switch:not(:indeterminate):disabled { background-image: -gtk-scaled(url("assets/toggle-off-disabled.svg")); } switch { transition: all 0.3s cubic-bezier(0, 0, 0.2, 1), box-shadow 0.2s cubic-bezier(0, 0, 0.2, 1); margin: 6px 0; border-radius: 50px; background-color: alpha(currentColor,0.3); background-clip: padding-box; font-size: 0; } switch:disabled { color: alpha(currentColor,0.4); } switch:checked { animation: switch_ripple_effect 0.3s cubic-bezier(0, 0, 0.2, 1); background-color: #71c837; } switch:checked:disabled { background-color: alpha(#71c837,0.5); color: rgba(222, 222, 222, 0.45); } switch slider { transition: all 0.3s cubic-bezier(0, 0, 0.2, 1), box-shadow 0.2s cubic-bezier(0, 0, 0.2, 1), box-shadow 0.2s cubic-bezier(0, 0, 0.2, 1), margin 0; min-width: 18px; min-height: 18px; margin: 2px 0 2px 2px; border-radius: 50px; -gtk-outline-radius: 50px; background-color: white; box-shadow: 0px 1px 2px 0px rgba(16, 16, 16, 0.15), 0px 2px 3px 0px rgba(16, 16, 16, 0.1); } switch:hover slider { box-shadow: 0px 2px 3px 0px rgba(16, 16, 16, 0.2), 0px 3px 5px 0px rgba(16, 16, 16, 0.15); } switch:checked slider { margin: 2px 2px 2px 0; background-color: #ffffff; } switch:checked:disabled slider { animation: none; } .check, check, treeview.check { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-unchecked-dark.png"), url("assets/checkbox-unchecked-dark@2.png")); } .osd check, filechooser actionbar check { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-unchecked-dark.png"), url("assets/checkbox-unchecked-dark@2.png")); } menuitem check:hover, .view check:selected, iconview check:selected, treeview.check:selected, row:selected check, infobar check { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-unchecked-selected.png"), url("assets/checkbox-unchecked-selected@2.png")); } .check:disabled, check:disabled, treeview.check:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-unchecked-insensitive-dark.png"), url("assets/checkbox-unchecked-insensitive-dark@2.png")); } .osd check:disabled, filechooser actionbar check:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-unchecked-insensitive-dark.png"), url("assets/checkbox-unchecked-insensitive-dark@2.png")); } menuitem check:disabled:hover, .view check:disabled:selected, iconview check:disabled:selected, treeview.check:disabled:selected, row:selected check:disabled, infobar check:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-unchecked-insensitive-selected.png"), url("assets/checkbox-unchecked-insensitive-selected@2.png")); } .check:indeterminate, check:indeterminate, treeview.check:indeterminate { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-mixed-dark.png"), url("assets/checkbox-mixed-dark@2.png")); } .osd check:indeterminate, filechooser actionbar check:indeterminate { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-mixed-dark.png"), url("assets/checkbox-mixed-dark@2.png")); } menuitem check:indeterminate:hover, .view check:indeterminate:selected, iconview check:indeterminate:selected, treeview.check:indeterminate:selected, row:selected check:indeterminate, infobar check:indeterminate { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-mixed-selected.png"), url("assets/checkbox-mixed-selected@2.png")); } .check:indeterminate:disabled, check:indeterminate:disabled, treeview.check:indeterminate:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-mixed-insensitive-dark.png"), url("assets/checkbox-mixed-insensitive-dark@2.png")); } .osd check:indeterminate:disabled, filechooser actionbar check:indeterminate:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-mixed-insensitive-dark.png"), url("assets/checkbox-mixed-insensitive-dark@2.png")); } menuitem check:indeterminate:disabled:hover, .view check:indeterminate:disabled:selected, iconview check:indeterminate:disabled:selected, treeview.check:indeterminate:disabled:selected, row:selected check:indeterminate:disabled, infobar check:indeterminate:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-mixed-insensitive-selected.png"), url("assets/checkbox-mixed-insensitive-selected@2.png")); } .check:checked, check:checked, treeview.check:checked { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-checked-dark.png"), url("assets/checkbox-checked-dark@2.png")); } .osd check:checked, filechooser actionbar check:checked { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-checked-dark.png"), url("assets/checkbox-checked-dark@2.png")); } menuitem check:checked:hover, .view check:checked:selected, iconview check:checked:selected, treeview.check:checked:selected, row:selected check:checked, infobar check:checked { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-checked-selected.png"), url("assets/checkbox-checked-selected@2.png")); } .check:checked:disabled, check:checked:disabled, treeview.check:checked:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-checked-insensitive-dark.png"), url("assets/checkbox-checked-insensitive-dark@2.png")); } .osd check:checked:disabled, filechooser actionbar check:checked:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-checked-insensitive-dark.png"), url("assets/checkbox-checked-insensitive-dark@2.png")); } menuitem check:checked:disabled:hover, .view check:checked:disabled:selected, iconview check:checked:disabled:selected, treeview.check:checked:disabled:selected, row:selected check:checked:disabled, infobar check:checked:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-checked-insensitive-selected.png"), url("assets/checkbox-checked-insensitive-selected@2.png")); } .radio, radio, treeview.radio { -gtk-icon-source: -gtk-scaled(url("assets/radio-unchecked-dark.png"), url("assets/radio-unchecked-dark@2.png")); } .osd radio, filechooser actionbar radio { -gtk-icon-source: -gtk-scaled(url("assets/radio-unchecked-dark.png"), url("assets/radio-unchecked-dark@2.png")); } menuitem radio:hover, .view radio:selected, iconview radio:selected, treeview.radio:selected, row:selected radio, infobar radio { -gtk-icon-source: -gtk-scaled(url("assets/radio-unchecked-selected.png"), url("assets/radio-unchecked-selected@2.png")); } .radio:disabled, radio:disabled, treeview.radio:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-unchecked-insensitive-dark.png"), url("assets/radio-unchecked-insensitive-dark@2.png")); } .osd radio:disabled, filechooser actionbar radio:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-unchecked-insensitive-dark.png"), url("assets/radio-unchecked-insensitive-dark@2.png")); } menuitem radio:disabled:hover, .view radio:disabled:selected, iconview radio:disabled:selected, treeview.radio:disabled:selected, row:selected radio:disabled, infobar radio:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-unchecked-insensitive-selected.png"), url("assets/radio-unchecked-insensitive-selected@2.png")); } .radio:indeterminate, radio:indeterminate, treeview.radio:indeterminate { -gtk-icon-source: -gtk-scaled(url("assets/radio-mixed-dark.png"), url("assets/radio-mixed-dark@2.png")); } .osd radio:indeterminate, filechooser actionbar radio:indeterminate { -gtk-icon-source: -gtk-scaled(url("assets/radio-mixed-dark.png"), url("assets/radio-mixed-dark@2.png")); } menuitem radio:indeterminate:hover, .view radio:indeterminate:selected, iconview radio:indeterminate:selected, treeview.radio:indeterminate:selected, row:selected radio:indeterminate, infobar radio:indeterminate { -gtk-icon-source: -gtk-scaled(url("assets/radio-mixed-selected.png"), url("assets/radio-mixed-selected@2.png")); } .radio:indeterminate:disabled, radio:indeterminate:disabled, treeview.radio:indeterminate:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-mixed-insensitive-dark.png"), url("assets/radio-mixed-insensitive-dark@2.png")); } .osd radio:indeterminate:disabled, filechooser actionbar radio:indeterminate:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-mixed-insensitive-dark.png"), url("assets/radio-mixed-insensitive-dark@2.png")); } menuitem radio:indeterminate:disabled:hover, .view radio:indeterminate:disabled:selected, iconview radio:indeterminate:disabled:selected, treeview.radio:indeterminate:disabled:selected, row:selected radio:indeterminate:disabled, infobar radio:indeterminate:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-mixed-insensitive-selected.png"), url("assets/radio-mixed-insensitive-selected@2.png")); } .radio:checked, radio:checked, treeview.radio:checked { -gtk-icon-source: -gtk-scaled(url("assets/radio-checked-dark.png"), url("assets/radio-checked-dark@2.png")); } .osd radio:checked, filechooser actionbar radio:checked { -gtk-icon-source: -gtk-scaled(url("assets/radio-checked-dark.png"), url("assets/radio-checked-dark@2.png")); } menuitem radio:checked:hover, .view radio:checked:selected, iconview radio:checked:selected, treeview.radio:checked:selected, row:selected radio:checked, infobar radio:checked { -gtk-icon-source: -gtk-scaled(url("assets/radio-checked-selected.png"), url("assets/radio-checked-selected@2.png")); } .radio:checked:disabled, radio:checked:disabled, treeview.radio:checked:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-checked-insensitive-dark.png"), url("assets/radio-checked-insensitive-dark@2.png")); } .osd radio:checked:disabled, filechooser actionbar radio:checked:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-checked-insensitive-dark.png"), url("assets/radio-checked-insensitive-dark@2.png")); } menuitem radio:checked:disabled:hover, .view radio:checked:disabled:selected, iconview radio:checked:disabled:selected, treeview.radio:checked:disabled:selected, row:selected radio:checked:disabled, infobar radio:checked:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-checked-insensitive-selected.png"), url("assets/radio-checked-insensitive-selected@2.png")); } .view.content-view.check:not(list), iconview.content-view.check:not(list) { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-selectionmode-dark.png"), url("assets/checkbox-selectionmode-dark@2.png")); background-color: transparent; } .view.content-view.check:checked:not(list), iconview.content-view.check:checked:not(list) { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-checked-selectionmode-dark.png"), url("assets/checkbox-checked-selectionmode-dark@2.png")); background-color: transparent; } checkbutton.text-button, radiobutton.text-button { padding: 2px 0; outline-offset: 0; } checkbutton.text-button:hover, radiobutton.text-button:hover { color: #b8b8b8; } checkbutton.text-button:disabled, radiobutton.text-button:disabled { color: rgba(222, 222, 222, 0.45); } checkbutton label:not(:only-child):first-child, radiobutton label:not(:only-child):first-child { margin-left: 4px; } checkbutton label:not(:only-child):last-child, radiobutton label:not(:only-child):last-child { margin-right: 4px; } check, radio { min-width: 16px; min-height: 16px; margin: 0 2px; } check:only-child, menu menuitem check, radio:only-child, menu menuitem radio { margin: 0; } scale { min-height: 15px; min-width: 15px; padding: 3px; } scale.horizontal trough { padding: 0 4px; } scale.horizontal highlight, scale.horizontal fill { margin: 0 -4px; } scale.vertical trough { padding: 4px 0; } scale.vertical highlight, scale.vertical fill { margin: -4px 0; } scale slider { min-height: 15px; min-width: 15px; margin: -7px; } scale.fine-tune slider { margin: -4px; } scale.fine-tune fill, scale.fine-tune highlight, scale.fine-tune trough { border-radius: 5px; -gtk-outline-radius: 7px; } scale trough { outline-offset: 2px; -gtk-outline-radius: 6px; border-radius: 5px; background-color: rgba(0, 0, 0, 0.2); } scale trough:disabled { background-color: rgba(0, 0, 0, 0.12); } .osd scale trough { background-color: rgba(0, 0, 0, 0.2); } .osd scale trough highlight { background-color: #498dff; } menuitem:hover scale trough, row:selected scale trough, infobar scale trough { background-color: rgba(0, 0, 0, 0.2); } menuitem:hover scale trough highlight, row:selected scale trough highlight, infobar scale trough highlight { background-color: #ffffff; } menuitem:hover scale trough highlight:disabled, row:selected scale trough highlight:disabled, infobar scale trough highlight:disabled { background-color: #adccff; } menuitem:hover scale trough:disabled, row:selected scale trough:disabled, infobar scale trough:disabled { background-color: rgba(0, 0, 0, 0.1); } scale highlight { border-radius: 5px; background-color: #498dff; } scale highlight:disabled { background-color: rgba(73, 141, 255, 0.55); } scale fill { border-radius: 5px; background-color: rgba(73, 141, 255, 0.5); } scale fill:disabled { background-color: transparent; } scale slider { background-color: #ffffff; border: 1px solid rgba(255, 255, 255, 0.12); border-radius: 100%; box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.1), 0px 1px 2px 0px rgba(16, 16, 16, 0.05); transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); transition-property: background, border; } scale slider:hover { background-color: white; border-color: rgba(255, 255, 255, 0.12); box-shadow: 0px 1px 2px 0px rgba(16, 16, 16, 0.1), 0px 2px 2px 0px rgba(16, 16, 16, 0.05); } scale slider:active { background-clip: border-box; background-color: #ffffff; border-color: rgba(255, 255, 255, 0.12); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } scale slider:disabled { background-color: #f2f2f2; border-color: rgba(242, 242, 242, 0.12); } menuitem:hover scale slider, row:selected scale slider, infobar scale slider { background-clip: border-box; background-color: #ffffff; border-color: #ffffff; } menuitem:hover scale slider:hover, row:selected scale slider:hover, infobar scale slider:hover { background-color: #e4eeff; border-color: #e4eeff; } menuitem:hover scale slider:active, row:selected scale slider:active, infobar scale slider:active { background-color: #a4c6ff; border-color: #a4c6ff; } menuitem:hover scale slider:disabled, row:selected scale slider:disabled, infobar scale slider:disabled { background-color: #adccff; border-color: #adccff; } .osd scale slider { background-clip: border-box; background-color: #ffffff; border-color: rgba(255, 255, 255, 0.12); } .osd scale slider:hover { background-color: white; border-color: rgba(255, 255, 255, 0.12); box-shadow: 0px 1px 2px 0px rgba(16, 16, 16, 0.1), 0px 2px 2px 0px rgba(16, 16, 16, 0.05); } .osd scale slider:active { background-color: #f7f7f7; border-color: rgba(255, 255, 255, 0.12); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } scale value { color: alpha(currentColor,0.4); } scale marks { color: alpha(currentColor,0.4); } scale marks.top { margin-bottom: 1px; margin-top: -4px; } scale marks.bottom { margin-top: 1px; margin-bottom: -4px; } scale marks.top { margin-right: 1px; margin-left: -4px; } scale marks.bottom { margin-left: 1px; margin-right: -4px; } scale.fine-tune marks.top { margin-bottom: 0px; margin-top: -2px; } scale.fine-tune marks.bottom { margin-top: 0px; margin-bottom: -2px; } scale.fine-tune marks.top { margin-right: 0px; margin-left: -2px; } scale.fine-tune marks.bottom { margin-left: 0px; margin-right: -2px; } scale.horizontal indicator { min-height: 3px; min-width: 1px; } scale.horizontal.fine-tune indicator { min-height: 2px; } scale.vertical indicator { min-height: 1px; min-width: 3px; } scale.vertical.fine-tune indicator { min-width: 2px; } scale.horizontal.marks-before:not(.marks-after) slider { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-horz-scale-has-marks-above.png"), url("assets/slider-horz-scale-has-marks-above@2.png")); min-height: 26px; min-width: 24px; margin-top: -14px; background-position: top; background-repeat: no-repeat; box-shadow: none; } scale.horizontal.marks-before:not(.marks-after).fine-tune slider { margin: -7px; margin-top: -11px; } scale.horizontal.marks-before:not(.marks-after) slider:hover { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-horz-scale-has-marks-above-hover.png"), url("assets/slider-horz-scale-has-marks-above-hover@2.png")); min-height: 26px; min-width: 24px; margin-top: -14px; background-position: top; background-repeat: no-repeat; box-shadow: none; } scale.horizontal.marks-before:not(.marks-after).fine-tune slider { margin: -7px; margin-top: -11px; } scale.horizontal.marks-before:not(.marks-after) slider:active { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-horz-scale-has-marks-above-active.png"), url("assets/slider-horz-scale-has-marks-above-active@2.png")); min-height: 26px; min-width: 24px; margin-top: -14px; background-position: top; background-repeat: no-repeat; box-shadow: none; } scale.horizontal.marks-before:not(.marks-after).fine-tune slider { margin: -7px; margin-top: -11px; } scale.horizontal.marks-before:not(.marks-after) slider:disabled { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-horz-scale-has-marks-above-insensitive.png"), url("assets/slider-horz-scale-has-marks-above-insensitive@2.png")); min-height: 26px; min-width: 24px; margin-top: -14px; background-position: top; background-repeat: no-repeat; box-shadow: none; } scale.horizontal.marks-before:not(.marks-after).fine-tune slider { margin: -7px; margin-top: -11px; } scale.horizontal.marks-after:not(.marks-before) slider { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-horz-scale-has-marks-below.png"), url("assets/slider-horz-scale-has-marks-below@2.png")); min-height: 26px; min-width: 24px; margin-bottom: -14px; background-position: bottom; background-repeat: no-repeat; box-shadow: none; } scale.horizontal.marks-after:not(.marks-before).fine-tune slider { margin: -7px; margin-bottom: -11px; } scale.horizontal.marks-after:not(.marks-before) slider:hover { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-horz-scale-has-marks-below-hover.png"), url("assets/slider-horz-scale-has-marks-below-hover@2.png")); min-height: 26px; min-width: 24px; margin-bottom: -14px; background-position: bottom; background-repeat: no-repeat; box-shadow: none; } scale.horizontal.marks-after:not(.marks-before).fine-tune slider { margin: -7px; margin-bottom: -11px; } scale.horizontal.marks-after:not(.marks-before) slider:active { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-horz-scale-has-marks-below-active.png"), url("assets/slider-horz-scale-has-marks-below-active@2.png")); min-height: 26px; min-width: 24px; margin-bottom: -14px; background-position: bottom; background-repeat: no-repeat; box-shadow: none; } scale.horizontal.marks-after:not(.marks-before).fine-tune slider { margin: -7px; margin-bottom: -11px; } scale.horizontal.marks-after:not(.marks-before) slider:disabled { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-horz-scale-has-marks-below-insensitive.png"), url("assets/slider-horz-scale-has-marks-below-insensitive@2.png")); min-height: 26px; min-width: 24px; margin-bottom: -14px; background-position: bottom; background-repeat: no-repeat; box-shadow: none; } scale.horizontal.marks-after:not(.marks-before).fine-tune slider { margin: -7px; margin-bottom: -11px; } scale.vertical.marks-before:not(.marks-after) slider { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-vert-scale-has-marks-above.png"), url("assets/slider-vert-scale-has-marks-above@2.png")); min-height: 24px; min-width: 26px; margin-left: -14px; background-position: left bottom; background-repeat: no-repeat; box-shadow: none; } scale.vertical.marks-before:not(.marks-after).fine-tune slider { margin: -7px; margin-left: -11px; } scale.vertical.marks-before:not(.marks-after) slider:hover { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-vert-scale-has-marks-above-hover.png"), url("assets/slider-vert-scale-has-marks-above-hover@2.png")); min-height: 24px; min-width: 26px; margin-left: -14px; background-position: left bottom; background-repeat: no-repeat; box-shadow: none; } scale.vertical.marks-before:not(.marks-after).fine-tune slider { margin: -7px; margin-left: -11px; } scale.vertical.marks-before:not(.marks-after) slider:active { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-vert-scale-has-marks-above-active.png"), url("assets/slider-vert-scale-has-marks-above-active@2.png")); min-height: 24px; min-width: 26px; margin-left: -14px; background-position: left bottom; background-repeat: no-repeat; box-shadow: none; } scale.vertical.marks-before:not(.marks-after).fine-tune slider { margin: -7px; margin-left: -11px; } scale.vertical.marks-before:not(.marks-after) slider:disabled { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-vert-scale-has-marks-above-insensitive.png"), url("assets/slider-vert-scale-has-marks-above-insensitive@2.png")); min-height: 24px; min-width: 26px; margin-left: -14px; background-position: left bottom; background-repeat: no-repeat; box-shadow: none; } scale.vertical.marks-before:not(.marks-after).fine-tune slider { margin: -7px; margin-left: -11px; } scale.vertical.marks-after:not(.marks-before) slider { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-vert-scale-has-marks-below.png"), url("assets/slider-vert-scale-has-marks-below@2.png")); min-height: 24px; min-width: 26px; margin-right: -14px; background-position: right bottom; background-repeat: no-repeat; box-shadow: none; } scale.vertical.marks-after:not(.marks-before).fine-tune slider { margin: -7px; margin-right: -11px; } scale.vertical.marks-after:not(.marks-before) slider:hover { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-vert-scale-has-marks-below-hover.png"), url("assets/slider-vert-scale-has-marks-below-hover@2.png")); min-height: 24px; min-width: 26px; margin-right: -14px; background-position: right bottom; background-repeat: no-repeat; box-shadow: none; } scale.vertical.marks-after:not(.marks-before).fine-tune slider { margin: -7px; margin-right: -11px; } scale.vertical.marks-after:not(.marks-before) slider:active { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-vert-scale-has-marks-below-active.png"), url("assets/slider-vert-scale-has-marks-below-active@2.png")); min-height: 24px; min-width: 26px; margin-right: -14px; background-position: right bottom; background-repeat: no-repeat; box-shadow: none; } scale.vertical.marks-after:not(.marks-before).fine-tune slider { margin: -7px; margin-right: -11px; } scale.vertical.marks-after:not(.marks-before) slider:disabled { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-vert-scale-has-marks-below-insensitive.png"), url("assets/slider-vert-scale-has-marks-below-insensitive@2.png")); min-height: 24px; min-width: 26px; margin-right: -14px; background-position: right bottom; background-repeat: no-repeat; box-shadow: none; } scale.vertical.marks-after:not(.marks-before).fine-tune slider { margin: -7px; margin-right: -11px; } progressbar { padding: 0; font-size: smaller; color: rgba(222, 222, 222, 0.7); } progressbar.osd { min-width: 3px; min-height: 3px; background-color: transparent; } progressbar.osd trough { border-style: none; background-color: transparent; box-shadow: none; } progressbar progress { min-height: 4px; min-width: 4px; background-color: #498dff; border: none; border-radius: 5px; box-shadow: none; } row:selected progressbar progress, infobar progressbar progress { background-color: #ffffff; } progressbar trough { min-height: 4px; min-width: 4px; border: none; border-radius: 5px; background-color: #262626; } row:selected progressbar trough, infobar progressbar trough { background-color: rgba(0, 0, 0, 0.2); } levelbar block { min-width: 32px; min-height: 1px; } levelbar.vertical block { min-width: 1px; min-height: 32px; } levelbar trough { border: none; padding: 3px; border-radius: 5px; background-color: #262626; } levelbar.horizontal.discrete block { margin: 0 1px; } levelbar.vertical.discrete block { margin: 1px 0; } levelbar block:not(.empty) { border: 1px solid #498dff; background-color: #498dff; border-radius: 5px; } levelbar block.low { border-color: #F27835; background-color: #F27835; } levelbar block.high { border-color: #498dff; background-color: #498dff; } levelbar block.full { border-color: #71c837; background-color: #71c837; } levelbar block.empty { background-color: #242424; border-color: #242424; } printdialog paper { border: 1px solid rgba(255, 255, 255, 0.12); background: #242424; padding: 0; } printdialog .dialog-action-box { margin: 12px; } frame > border, .frame { margin: 0; padding: 0; border-radius: 0; border: 1px solid rgba(255, 255, 255, 0.12); } frame.flat > border, frame > border.flat, .frame.flat { border-style: none; } scrolledwindow viewport.frame { border-style: none; } scrolledwindow overshoot.top { background-image: -gtk-gradient(radial, center top, 0, center top, 0.6, from(rgba(73, 141, 255, 0.2)), to(rgba(73, 141, 255, 0))); background-size: 100% 60%; background-repeat: no-repeat; background-position: center top; background-color: transparent; border: none; box-shadow: none; } scrolledwindow overshoot.bottom { background-image: -gtk-gradient(radial, center bottom, 0, center bottom, 0.6, from(rgba(73, 141, 255, 0.2)), to(rgba(73, 141, 255, 0))); background-size: 100% 60%; background-repeat: no-repeat; background-position: center bottom; background-color: transparent; border: none; box-shadow: none; } scrolledwindow overshoot.left { background-image: -gtk-gradient(radial, left center, 0, left center, 0.6, from(rgba(73, 141, 255, 0.2)), to(rgba(73, 141, 255, 0))); background-size: 60% 100%; background-repeat: no-repeat; background-position: left center; background-color: transparent; border: none; box-shadow: none; } scrolledwindow overshoot.right { background-image: -gtk-gradient(radial, right center, 0, right center, 0.6, from(rgba(73, 141, 255, 0.2)), to(rgba(73, 141, 255, 0))); background-size: 60% 100%; background-repeat: no-repeat; background-position: right center; background-color: transparent; border: none; box-shadow: none; } scrolledwindow undershoot.top { background-color: transparent; background-image: linear-gradient(to left, rgba(255, 255, 255, 0.2) 50%, rgba(0, 0, 0, 0.2) 50%); padding-top: 1px; background-size: 10px 1px; background-repeat: repeat-x; background-origin: content-box; background-position: center top; border: none; } scrolledwindow undershoot.bottom { background-color: transparent; background-image: linear-gradient(to left, rgba(255, 255, 255, 0.2) 50%, rgba(0, 0, 0, 0.2) 50%); padding-bottom: 1px; background-size: 10px 1px; background-repeat: repeat-x; background-origin: content-box; background-position: center bottom; border: none; } scrolledwindow undershoot.left { background-color: transparent; background-image: linear-gradient(to top, rgba(255, 255, 255, 0.2) 50%, rgba(0, 0, 0, 0.2) 50%); padding-left: 1px; background-size: 1px 10px; background-repeat: repeat-y; background-origin: content-box; background-position: left center; border: none; } scrolledwindow undershoot.right { background-color: transparent; background-image: linear-gradient(to top, rgba(255, 255, 255, 0.2) 50%, rgba(0, 0, 0, 0.2) 50%); padding-right: 1px; background-size: 1px 10px; background-repeat: repeat-y; background-origin: content-box; background-position: right center; border: none; } scrolledwindow junction { border-color: transparent; border-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.12) 1px, transparent 1px) 0 0 0 0/0 0 stretch; background-color: #272727; } scrolledwindow junction:dir(rtl) { border-image-slice: 0 1 0 0; } separator { width: 0; } list { background-color: #242424; border-color: rgba(255, 255, 255, 0.12); } list row { padding: 2px; } row:not(:hover) { transition: all 300ms cubic-bezier(0.25, 0.46, 0.45, 0.94); } row.activatable.has-open-popup, .budgie-menu button.has-open-popup, row.activatable:hover, .budgie-menu button:hover { background-color: rgba(255, 255, 255, 0.03); } row.activatable:active, .budgie-menu button:active { color: #dedede; } row.activatable:disabled, .budgie-menu button:disabled { color: rgba(222, 222, 222, 0.45); } row.activatable:disabled image, .budgie-menu button:disabled image { color: inherit; } row.activatable:selected:active, .budgie-menu button:selected:active { color: #ffffff; } row.activatable:selected.has-open-popup, .budgie-menu button:selected.has-open-popup, row.activatable:selected:hover, .budgie-menu button:selected:hover { background-color: #427fe6; } .app-notification { padding: 16px; margin: 0 8px 8px 8px; color: #dedede; background-color: #333333; background-image: linear-gradient(0deg, #333333 0%, #333333 85%, #262626 95%, #0d0d0d 100%); border-radius: 0; border: none; box-shadow: 0px 1px 2px 0px rgba(16, 16, 16, 0.15), 0px 2px 3px 0px rgba(16, 16, 16, 0.1), 0 0 0 1px rgba(255, 255, 255, 0.12); } .app-notification border { border: none; } .app-notification button { padding: 0; margin: 0 0 0 0; min-height: 24px; min-width: 24px; border-radius: 100px; -gtk-outline-radius: 100px; } .app-notification button:hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); } .app-notification button:active, .app-notification button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } .app-notification button:disabled { background-color: transparent; } .app-notification button:disabled label, .app-notification button:disabled { color: rgba(222, 222, 222, 0.45); } expander arrow { min-width: 16px; min-height: 16px; -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); } expander arrow:dir(rtl) { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic-rtl"); } expander arrow:hover { color: white; } expander arrow:checked { -gtk-icon-source: -gtk-icontheme("pan-down-symbolic"); } calendar { color: #dedede; border: 1px solid rgba(255, 255, 255, 0.12); border-radius: 5px; padding: 2px 6px; margin: 0; } calendar:selected { border-radius: 50px; } calendar:disabled { color: rgba(222, 222, 222, 0.45); } calendar.header { color: #dedede; border: none; } calendar.button { color: rgba(222, 222, 222, 0.45); } calendar.button:hover { color: #dedede; } calendar.button:disabled { color: rgba(222, 222, 222, 0.45); } calendar:indeterminate { color: rgba(222, 222, 222, 0.55); } calendar.highlight { color: rgba(222, 222, 222, 0.65); font-weight: 500; } messagedialog .titlebar { min-height: 20px; background-color: rgba(55, 55, 55, 0.98); border-bottom: 1px solid #484848; } messagedialog .dialog-action-area button { padding: 5px 8px 6px 8px; min-height: 0; } messagedialog.csd.background { border-bottom-left-radius: 6px; border-bottom-right-radius: 6px; border: none; } messagedialog.csd .dialog-action-area button { border-bottom-style: none; background-image: none; } messagedialog.csd .dialog-action-area button:not(.suggested-action):not(.destructive-action):hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); } messagedialog.csd .dialog-action-area button:not(.suggested-action):not(.destructive-action):active, messagedialog.csd .dialog-action-area button:not(.suggested-action):not(.destructive-action):checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); text-shadow: 0 -1px rgba(255, 255, 255, 0.04), -1px 0px rgba(32, 32, 32, 0.05), 1px 0px rgba(32, 32, 32, 0.05), 0px 1px rgba(32, 32, 32, 0.3), 0px 2px rgba(32, 32, 32, 0.05); } messagedialog.csd .dialog-action-area button { border-radius: 0; border-right-style: none; } messagedialog.csd .dialog-action-area button:last-child { border-radius: 0 0 6px 0; border-right-style: none; } messagedialog.csd .dialog-action-area button:first-child { border-radius: 0 0 0 6px; border-left-style: none; } messagedialog.csd .dialog-action-area button:only-child { border-radius: 0 0 6px 6px; border-left-style: none; border-right-style: none; } filechooser #pathbarbox { border-bottom: 1px solid rgba(255, 255, 255, 0); } filechooserbutton:drop(active) { box-shadow: none; border-color: transparent; } .sidebar { border-style: none; background-color: #333333; } stacksidebar.sidebar:dir(ltr) list, stacksidebar.sidebar.left list, stacksidebar.sidebar.left:dir(rtl) list, .sidebar:dir(ltr), .sidebar.left, .sidebar.left:dir(rtl) { border-right: 1px solid rgba(255, 255, 255, 0.12); border-left-style: none; } stacksidebar.sidebar:dir(rtl) list, stacksidebar.sidebar.right list, .sidebar:dir(rtl), .sidebar.right { border-left: 1px solid rgba(255, 255, 255, 0.12); border-right-style: none; } .sidebar list { background-color: transparent; } paned .sidebar.left, paned .sidebar.right, paned .sidebar.left:dir(rtl), paned .sidebar:dir(rtl), paned .sidebar:dir(ltr), paned .sidebar { border-style: none; } stacksidebar row { padding: 4px 4px; } stacksidebar row > label { padding-left: 6px; padding-right: 6px; } stacksidebar row.needs-attention > label { background-size: 6px 6px, 0 0; } placessidebar > viewport.frame { border-style: none; } placessidebar row { min-height: 24px; padding: 2px 2px 2px 10px; } placessidebar row > revealer { padding: 0 10px; } placessidebar row image.sidebar-icon:dir(ltr) { padding-right: 8px; } placessidebar row image.sidebar-icon:dir(rtl) { padding-left: 8px; } placessidebar row label.sidebar-label:dir(ltr) { padding-right: 2px; } placessidebar row label.sidebar-label:dir(rtl) { padding-left: 2px; } button.sidebar-button { min-width: 22px; min-height: 22px; margin-top: 2px; margin-bottom: 2px; padding: 0; border-radius: 100px; -gtk-outline-radius: 100px; } button.sidebar-button:active, button.sidebar-button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.35); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.35); } button.sidebar-button:not(:hover):not(:active) > image { opacity: 0.5; } placessidebar row.sidebar-placeholder-row { padding: 0 8px; min-height: 2px; background-image: linear-gradient(to bottom, #F08437, #F08437); background-clip: content-box; } placessidebar row.sidebar-new-bookmark-row { color: #498dff; } placessidebar row:drop(active):not(:disabled) { box-shadow: inset 0 1px #F08437, inset 0 -1px #F08437; } placessidebar row:drop(active):not(:disabled), placessidebar row:drop(active):not(:disabled) label, placessidebar row:drop(active):not(:disabled) image { color: #F08437; } placessidebar row:drop(active):not(:disabled):selected { background-color: #F08437; } placessidebar row:drop(active):not(:disabled):selected, placessidebar row:drop(active):not(:disabled):selected label, placessidebar row:drop(active):not(:disabled):selected image { color: #dedede; } placesview .server-list-button > image { -gtk-icon-transform: rotate(0turn); } placesview .server-list-button:checked > image { transition: 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); -gtk-icon-transform: rotate(-0.5turn); } placesview > actionbar > revealer > box > label { padding-left: 8px; padding-right: 8px; } paned > separator { min-width: 1px; min-height: 1px; -gtk-icon-source: none; border-style: none; background-color: transparent; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.12), rgba(255, 255, 255, 0.12)); background-size: 1px 1px; } paned > separator:selected { background-image: linear-gradient(to bottom, #498dff, #498dff); } paned > separator.wide { min-width: 5px; min-height: 5px; background-color: #333333; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.12), rgba(255, 255, 255, 0.12)), linear-gradient(to bottom, rgba(255, 255, 255, 0.12), rgba(255, 255, 255, 0.12)); background-size: 1px 1px, 1px 1px; } paned.horizontal > separator { background-repeat: repeat-y; } paned.horizontal > separator:dir(ltr) { margin: 0 -8px 0 0; padding: 0 8px 0 0; background-position: left; } paned.horizontal > separator:dir(rtl) { margin: 0 0 0 -8px; padding: 0 0 0 8px; background-position: right; } paned.horizontal > separator.wide { margin: 0; padding: 0; background-repeat: repeat-y, repeat-y; background-position: left, right; } paned.vertical > separator { margin: 0 0 -8px 0; padding: 0 0 8px 0; background-repeat: repeat-x; background-position: top; } paned.vertical > separator.wide { margin: 0; padding: 0; background-repeat: repeat-x, repeat-x; background-position: bottom, top; } infobar { border-style: none; } infobar.info, infobar.question, infobar.warning, infobar.error { background-color: #498dff; color: #ffffff; caret-color: currentColor; } infobar.info selection, infobar.question selection, infobar.warning selection, infobar.error selection { color: #498dff; background-color: #ffffff; } row:selected button, infobar.info button, infobar.question button, infobar.warning button, infobar.error button, .nautilus-window .floating-bar button { color: #ffffff; background-color: rgba(255, 255, 255, 0); border-color: rgba(255, 255, 255, 0.5); background-image: none; } row:selected button.flat, row:selected button.budgie-menu-launcher, row:selected .budgie-panel #tasklist-button, .budgie-panel row:selected #tasklist-button, row:selected .budgie-panel button.flat.launcher, .budgie-panel row:selected button.flat.launcher, infobar.info button.flat, infobar.info button.budgie-menu-launcher, infobar.info .budgie-panel #tasklist-button, .budgie-panel infobar.info #tasklist-button, infobar.info .budgie-panel button.flat.launcher, .budgie-panel infobar.info button.flat.launcher, infobar.question button.flat, infobar.question button.budgie-menu-launcher, infobar.question .budgie-panel #tasklist-button, .budgie-panel infobar.question #tasklist-button, infobar.question .budgie-panel button.flat.launcher, .budgie-panel infobar.question button.flat.launcher, infobar.warning button.flat, infobar.warning button.budgie-menu-launcher, infobar.warning .budgie-panel #tasklist-button, .budgie-panel infobar.warning #tasklist-button, infobar.warning .budgie-panel button.flat.launcher, .budgie-panel infobar.warning button.flat.launcher, infobar.error button.flat, infobar.error button.budgie-menu-launcher, infobar.error .budgie-panel #tasklist-button, .budgie-panel infobar.error #tasklist-button, infobar.error .budgie-panel button.flat.launcher, .budgie-panel infobar.error button.flat.launcher, .nautilus-window .floating-bar button.flat, .nautilus-window .floating-bar button.budgie-menu-launcher, .nautilus-window .floating-bar .budgie-panel #tasklist-button, .budgie-panel .nautilus-window .floating-bar #tasklist-button { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; color: #ffffff; background-color: rgba(255, 255, 255, 0); background-image: none; } headerbar.selection-mode button:disabled, .nemo-window .selection-mode.primary-toolbar button:disabled, row:selected button.flat:disabled, row:selected button.budgie-menu-launcher:disabled, row:selected .budgie-panel #tasklist-button:disabled, .budgie-panel row:selected #tasklist-button:disabled, infobar.info button.flat:disabled, infobar.info button.budgie-menu-launcher:disabled, infobar.info .budgie-panel #tasklist-button:disabled, .budgie-panel infobar.info #tasklist-button:disabled, infobar.question button.flat:disabled, infobar.question button.budgie-menu-launcher:disabled, infobar.question .budgie-panel #tasklist-button:disabled, .budgie-panel infobar.question #tasklist-button:disabled, infobar.warning button.flat:disabled, infobar.warning button.budgie-menu-launcher:disabled, infobar.warning .budgie-panel #tasklist-button:disabled, .budgie-panel infobar.warning #tasklist-button:disabled, infobar.error button.flat:disabled, infobar.error button.budgie-menu-launcher:disabled, infobar.error .budgie-panel #tasklist-button:disabled, .budgie-panel infobar.error #tasklist-button:disabled, .nautilus-window .floating-bar button.flat:disabled, .nautilus-window .floating-bar button.budgie-menu-launcher:disabled, .nautilus-window .floating-bar .budgie-panel #tasklist-button:disabled, .budgie-panel .nautilus-window .floating-bar #tasklist-button:disabled, headerbar.selection-mode button:disabled label, .nemo-window .selection-mode.primary-toolbar button:disabled label, row:selected button.flat:disabled label, row:selected button.budgie-menu-launcher:disabled label, row:selected .budgie-panel #tasklist-button:disabled label, .budgie-panel row:selected #tasklist-button:disabled label, infobar.info button.flat:disabled label, infobar.info button.budgie-menu-launcher:disabled label, infobar.info .budgie-panel #tasklist-button:disabled label, .budgie-panel infobar.info #tasklist-button:disabled label, infobar.question button.flat:disabled label, infobar.question button.budgie-menu-launcher:disabled label, infobar.question .budgie-panel #tasklist-button:disabled label, .budgie-panel infobar.question #tasklist-button:disabled label, infobar.warning button.flat:disabled label, infobar.warning button.budgie-menu-launcher:disabled label, infobar.warning .budgie-panel #tasklist-button:disabled label, .budgie-panel infobar.warning #tasklist-button:disabled label, infobar.error button.flat:disabled label, infobar.error button.budgie-menu-launcher:disabled label, infobar.error .budgie-panel #tasklist-button:disabled label, .budgie-panel infobar.error #tasklist-button:disabled label, .nautilus-window .floating-bar button.flat:disabled label, .nautilus-window .floating-bar button.budgie-menu-launcher:disabled label, .nautilus-window .floating-bar .budgie-panel #tasklist-button:disabled label, .budgie-panel .nautilus-window .floating-bar #tasklist-button:disabled label { color: rgba(255, 255, 255, 0.4); } row:selected button:hover, infobar.info button:hover, infobar.question button:hover, infobar.warning button:hover, infobar.error button:hover, .nautilus-window .floating-bar button:hover { color: #ffffff; background-color: rgba(255, 255, 255, 0.2); border-color: rgba(255, 255, 255, 0.5); } headerbar.selection-mode button:active, .nemo-window .selection-mode.primary-toolbar button:active, headerbar.selection-mode button:checked, .nemo-window .selection-mode.primary-toolbar button:checked, row:selected button:active, infobar.info button:active, infobar.question button:active, infobar.warning button:active, infobar.error button:active, .nautilus-window .floating-bar button:active, headerbar.selection-mode button:hover:active, .nemo-window .selection-mode.primary-toolbar button:hover:active, headerbar.selection-mode button:hover:checked, .nemo-window .selection-mode.primary-toolbar button:hover:checked, row:selected button:active:hover, infobar.info button:active:hover, infobar.question button:active:hover, infobar.warning button:active:hover, infobar.error button:active:hover, .nautilus-window .floating-bar button:active:hover, row:selected button:checked, infobar.info button:checked, infobar.question button:checked, infobar.warning button:checked, infobar.error button:checked, .nautilus-window .floating-bar button:checked { color: #ffffff; background-color: rgba(255, 255, 255, 0.4); border-color: rgba(255, 255, 255, 0.5); } row:selected button:disabled, infobar.info button:disabled, infobar.question button:disabled, infobar.warning button:disabled, infobar.error button:disabled, .nautilus-window .floating-bar button:disabled { background-color: rgba(255, 255, 255, 0); border-color: rgba(255, 255, 255, 0.4); } row:selected button:disabled, infobar.info button:disabled, infobar.question button:disabled, infobar.warning button:disabled, infobar.error button:disabled, .nautilus-window .floating-bar button:disabled, row:selected button:disabled label, infobar.info button:disabled label, infobar.question button:disabled label, infobar.warning button:disabled label, infobar.error button:disabled label, .nautilus-window .floating-bar button:disabled label { color: rgba(255, 255, 255, 0.5); } headerbar.selection-mode button:disabled:active, .nemo-window .selection-mode.primary-toolbar button:disabled:active, headerbar.selection-mode button:disabled:checked, .nemo-window .selection-mode.primary-toolbar button:disabled:checked, row:selected button:disabled:active, infobar.info button:disabled:active, infobar.question button:disabled:active, infobar.warning button:disabled:active, infobar.error button:disabled:active, .nautilus-window .floating-bar button:disabled:active, headerbar.selection-mode button:disabled:checked, .nemo-window .selection-mode.primary-toolbar button:disabled:checked, headerbar.selection-mode button:disabled:active, .nemo-window .selection-mode.primary-toolbar button:disabled:active, row:selected button:disabled:checked, infobar.info button:disabled:checked, infobar.question button:disabled:checked, infobar.warning button:disabled:checked, infobar.error button:disabled:checked, .nautilus-window .floating-bar button:disabled:checked { color: #498dff; background-color: rgba(255, 255, 255, 0.5); border-color: rgba(255, 255, 255, 0.4); } tooltip { border-radius: 5px; box-shadow: none; } tooltip.background, tooltip.background.csd { background-color: rgba(62, 62, 62, 0.95); background-clip: padding-box; border-radius: 5px; } tooltip.background label, tooltip.background.csd label { padding: 4px; } tooltip decoration { background-color: transparent; } tooltip * { background-color: transparent; color: #dedede; } colorswatch, colorswatch:drop(active) { border-style: none; } colorswatch.top { border-top-left-radius: 2.5px; border-top-right-radius: 2.5px; } colorswatch.top overlay { border-top-left-radius: 2px; border-top-right-radius: 2px; } colorswatch.bottom { border-bottom-left-radius: 2.5px; border-bottom-right-radius: 2.5px; } colorswatch.bottom overlay { border-bottom-left-radius: 2px; border-bottom-right-radius: 2px; } colorswatch.left, colorswatch:first-child:not(.top) { border-top-left-radius: 2.5px; border-bottom-left-radius: 2.5px; } colorswatch.left overlay, colorswatch:first-child:not(.top) overlay { border-top-left-radius: 2px; border-bottom-left-radius: 2px; } colorswatch.right, colorswatch:last-child:not(.bottom) { border-top-right-radius: 2.5px; border-bottom-right-radius: 2.5px; } colorswatch.right overlay, colorswatch:last-child:not(.bottom) overlay { border-top-right-radius: 2px; border-bottom-right-radius: 2px; } colorswatch.dark overlay { color: rgba(255, 255, 255, 0.7); } colorswatch.dark overlay:hover { border-color: rgba(255, 255, 255, 0.12); } colorswatch.light overlay { color: rgba(0, 0, 0, 0.7); } colorswatch.light overlay:hover { border-color: rgba(255, 255, 255, 0.12); } colorswatch overlay { border: 1px solid rgba(255, 255, 255, 0.12); } colorswatch overlay:hover { background-color: rgba(255, 255, 255, 0.2); } colorswatch:disabled { opacity: 0.5; } colorswatch:disabled overlay { border-color: rgba(0, 0, 0, 0.6); box-shadow: none; } colorswatch#add-color-button { border-style: solid; border-width: 1px; color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: #484848; } colorswatch#add-color-button:hover { color: #c5c5c5; border-color: rgba(255, 255, 255, 0.12); background-color: #5c5c5c; box-shadow: none; } colorswatch#add-color-button overlay { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; } button.color { padding: 0; } button.color colorswatch:first-child:last-child, button.color colorswatch:first-child:last-child overlay { margin: 4px; border-radius: 0; } colorchooser .popover.osd { border-radius: 5px; } .content-view { background-color: #242424; } .content-view:hover { -gtk-icon-effect: highlight; } .scale-popup button:hover { color: #c5c5c5; border-color: rgba(255, 255, 255, 0.12); background-color: #5c5c5c; box-shadow: none; } .context-menu, popover.touch-selection, .csd popover.touch-selection, popover.background.touch-selection, .csd popover.background.touch-selection { font: initial; } .monospace { font-family: Monospace; } button.circular, paned.titlebar.horizontal headerbar button.circular-button.flat.toggle.popup:not(.image-button), paned.titlebar.horizontal headerbar button.circular-button.toggle.popup.budgie-menu-launcher:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .circular-button.toggle.popup#tasklist-button:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .circular-button.toggle.popup#tasklist-button:not(.image-button), headerbar button.circular-button, .nemo-window .primary-toolbar button.circular-button, row button.circular-button, button.nautilus-circular-button.image-button, button.circular-button { padding: 0; margin: 0 2px; min-width: 28px; min-height: 28px; border-radius: 100px; -gtk-outline-radius: 100px; border: none; } button.circular:active, paned.titlebar.horizontal headerbar button.circular-button.flat.toggle.popup:active:not(.image-button), paned.titlebar.horizontal headerbar button.circular-button.toggle.popup.budgie-menu-launcher:active:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .circular-button.toggle.popup#tasklist-button:active:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .circular-button.toggle.popup#tasklist-button:active:not(.image-button), headerbar button.circular-button:active, .nemo-window .primary-toolbar button.circular-button:active, row button.circular-button:active, button.nautilus-circular-button.image-button:active, button.circular-button:active { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; border: none; } button.circular:checked, paned.titlebar.horizontal headerbar button.circular-button.flat.toggle.popup:checked:not(.image-button), paned.titlebar.horizontal headerbar button.circular-button.toggle.popup.budgie-menu-launcher:checked:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .circular-button.toggle.popup#tasklist-button:checked:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .circular-button.toggle.popup#tasklist-button:checked:not(.image-button), headerbar button.circular-button:checked, .nemo-window .primary-toolbar button.circular-button:checked, row button.circular-button:checked, button.nautilus-circular-button.image-button:checked, button.circular-button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.35); text-shadow: none; -gtk-icon-shadow: none; border: none; } button.circular label, paned.titlebar.horizontal headerbar button.circular-button.flat.toggle.popup:not(.image-button) label, paned.titlebar.horizontal headerbar button.circular-button.toggle.popup.budgie-menu-launcher:not(.image-button) label, paned.titlebar.horizontal headerbar .budgie-panel .circular-button.toggle.popup#tasklist-button:not(.image-button) label, .budgie-panel paned.titlebar.horizontal headerbar .circular-button.toggle.popup#tasklist-button:not(.image-button) label, headerbar button.circular-button label, .nemo-window .primary-toolbar button.circular-button label, row button.circular-button label, button.nautilus-circular-button.image-button label, button.circular-button label { padding: 0; } .keycap { min-width: 16px; min-height: 20px; padding: 3px 6px 4px 6px; color: #dedede; background-color: #242424; border: 1px solid rgba(255, 255, 255, 0.12); border-radius: 5px; box-shadow: inset 0px -2px 0px rgba(0, 0, 0, 0.15); } stackswitcher button.text-button { min-width: 80px; } stackswitcher button.circular, stackswitcher paned.titlebar.horizontal headerbar button.circular-button.flat.toggle.popup:not(.image-button), paned.titlebar.horizontal headerbar stackswitcher button.circular-button.flat.toggle.popup:not(.image-button), stackswitcher paned.titlebar.horizontal headerbar button.circular-button.toggle.popup.budgie-menu-launcher:not(.image-button), paned.titlebar.horizontal headerbar stackswitcher button.circular-button.toggle.popup.budgie-menu-launcher:not(.image-button), stackswitcher paned.titlebar.horizontal headerbar .budgie-panel .circular-button.toggle.popup#tasklist-button:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel stackswitcher .circular-button.toggle.popup#tasklist-button:not(.image-button), stackswitcher .budgie-panel paned.titlebar.horizontal headerbar .circular-button.toggle.popup#tasklist-button:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar stackswitcher .circular-button.toggle.popup#tasklist-button:not(.image-button), stackswitcher headerbar button.circular-button, headerbar stackswitcher button.circular-button, stackswitcher .nemo-window .primary-toolbar button.circular-button, .nemo-window .primary-toolbar stackswitcher button.circular-button, stackswitcher row button.circular-button, row stackswitcher button.circular-button, stackswitcher button.nautilus-circular-button.image-button, stackswitcher button.text-button.circular, stackswitcher paned.titlebar.horizontal headerbar button.text-button.circular-button.flat.toggle.popup:not(.image-button), paned.titlebar.horizontal headerbar stackswitcher button.text-button.circular-button.flat.toggle.popup:not(.image-button), stackswitcher paned.titlebar.horizontal headerbar button.text-button.circular-button.toggle.popup.budgie-menu-launcher:not(.image-button), paned.titlebar.horizontal headerbar stackswitcher button.text-button.circular-button.toggle.popup.budgie-menu-launcher:not(.image-button), stackswitcher paned.titlebar.horizontal headerbar .budgie-panel .text-button.circular-button.toggle.popup#tasklist-button:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel stackswitcher .text-button.circular-button.toggle.popup#tasklist-button:not(.image-button), stackswitcher .budgie-panel paned.titlebar.horizontal headerbar .text-button.circular-button.toggle.popup#tasklist-button:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar stackswitcher .text-button.circular-button.toggle.popup#tasklist-button:not(.image-button), stackswitcher headerbar button.text-button.circular-button, headerbar stackswitcher button.text-button.circular-button, stackswitcher .nemo-window .primary-toolbar button.text-button.circular-button, .nemo-window .primary-toolbar stackswitcher button.text-button.circular-button, stackswitcher row button.text-button.circular-button, row stackswitcher button.text-button.circular-button, stackswitcher button.text-button.nautilus-circular-button.image-button { min-width: 28px; min-height: 28px; border-radius: 100px; -gtk-outline-radius: 100px; padding: 0; } *:drop(active):focus, *:drop(active) { box-shadow: inset 0 0 0 1px #F08437; } decoration { transition: box-shadow 0.2s cubic-bezier(0, 0, 0.2, 1); border-radius: 6px; border-width: 0; box-shadow: 0 0 8px 5px rgba(0, 0, 0, 0.4); margin: 4px; } decoration:backdrop { box-shadow: 0 0 8px 5px rgba(0, 0, 0, 0.3); } .fullscreen decoration, .tiled decoration { border-radius: 0; box-shadow: 0 0 8px 5px rgba(0, 0, 0, 0.3); } .popup decoration { border-radius: 6px; } .ssd decoration { margin: -5px; border-radius: 6px 6px 0 0; box-shadow: 0 0 8px 5px rgba(0, 0, 0, 0.3); } .ssd decoration.maximized { border-radius: 0; } .csd.popup decoration { border-radius: 6px; box-shadow: 0 0 8px 5px rgba(0, 0, 0, 0.3); } tooltip.csd decoration { border-radius: 6px; box-shadow: 0 0 8px 5px rgba(0, 0, 0, 0.3); } messagedialog.csd decoration { border-radius: 6px; } .solid-csd decoration { border: 1px solid #4B4B4B; border-radius: 0; margin: 0; background-color: rgba(55, 55, 55, 0.98); box-shadow: none; } headerbar button.titlebutton, .titlebar button.titlebutton { min-width: 24px; min-height: 24px; margin: 0; padding: 0; border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; background-color: rgba(55, 55, 55, 0); } headerbar button.titlebutton:hover, .titlebar button.titlebutton:hover { border-color: rgba(255, 255, 255, 0.12); color: rgba(221, 213, 213, 0.8); background-color: rgba(119, 119, 119, 0.88); background-image: none; box-shadow: none; } headerbar button.titlebutton:active, headerbar button.titlebutton:checked, .titlebar button.titlebutton:active, .titlebar button.titlebutton:checked { color: #ffffff; background-color: rgba(119, 119, 119, 0.98); background-image: none; border-color: rgba(255, 255, 255, 0.12); text-shadow: none; -gtk-icon-shadow: none; box-shadow: none; } headerbar button.titlebutton.close, headerbar button.titlebutton.maximize, headerbar button.titlebutton.minimize, headerbar button.titlebutton.restore, .titlebar button.titlebutton.close, .titlebar button.titlebutton.maximize, .titlebar button.titlebutton.minimize, .titlebar button.titlebutton.restore { min-width: 16px; min-height: 16px; margin: 0; color: transparent; background-color: transparent; background-position: center; background-repeat: no-repeat; background-size: auto; border-width: 0; box-shadow: none; } headerbar button.titlebutton.close:backdrop, headerbar button.titlebutton.maximize:backdrop, headerbar button.titlebutton.minimize:backdrop, headerbar button.titlebutton.restore:backdrop, .titlebar button.titlebutton.close:backdrop, .titlebar button.titlebutton.maximize:backdrop, .titlebar button.titlebutton.minimize:backdrop, .titlebar button.titlebutton.restore:backdrop { opacity: 1; } headerbar button.titlebutton.close, .titlebar button.titlebutton.close { background-image: -gtk-scaled(url("assets/titlebutton-close.png"), url("assets/titlebutton-close@2.png")); } headerbar button.titlebutton.close:backdrop, .titlebar button.titlebutton.close:backdrop { background-image: -gtk-scaled(url("assets/titlebutton-close-backdrop.png"), url("assets/titlebutton-close-backdrop@2.png")); } headerbar button.titlebutton.close:hover, .titlebar button.titlebutton.close:hover { background-image: -gtk-scaled(url("assets/titlebutton-close-hover.png"), url("assets/titlebutton-close-hover@2.png")); } headerbar button.titlebutton.close:active, .titlebar button.titlebutton.close:active { background-image: -gtk-scaled(url("assets/titlebutton-close-active.png"), url("assets/titlebutton-close-active@2.png")); } headerbar button.titlebutton.maximize, .titlebar button.titlebutton.maximize { background-image: -gtk-scaled(url("assets/titlebutton-maximize.png"), url("assets/titlebutton-maximize@2.png")); } headerbar button.titlebutton.maximize:backdrop, .titlebar button.titlebutton.maximize:backdrop { background-image: -gtk-scaled(url("assets/titlebutton-maximize-backdrop.png"), url("assets/titlebutton-maximize-backdrop@2.png")); } headerbar button.titlebutton.maximize:hover, .titlebar button.titlebutton.maximize:hover { background-image: -gtk-scaled(url("assets/titlebutton-maximize-hover.png"), url("assets/titlebutton-maximize-hover@2.png")); } headerbar button.titlebutton.maximize:active, .titlebar button.titlebutton.maximize:active { background-image: -gtk-scaled(url("assets/titlebutton-maximize-active.png"), url("assets/titlebutton-maximize-active@2.png")); } headerbar button.titlebutton.minimize, .titlebar button.titlebutton.minimize { background-image: -gtk-scaled(url("assets/titlebutton-minimize.png"), url("assets/titlebutton-minimize@2.png")); } headerbar button.titlebutton.minimize:backdrop, .titlebar button.titlebutton.minimize:backdrop { background-image: -gtk-scaled(url("assets/titlebutton-minimize-backdrop.png"), url("assets/titlebutton-minimize-backdrop@2.png")); } headerbar button.titlebutton.minimize:hover, .titlebar button.titlebutton.minimize:hover { background-image: -gtk-scaled(url("assets/titlebutton-minimize-hover.png"), url("assets/titlebutton-minimize-hover@2.png")); } headerbar button.titlebutton.minimize:active, .titlebar button.titlebutton.minimize:active { background-image: -gtk-scaled(url("assets/titlebutton-minimize-active.png"), url("assets/titlebutton-minimize-active@2.png")); } headerbar button.titlebutton.restore, .titlebar button.titlebutton.restore { background-image: -gtk-scaled(url("assets/titlebutton-restore.png"), url("assets/titlebutton-restore@2.png")); } headerbar button.titlebutton.restore:backdrop, .titlebar button.titlebutton.restore:backdrop { background-image: -gtk-scaled(url("assets/titlebutton-restore-backdrop.png"), url("assets/titlebutton-restore-backdrop@2.png")); } headerbar button.titlebutton.restore:hover, .titlebar button.titlebutton.restore:hover { background-image: -gtk-scaled(url("assets/titlebutton-restore-hover.png"), url("assets/titlebutton-restore-hover@2.png")); } headerbar button.titlebutton.restore:active, .titlebar button.titlebutton.restore:active { background-image: -gtk-scaled(url("assets/titlebutton-restore-active.png"), url("assets/titlebutton-restore-active@2.png")); } .fullscreen headerbar button.titlebutton.maximize, .maximized headerbar button.titlebutton.maximize, .fullscreen .titlebar button.titlebutton.maximize, .maximized .titlebar button.titlebutton.maximize { background-image: -gtk-scaled(url("assets/titlebutton-restore.png"), url("assets/titlebutton-restore@2.png")); } .fullscreen headerbar button.titlebutton.maximize:backdrop, .maximized headerbar button.titlebutton.maximize:backdrop, .fullscreen .titlebar button.titlebutton.maximize:backdrop, .maximized .titlebar button.titlebutton.maximize:backdrop { background-image: -gtk-scaled(url("assets/titlebutton-restore-backdrop.png"), url("assets/titlebutton-restore-backdrop@2.png")); } .fullscreen headerbar button.titlebutton.maximize:hover, .maximized headerbar button.titlebutton.maximize:hover, .fullscreen .titlebar button.titlebutton.maximize:hover, .maximized .titlebar button.titlebutton.maximize:hover { background-image: -gtk-scaled(url("assets/titlebutton-restore-hover.png"), url("assets/titlebutton-restore-hover@2.png")); } .fullscreen headerbar button.titlebutton.maximize:active, .maximized headerbar button.titlebutton.maximize:active, .fullscreen .titlebar button.titlebutton.maximize:active, .maximized .titlebar button.titlebutton.maximize:active { background-image: -gtk-scaled(url("assets/titlebutton-restore-active.png"), url("assets/titlebutton-restore-active@2.png")); } .view:selected, iconview:selected, .view:selected:focus, .view text:selected, iconview text:selected, textview text:selected, .view text selection:focus, iconview text selection:focus, .view text selection, iconview text selection, textview text selection:focus, textview text selection, flowbox flowboxchild:selected, entry selection:focus, entry selection, treeview.view:selected, treeview.view:selected:focus, row:selected, calendar:selected, .nemo-window .nemo-window-pane widget.entry:selected:focus, .nemo-window .nemo-window-pane widget.entry:selected, #MozillaGtkWidget.background > widget > scrolledwindow > textview text:selected, #MozillaGtkWidget.background > widget > scrolledwindow > textview text:selected:focus, #MozillaGtkWidget.background > widget > scrolledwindow > textview text selection, .budgie-menu button:checked { background-color: #498dff; } row:selected label, label:selected, .view:selected, iconview:selected, .view:selected:focus, .view text:selected, iconview text:selected, textview text:selected, .view text selection:focus, iconview text selection:focus, .view text selection, iconview text selection, textview text selection:focus, textview text selection, flowbox flowboxchild:selected, entry selection:focus, entry selection, treeview.view:selected, treeview.view:selected:focus, row:selected, calendar:selected, .nemo-window .nemo-window-pane widget.entry:selected:focus, .nemo-window .nemo-window-pane widget.entry:selected, #MozillaGtkWidget.background > widget > scrolledwindow > textview text:selected, #MozillaGtkWidget.background > widget > scrolledwindow > textview text:selected:focus, #MozillaGtkWidget.background > widget > scrolledwindow > textview text selection, .budgie-menu button:checked { color: #ffffff; } row:selected label:disabled, label:disabled:selected, .view:disabled:selected, iconview:disabled:selected, iconview:disabled:selected:focus, .view text:disabled:selected, iconview text:disabled:selected, textview text:disabled:selected, iconview text:disabled:selected:focus, textview text:disabled:selected:focus, iconview text selection:disabled:focus, .view text selection:disabled, iconview text selection:disabled, textview text selection:disabled, flowbox flowboxchild:disabled:selected, label:disabled selection, entry selection:disabled, treeview.view:disabled:selected:focus, row:disabled:selected, calendar:disabled:selected, .nemo-window .nemo-window-pane widget.entry:disabled:selected, #MozillaGtkWidget.background > widget > scrolledwindow > textview text:disabled:selected, #MozillaGtkWidget.background > widget > scrolledwindow > textview text selection:disabled, .budgie-menu button:disabled:checked { color: #a4c6ff; } /********* * Emoji * *********/ popover.emoji-picker { padding: 0; border-radius: 6px; } popover.emoji-picker entry { border-bottom: 1px solid rgba(255, 255, 255, 0.12); border-bottom-left-radius: 0; border-bottom-right-radius: 0; box-shadow: none; border-width: 0 0 1px 0; padding: 4px 12px; } popover.emoji-picker scrolledwindow { border-bottom: 1px solid rgba(255, 255, 255, 0.12); } button.emoji-section { margin: 2px 1px; padding: 1px 12px; border-radius: 6px; border: none; outline-offset: -2px; box-shadow: none; } .emoji { min-width: 3em; min-height: 3em; padding: 0; } .emoji widget { transition: all 0.2s cubic-bezier(0, 0, 0.2, 1); } .emoji widget:hover { font-size: larger; } terminal-window notebook > header.top tabs > tab, .mate-terminal notebook > header.top tabs > tab { border-top: 1px solid transparent; } terminal-window notebook > header.top button, .mate-terminal notebook > header.top button { padding: 0; min-width: 24px; min-height: 24px; } .nautilus-canvas-item { border-radius: 2px; } .nautilus-desktop.nautilus-canvas-item, .nemo-desktop.nemo-canvas-item, .caja-desktop { color: white; text-shadow: 1px 1px rgba(0, 0, 0, 0.6); } .nautilus-desktop.nautilus-canvas-item:active, .nemo-desktop.nemo-canvas-item:active, .caja-desktop:active { color: #dedede; } .nautilus-desktop.nautilus-canvas-item:selected, .nemo-desktop.nemo-canvas-item:selected, .caja-desktop:selected { color: #ffffff; text-shadow: none; } .nautilus-canvas-item.dim-label, label.nautilus-canvas-item.separator, popover.background label.nautilus-canvas-item.separator, headerbar .nautilus-canvas-item.subtitle, .titlebar:not(headerbar) .nautilus-canvas-item.subtitle, .budgie-notification .nautilus-canvas-item.notification-body, .budgie-switcher .nautilus-canvas-item.notification-body, .nautilus-list-dim-label { color: #898989; } .nautilus-canvas-item.dim-label:selected, label.nautilus-canvas-item.separator:selected, headerbar .nautilus-canvas-item.subtitle:selected, .titlebar:not(headerbar) .nautilus-canvas-item.subtitle:selected, .budgie-notification .nautilus-canvas-item.notification-body:selected, .budgie-switcher .nautilus-canvas-item.notification-body:selected, .nautilus-canvas-item.dim-label:selected:focus, label.nautilus-canvas-item.separator:selected:focus, headerbar .nautilus-canvas-item.subtitle:selected:focus, .titlebar:not(headerbar) .nautilus-canvas-item.subtitle:selected:focus, .budgie-notification .nautilus-canvas-item.notification-body:selected:focus, .budgie-switcher .nautilus-canvas-item.notification-body:selected:focus, .nautilus-list-dim-label:selected, .nautilus-list-dim-label:selected:focus { color: #dbe8ff; } .nautilus-window searchbar { border-top: 1px solid rgba(255, 255, 255, 0.12); } .nautilus-window .searchbar-container { margin-top: -1px; } .nautilus-window notebook, .nautilus-window notebook > stack { border-radius: 0 0 6px 6px; } .nautilus-window.maximized notebook, .nautilus-window.maximized notebook > stack { border-radius: 0 0 0 0; } .nautilus-window notebook, .nautilus-window notebook > stack:not(:only-child) searchbar { background-color: #242424; } .disk-space-display { border-style: solid; border-width: 1px; } .disk-space-display.unknown { background-color: rgba(222, 222, 222, 0.5); border-color: rgba(197, 197, 197, 0.5); } .disk-space-display.used { background-color: rgba(73, 141, 255, 0.8); border-color: rgba(22, 109, 255, 0.8); } .disk-space-display.free { background-color: #2b2b2b; border-color: #121212; } @keyframes needs_attention_keyframes { 0% { border-color: rgba(255, 255, 255, 0.12); color: rgba(221, 213, 213, 0.8); background-color: rgba(119, 119, 119, 0.88); background-image: none; box-shadow: none; } 100% { color: #ffffff; background-color: rgba(119, 119, 119, 0.98); background-image: none; border-color: rgba(255, 255, 255, 0.12); text-shadow: none; -gtk-icon-shadow: none; box-shadow: none; } } .nautilus-operations-button-needs-attention { animation: needs_attention_keyframes 2s ease-in-out; } .nautilus-operations-button-needs-attention-multiple { animation: needs_attention_keyframes 3s ease-in-out; animation-iteration-count: 3; } .conflict-row.activatable, .conflict-row.activatable:active { color: white; background-color: #FC4138; } .conflict-row.activatable:hover { background-color: #fd716a; } .conflict-row.activatable:selected { color: #ffffff; background-color: #498dff; } .nautilus-window .floating-bar { padding: 1px; background-color: #498dff; color: #ffffff; border-radius: 3px 0 4px 0; } .nautilus-window .floating-bar.bottom.left { border-top-left-radius: 0; } .nautilus-window .floating-bar.bottom.right { border-top-right-radius: 0; } .nautilus-window .floating-bar button { border: none; border-radius: 100px; min-height: 0; min-width: 0; padding: 0; margin-right: 6px; -gtk-icon-shadow: none; } .nautilus-window.maximized .floating-bar { border-radius: 3px 0 0 0; } .nemo-window .nemo-places-sidebar.frame { border-width: 0; } .nemo-window notebook { background-color: #242424; } .nemo-window .nemo-window-pane widget.entry { border: 1px solid; border-radius: 3px; color: #dedede; border-color: #8eb9ff; background-color: #242424; box-shadow: inset 0 0 0 2px #8eb9ff; } .nemo-window .primary-toolbar { border: none; color: rgba(225, 219, 219, 0.8); background-color: #373737; } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button { padding-bottom: 2px; margin: 0; color: rgba(225, 219, 219, 0.8); background-color: rgba(55, 55, 55, 0.98); } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:not(:last-child):not(:only-child) { margin: 0; } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:hover { color: rgba(225, 219, 219, 0.8); background-color: rgba(75, 75, 75, 0.98); } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:active, .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:checked { transition: background-color 0.00001s 0.3s; animation: header_ripple_effect 0.3s cubic-bezier(0, 0, 0.2, 1); color: rgba(225, 219, 219, 0.8); background-color: rgba(30, 30, 30, 0.98); box-shadow: inset 0 -2px #7cadff; } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:disabled { color: rgba(225, 219, 219, 0.4); } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button + button { border-left-style: solid; } .caja-notebook { border-top: 1px solid rgba(255, 255, 255, 0.12); } .caja-side-pane .frame { border-width: 1px 0 0; } .caja-notebook .frame { border-width: 0 0 1px; } .open-document-selector-treeview.view, iconview.open-document-selector-treeview { padding: 3px 6px 3px 6px; border-color: #242424; } .open-document-selector-treeview.view:hover, iconview.open-document-selector-treeview:hover { background-color: #313131; } .open-document-selector-treeview.view:hover:selected, iconview.open-document-selector-treeview:hover:selected { color: #ffffff; background-color: #498dff; } .open-document-selector-name-label { color: #dedede; } .open-document-selector-path-label { color: #818181; font-size: smaller; } .open-document-selector-path-label:selected { color: rgba(255, 255, 255, 0.9); } .gedit-document-panel row.activatable, .gedit-document-panel .budgie-menu button, .budgie-menu .gedit-document-panel button { padding: 6px 0; } .gedit-document-panel row button { min-width: 22px; min-height: 22px; padding: 0; margin: 0 6px; border-radius: 100px; -gtk-outline-radius: 100px; } .gedit-document-panel row button image { color: inherit; } .gedit-document-panel row:hover:not(:selected) button { color: #a2a2a2; } .gedit-document-panel row:hover:not(:selected) button:hover { color: #ff4d4d; } .gedit-document-panel row:hover:not(:selected) button:active { color: #dedede; } .gedit-document-panel row:hover:selected button:hover { color: #ff6666; } .gedit-document-panel row:hover:selected button:hover:active { color: #ffffff; } .gedit-document-panel-dragged-row { border: 1px solid rgba(255, 255, 255, 0.12); background-color: #1a1a1a; color: #dedede; } .gedit-side-panel-paned statusbar { border-top: 1px solid rgba(255, 255, 255, 0.12); background-color: #333333; border-radius: 0 0 6px 6px; } .gedit-search-slider { background-color: #383838; padding: 6px; border-color: rgba(255, 255, 255, 0.12); border-radius: 0 0 5px 5px; border-width: 0 1px 1px 1px; border-style: solid; } .gedit-search-entry-occurrences-tag { color: rgba(222, 222, 222, 0.6); border: none; margin: 2px; padding: 2px; } .gedit-map-frame border { border-width: 0; } .gedit-map-frame border:dir(ltr) { border-left-width: 1px; } .gedit-map-frame border:dir(rtl) { border-right-width: 1px; } .gedit-side-panel-paned.horizontal > box.vertical > stack > grid.horizontal > box.horizontal { margin: 4px 0; } .gedit-side-panel-paned.horizontal > box.vertical > stack > grid.horizontal > scrolledwindow { margin: 0 6px 6px 6px; border-radius: 0; box-shadow: 0px 1px 2px 0px rgba(16, 16, 16, 0.15), 0px 2px 3px 0px rgba(16, 16, 16, 0.1); } paned.titlebar.horizontal headerbar button.flat.toggle.popup:not(.image-button) box > .title, paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:not(.image-button) box > .title, paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:not(.image-button) box > .title, .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:not(.image-button) box > .title { padding: 0; margin: -2px 0; } .pluma-window statusbar frame > border { border: none; } .pluma-window notebook > stack scrolledwindow { border-width: 0 0 1px 0; } #pluma-status-combo-button { min-height: 0; padding: 0; border-top: none; border-bottom: none; border-radius: 0; } .gb-search-entry-occurrences-tag { background: none; } workbench.csd > stack.titlebar:not(headerbar) { padding: 0; background: none; border: none; box-shadow: none; } workbench.csd > stack.titlebar:not(headerbar) headerbar, workbench.csd > stack.titlebar:not(headerbar) headerbar:first-child, workbench.csd > stack.titlebar:not(headerbar) headerbar:last-child { border-radius: 6px 6px 0 0; } editortweak .linked > entry.search:focus + .gb-linked-scroller { border-top-color: #498dff; } layouttab { background-color: #242424; } layout { border: 1px solid rgba(255, 255, 255, 0.12); -PnlDockBin-handle-size: 1; } eggsearchbar box.search-bar { border-bottom: 1px solid rgba(255, 255, 255, 0.12); } pillbox { color: #ffffff; background-color: #498dff; border-radius: 3px; } pillbox:disabled label { color: rgba(255, 255, 255, 0.5); } docktabstrip { padding: 0 6px; background-color: #333333; border-bottom: 1px solid rgba(255, 255, 255, 0.12); } docktabstrip docktab { min-height: 28px; border: solid transparent; border-width: 0 1px; } docktabstrip docktab label { opacity: 0.5; } docktabstrip docktab:checked label, docktabstrip docktab:hover label { opacity: 1; } docktabstrip docktab:checked { border-color: rgba(255, 255, 255, 0.12); background-color: #242424; } dockbin { border: 1px solid rgba(255, 255, 255, 0.12); -PnlDockBin-handle-size: 1; } dockpaned { border: 1px solid rgba(255, 255, 255, 0.12); } dockoverlayedge { background-color: #333333; } dockoverlayedge docktabstrip { padding: 0; border: none; } dockoverlayedge.left-edge tab:checked, dockoverlayedge.right-edge tab:checked { border-width: 1px 0; } popover.messagepopover.background { padding: 0; } popover.messagepopover .popover-content-area { margin: 16px; } popover.messagepopover .popover-action-area { margin: 8px; } popover.messagepopover .popover-action-area button:not(:first-child):not(:last-child) { margin: 0 4px; } popover.popover-selector { padding: 0; } popover.popover-selector list row { padding: 5px 0; } popover.popover-selector list row image { margin-left: 3px; margin-right: 10px; } entry.search.preferences-search { border: none; border-right: 1px solid rgba(255, 255, 255, 0.12); border-bottom: 1px solid rgba(255, 255, 255, 0.12); border-radius: 0; } preferences stacksidebar.sidebar list { background-image: linear-gradient(to bottom, #242424, #242424); } preferences stacksidebar.sidebar list separator { background-color: transparent; } devhelppanel entry:focus, symboltreepanel entry:focus { border-color: rgba(255, 255, 255, 0.12); } button.run-arrow-button { min-width: 12px; } omnibar.linked > entry:not(:only-child) { border-style: solid; border-radius: 3px; margin-left: 1px; margin-right: 1px; } gstyleslidein #scale_box button.toggle:checked, gstyleslidein #strings_controls button.toggle:checked, gstyleslidein #palette_controls button.toggle:checked, gstyleslidein #components_controls button.toggle:checked { color: #dedede; } configurationview entry.flat, configurationview .raven .raven-background spinbutton:not(.vertical), .raven .raven-background configurationview spinbutton:not(.vertical) { background: none; } configurationview list { border-width: 0; } window.background > box.vertical box.horizontal list.categories { border-radius: 0 0 0 6px; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event { color: #dedede; transition-duration: 0.1s; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable:hover, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event:hover, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event:hover, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable:active, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event:active, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event:active { color: #dedede; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable label.compressed-entries-label, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event label.compressed-entries-label, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event label.compressed-entries-label { background-image: image(#3484e2); color: #ffffff; font-weight: 700; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row { background-image: image(#2b2b2b); color: #ababab; transition-property: opacity, border-image, background-image, box-shadow; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row:hover, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row:hover, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row:hover { background-image: image(#3c3c3c); color: #dedede; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row:active, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row:active, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row:active, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row:active:focus, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row:active:focus, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row:active:focus { background-image: image(#444444); color: #dedede; animation: none; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row.popover-activated-row, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row.popover-activated-row, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row.popover-activated-row { background-image: image(#498dff); color: #ffffff; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row-header, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row-header, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row-header { background-image: image(#242424); color: #498dff; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row-header:hover, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row-header:hover, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row-header:hover { background-image: image(#26292f); } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row-header:active, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row-header:active, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row-header:active, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row-header:active:focus, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row-header:active:focus, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row-header:active:focus { background-image: image(#282f3a); color: #498dff; animation: none; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row-header label.compressed-entries-label, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row-header label.compressed-entries-label, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row-header label.compressed-entries-label { background-image: image(#498dff); color: #ffffff; transition-duration: 0s; } .documents-scrolledwin.frame { border-width: 0; } button.documents-load-more { border-width: 1px 0 0; border-radius: 0; } .documents-icon-bg { background-color: #498dff; color: #ffffff; border-radius: 2px; } .documents-collection-icon, .photos-collection-icon { background-color: rgba(222, 222, 222, 0.3); border-radius: 2px; } button.documents-favorite:active, button.documents-favorite:active:hover { color: #afcdff; } .documents-entry-tag, .photos-entry-tag { color: #ffffff; background: #498dff; border-radius: 3px; border-width: 0; margin: 2px; padding: 4px; } .documents-entry-tag:hover, .photos-entry-tag:hover { color: #ffffff; background: #5d9aff; } .documents-entry-tag:active, .photos-entry-tag:active { color: #ffffff; background: #3580ff; } .documents-entry-tag.button, .button.photos-entry-tag { box-shadow: none; border: none; background-color: transparent; } .content-view.document-page { border-style: solid; border-width: 3px 3px 6px 4px; border-image: url("assets/thumbnail-frame.png") 3 3 6 4; } .photos-fade-in { opacity: 1.0; transition: opacity 0.2s ease-out; } .photos-fade-out { opacity: 0.0; transition: opacity 0.2s ease-out; } .tweak-categories, .tweak-category:not(:selected):not(:hover) { background-image: linear-gradient(to bottom, #181818, #181818); } .tweak-categories { border-radius: 0 0 0 6px; } .tweak-titlebar-right > switch, dialog.csd > headerbar.titlebar > switch { margin: 8px 0; } /************************ * Gnome Control Center * ************************/ box.horizontal.titlebar > headerbar > stack > box.vertical > .title { margin: 0; } box.horizontal.titlebar > headerbar > stack > box.vertical > .subtitle { margin: -3px 0; } dialog.background.csd > headerbar.titlebar > label:not(.title):not(.subtitle) { font-weight: 700; } .tr-workarea undershoot, .tr-workarea overshoot { border-color: transparent; } .atril-window .primary-toolbar toolbar, .atril-window .primary-toolbar .inline-toolbar { background: none; } #gf-bubble, #gf-bubble.solid, #gf-osd-window, #gf-osd-window.solid, #gf-input-source-popup, #gf-input-source-popup.solid, #gf-candidate-popup, #gf-candidate-popup.solid { color: #f0f0f0; background-color: rgba(36, 36, 36, 0.95); border: 1px solid rgba(16, 16, 16, 0.95); border-radius: 2px; } #gf-bubble levelbar block.low, #gf-bubble levelbar block.high, #gf-bubble levelbar block.full, #gf-osd-window levelbar block.low, #gf-osd-window levelbar block.high, #gf-osd-window levelbar block.full, #gf-input-source-popup levelbar block.low, #gf-input-source-popup levelbar block.high, #gf-input-source-popup levelbar block.full, #gf-candidate-popup levelbar block.low, #gf-candidate-popup levelbar block.high, #gf-candidate-popup levelbar block.full { background-color: #498dff; border-color: #498dff; } #gf-bubble levelbar block.empty, #gf-osd-window levelbar block.empty, #gf-input-source-popup levelbar block.empty, #gf-candidate-popup levelbar block.empty { background-color: rgba(23, 23, 23, 0.95); } #gf-bubble levelbar trough, #gf-osd-window levelbar trough, #gf-input-source-popup levelbar trough, #gf-candidate-popup levelbar trough { background: none; } #gf-input-source { min-height: 32px; min-width: 40px; } #gf-input-source:selected { color: #ffffff; background-color: #498dff; border-radius: 2px; } gf-candidate-box label { padding: 3px; } gf-candidate-box:hover, gf-candidate-box:selected { color: #ffffff; background-color: #498dff; border-radius: 2px; } /************* * rhythmbox * *************/ .sidebar-paned .inline-toolbar.horizontal.sidebar-toolbar { box-shadow: inset 0 1px rgba(255, 255, 255, 0.12); padding: 4px; background-color: #2b2b2b; } .sidebar-paned .inline-toolbar.horizontal.sidebar-toolbar button.image-button { border: none; } .sidebar-paned .inline-toolbar.horizontal.sidebar-toolbar button.image-button:active, .sidebar-paned .inline-toolbar.horizontal.sidebar-toolbar button.image-button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); } .sidebar-paned .inline-toolbar.horizontal.sidebar-toolbar button.image-button > widget > box > image { padding: 0; } .sidebar-paned scrolledwindow { border: none; } window.csd > box.vertical > box.vertical > toolbar.horizontal, window.csd > box.vertical > box.vertical > .horizontal.inline-toolbar, window.solid-csd > box.vertical > box.vertical > toolbar.horizontal, window.solid-csd > box.vertical > box.vertical > .horizontal.inline-toolbar { margin: -1px 0; border-top: 1px solid rgba(255, 255, 255, 0.12); box-shadow: none; background-color: transparent; } window.csd > box.vertical > box.vertical > toolbar.horizontal button, window.csd > box.vertical > box.vertical > .horizontal.inline-toolbar button, window.solid-csd > box.vertical > box.vertical > toolbar.horizontal button, window.solid-csd > box.vertical > box.vertical > .horizontal.inline-toolbar button { min-height: 36px; min-width: 36px; padding: 0; margin-top: 8px; margin-bottom: 8px; border: none; } window.csd > box.vertical > box.vertical > toolbar.horizontal button:active, window.csd > box.vertical > box.vertical > .horizontal.inline-toolbar button:active, window.csd > box.vertical > box.vertical > toolbar.horizontal button:checked, window.csd > box.vertical > box.vertical > .horizontal.inline-toolbar button:checked, window.solid-csd > box.vertical > box.vertical > toolbar.horizontal button:active, window.solid-csd > box.vertical > box.vertical > .horizontal.inline-toolbar button:active, window.solid-csd > box.vertical > box.vertical > toolbar.horizontal button:checked, window.solid-csd > box.vertical > box.vertical > .horizontal.inline-toolbar button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); } window.csd > box.vertical > box.vertical > frame, window.solid-csd > box.vertical > box.vertical > frame { margin: -1px 0; padding: 0; } window.csd > box.vertical > box.vertical > frame > border, window.solid-csd > box.vertical > box.vertical > frame > border { border: none; } window.background > box.vertical > toolbar.primary-toolbar toolitem .linked > button.image-button.raised, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem .linked > button.image-button.raised { min-height: 36px; min-width: 36px; padding: 0; margin: 0; border: none; } window.background > box.vertical > toolbar.primary-toolbar toolitem .linked > button.image-button.raised:active, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem .linked > button.image-button.raised:active, window.background > box.vertical > toolbar.primary-toolbar toolitem .linked > button.image-button.raised:checked, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem .linked > button.image-button.raised:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); } window.background > box.vertical > toolbar.primary-toolbar toolitem .linked > button.image-button.raised > widget > box > image, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem .linked > button.image-button.raised > widget > box > image { padding: 0; } window.background > box.vertical > toolbar.primary-toolbar toolitem button.flat.scale, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem button.flat.scale, window.background > box.vertical > toolbar.primary-toolbar toolitem button.scale.budgie-menu-launcher, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem button.scale.budgie-menu-launcher, window.background > box.vertical > toolbar.primary-toolbar toolitem .budgie-panel .scale#tasklist-button, .budgie-panel window.background > box.vertical > toolbar.primary-toolbar toolitem .scale#tasklist-button, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem .budgie-panel .scale#tasklist-button, .budgie-panel window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem .scale#tasklist-button, .budgie-panel window.background > box.vertical > toolbar.primary-toolbar toolitem button.scale.flat.launcher, .budgie-panel window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem button.scale.flat.launcher { min-height: 24px; min-width: 36px; padding: 0; margin-top: 8px; margin-bottom: 8px; } window.background > box.vertical > toolbar.primary-toolbar toolitem > box.horizontal:not(.linked) > button.toggle, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem > box.horizontal:not(.linked) > button.toggle, window.background > box.vertical > toolbar.primary-toolbar toolitem > .linked > button:not(.toggle):not(.raised):not(.flat), window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem > .linked > button:not(.toggle):not(.raised):not(.flat) { min-height: 28px; min-width: 28px; padding: 0; margin: 0; border: none; } window.background > box.vertical > toolbar.primary-toolbar toolitem > box.horizontal:not(.linked) > button.toggle:active, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem > box.horizontal:not(.linked) > button.toggle:active, window.background > box.vertical > toolbar.primary-toolbar toolitem > box.horizontal:not(.linked) > button.toggle:checked, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem > box.horizontal:not(.linked) > button.toggle:checked, window.background > box.vertical > toolbar.primary-toolbar toolitem > .linked > button:not(.toggle):not(.raised):not(.flat):active, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem > .linked > button:not(.toggle):not(.raised):not(.flat):active, window.background > box.vertical > toolbar.primary-toolbar toolitem > .linked > button:not(.toggle):not(.raised):not(.flat):checked, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem > .linked > button:not(.toggle):not(.raised):not(.flat):checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); } /******************** * Gnome Calculator * ********************/ window.background > headerbar.titlebar > button.flat.popup.toggle.text-button.title, window.background > headerbar.titlebar > button.popup.toggle.text-button.title.budgie-menu-launcher, .budgie-panel window.background > headerbar.titlebar > .popup.toggle.text-button.title#tasklist-button, .budgie-panel window.background > headerbar.titlebar > button.popup.toggle.text-button.title.flat.launcher { margin: 6px 0; } window.background > headerbar.titlebar > button.flat.popup.toggle.text-button.title > grid > widget, window.background > headerbar.titlebar > button.popup.toggle.text-button.title.budgie-menu-launcher > grid > widget, .budgie-panel window.background > headerbar.titlebar > .popup.toggle.text-button.title#tasklist-button > grid > widget, .budgie-panel window.background > headerbar.titlebar > button.popup.toggle.text-button.title.flat.launcher > grid > widget { padding-top: 3px; } window.background > headerbar.titlebar > button.flat.popup.toggle.text-button.title > grid > widget:dir(ltr), window.background > headerbar.titlebar > button.popup.toggle.text-button.title.budgie-menu-launcher > grid > widget:dir(ltr), .budgie-panel window.background > headerbar.titlebar > .popup.toggle.text-button.title#tasklist-button > grid > widget:dir(ltr), .budgie-panel window.background > headerbar.titlebar > button.popup.toggle.text-button.title.flat.launcher > grid > widget:dir(ltr) { padding-left: 4px; } window.background > headerbar.titlebar > button.flat.popup.toggle.text-button.title > grid > widget:dir(rtl), window.background > headerbar.titlebar > button.popup.toggle.text-button.title.budgie-menu-launcher > grid > widget:dir(rtl), .budgie-panel window.background > headerbar.titlebar > .popup.toggle.text-button.title#tasklist-button > grid > widget:dir(rtl), .budgie-panel window.background > headerbar.titlebar > button.popup.toggle.text-button.title.flat.launcher > grid > widget:dir(rtl) { padding-right: 4px; } window.background > grid.vertical > box.vertical > widget button, window.background > grid.vertical > box.vertical > box.vertical > widget button, window.background > grid.vertical > box.vertical grid.math-buttons button { font-weight: 700; } window.background > grid.vertical > box.vertical > widget button:not(.suggested-action):active, window.background > grid.vertical > box.vertical > box.vertical > widget button:not(.suggested-action):active, window.background > grid.vertical > box.vertical grid.math-buttons button:not(.suggested-action):active { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); } window.background > grid.vertical > box.vertical > widget button:not(.suggested-action):checked, window.background > grid.vertical > box.vertical > box.vertical > widget button:not(.suggested-action):checked, window.background > grid.vertical > box.vertical grid.math-buttons button:not(.suggested-action):checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.35); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); } /************ * Epiphany * ************/ headerbar.titlebar.incognito-mode entry { border: none; color: rgba(225, 219, 219, 0.8); background-color: rgba(119, 119, 119, 0.58); background-image: none; } headerbar.titlebar.incognito-mode entry image, headerbar.titlebar.incognito-mode entry image:hover { color: inherit; } headerbar.titlebar.incognito-mode entry:focus { border: none; box-shadow: 0 0 0 2px #8eb9ff, inset 0 0 0 1px #8eb9ff; border-color: #8eb9ff; background-image: none; } headerbar.titlebar.incognito-mode entry:disabled { color: rgba(225, 219, 219, 0.35); background-color: rgba(111, 111, 111, 0.23); } notebook > box > stack > box.vertical > paned.vertical > overlay > .floating-bar { color: rgba(222, 222, 222, 0.75); } .background headerbar entry.starred, .background headerbar entry.non-starred { border: none; color: rgba(225, 219, 219, 0.8); background-color: rgba(119, 119, 119, 0.58); background-image: none; } .background headerbar entry.starred image, .background headerbar entry.starred image:hover, .background headerbar entry.non-starred image, .background headerbar entry.non-starred image:hover { color: inherit; } .background headerbar entry.starred:focus, .background headerbar entry.non-starred:focus { border: none; box-shadow: 0 0 0 2px #8eb9ff, inset 0 0 0 1px #8eb9ff; border-color: #8eb9ff; background-image: none; } .background headerbar entry.starred:disabled, .background headerbar entry.non-starred:disabled { color: rgba(225, 219, 219, 0.35); background-color: rgba(111, 111, 111, 0.23); } .background headerbar entry.starred > image.right { color: #ccbb00; } .background headerbar entry.starred > image.right:hover, .background headerbar entry.starred > image.right:active, .background headerbar entry.starred > image.right:checked { color: #FFEA00; } popover.background:not(.emoji-picker) > box.vertical button:not(.destructive-action):not(.suggested-action):only-child:active, popover.background:not(.emoji-picker) > box.vertical button:not(.destructive-action):not(.suggested-action):only-child:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background { background-color: transparent; } popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background > row.activatable, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background > button { background-color: #4d4d4d; color: rgba(222, 222, 222, 0.85); border-radius: 5px; border: 1px solid rgba(255, 255, 255, 0.12); margin: 2px; } popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background > row.activatable:hover, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background > button:hover { color: #c5c5c5; border-color: rgba(255, 255, 255, 0.12); background-color: #5c5c5c; box-shadow: none; } popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background > row.activatable:active, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background > button:active, popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background > row.activatable:checked, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background > button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame { border: 1px solid rgba(255, 255, 255, 0.12); } popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > button.bookmarks-row { background-color: rgba(36, 36, 36, 0.35); color: rgba(222, 222, 222, 0.85); border-bottom: 1px dashed rgba(255, 255, 255, 0.05); padding: 6px; } popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row:hover, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row:hover, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > button.bookmarks-row:hover, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row:active, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row:active, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > button.bookmarks-row:active, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row:checked, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row:checked, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > button.bookmarks-row:checked { color: #dedede; background-color: rgba(222, 222, 222, 0.05); } popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row button.flat, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row button.flat, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > button.bookmarks-row button.flat, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row button.budgie-menu-launcher, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row button.budgie-menu-launcher, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > button.bookmarks-row button.budgie-menu-launcher, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row .budgie-panel #tasklist-button, .budgie-panel popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row #tasklist-button, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row .budgie-panel #tasklist-button, .budgie-panel popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row #tasklist-button, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > button.bookmarks-row .budgie-panel #tasklist-button, .budgie-panel .budgie-menu popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > button.bookmarks-row #tasklist-button, .budgie-panel popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row button.flat.launcher, .budgie-panel popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row button.flat.launcher { min-width: 16px; min-height: 16px; padding: 4px; border-radius: 100px; -gtk-outline-radius: 100px; } flowboxchild.bookmark-tag-widget { color: #333333; font-weight: 500; } flowboxchild.bookmark-tag-widget label { margin-bottom: 2px; } flowboxchild.bookmark-tag-widget-selected { color: #ffffff; } MsdOsdWindow.background.osd { border-radius: 2px; border: 1px solid rgba(16, 16, 16, 0.95); } MsdOsdWindow.background.osd .progressbar { background-color: #498dff; border: none; border-color: red; border-radius: 5px; } MsdOsdWindow.background.osd .trough { background-color: rgba(23, 23, 23, 0.95); border: none; border-radius: 5px; } .mate-panel-menu-bar, .mate-panel-menu-bar menubar, panel-toplevel.background, panel-toplevel.background menubar { background-color: #2f2f2f; } .mate-panel-menu-bar menubar, .mate-panel-menu-bar #PanelApplet label, .mate-panel-menu-bar #PanelApplet image, panel-toplevel.background menubar, panel-toplevel.background #PanelApplet label, panel-toplevel.background #PanelApplet image { color: #dedede; } .mate-panel-menu-bar button label, .mate-panel-menu-bar button image, .mate-panel-menu-bar #tasklist-button label, .mate-panel-menu-bar #tasklist-button image, panel-toplevel.background button label, panel-toplevel.background button image, panel-toplevel.background #tasklist-button label, panel-toplevel.background #tasklist-button image { color: inherit; } .mate-panel-menu-bar .wnck-pager, panel-toplevel.background .wnck-pager { color: #6f6f6f; background-color: rgba(22, 22, 22, 0.94); } .mate-panel-menu-bar .wnck-pager:hover, panel-toplevel.background .wnck-pager:hover { background-color: rgba(60, 60, 60, 0.94); } .mate-panel-menu-bar .wnck-pager:selected, panel-toplevel.background .wnck-pager:selected { color: #afcdff; background-color: #498dff; } .mate-panel-menu-bar na-tray-applet, panel-toplevel.background na-tray-applet { -NaTrayApplet-icon-padding: 0; -NaTrayApplet-icon-size: 16px; } .xfce4-panel.panel { background-color: rgba(47, 47, 47, 0.94); text-shadow: none; -gtk-icon-shadow: none; } #tasklist-button { color: rgba(222, 222, 222, 0.8); border-radius: 0; border: none; background-color: rgba(47, 47, 47, 0); } #tasklist-button:hover { color: #f8f8f8; background-color: rgba(0, 0, 0, 0.17); } #tasklist-button:checked { color: white; background-color: rgba(0, 0, 0, 0.25); box-shadow: inset 0 -2px #498dff; } .mate-panel-menu-bar button:not(#tasklist-button), panel-toplevel.background button:not(#tasklist-button), .xfce4-panel.panel button.flat, .xfce4-panel.panel button.budgie-menu-launcher, .xfce4-panel.panel .budgie-panel #tasklist-button, .budgie-panel .xfce4-panel.panel #tasklist-button { color: #dedede; border-radius: 0; border: none; background-color: rgba(47, 47, 47, 0); } .mate-panel-menu-bar button:hover:not(#tasklist-button), panel-toplevel.background button:hover:not(#tasklist-button), .xfce4-panel.panel button.flat:hover, .xfce4-panel.panel button.budgie-menu-launcher:hover, .xfce4-panel.panel .budgie-panel #tasklist-button:hover, .budgie-panel .xfce4-panel.panel #tasklist-button:hover { border: none; background-color: rgba(73, 73, 73, 0.94); } .mate-panel-menu-bar button:active:not(#tasklist-button), panel-toplevel.background button:active:not(#tasklist-button), .xfce4-panel.panel button.flat:active, .xfce4-panel.panel button.budgie-menu-launcher:active, .xfce4-panel.panel .budgie-panel #tasklist-button:active, .budgie-panel .xfce4-panel.panel #tasklist-button:active, .mate-panel-menu-bar button:checked:not(#tasklist-button), panel-toplevel.background button:checked:not(#tasklist-button), .xfce4-panel.panel button.flat:checked, .xfce4-panel.panel button.budgie-menu-launcher:checked, .xfce4-panel.panel .budgie-panel #tasklist-button:checked, .budgie-panel .xfce4-panel.panel #tasklist-button:checked { color: #ffffff; border: none; background-color: #498dff; } .mate-panel-menu-bar button:active:not(#tasklist-button) label, panel-toplevel.background button:active:not(#tasklist-button) label, .xfce4-panel.panel button.flat:active label, .xfce4-panel.panel button.budgie-menu-launcher:active label, .xfce4-panel.panel .budgie-panel #tasklist-button:active label, .budgie-panel .xfce4-panel.panel #tasklist-button:active label, .mate-panel-menu-bar button:active:not(#tasklist-button) image, panel-toplevel.background button:active:not(#tasklist-button) image, .xfce4-panel.panel button.flat:active image, .xfce4-panel.panel button.budgie-menu-launcher:active image, .xfce4-panel.panel .budgie-panel #tasklist-button:active image, .budgie-panel .xfce4-panel.panel #tasklist-button:active image, .mate-panel-menu-bar button:checked:not(#tasklist-button) label, panel-toplevel.background button:checked:not(#tasklist-button) label, .xfce4-panel.panel button.flat:checked label, .xfce4-panel.panel button.budgie-menu-launcher:checked label, .xfce4-panel.panel .budgie-panel #tasklist-button:checked label, .budgie-panel .xfce4-panel.panel #tasklist-button:checked label, .mate-panel-menu-bar button:checked:not(#tasklist-button) image, panel-toplevel.background button:checked:not(#tasklist-button) image, .xfce4-panel.panel button.flat:checked image, .xfce4-panel.panel button.budgie-menu-launcher:checked image, .xfce4-panel.panel .budgie-panel #tasklist-button:checked image, .budgie-panel .xfce4-panel.panel #tasklist-button:checked image { color: inherit; } /********* * Geary * *********/ .geary-titlebar-left separator { opacity: 0; } .geary-titlebar-left > button { min-width: 22px; } .geary-titlebar-right { box-shadow: none; } .geary-titlebar-right separator { opacity: 0; } .geary-titlebar-right > button { min-width: 22px; } window.background:not(.csd) > widget > separator { padding-top: 1px; margin-top: 1px; min-height: 2px; background-color: rgba(255, 255, 255, 0.07); } window.background:not(.csd) > widget > scrollbar { background-clip: border-box; } window.background:not(.csd) > widget > scrollbar, window.background:not(.csd) > widget > frame > border { border-color: rgba(255, 255, 255, 0.12); } window.background:not(.csd) > widget > entry, window.background:not(.csd) > widget > button > button { border: 1px solid rgba(255, 255, 255, 0.12); border-radius: 5px; box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.02); } window.background:not(.csd) > widget > entry, window.background:not(.csd) > widget .entry { border-radius: 5px; background-image: image(#242424); border: 1px solid rgba(255, 255, 255, 0.12); } window.background:not(.csd) > widget > entry:focus, window.background:not(.csd) > widget .entry:focus { border-color: #8eb9ff; box-shadow: inset 0 0 0 2px #8eb9ff; } window.background:not(.csd) > widget > spinbutton { background-image: image(#484848); border: 1px solid rgba(255, 255, 255, 0.12); } window.background:not(.csd) > widget > spinbutton:active { background-image: image(rgba(119, 119, 119, 0.98)); } window.background:not(.csd) > widget > spinbutton .entry { border-top-right-radius: 0; border-bottom-right-radius: 0; } window.background:not(.csd) > widget > button { padding-top: 3px; padding-bottom: 3px; } window.background:not(.csd) > widget > button > button { outline-style: none; } window.background:not(.csd) > widget > button > button:active { background-image: image(rgba(119, 119, 119, 0.98)); border: none; box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.12); } window.background:not(.csd) > widget > button > button label { padding: 4px 6px; } window.background:not(.csd) > menu, window.background:not(.csd) .menu { background-color: #404040; border-radius: 0; border: none; } window.background:not(.csd) > menu .separator:not(label), .csd window.background:not(.csd) > menu .separator:not(label), window.background:not(.csd) .menu .separator:not(label), .csd window.background:not(.csd) .menu .separator:not(label) { color: rgba(255, 255, 255, 0.12); } window.background:not(.csd) > menu > menuitem { padding: 4px 6px; } window.background:not(.csd) > menu > menuitem > label:disabled { color: rgba(222, 222, 222, 0.45); } window.background:not(.csd) > menu > menuitem > radio, window.background:not(.csd) > menu > menuitem > check { padding: 0 2px 0 4px; } #MozillaGtkWidget.background { background-color: #333333; } #MozillaGtkWidget.background .background, #MozillaGtkWidget.background frame, #MozillaGtkWidget.background separator, #MozillaGtkWidget.background scrolledwindow { background-color: #333333; } #MozillaGtkWidget.background scrollbar { background-color: transparent; } #MozillaGtkWidget.background scrollbar slider { background-color: gray; } #MozillaGtkWidget.background scrollbar slider:hover { background-color: #9a9a9a; } #MozillaGtkWidget.background scrollbar slider:hover:active { background-color: #b3b3b3; } #MozillaGtkWidget.background scrollbar slider:disabled { background-color: transparent; } #MozillaGtkWidget.background *:not(menuitem):hover, #MozillaGtkWidget.background *:not(menuitem):hover button, #MozillaGtkWidget.background *:focus, #MozillaGtkWidget.background *:focus button, #MozillaGtkWidget.background *:active, #MozillaGtkWidget.background *:active button, #MozillaGtkWidget.background *:checked, #MozillaGtkWidget.background *:checked button { color: #dedede; } #MozillaGtkWidget.background > window.background > menu { background-color: #404040; border-radius: 0; border-color: rgba(255, 255, 255, 0.12); } #MozillaGtkWidget.background > window.background > menu > separator { margin-top: 2px; margin-bottom: 2px; background-color: rgba(255, 255, 255, 0.12); } #MozillaGtkWidget.background > widget border { border-color: rgba(255, 255, 255, 0.12); } #MozillaGtkWidget.background > widget separator { background-color: rgba(255, 255, 255, 0.12); } #MozillaGtkWidget.background > widget > scrolledwindow > textview { background-color: #404040; } #MozillaGtkWidget.background > widget > scrolledwindow > textview text { background-color: transparent; color: #aaaaaa; } /*************** * Chrome(ium) * ***************/ window.background.chromium headerbar.titlebar button.toggle { border: none; background-color: transparent; background-image: none; } window.background.chromium headerbar.titlebar button.toggle:hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); } window.background.chromium headerbar.titlebar button.toggle:checked, window.background.chromium headerbar.titlebar button.toggle:active { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } window.background.chromium headerbar.titlebar button.titlebutton { min-width: 16px; min-height: 16px; margin: 0; padding: 0 0; background-size: auto; color: transparent; } window.background.chromium button { border: none; } window.background.chromium entry.chromium, window.background.chromium entry.chromium:focus { border-image: none; border: 1px solid rgba(255, 255, 255, 0.12); } window.background.chromium > textview.view { background-color: #242424; } /**************** * Libre-Office * ****************/ window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal { background-image: none; background-color: transparent; box-shadow: inset 0 -1px rgba(255, 255, 255, 0.12); } window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.flat.small-button, window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.budgie-menu-launcher, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > .small-button#tasklist-button, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.flat.launcher { color: rgba(225, 219, 219, 0.8); border: none; border-radius: 50px; background-image: none; } window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.flat.small-button:hover, window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.budgie-menu-launcher:hover, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > .small-button#tasklist-button:hover, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.flat.launcher:hover { background-color: rgba(93, 93, 93, 0.98); color: rgba(237, 233, 233, 0.8); } window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.flat.small-button:active, window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.budgie-menu-launcher:active, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > .small-button#tasklist-button:active, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.flat.launcher:active, window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.flat.small-button:checked, window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.budgie-menu-launcher:checked, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > .small-button#tasklist-button:checked, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.flat.launcher:checked { background-color: rgba(255, 0, 0, 0.65); color: white; } window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.flat.small-button:disabled, window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.budgie-menu-launcher:disabled, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > .small-button#tasklist-button:disabled, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.flat.launcher:disabled { color: alpha(rgba(225, 219, 219, 0.8),0.6); } window.background:not(.solid-csd) > notebook:not(.frame) { border: 0 none transparent; background-color: #242424; } window.background:not(.solid-csd) > notebook:not(.frame) > stack { border: none; box-shadow: none; } window > box.vertical > box.horizontal > toolbar, window > box.vertical > box.horizontal > .inline-toolbar { background-color: transparent; box-shadow: none; } window > box.vertical > box.horizontal > toolbar toolitem > box label, window > box.vertical > box.horizontal > .inline-toolbar toolitem > box label, window > box.vertical > box.horizontal > toolbar toolitem > box entry, window > box.vertical > box.horizontal > .inline-toolbar toolitem > box entry { min-height: 20px; padding-top: 2px; padding-bottom: 2px; font-size: 90%; } window > box.vertical > box.horizontal > toolbar toolitem > box > label, window > box.vertical > box.horizontal > .inline-toolbar toolitem > box > label { color: #dedede; } window > box.vertical > box.horizontal > widget { background-color: transparent; } .panel { background-color: transparent; transition: all 100ms ease-in-out; color: white; } .panel.maximized { background-color: black; } .panel.translucent { background-color: rgba(0, 0, 0, 0.5); box-shadow: 0 1px 3px rgba(0, 0, 0, 0.24), 0 1px 1px rgba(0, 0, 0, 0.52); } .panel.color-light .translucent { background-color: rgba(255, 255, 255, 0.85); box-shadow: inset 0 -1px 1px rgba(255, 255, 255, 0.2), 0 1px 3px rgba(0, 0, 0, 0.24), 0 1px 1px rgba(0, 0, 0, 0.12); } .panel.color-light .composited-indicator > revealer label, .panel.color-light .composited-indicator > revealer image, .panel.color-light .composited-indicator > revealer spinner { background-color: rgba(255, 255, 255, 0.85); box-shadow: inset 0 -1px 1px rgba(255, 255, 255, 0.2), 0 1px 3px rgba(0, 0, 0, 0.24), 0 1px 1px rgba(0, 0, 0, 0.12); } .panel.color-light .composited-indicator .keyboard { background-color: rgba(0, 0, 0, 0.65); box-shadow: 0 0 2px rgba(255, 255, 255, 0.3), 0 1px 0 rgba(255, 255, 255, 0.25); color: #fff; text-shadow: none; } menubar .panel, .panel menubar { box-shadow: none; border: none; background: none; color: white; } .panel popover { padding: 2px 4px; } .panel popover button { border-color: transparent; background-color: transparent; box-shadow: none; } .panel popover button:hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); } .panel popover button:active { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } .panel popover button:active label { color: white; } .panel popover button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.35); text-shadow: none; -gtk-icon-shadow: none; } .panel popover button:checked label { color: white; } .panel popover button:disabled { background-color: transparent; } .panel popover button:disabled label, .panel popover button:disabled { color: rgba(222, 222, 222, 0.45); } .panel popover button, .panel popover button:hover, .panel popover button:active, .panel popover button:checked, .panel popover button:disabled { border-color: transparent; } .panel popover .linked > button { color: #dedede; background-color: #484848; border-color: rgba(255, 255, 255, 0.12); } .panel popover .linked > button:hover { color: #c5c5c5; border-color: rgba(255, 255, 255, 0.12); background-color: #5c5c5c; box-shadow: none; } .panel popover .linked > button:active, .panel popover .linked > button:checked { color: #ffffff; background-color: #0e6bff; border-color: #0e6bff; background-image: linear-gradient(180deg, #4c97fe 0%, #0564e3 100%); box-shadow: none; } .panel popover separator.horizontal { margin: 0 -4px; } .panel popover separator.vertical { background: none; } .panel popover .sidebar { border-style: none; background: none; } .panel popover .sidebar .view:hover, .panel popover .sidebar iconview:hover { border-radius: 5px; background-color: rgba(255, 255, 255, 0.1); } .panel popover .sidebar .view:selected, .panel popover .sidebar iconview:selected, .panel popover .sidebar .view:selected:focus, .panel popover .sidebar iconview:selected:focus { text-shadow: none; transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); background-color: rgba(255, 255, 255, 0.35); border-radius: 5px; } .composited-indicator { padding: 0 6px; } .composited-indicator > revealer label, .composited-indicator > revealer image, .composited-indicator > revealer spinner { color: #fff; font-weight: bold; text-shadow: 0 0 2px alpha #000, 0.3, 0 1px 2px alpha #000, 0.6; transition: all 200ms ease-in-out; -gtk-icon-shadow: 0 0 2px alpha #000, 0.3, 0 1px 2px alpha #000, 0.6; } .composited-indicator .keyboard { background-color: #fff; border-radius: 2px; box-shadow: 0 0 2px alpha #000, 0.3, 0 1px 2px alpha #000, 0.6; color: #333; font-weight: 600; padding: 0 3px; text-shadow: none; } UnityDecoration { -UnityDecoration-extents: 28px 1px 1px 1px; -UnityDecoration-input-extents: 10px; -UnityDecoration-shadow-offset-x: 0px; -UnityDecoration-shadow-offset-y: 6px; -UnityDecoration-active-shadow-color: rgba(0, 0, 0, 0.35); -UnityDecoration-active-shadow-radius: 12px; -UnityDecoration-inactive-shadow-color: rgba(0, 0, 0, 0.15); -UnityDecoration-inactive-shadow-radius: 7px; -UnityDecoration-glow-size: 10px; -UnityDecoration-glow-color: #498dff; -UnityDecoration-title-indent: 10px; -UnityDecoration-title-fade: 35px; -UnityDecoration-title-alignment: 0.0; } UnityDecoration.background { border-radius: 6px; background-color: transparent; } UnityDecoration .top { border: 1px solid rgba(255, 255, 255, 0.12); border-bottom-width: 0; border-radius: 6px 6px 0 0; padding: 1px 6px 0 6px; background-color: rgba(55, 55, 55, 0.98); background-image: none; color: rgba(225, 219, 219, 0.8); box-shadow: inset 0 1px rgba(63, 63, 63, 0.98); } UnityDecoration .top:backdrop { border-bottom-width: 0; color: rgba(225, 219, 219, 0.5); } UnityDecoration .left, UnityDecoration .right, UnityDecoration .bottom, UnityDecoration .left:backdrop, UnityDecoration .right:backdrop, UnityDecoration .bottom:backdrop { background-color: rgba(255, 255, 255, 0.12); } UnityPanelWidget, .unity-panel { background-color: rgba(47, 47, 47, 0.95); color: white; box-shadow: none; } UnityPanelWidget:backdrop, .unity-panel:backdrop { color: #e1e1e1; } .unity-panel.menubar.menuitem:hover, .unity-panel.menubar .menuitem *:hover { border-radius: 0; color: #ffffff; background-image: linear-gradient(to bottom, #498dff, #498dff); border-bottom: none; } .lightdm.menu { background-image: none; background-color: rgba(0, 0, 0, 0.4); border-color: rgba(255, 255, 255, 0.8); border-radius: 4px; padding: 1px; color: white; } .lightdm-combo .menu { background-color: rgba(75, 75, 75, 0.98); border-radius: 0px; padding: 0px; color: white; } .lightdm.menu .menuitem *, .lightdm.menu .menuitem.check:active, .lightdm.menu .menuitem.radio:active { color: white; } .lightdm.menubar { color: rgba(255, 255, 255, 0.8); background-image: none; background-color: rgba(0, 0, 0, 0.5); } .lightdm.menubar > .menuitem { padding: 2px 6px; } .lightdm-combo.combobox-entry .button, .lightdm-combo .cell, .lightdm-combo .button, .lightdm-combo .entry, .lightdm.button, .lightdm.entry { background-image: none; background-color: rgba(0, 0, 0, 0.3); border-color: rgba(255, 255, 255, 0.4); border-radius: 10px; padding: 7px; color: white; text-shadow: none; } .lightdm.button, .lightdm.button:hover, .lightdm.button:active, .lightdm.button:active:focus, .lightdm.entry, .lightdm.entry:hover, .lightdm.entry:active, .lightdm.entry:active:focus { background-image: none; border-image: none; } .lightdm.button:focus, .lightdm.entry:focus { border-color: rgba(255, 255, 255, 0.1); border-width: 1px; border-style: solid; color: white; } .lightdm.entry:selected { background-color: rgba(255, 255, 255, 0.8); } .lightdm.entry:active { -gtk-icon-source: -gtk-icontheme("process-working-symbolic"); animation: dashentry_spinner 1s infinite linear; } .lightdm.option-button { padding: 2px; background: none; border: 0; } .lightdm.toggle-button { background: none; border-width: 0; } .lightdm.toggle-button.selected { background-color: rgba(0, 0, 0, 0.7); border-width: 1px; } @keyframes dashentry_spinner { to { -gtk-icon-transform: rotate(1turn); } } .overlay-bar { background-color: #498dff; border-color: #498dff; border-radius: 2px; padding: 3px 6px; margin: 3px; } .overlay-bar label { color: #ffffff; } GraniteWidgetsThinPaned { background-color: transparent; background-image: none; margin: 0; border-left: 1px solid rgba(255, 255, 255, 0.12); border-right: 1px solid rgba(255, 255, 255, 0.12); } GraniteWidgetsPopOver .frame, GraniteWidgetsStaticNotebook .frame { border: none; } .help_button { border-radius: 100px; padding: 3px 9px; } toolbar.secondary-toolbar, .secondary-toolbar.inline-toolbar { padding: 3px; border-bottom: 1px solid rgba(255, 255, 255, 0.12); } toolbar.secondary-toolbar button, .secondary-toolbar.inline-toolbar button { padding: 0 3px 0 3px; } toolbar.bottom-toolbar, .bottom-toolbar.inline-toolbar { padding: 5px; border-width: 1px 0 0 0; border-style: solid; border-color: rgba(255, 255, 255, 0.12); background-color: #333333; } toolbar.bottom-toolbar button, .bottom-toolbar.inline-toolbar button { padding: 2px 3px 2px 3px; } .source-list { -GtkTreeView-horizontal-separator: 1px; -GtkTreeView-vertical-separator: 6px; } .source-list, .source-list.view, iconview.source-list { background-color: #333333; color: #dedede; -gtk-icon-style: regular; } .source-list.category-expander { color: transparent; } .source-list.view:hover, iconview.source-list:hover { background-color: #404040; } .source-list.view:selected, iconview.source-list:selected, .source-list.view:hover:selected, iconview.source-list:hover:selected, .source-list.view:selected:focus, iconview.source-list:selected:focus, .source-list.category-expander:hover { color: #ffffff; background-color: #498dff; } .source-list scrollbar, .source-list junction { border-image: none; border-color: transparent; background-color: #333333; background-image: none; } .source-list.badge, .source-list.badge:hover, .source-list.badge:selected, .source-list.badge:selected:focus, .source-list.badge:hover:selected { background-image: none; background-color: #498dff; color: #ffffff; border-radius: 10px; padding: 0 6px; margin: 0 3px; border-width: 0; } .source-list.badge:selected, .source-list.badge:selected:focus, .source-list.badge:hover:selected { background-color: #ffffff; color: #498dff; } .source-list.category-expander { color: #dedede; -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); -GtkTreeView-expander-size: 16; } .source-list.category-expander, .source-list.category-expander:backdrop { color: transparent; border: none; } .source-list.category-expander:checked { -gtk-icon-source: -gtk-icontheme("pan-down-symbolic"); } GraniteWidgetsWelcome { background-color: #242424; } GraniteWidgetsWelcome label { color: #898989; font-size: 11px; text-shadow: none; } GraniteWidgetsWelcome .h1, GraniteWidgetsWelcome .h3 { color: rgba(222, 222, 222, 0.8); } .help_button { border-radius: 0; } GraniteWidgetsPopOver { -GraniteWidgetsPopOver-arrow-width: 21; -GraniteWidgetsPopOver-arrow-height: 10; -GraniteWidgetsPopOver-border-radius: 2px; -GraniteWidgetsPopOver-border-width: 1; -GraniteWidgetsPopOver-shadow-size: 12; border: 1px solid rgba(0, 0, 0, 0.3); margin: 0; } .popover_bg { background-image: linear-gradient(to bottom, #242424, #242424); border: 1px solid rgba(0, 0, 0, 0.3); } GraniteWidgetsPopOver .sidebar.view, GraniteWidgetsPopOver iconview.sidebar, GraniteWidgetsPopOver * { background-color: transparent; } GraniteWidgetsXsEntry entry { padding: 4px; } .h1 { font-size: 24px; } .h2 { font-size: 18px; } .h3 { font-size: 11px; } .h4, .category-label { color: #ababab; font-weight: 600; } .h4 { padding-bottom: 6px; padding-top: 6px; } GtkListBox .h4 { padding-left: 6px; } #panel_window { background-color: rgba(47, 47, 47, 0.94); color: #dedede; font-weight: bold; box-shadow: inset 0 -1px rgba(29, 29, 29, 0.94); } #panel_window menubar { padding-left: 5px; } #panel_window menubar, #panel_window menubar > menuitem { background-color: transparent; color: #dedede; font-weight: bold; } #panel_window menubar menuitem:disabled { color: rgba(222, 222, 222, 0.5); } #panel_window menubar menuitem:disabled label { color: inherit; } #panel_window menubar menu > menuitem { font-weight: normal; } #login_window, #shutdown_dialog, #restart_dialog { font-weight: normal; border-style: none; background-color: transparent; color: #dedede; } #content_frame { padding-bottom: 14px; background-color: #333333; border-top-left-radius: 2px; border-top-right-radius: 2px; border: solid rgba(0, 0, 0, 0.1); border-width: 1px 1px 0 1px; } #content_frame button { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: #484848; } #content_frame button:hover { color: #c5c5c5; border-color: rgba(255, 255, 255, 0.12); background-color: #5c5c5c; box-shadow: none; } #content_frame button:active, #content_frame button:checked { color: #ffffff; background-color: #0e6bff; border-color: #0e6bff; background-image: linear-gradient(180deg, #4c97fe 0%, #0564e3 100%); box-shadow: none; } #content_frame button:disabled { border-color: rgba(255, 255, 255, 0.12); background-color: rgba(72, 72, 72, 0.55); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } #content_frame button:disabled label, #content_frame button:disabled { color: rgba(222, 222, 222, 0.45); } #buttonbox_frame { padding-top: 20px; padding-bottom: 0px; border-style: none; background-color: rgba(55, 55, 55, 0.98); border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border: solid rgba(0, 0, 0, 0.1); border-width: 0 1px 1px 1px; box-shadow: inset 0 1px #484848; } #buttonbox_frame button { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(92, 92, 92, 0.35); } #buttonbox_frame button:hover { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(110, 110, 110, 0.45); } #buttonbox_frame button:active, #buttonbox_frame button:checked { color: #ffffff; border-color: rgba(255, 255, 255, 0.12); background-color: #498dff; } #buttonbox_frame button:disabled { color: #5c5c5c; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(92, 92, 92, 0.2); } #login_window #user_combobox { color: #dedede; font-size: 13px; } #login_window #user_combobox menu { font-weight: normal; } #user_image { padding: 3px; border-radius: 2px; } #shutdown_button.button { background-clip: border-box; color: green; background-color: #f8464c; border-color: #f6151c; background-image: none; } #shutdown_button.button:hover { background-clip: border-box; color: green; background-color: #fa777c; border-color: #f8464c; background-image: none; } #shutdown_button.button:active, #shutdown_button.button:checked { background-clip: border-box; color: green; background-color: #f6151c; border-color: #d0080f; background-image: none; } #restart_button.button { background-clip: border-box; color: green; background-color: #3484e2; border-color: #1c6bc7; background-image: none; } #restart_button.button:hover { background-clip: border-box; color: green; background-color: #619fe8; border-color: #3484e2; background-image: none; } #restart_button.button:active, #restart_button.button:checked { background-clip: border-box; color: green; background-color: #1c6bc7; border-color: #16539a; background-image: none; } #greeter_infobar { border-bottom-width: 0; font-weight: bold; } .nautilus-window paned > separator { background-image: linear-gradient(to bottom, #484848, #484848); } filechooser paned > separator { background-image: linear-gradient(to bottom, #484848, #484848); } filechooser.csd.background, filechooser placessidebar list, .nautilus-window.csd.background, .nautilus-window placessidebar list { background-color: transparent; } filechooser.csd.background, filechooser placessidebar, .nautilus-window.csd.background, .nautilus-window placessidebar { background-color: rgba(59, 59, 59, 0.94); border-radius: 0 0 6px 6px; } filechooser placessidebar.sidebar, .nautilus-window placessidebar.sidebar { border-right: none; background-color: transparent; } filechooser placessidebar.sidebar row.sidebar-row, .nautilus-window placessidebar.sidebar row.sidebar-row { color: #dedede; } filechooser placessidebar.sidebar row.sidebar-row .sidebar-icon, .nautilus-window placessidebar.sidebar row.sidebar-row .sidebar-icon { color: rgba(222, 222, 222, 0.85); } filechooser placessidebar.sidebar row.sidebar-row.has-open-popup, filechooser placessidebar.sidebar row.sidebar-row.has-open-popup label, filechooser placessidebar.sidebar row.sidebar-row.has-open-popup image, filechooser placessidebar.sidebar row.sidebar-row:disabled, filechooser placessidebar.sidebar row.sidebar-row:disabled label, filechooser placessidebar.sidebar row.sidebar-row:disabled image, .nautilus-window placessidebar.sidebar row.sidebar-row.has-open-popup, .nautilus-window placessidebar.sidebar row.sidebar-row.has-open-popup label, .nautilus-window placessidebar.sidebar row.sidebar-row.has-open-popup image, .nautilus-window placessidebar.sidebar row.sidebar-row:disabled, .nautilus-window placessidebar.sidebar row.sidebar-row:disabled label, .nautilus-window placessidebar.sidebar row.sidebar-row:disabled image { color: rgba(222, 222, 222, 0.4); } filechooser placessidebar.sidebar row.sidebar-row:backdrop, .nautilus-window placessidebar.sidebar row.sidebar-row:backdrop { opacity: 0.85; } filechooser placessidebar.sidebar row.sidebar-row:selected.has-open-popup, filechooser placessidebar.sidebar row.sidebar-row:selected, filechooser placessidebar.sidebar row.sidebar-row:selected:hover, filechooser placessidebar.sidebar row.sidebar-row:active:hover, .nautilus-window placessidebar.sidebar row.sidebar-row:selected.has-open-popup, .nautilus-window placessidebar.sidebar row.sidebar-row:selected, .nautilus-window placessidebar.sidebar row.sidebar-row:selected:hover, .nautilus-window placessidebar.sidebar row.sidebar-row:active:hover { color: #dedede; background-color: rgba(199, 199, 199, 0.25); } filechooser placessidebar.sidebar row.sidebar-row:selected.has-open-popup, filechooser placessidebar.sidebar row.sidebar-row:selected.has-open-popup label, filechooser placessidebar.sidebar row.sidebar-row:selected.has-open-popup image, filechooser placessidebar.sidebar row.sidebar-row:selected, filechooser placessidebar.sidebar row.sidebar-row:selected label, filechooser placessidebar.sidebar row.sidebar-row:selected image, filechooser placessidebar.sidebar row.sidebar-row:selected:hover, filechooser placessidebar.sidebar row.sidebar-row:selected:hover label, filechooser placessidebar.sidebar row.sidebar-row:selected:hover image, filechooser placessidebar.sidebar row.sidebar-row:active:hover, filechooser placessidebar.sidebar row.sidebar-row:active:hover label, filechooser placessidebar.sidebar row.sidebar-row:active:hover image, .nautilus-window placessidebar.sidebar row.sidebar-row:selected.has-open-popup, .nautilus-window placessidebar.sidebar row.sidebar-row:selected.has-open-popup label, .nautilus-window placessidebar.sidebar row.sidebar-row:selected.has-open-popup image, .nautilus-window placessidebar.sidebar row.sidebar-row:selected, .nautilus-window placessidebar.sidebar row.sidebar-row:selected label, .nautilus-window placessidebar.sidebar row.sidebar-row:selected image, .nautilus-window placessidebar.sidebar row.sidebar-row:selected:hover, .nautilus-window placessidebar.sidebar row.sidebar-row:selected:hover label, .nautilus-window placessidebar.sidebar row.sidebar-row:selected:hover image, .nautilus-window placessidebar.sidebar row.sidebar-row:active:hover, .nautilus-window placessidebar.sidebar row.sidebar-row:active:hover label, .nautilus-window placessidebar.sidebar row.sidebar-row:active:hover image { color: #dedede; } filechooser placessidebar.sidebar row.sidebar-row:not(:selected) button.sidebar-button, .nautilus-window placessidebar.sidebar row.sidebar-row:not(:selected) button.sidebar-button { color: #dedede; } filechooser placessidebar.sidebar row.sidebar-row:not(:selected) button.sidebar-button:hover, .nautilus-window placessidebar.sidebar row.sidebar-row:not(:selected) button.sidebar-button:hover { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(110, 110, 110, 0.45); } filechooser placessidebar.sidebar row.sidebar-row:not(:selected) button.sidebar-button:active, .nautilus-window placessidebar.sidebar row.sidebar-row:not(:selected) button.sidebar-button:active { color: #ffffff; background-color: #0e6bff; border-color: #0e6bff; background-image: linear-gradient(180deg, #4c97fe 0%, #0564e3 100%); box-shadow: none; } filechooser placessidebar.sidebar row.sidebar-row:not(:selected) button.sidebar-button:not(:hover):not(:active) > image, .nautilus-window placessidebar.sidebar row.sidebar-row:not(:selected) button.sidebar-button:not(:hover):not(:active) > image { opacity: 0.5; } filechooser placessidebar.sidebar row.sidebar-row.sidebar-new-bookmark-row, .nautilus-window placessidebar.sidebar row.sidebar-row.sidebar-new-bookmark-row { color: #498dff; } filechooser placessidebar.sidebar row.sidebar-row.sidebar-new-bookmark-row .sidebar-icon, .nautilus-window placessidebar.sidebar row.sidebar-row.sidebar-new-bookmark-row .sidebar-icon { color: inherit; } filechooser placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled), filechooser placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled) label, filechooser placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled) .sidebar-icon, .nautilus-window placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled), .nautilus-window placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled) label, .nautilus-window placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled) .sidebar-icon { color: #dedede; } filechooser placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled):selected, .nautilus-window placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled):selected { background-color: #F08437; } filechooser placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled):selected, filechooser placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled):selected label, filechooser placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled):selected .sidebar-icon, .nautilus-window placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled):selected, .nautilus-window placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled):selected label, .nautilus-window placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled):selected .sidebar-icon { color: #dedede; } filechooser placessidebar.sidebar separator, .nautilus-window placessidebar.sidebar separator { background-color: transparent; } filechooser.maximized placessidebar, .nautilus-window.maximized placessidebar { border-radius: 0; } filechooser.maximized placessidebar.sidebar, .nautilus-window.maximized placessidebar.sidebar { background-color: #3b3b3b; } .nemo-window .sidebar { color: #dedede; background-color: rgba(59, 59, 59, 0.94); } .nemo-window .sidebar .view, .nemo-window .sidebar iconview, .nemo-window .sidebar row { background-color: transparent; color: #dedede; } .nemo-window .sidebar .view.cell:selected, .nemo-window .sidebar iconview.cell:selected, .nemo-window .sidebar row.cell:selected { background-color: #498dff; color: #ffffff; } .nemo-window .sidebar .view.expander, .nemo-window .sidebar iconview.expander, .nemo-window .sidebar row.expander { color: rgba(145, 145, 145, 0.97); } .nemo-window .sidebar .view.expander:hover, .nemo-window .sidebar iconview.expander:hover, .nemo-window .sidebar row.expander:hover { color: #dedede; } .nemo-window .sidebar separator { background-color: transparent; } .caja-side-pane, .caja-side-pane > notebook > stack > widget > box, .caja-side-pane text, .caja-side-pane treeview { color: #dedede; caret-color: #dedede; background-color: #3b3b3b; } .caja-side-pane > box button:not(:active):not(:checked) { color: #dedede; } .caja-side-pane .frame { border-color: rgba(255, 255, 255, 0.12); } .caja-side-pane junction { background-color: rgba(46, 46, 46, 0.94); } filechooser actionbar { color: #dedede; background-color: rgba(59, 59, 59, 0.94); border-color: rgba(255, 255, 255, 0.12); } filechooser actionbar label, filechooser actionbar combobox { color: #dedede; } .gedit-bottom-panel-paned { background-color: #242424; } .gedit-side-panel-paned > separator { background-image: linear-gradient(to bottom, #484848, #484848); } .gedit-bottom-panel-paned > separator { background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.12), rgba(255, 255, 255, 0.12)); } .gedit-document-panel { background-color: rgba(59, 59, 59, 0.94); } .maximized .gedit-document-panel { background-color: #3b3b3b; } .gedit-document-panel row { color: #dedede; background-color: rgba(222, 222, 222, 0); } .gedit-document-panel row:hover { background-color: rgba(222, 222, 222, 0.15); } .gedit-document-panel row:active { color: #ffffff; background-color: #498dff; } .gedit-document-panel row:active button { color: #ffffff; } .gedit-document-panel row:selected, .gedit-document-panel row:selected:hover { color: #ffffff; background-color: #498dff; } .gedit-document-panel row:hover:not(:selected) button:active { color: #dedede; } filechooser actionbar button { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: #484848; } .caja-side-pane > box button:hover:not(:active), filechooser actionbar button:hover { color: #c5c5c5; border-color: rgba(255, 255, 255, 0.12); background-color: #5c5c5c; box-shadow: none; } filechooser actionbar button:active, filechooser actionbar button:checked { color: #ffffff; background-color: #0e6bff; border-color: #0e6bff; background-image: linear-gradient(180deg, #4c97fe 0%, #0564e3 100%); box-shadow: none; } filechooser actionbar button:disabled { border-color: rgba(255, 255, 255, 0.12); background-color: rgba(72, 72, 72, 0.55); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } filechooser actionbar button:disabled label, filechooser actionbar button:disabled { color: rgba(222, 222, 222, 0.45); } filechooser actionbar entry { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: #242424; } filechooser actionbar entry:focus { color: #dedede; border-color: #8eb9ff; background-color: #242424; box-shadow: inset 0 0 0 2px #8eb9ff; } filechooser actionbar entry:disabled { color: rgba(222, 222, 222, 0.45); border-color: rgba(255, 255, 255, 0.12); background-color: rgba(36, 36, 36, 0.55); } filechooser placessidebar.sidebar scrollbar, .nautilus-window placessidebar.sidebar scrollbar, .nemo-window .sidebar scrollbar, .caja-side-pane scrollbar { border-color: transparent; } filechooser placessidebar.sidebar scrollbar.overlay-indicator:not(.dragging):not(.hovering) slider, .nautilus-window placessidebar.sidebar scrollbar.overlay-indicator:not(.dragging):not(.hovering) slider, .nemo-window .sidebar scrollbar.overlay-indicator:not(.dragging):not(.hovering) slider, .caja-side-pane scrollbar.overlay-indicator:not(.dragging):not(.hovering) slider { background-color: rgba(255, 255, 255, 0.35); border: none; } filechooser placessidebar.sidebar scrollbar slider, .nautilus-window placessidebar.sidebar scrollbar slider, .nemo-window .sidebar scrollbar slider, .caja-side-pane scrollbar slider { min-width: 4px; background-color: rgba(255, 255, 255, 0.7); } filechooser placessidebar.sidebar scrollbar slider:hover, .nautilus-window placessidebar.sidebar scrollbar slider:hover, .nemo-window .sidebar scrollbar slider:hover, .caja-side-pane scrollbar slider:hover { background-color: white; } filechooser placessidebar.sidebar scrollbar slider:hover:active, .nautilus-window placessidebar.sidebar scrollbar slider:hover:active, .nemo-window .sidebar scrollbar slider:hover:active, .caja-side-pane scrollbar slider:hover:active { background-color: rgba(132, 132, 132, 0.98); } filechooser placessidebar.sidebar scrollbar slider:disabled, .nautilus-window placessidebar.sidebar scrollbar slider:disabled, .nemo-window .sidebar scrollbar slider:disabled, .caja-side-pane scrollbar slider:disabled { background-color: transparent; } filechooser placessidebar.sidebar scrollbar trough, .nautilus-window placessidebar.sidebar scrollbar trough, .nemo-window .sidebar scrollbar trough, .caja-side-pane scrollbar trough { background-color: transparent; } @define-color theme_fg_color #dedede; @define-color theme_text_color #dedede; @define-color theme_bg_color #333333; @define-color theme_base_color #242424; @define-color theme_selected_bg_color #498dff; @define-color theme_selected_fg_color #ffffff; @define-color fg_color #dedede; @define-color text_color #dedede; @define-color bg_color #333333; @define-color base_color #242424; @define-color selected_bg_color #498dff; @define-color selected_fg_color #ffffff; @define-color insensitive_bg_color #383838; @define-color insensitive_fg_color alpha(#dedede, 0.5); @define-color insensitive_base_color #242424; @define-color theme_unfocused_fg_color #dedede; @define-color theme_unfocused_text_color #dedede; @define-color theme_unfocused_bg_color #333333; @define-color theme_unfocused_base_color #242424; @define-color borders rgba(255, 255, 255, 0.12); @define-color unfocused_borders rgba(255, 255, 255, 0.12); @define-color warning_color #F27835; @define-color error_color #FC4138; @define-color success_color #71c837; @define-color placeholder_text_color #A8A8A8; @define-color link_color #3484e2; @define-color content_view_bg #242424; /****************** * Budgie Desktop * ******************/ .budgie-settings-window buttonbox.inline-toolbar button, .budgie-popover:not(.budgie-menu) button.flat:not(.image-button), .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:not(.image-button), .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:not(.image-button), .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:not(.image-button), .workspace-switcher .workspace-add-button, .raven-mpris button.image-button, .drop-shadow button, window.budgie-switcher-window .drop-shadow button { border: none; background-color: transparent; box-shadow: none; } .budgie-settings-window buttonbox.inline-toolbar button:hover, .budgie-popover:not(.budgie-menu) button.flat:hover:not(.image-button), .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:hover:not(.image-button), .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:hover:not(.image-button), .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:hover:not(.image-button), .workspace-switcher .workspace-add-button:hover, .raven-mpris button.image-button:hover, .drop-shadow button:hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); } .budgie-settings-window buttonbox.inline-toolbar button:checked, .budgie-popover:not(.budgie-menu) button.flat:checked:not(.image-button), .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:checked:not(.image-button), .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:checked:not(.image-button), .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:checked:not(.image-button), .workspace-switcher .workspace-add-button:checked, .raven-mpris button.image-button:checked, .drop-shadow button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.35); text-shadow: none; -gtk-icon-shadow: none; } .budgie-settings-window buttonbox.inline-toolbar button:active, .budgie-popover:not(.budgie-menu) button.flat:active:not(.image-button), .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:active:not(.image-button), .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:active:not(.image-button), .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:active:not(.image-button), .workspace-switcher .workspace-add-button:active, .raven-mpris button.image-button:active, .drop-shadow button:active { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } .budgie-settings-window buttonbox.inline-toolbar button:disabled, .budgie-popover:not(.budgie-menu) button.flat:disabled:not(.image-button), .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:disabled:not(.image-button), .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:disabled:not(.image-button), .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:disabled:not(.image-button), .workspace-switcher .workspace-add-button:disabled, .raven-mpris button.image-button:disabled, .drop-shadow button:disabled { background-color: transparent; } .budgie-settings-window buttonbox.inline-toolbar button:disabled label, .budgie-popover:not(.budgie-menu) button.flat:disabled:not(.image-button) label, .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:disabled:not(.image-button) label, .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:disabled:not(.image-button) label, .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:disabled:not(.image-button) label, .workspace-switcher .workspace-add-button:disabled label, .raven-mpris button.image-button:disabled label, .drop-shadow button:disabled label, .budgie-settings-window buttonbox.inline-toolbar button:disabled, .budgie-popover:not(.budgie-menu) button.flat:disabled:not(.image-button), .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:disabled:not(.image-button), .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:disabled:not(.image-button), .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:disabled:not(.image-button), .workspace-switcher .workspace-add-button:disabled, .raven-mpris button.image-button:disabled, .drop-shadow button:disabled { color: rgba(222, 222, 222, 0.45); } .raven .raven-header:not(.top) button { border: none; background-color: transparent; color: #dedede; box-shadow: none; } .raven .raven-header:not(.top) button:hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); } .raven .raven-header:not(.top) button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.35); text-shadow: none; -gtk-icon-shadow: none; } .raven .raven-header:not(.top) button:active { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } .raven .raven-header:not(.top) button:disabled { background-color: transparent; } .raven .raven-header:not(.top) button:disabled label, .raven .raven-header:not(.top) button:disabled { color: rgba(222, 222, 222, 0.45); } .budgie-container { background-color: transparent; } .budgie-settings-window buttonbox.inline-toolbar { border-style: none none solid; } .budgie-settings-window buttonbox.inline-toolbar button { border-radius: 5px; -gtk-outline-radius: 5px; } .budgie-popover { margin: 0; padding: 0; border: 1px solid rgba(255, 255, 255, 0.12); border-radius: 6px; box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.3), 0 2px 3px 0 rgba(0, 0, 0, 0.3); background-color: rgba(51, 51, 51, 0.95); } .budgie-popover .container { padding: 2px; } .budgie-popover border { border: none; } .budgie-popover list { background-color: transparent; } .budgie-popover row { padding: 0; background-color: transparent; } .budgie-popover row:hover { box-shadow: none; background-color: transparent; } .budgie-popover:not(.budgie-menu) button.flat:not(.image-button), .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:not(.image-button), .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:not(.image-button), .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:not(.image-button) { min-height: 28px; padding: 0 8px; color: #dedede; font-weight: normal; } .budgie-popover:not(.budgie-menu) button.flat:not(.image-button):disabled, .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:not(.image-button):disabled, .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:not(.image-button):disabled, .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:not(.image-button):disabled { color: rgba(222, 222, 222, 0.45); } .budgie-popover.budgie-menu .container { padding: 0; } .budgie-popover.user-menu .container { padding: 8px; } .budgie-popover.user-menu separator { margin: 4px 0; } .budgie-popover.sound-popover separator { margin: 3px 0; } .budgie-popover.night-light-indicator .container { padding: 8px; } .budgie-popover.places-menu .container { padding: 8px; } .budgie-popover.places-menu .places-list:not(.always-expand) { margin-top: 4px; padding-top: 4px; border-top: 1px solid rgba(255, 255, 255, 0.12); } .budgie-popover.places-menu .alternative-label { padding: 3px; font-size: 15px; } .budgie-popover.workspace-popover .container { padding: 2px 8px 8px; } .budgie-popover.workspace-popover separator { margin: 4px 0; } .budgie-popover.workspace-popover flowboxchild { padding: 0; } .workspace-switcher .workspace-layout { border: 0 solid rgba(255, 255, 255, 0.12); } .top .workspace-switcher .workspace-layout:dir(ltr), .bottom .workspace-switcher .workspace-layout:dir(ltr) { border-left-width: 1px; } .top .workspace-switcher .workspace-layout:dir(rtl), .bottom .workspace-switcher .workspace-layout:dir(rtl) { border-right-width: 1px; } .left .workspace-switcher .workspace-layout, .right .workspace-switcher .workspace-layout { border-top-width: 1px; } .workspace-switcher .workspace-item, .workspace-switcher .workspace-add-button { border: 0 solid rgba(255, 255, 255, 0.12); } .top .workspace-switcher .workspace-item:dir(ltr), .bottom .workspace-switcher .workspace-item:dir(ltr), .top .workspace-switcher .workspace-add-button:dir(ltr), .bottom .workspace-switcher .workspace-add-button:dir(ltr) { border-right-width: 1px; } .top .workspace-switcher .workspace-item:dir(rtl), .bottom .workspace-switcher .workspace-item:dir(rtl), .top .workspace-switcher .workspace-add-button:dir(rtl), .bottom .workspace-switcher .workspace-add-button:dir(rtl) { border-left-width: 1px; } .left .workspace-switcher .workspace-item, .right .workspace-switcher .workspace-item, .left .workspace-switcher .workspace-add-button, .right .workspace-switcher .workspace-add-button { border-bottom-width: 1px; } .workspace-switcher .workspace-item { transition: all 0.2s cubic-bezier(0, 0, 0.2, 1); } .workspace-switcher .workspace-item.current-workspace { background-color: rgba(255, 255, 255, 0.12); } .workspace-switcher .workspace-add-button { background-color: transparent; background-image: none; } .workspace-switcher .workspace-add-button:hover { box-shadow: none; } .workspace-switcher .workspace-add-button:active { background-image: none; } .workspace-switcher .workspace-add-button:active image { margin: 1px 0 -1px; } .budgie-panel .workspace-switcher .workspace-icon-button { min-height: 24px; min-width: 24px; padding: 0; border-radius: 5px; } .budgie-menu.background { padding: 0; background-color: #242424; } .budgie-menu scrollbar, .budgie-menu entry.search { background-color: transparent; } .budgie-menu entry.search { border: none; border-bottom: 1px solid rgba(255, 255, 255, 0.12); border-radius: 0; box-shadow: none; font-size: 120%; } .budgie-menu .categories:dir(ltr) { border-bottom-left-radius: 5px; } .budgie-menu .categories:dir(rtl) { border-bottom-right-radius: 5px; } .budgie-menu button { min-height: 32px; padding: 0 8px; border-radius: 0; color: #dedede; font-weight: normal; border: none; } .budgie-menu button:disabled { color: rgba(222, 222, 222, 0.45); } .budgie-menu button:checked:disabled { background-color: #498dff; } .budgie-menu row { padding: 0; } .budgie-menu row:hover { box-shadow: none; } popover.background.user-menu { padding: 8px; } popover.background.user-menu .content-box { background-color: transparent; } popover.background.user-menu separator { margin: 4px 0; } popover.background.user-menu row { padding: 0; box-shadow: none; background-image: none; } popover.background.places-menu { padding: 8px; } popover.background.places-menu .name-button.text-button { padding-left: 8px; padding-right: 8px; } popover.background.places-menu .name-button.text-button image:dir(ltr) { margin-right: 3px; } popover.background.places-menu .name-button.text-button image:dir(rtl) { margin-left: 3px; } popover.background.places-menu .places-section-header > image:dir(ltr) { margin: 0 -2px 0 5px; } popover.background.places-menu .places-section-header > image:dir(rtl) { margin: 0 5px 0 -2px; } popover.background.places-menu .places-list { margin-top: 4px; padding-top: 4px; border-top: 1px solid rgba(255, 255, 255, 0.12); background-color: transparent; } popover.background.places-menu row { padding: 0; box-shadow: none; background-image: none; } .budgie-panel { transition: background-color 0.2s cubic-bezier(0, 0, 0.2, 1); background-color: rgba(55, 55, 55, 0.98); color: rgba(225, 219, 219, 0.8); font-weight: 500; } .budgie-panel.transparent { background-color: rgba(55, 55, 55, 0.65); } .budgie-panel button { min-height: 16px; min-width: 16px; padding: 0; border-radius: 0; border-top-width: 0; border-bottom-width: 0; border: none; color: rgba(225, 219, 219, 0.8); } .budgie-panel button:active { background-color: rgba(225, 219, 219, 0.15); color: rgba(225, 219, 219, 0.75); } .budgie-panel button:checked { background-color: rgba(225, 219, 219, 0.12); color: rgba(225, 219, 219, 0.8); } .budgie-panel.horizontal button { padding: 0 4px; } .budgie-panel.vertical button { padding: 4px 0; } .budgie-panel separator { background-color: rgba(255, 255, 255, 0.12); } .budgie-panel menubar, .budgie-panel .menubar { box-shadow: none; color: rgba(225, 219, 219, 0.8); background-image: none; background-color: transparent; } .budgie-panel menubar > menuitem, .budgie-panel .menubar > menuitem { border: none; background-image: none; } .budgie-panel menubar > menuitem menu, .budgie-panel .menubar > menuitem menu { border-radius: 0 0 6px 6px; } .budgie-panel menubar > menuitem menu menu, .budgie-panel .menubar > menuitem menu menu { border-radius: 6px; } .budgie-panel menubar > menuitem:hover, .budgie-panel .menubar > menuitem:hover { background-color: #498dff; } .budgie-panel menubar > menuitem:disabled, .budgie-panel .menubar > menuitem:disabled { color: rgba(225, 219, 219, 0.2); } .budgie-panel .alert { color: #f8464c; } .budgie-panel #tasklist-button { padding: 0 4px; } .budgie-panel.vertical #tasklist-button { min-height: 32px; } .budgie-panel button.launcher.budgie-menu-launcher, .budgie-panel .launcher#tasklist-button, .budgie-panel button.launcher.flat { padding: 0; } .budgie-panel button.launcher.budgie-menu-launcher:not(:checked), .budgie-panel .launcher#tasklist-button:not(:checked), .budgie-panel button.launcher.flat:not(:checked) { color: #dedede; } .budgie-panel button.launcher.budgie-menu-launcher:not(:checked):hover, .budgie-panel .launcher#tasklist-button:not(:checked):hover, .budgie-panel button.launcher.flat:not(:checked):hover, .budgie-panel button.launcher.budgie-menu-launcher:not(:checked):active, .budgie-panel .launcher#tasklist-button:not(:checked):active, .budgie-panel button.launcher.flat:not(:checked):active { color: rgba(222, 222, 222, 0.8); } .budgie-panel button.launcher.budgie-menu-launcher:not(:checked):disabled, .budgie-panel .launcher#tasklist-button:not(:checked):disabled, .budgie-panel button.launcher.flat:not(:checked):disabled { color: rgba(222, 222, 222, 0.5); } .budgie-panel button.launcher.budgie-menu-launcher:active, .budgie-panel .launcher#tasklist-button:active, .budgie-panel button.launcher.flat:active { background-color: rgba(222, 222, 222, 0.2); } .budgie-panel button.launcher.budgie-menu-launcher:checked, .budgie-panel .launcher#tasklist-button:checked, .budgie-panel button.launcher.flat:checked { background-color: rgba(222, 222, 222, 0.15); } .top .budgie-panel #tasklist-button, .budgie-panel .top #tasklist-button, .top .budgie-panel button.flat.launcher, .budgie-panel .top button.flat.launcher { border-image: radial-gradient(circle closest-corner at center calc(1px), #0e6bff 0%, transparent 0%) 0 0 0 0/0 0 0 0; } .top .budgie-panel #tasklist-button:checked, .budgie-panel .top #tasklist-button:checked, .top .budgie-panel button.flat.launcher:checked, .budgie-panel .top button.flat.launcher:checked, .top .budgie-panel .unpinned button.launcher.budgie-menu-launcher, .budgie-panel .unpinned .top button.launcher.budgie-menu-launcher, .top .budgie-panel .unpinned .launcher#tasklist-button, .budgie-panel .unpinned .top .launcher#tasklist-button, .top .budgie-panel .unpinned button.launcher.flat, .budgie-panel .unpinned .top button.launcher.flat, .top .budgie-panel .pinned button.launcher.running.budgie-menu-launcher, .budgie-panel .pinned .top button.launcher.running.budgie-menu-launcher, .top .budgie-panel .pinned .launcher.running#tasklist-button, .budgie-panel .pinned .top .launcher.running#tasklist-button, .top .budgie-panel .pinned button.launcher.running.flat, .budgie-panel .pinned .top button.launcher.running.flat { border-image: radial-gradient(circle closest-corner at center calc(1px), #0e6bff 100%, transparent 0%) 2 0 0 0/2px 0 0 0; } .bottom .budgie-panel #tasklist-button, .budgie-panel .bottom #tasklist-button, .bottom .budgie-panel button.flat.launcher, .budgie-panel .bottom button.flat.launcher { border-image: radial-gradient(circle closest-corner at center calc(100% - 1px), #0e6bff 0%, transparent 0%) 0 0 0 0/0 0 0 0; } .bottom .budgie-panel #tasklist-button:checked, .budgie-panel .bottom #tasklist-button:checked, .bottom .budgie-panel button.flat.launcher:checked, .budgie-panel .bottom button.flat.launcher:checked, .bottom .budgie-panel .unpinned button.launcher.budgie-menu-launcher, .budgie-panel .unpinned .bottom button.launcher.budgie-menu-launcher, .bottom .budgie-panel .unpinned .launcher#tasklist-button, .budgie-panel .unpinned .bottom .launcher#tasklist-button, .bottom .budgie-panel .unpinned button.launcher.flat, .budgie-panel .unpinned .bottom button.launcher.flat, .bottom .budgie-panel .pinned button.launcher.running.budgie-menu-launcher, .budgie-panel .pinned .bottom button.launcher.running.budgie-menu-launcher, .bottom .budgie-panel .pinned .launcher.running#tasklist-button, .budgie-panel .pinned .bottom .launcher.running#tasklist-button, .bottom .budgie-panel .pinned button.launcher.running.flat, .budgie-panel .pinned .bottom button.launcher.running.flat { border-image: radial-gradient(circle closest-corner at center calc(100% - 1px), #0e6bff 100%, transparent 0%) 0 0 2 0/0 0 2px 0; } .left .budgie-panel #tasklist-button, .budgie-panel .left #tasklist-button, .left .budgie-panel button.flat.launcher, .budgie-panel .left button.flat.launcher { border-image: radial-gradient(circle closest-corner at calc(1px) center, #0e6bff 0%, transparent 0%) 0 0 0 0/0 0 0 0; } .left .budgie-panel #tasklist-button:checked, .budgie-panel .left #tasklist-button:checked, .left .budgie-panel button.flat.launcher:checked, .budgie-panel .left button.flat.launcher:checked, .left .budgie-panel .unpinned button.launcher.budgie-menu-launcher, .budgie-panel .unpinned .left button.launcher.budgie-menu-launcher, .left .budgie-panel .unpinned .launcher#tasklist-button, .budgie-panel .unpinned .left .launcher#tasklist-button, .left .budgie-panel .unpinned button.launcher.flat, .budgie-panel .unpinned .left button.launcher.flat, .left .budgie-panel .pinned button.launcher.running.budgie-menu-launcher, .budgie-panel .pinned .left button.launcher.running.budgie-menu-launcher, .left .budgie-panel .pinned .launcher.running#tasklist-button, .budgie-panel .pinned .left .launcher.running#tasklist-button, .left .budgie-panel .pinned button.launcher.running.flat, .budgie-panel .pinned .left button.launcher.running.flat { border-image: radial-gradient(circle closest-corner at calc(1px) center, #0e6bff 100%, transparent 0%) 0 0 0 2/0 0 0 2px; } .right .budgie-panel #tasklist-button, .budgie-panel .right #tasklist-button, .right .budgie-panel button.flat.launcher, .budgie-panel .right button.flat.launcher { border-image: radial-gradient(circle closest-corner at calc(100% - 1px) center, #0e6bff 0%, transparent 0%) 0 0 0 0/0 0 0 0; } .right .budgie-panel #tasklist-button:checked, .budgie-panel .right #tasklist-button:checked, .right .budgie-panel button.flat.launcher:checked, .budgie-panel .right button.flat.launcher:checked, .right .budgie-panel .unpinned button.launcher.budgie-menu-launcher, .budgie-panel .unpinned .right button.launcher.budgie-menu-launcher, .right .budgie-panel .unpinned .launcher#tasklist-button, .budgie-panel .unpinned .right .launcher#tasklist-button, .right .budgie-panel .unpinned button.launcher.flat, .budgie-panel .unpinned .right button.launcher.flat, .right .budgie-panel .pinned button.launcher.running.budgie-menu-launcher, .budgie-panel .pinned .right button.launcher.running.budgie-menu-launcher, .right .budgie-panel .pinned .launcher.running#tasklist-button, .budgie-panel .pinned .right .launcher.running#tasklist-button, .right .budgie-panel .pinned button.launcher.running.flat, .budgie-panel .pinned .right button.launcher.running.flat { border-image: radial-gradient(circle closest-corner at calc(100% - 1px) center, #0e6bff 100%, transparent 0%) 0 2 0 0/0 2px 0 0; } frame.raven-frame > border { border-style: none; box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.3), 0 0 8px 0 rgba(0, 0, 0, 0.3); } .top frame.raven-frame > border { margin-bottom: 32px; } .bottom frame.raven-frame > border { margin-top: 32px; } .left frame.raven-frame > border { margin-right: 32px; } .right frame.raven-frame > border { margin-left: 32px; } .raven { background-color: rgba(42, 42, 42, 0.95); color: #dedede; } .raven > box { margin-bottom: -10px; } .raven > stack { margin-bottom: -10px; } .raven stackswitcher.linked > button { background-color: #616161; color: #dedede; border: none; } .raven stackswitcher.linked > button:hover { background-color: #6e6e6e; } .raven stackswitcher.linked > button:active { background-color: #bcbcbc; background-image: none; color: #242424; } .raven stackswitcher.linked > button:checked { background-color: #AFAFAF; background-image: none; color: #2A2A2A; } .raven .raven-header { min-height: 36px; padding: 2px; } .raven .raven-header:not(.top) { margin-top: -6px; } .raven .raven-header:not(.top) button { min-height: 32px; min-width: 32px; margin: 0; padding: 0; } .raven .raven-header:not(.top) button.image-button { border-radius: 100px; -gtk-outline-radius: 100px; } .raven .raven-header.top { padding: 2px 12px; color: #dedede; } .raven .raven-header.top stackswitcher button { margin: 0; padding: 0 20px; min-height: 20px; } .raven .raven-header.top button.image-button:dir(ltr) { margin-right: 2px; } .raven .raven-header.top button.image-button:dir(rtl) { margin-left: 2px; } .raven .raven-header.top > image { margin: 0 8px; } .raven .raven-header.top > label { margin: 0 -8px; font-weight: bold; } .raven .raven-header.bottom { border-top: 1px solid rgba(255, 255, 255, 0.12); } .raven viewport.frame .raven-header { margin-top: -8px; } .raven .expander-button { border-radius: 100px; -gtk-outline-radius: 100px; } .raven .raven-background { border-style: solid none; border-width: 1px; border-color: rgba(255, 255, 255, 0.12); background-color: #242424; color: #dedede; } .raven .raven-background.middle { border-bottom-style: none; } .raven .raven-background checkbutton.text-button:hover, .raven .raven-background radiobutton.text-button:hover { color: #b8b8b8; } .raven .raven-background checkbutton.text-button:disabled, .raven .raven-background radiobutton.text-button:disabled { color: rgba(222, 222, 222, 0.45); } .raven .raven-background list { color: #dedede; background-color: #242424; } .raven .raven-background.frame { border-style: solid none; border-color: rgba(255, 255, 255, 0.12); } .raven .raven-background > overlay > widget > image { color: alpha(#dedede,0.12); } .raven .raven-background grid > label:first-child { min-height: 26px; } .raven scrolledwindow.raven-background { border-bottom-style: none; } .raven .raven-header.top + .raven-background { border-style: none; background-color: #498dff; color: #ffffff; } .raven .raven-header.top + .raven-background stackswitcher button { margin: -4px 0; } .raven .powerstrip button.image-button { min-height: 28px; min-width: 28px; margin: 0 4px; padding: 6px; } .raven .option-subtitle { font-size: smaller; } calendar.raven-calendar { margin: 2px 0; padding: 2px; border-style: none; background-color: transparent; color: #dedede; } calendar.raven-calendar:selected { border-radius: 3px; background-color: #498dff; } calendar.raven-calendar.button { color: rgba(222, 222, 222, 0.45); } calendar.raven-calendar.button:hover { color: #dedede; } calendar.raven-calendar.button:disabled { color: rgba(222, 222, 222, 0.25); } calendar.raven-calendar:indeterminate { color: alpha(#dedede,0.35); } calendar.raven-calendar.highlight { color: #dedede; } .raven-mpris { background-color: rgba(0, 0, 0, 0.5); color: #ffffff; } .raven-mpris label { min-height: 24px; } .raven-mpris button.image-button { padding: 8px; } .budgie-notification-window, .budgie-osd-window, .budgie-switcher-window { background-color: transparent; background-image: none; border-radius: 6px; } .budgie-notification, .budgie-switcher { background-color: transparent; background-image: none; } .budgie-notification .notification-title, .budgie-switcher .notification-title { font-size: 120%; } .budgie-osd { background-color: transparent; background-image: none; } .budgie-osd .budgie-osd-text { font-size: 120%; } window.budgie-switcher-window { border-radius: 6px; background-color: transparent; background-image: none; } window.budgie-switcher-window flowboxchild { margin: 2px; border-radius: 6px; -gtk-outline-radius: 6px; background-image: none; } .drop-shadow, window.budgie-switcher-window .drop-shadow { margin: 5px 9px; padding: 8px; border-radius: 6px; box-shadow: 0 5px 5px 0 transparent, 0 8px 15px 0 transparent, 0 3px 3px 0 rgba(0, 0, 0, 0.3); background-color: rgba(36, 36, 36, 0.95); background-image: none; } .drop-shadow .linked > button { border-radius: 5px; } .budgie-session-dialog, .budgie-polkit-dialog, .budgie-run-dialog { border-radius: 6px; background-color: #333333; } .background.budgie-session-dialog, .background.budgie-polkit-dialog, .background.budgie-run-dialog { border-radius: 6px; } .budgie-session-dialog decoration, .budgie-polkit-dialog decoration, .budgie-run-dialog decoration { border-radius: 6px; } .budgie-session-dialog label:not(:last-child), .budgie-session-dialog .dialog-title { font-size: 120%; } .budgie-session-dialog .linked.horizontal > button { padding: 8px 16px; border: none; border-top: 1px solid rgba(255, 255, 255, 0.12); border-radius: 0; } .budgie-session-dialog .linked.horizontal > button:first-child { border-bottom-left-radius: 6px; } .budgie-session-dialog .linked.horizontal > button:last-child { border-bottom-right-radius: 6px; } .budgie-session-dialog .linked.horizontal > button:not(.suggested-action):not(.destructive-action):hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.12); transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); } .budgie-session-dialog .linked.horizontal > button:not(.suggested-action):not(.destructive-action):active, .budgie-session-dialog .linked.horizontal > button:not(.suggested-action):not(.destructive-action):checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); text-shadow: 0 -1px rgba(255, 255, 255, 0.04), -1px 0px rgba(32, 32, 32, 0.05), 1px 0px rgba(32, 32, 32, 0.05), 0px 1px rgba(32, 32, 32, 0.3), 0px 2px rgba(32, 32, 32, 0.05); } .budgie-polkit-dialog .message { color: alpha(currentColor,0.6); } .budgie-polkit-dialog .failure { color: #f8464c; } .budgie-run-dialog { background-color: #242424; } .budgie-run-dialog entry.search { font-size: 120%; padding: 6px 12px; box-shadow: inset 0 1px transparent; background-color: transparent; } .budgie-run-dialog list .dim-label, .budgie-run-dialog list label.separator, .budgie-run-dialog list headerbar .subtitle, headerbar .budgie-run-dialog list .subtitle, .budgie-run-dialog list .titlebar:not(headerbar) .subtitle, .titlebar:not(headerbar) .budgie-run-dialog list .subtitle, .budgie-run-dialog list .budgie-notification .notification-body, .budgie-notification .budgie-run-dialog list .notification-body, .budgie-run-dialog list .budgie-switcher .notification-body, .budgie-switcher .budgie-run-dialog list .notification-body { opacity: 1; } .budgie-run-dialog scrolledwindow { border-top: 1px solid rgba(255, 255, 255, 0.12); }]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E5%85%AC%E4%BC%97%E5%8F%B7%2FLeetCode%2F%E7%AC%AC%E4%BA%8C%E5%A4%A9%2F%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[题目描述题目：4.两个有序数组的中间数 给你两个int数组，数组里面的元素都是有序的，找出两个数组之间的中间数。 解题思路参考归并排序里面的归并 代码实现123456789101112131415161718192021222324public double findMedianSortedArrays(int[] nums1, int[] nums2) &#123; int len = nums1.length + nums2.length; int m = 0, n = 0; int before = 0; while (m + n &lt;= (len / 2) - 1) &#123; if (m &gt;= nums1.length) before = nums2[n++]; else if (n &gt;= nums2.length) before = nums1[m++]; else if (nums1[m] &lt; nums2[n]) before = nums1[m++]; else before = nums2[n++]; &#125; int mid; if (m &gt;= nums1.length) mid = nums2[n++]; else if (n &gt;= nums2.length) mid = nums1[m++]; else if (nums1[m] &lt; nums2[n]) mid = nums1[m++]; else mid = nums2[n++]; if ((len &amp; 1) == 0) &#123; // return (before + mid) / 2.0; &#125; else &#123; return mid; &#125;&#125; 题目描述题目：7.整数反转 解题思路代码实现123456789101112public int reverse(int x) &#123; int result = 0; while (x != 0) &#123; int tail = x % 10; int newResult = result * 10 + tail; // 防止翻转后数字超过Interge.MAX_VALUE； if((newResult-tail)/10!=result) return 0; result = newResult; x = x / 10; &#125; return result;&#125; 题目描述题目：9.对称数 给你一个整数，判断它是否是一个对称数。 解题思路其实就是上一道题目，整数反转的简化版本（因为不用考虑溢出问题）。 代码实现12345678910public boolean isPalindrome(int x) &#123; if (x &lt; 0) return false; int result = 0; int orig = x; while (x != 0) &#123; result = result * 10 + x % 10; x = x / 10; &#125; return result == orig;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E5%85%AC%E4%BC%97%E5%8F%B7%2FLeetCode%2F%E7%AC%AC%E4%BA%8C%E5%A4%A9%2F9.%E5%AF%B9%E7%A7%B0%E6%95%B0%2F</url>
    <content type="text"><![CDATA[题目描述题目：9.对称数 给你一个整数，判断它是否是一个对称数。 解题思路其实就是上一道题目，整数反转的简化版本（因为不用考虑溢出问题）。 代码实现12345678910public boolean isPalindrome(int x) &#123; if (x &lt; 0) return false; int result = 0; int orig = x; while (x != 0) &#123; result = result * 10 + x % 10; x = x / 10; &#125; return result == orig;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E5%85%AC%E4%BC%97%E5%8F%B7%2FLeetCode%2F%E7%AC%AC%E4%B8%80%E5%A4%A9%2F3.%E6%97%A0%E9%87%8D%E5%A4%8D%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[题目描述题目：无重复的最长子字符串 给你一个字符串，找出最大长度的子字符串，要求子字符串中的字符是不重复的。 解题思路 采用双指针技术，左指针指向子字符串起始位置，右指针指向当前位置 使用map，key是字符，value是字符对应的索引 遍历字符串，如果字符已存在map中，判断是否需要修改左指针 不存在则添加进map 指针的差与最大值比较 代码实现12345678910111213public int lengthOfLongestSubstring(String s) &#123; if (s == null || s.length() == 0) return 0; Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;(); int maxLength = 0; for (int l = 0, r = 0; r &lt; s.length(); r++) &#123; if (map.containsKey(s.charAt(r))) &#123; l = Math.max(l, map.get(s.charAt(r)) + 1);// 防止拿到左边界左边的索引 &#125; map.put(s.charAt(r), r); maxLength = Math.max(maxLength, r - l + 1); &#125; return maxLength;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E5%85%AC%E4%BC%97%E5%8F%B7%2FLeetCode%2F%E7%AC%AC%E4%B8%80%E5%A4%A9%2F2.%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0%2F</url>
    <content type="text"><![CDATA[题目描述题目：两数相加 给你两个链表，分表代表两个非负整数，把着两个数字相加，然后以链表的形式返回结果，具体看上面的例子。 解题思路 取出数字相加再加上进位，如果需要进位则标记一下，把结果装入节点 代码实现123456789101112131415public ListNode addTwoNumbers(ListNode l1, ListNode l2) &#123; ListNode dummyHead = new ListNode(0); // ListNode cur = dummyHead; int carry = 0; while (l1 != null || l2 != null || carry != 0) &#123; int sum = (l1 == null ? 0 : l1.val) + (l2 == null ? 0 : l2.val) + carry; ListNode newNode = new ListNode(sum % 10); carry = sum / 10; cur.next = newNode; cur = newNode; l1 = l1 == null ? l1 : l1.next; l2 = l2 == null ? l2 : l2.next; &#125; return dummyHead.next;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E5%85%AC%E4%BC%97%E5%8F%B7%2FLeetCode%2F%E7%AC%AC%E4%B8%80%E5%A4%A9%2F1.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%2F</url>
    <content type="text"><![CDATA[题目描述题目：两数之和 给你一个int数组和一个目标数，如果数组中有个两个数的和等于目标数，则返回这两个数对应的索引。 解题思路如果真的从数组中抽出两个元素相加，然后再跟目标数进行比较，时间复杂度是O(n2)，是一个不怎么好的方法。 解决方法： 数组中抽取一个数字，计算与目标数的差值，然后把差值作为key，抽取的数字的索引作为value存入map。 抽取另一个数字，然后查找map里面是否有key对应这个数字，证明找到结果了，返回key对应的value，以及当前数字对应的索引。 代码实现1234567891011121314public int[] twoSum(int[] nums, int target) &#123; int[] res = new int[2]; Map&lt;Integer,Integer&gt; map = new HashMap&lt;&gt;(); for(int i=0; i&lt;nums.length;i++)&#123; int num = nums[i]; if (map.containsKey(num)) &#123; res[0] = map.get(num); res[1] = i; break; &#125; map.put((target - num), i); &#125; return res;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FLinux%2FMacterial%2Fgtk-3.0%2Fgtk%20(copy)%2F</url>
    <content type="text"><![CDATA[@keyframes switch_ripple_effect { from { background-image: radial-gradient(circle farthest-corner at center, #71c837 0%, transparent 0%); } to { background-image: radial-gradient(circle farthest-corner at center, #71c837 100%, transparent 0%); } } @keyframes header_ripple_effect { from { background-image: radial-gradient(circle farthest-corner at center, rgba(55, 55, 55, 0.98) 0%, transparent 0%); } to { background-image: radial-gradient(circle farthest-corner at center, rgba(55, 55, 55, 0.98) 100%, transparent 0%); } } * { background-clip: padding-box; -GtkToolButton-icon-spacing: 4; -GtkTextView-error-underline-color: #FC4138; -GtkScrolledWindow-scrollbar-spacing: 0; -GtkToolItemGroup-expander-size: 11; -GtkWidget-text-handle-width: 20; -GtkWidget-text-handle-height: 20; -GtkDialog-button-spacing: 4; -GtkDialog-action-area-border: 0; outline-color: alpha(currentColor,0.3); outline-style: dashed; outline-offset: -3px; outline-width: 0px; -gtk-outline-radius: 5px; } .background { color: #dedede; background-color: #262626; } .background.csd, .background.ssd, .background.osd { border-radius: 0 0 6px 6px; } .background.maximized, .background.solid-csd { border-radius: 0; } .popup.background { background-color: transparent; } *:disabled { -gtk-icon-effect: dim; } .gtkstyle-fallback { background-color: #333333; color: #dedede; } .gtkstyle-fallback:hover { background-color: #4d4d4d; color: #dedede; } .gtkstyle-fallback:active { background-color: #1a1a1a; color: #dedede; } .gtkstyle-fallback:disabled { background-color: #383838; color: rgba(222, 222, 222, 0.45); } .gtkstyle-fallback:selected { background-color: #498dff; color: #ffffff; } .view, iconview, .view text, iconview text, textview text { color: #dedede; background-color: #242424; transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); } .view:hover, iconview:hover, .view text:hover, iconview text:hover, textview text:hover { background-color: #2c2c2c; } .view:selected, iconview:selected, .view:selected:focus, iconview:selected:focus, .view text:selected, iconview text:selected, textview text:selected, .view text:selected:focus, iconview text:selected:focus, textview text:selected:focus { transition: all 350ms cubic-bezier(0.25, 0.46, 0.45, 0.94); border-radius: 5px; } textview border { background-color: #2c2c2c; } rubberband, flowbox rubberband, treeview.view rubberband, .content-view rubberband, .rubberband { border: 1px solid #166dff; background-color: rgba(22, 109, 255, 0.2); } flowbox flowboxchild { padding: 3px; border-radius: 5px; } flowbox flowboxchild:selected { outline-offset: -2px; } label.separator, popover label.separator, popover.background label.separator { color: #dedede; } label selection { color: #ffffff; background-color: #498dff; } .dim-label, label.separator, popover label.separator, popover.background label.separator, headerbar .subtitle, .titlebar:not(headerbar) .subtitle, .budgie-notification .notification-body, .budgie-switcher .notification-body { opacity: 0.55; } assistant .sidebar { background-color: #242424; border-top: 1px solid rgba(255, 255, 255, 0.12); } assistant.csd .sidebar { border-top-style: none; } assistant .sidebar label { padding: 6px 12px; } assistant .sidebar label.highlight { background-color: #498dff; color: #ffffff; } textview { background-color: #242424; } popover.osd, popover.magnifier, .csd popover.osd, .csd popover.magnifier, popover.background.osd, popover.background.magnifier, .csd popover.background.osd, .csd popover.background.magnifier, .osd .scale-popup, .osd { color: #dedede; border: none; background-color: rgba(36, 36, 36, 0.95); background-clip: padding-box; box-shadow: none; } @keyframes spin { to { -gtk-icon-transform: rotate(1turn); } } spinner { background: none; opacity: 0; -gtk-icon-source: -gtk-icontheme("process-working-symbolic"); } spinner:checked { opacity: 1; animation: spin 1s linear infinite; } spinner:checked:disabled { opacity: 0.5; } entry { min-height: 22px; border: 1px solid; padding: 2px 8px; caret-color: currentColor; border-radius: 5px; transition: all 0.2s cubic-bezier(0, 0, 0.2, 1); color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: #242424; } entry.search { border-radius: 5px; } entry image { color: #b9b9b9; } entry image.left { padding-left: 0; padding-right: 5px; } entry image.right { padding-right: 0; padding-left: 5px; } entry.flat, .raven .raven-background spinbutton:not(.vertical), entry.flat:focus, .raven .raven-background spinbutton:focus:not(.vertical) { min-height: 0; padding: 2px; background-image: none; border-color: transparent; border-radius: 0; } entry:focus { background-clip: border-box; color: #dedede; border-color: #8eb9ff; background-color: #242424; box-shadow: inset 0 0 0 2px #8eb9ff; } entry:disabled { color: rgba(222, 222, 222, 0.45); border-color: rgba(255, 255, 255, 0.12); background-color: rgba(36, 36, 36, 0.55); } entry.warning { color: white; border-color: rgba(255, 255, 255, 0.12); background-color: #a0562e; } entry.warning image { color: white; } entry.warning:focus { color: white; background-color: #F27835; box-shadow: none; } entry.warning selection, entry.warning selection:focus { background-color: white; color: #F27835; } entry.error { color: white; border-color: rgba(255, 255, 255, 0.12); background-color: #a63530; } entry.error image { color: white; } entry.error:focus { color: white; background-color: #FC4138; box-shadow: none; } entry.error selection, entry.error selection:focus { background-color: white; color: #FC4138; } entry.search-missing { color: white; border-color: rgba(255, 255, 255, 0.12); background-color: #a63530; } entry.search-missing image { color: white; } entry.search-missing:focus { color: white; background-color: #FC4138; box-shadow: none; } entry.search-missing selection, entry.search-missing selection:focus { background-color: white; color: #FC4138; } entry:drop(active):focus, entry:drop(active) { border-color: #F08437; box-shadow: none; } .osd entry { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(92, 92, 92, 0.35); } .osd entry image, .osd entry image:hover { color: inherit; } .osd entry:focus { color: #ffffff; border-color: rgba(255, 255, 255, 0.12); background-color: #498dff; } .osd entry:disabled { color: #dedede; background-color: rgba(92, 92, 92, 0.2); } .osd entry selection:focus, .osd entry selection { color: #498dff; background-color: #ffffff; } entry progress { margin: 0 -6px; border-radius: 0; border-width: 0 0 2px; border-color: #498dff; border-style: solid; background-image: none; background-color: transparent; box-shadow: none; } .linked:not(.vertical) > entry + button.combo { padding-left: 0; } .linked.vertical > entry + button.combo { padding: 0; } treeview entry.flat, treeview .raven .raven-background spinbutton:not(.vertical), .raven .raven-background treeview spinbutton:not(.vertical), treeview entry { border-radius: 0; background-image: none; background-color: #242424; } treeview entry.flat:focus, treeview .raven .raven-background spinbutton:focus:not(.vertical), .raven .raven-background treeview spinbutton:focus:not(.vertical), treeview entry:focus { border-color: #498dff; } .entry-tag { margin: 8px; border-radius: 50px; box-shadow: none; background-color: #f8464c; color: #ffffff; border: none; } .entry-tag:hover { box-shadow: 0 0 0 1px rgba(255, 255, 255, 0.12); } :dir(ltr) .entry-tag { margin-left: 8px; margin-right: 0px; padding-left: 8px; padding-right: 4px; } :dir(rtl) .entry-tag { margin-left: 0px; margin-right: 8px; padding-left: 4px; padding-right: 8px; } .entry-tag.button { box-shadow: none; border: none; background-color: transparent; } .entry-tag.button:not(:hover):not(:active) { color: rgba(222, 222, 222, 0.45); } @keyframes needs_attention { from { background-image: -gtk-gradient(radial, center center, 0, center center, 0.01, to(#498dff), to(transparent)); } to { background-image: -gtk-gradient(radial, center center, 0, center center, 0.5, to(#498dff), to(transparent)); } } button { outline-color: #8eb9ff; outline-style: solid; outline-offset: -1px; outline-width: 3px; -gtk-outline-radius: 6px; } button { min-height: 26px; min-width: 16px; transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); border: 1px solid; border-radius: 5px; padding: 0 6px; color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: #484848; } button separator { margin: 4px 1px; } .linked:not(.vertical) > button, .linked.vertical > button, combobox, popover button, popover.background button, button.flat, button.budgie-menu-launcher, .budgie-panel #tasklist-button, .budgie-panel button.flat.launcher, button.osd, button.sidebar-button, button.circular-button { outline-color: alpha(currentColor,0.3); outline-style: dashed; outline-offset: -3px; outline-width: 1px; } button.flat, button.budgie-menu-launcher, .budgie-panel #tasklist-button, .budgie-panel button.flat.launcher { border: none; background-color: transparent; box-shadow: none; transition: none; } button.flat:hover, button.budgie-menu-launcher:hover, .budgie-panel #tasklist-button:hover, .budgie-panel button.flat.launcher:hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); transition-duration: 350ms; } button.flat:hover:active, button.budgie-menu-launcher:hover:active, .budgie-panel #tasklist-button:hover:active { transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); } button.flat:active, button.budgie-menu-launcher:active, .budgie-panel #tasklist-button:active, .budgie-panel button.flat.launcher:active, button.flat:checked, button.budgie-menu-launcher:checked, .budgie-panel #tasklist-button:checked, .budgie-panel button.flat.launcher:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } button.flat:disabled, button.budgie-menu-launcher:disabled, .budgie-panel #tasklist-button:disabled, .budgie-panel button.flat.launcher:disabled { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; } button:hover { color: #c5c5c5; border-color: rgba(255, 255, 255, 0.12); background-color: #5c5c5c; box-shadow: none; -gtk-icon-effect: highlight; } button:active, button:checked { color: #ffffff; background-color: #0e6bff; border-color: #0e6bff; background-image: linear-gradient(180deg, #4c97fe 0%, #0564e3 100%); box-shadow: none; background-clip: padding-box; transition-duration: 200ms; } button:active:not(:disabled) label:disabled, button:checked:not(:disabled) label:disabled { color: inherit; opacity: 0.6; } button:active { color: #dedede; } button:active:hover, button:checked { color: #ffffff; } button:disabled { border-color: rgba(255, 255, 255, 0.12); background-color: rgba(72, 72, 72, 0.55); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } button:disabled label, button:disabled { color: rgba(222, 222, 222, 0.45); } button:disabled:active, button:disabled:checked { border-color: rgba(73, 141, 255, 0.75); background-color: rgba(73, 141, 255, 0.75); box-shadow: none; opacity: 0.6; } button:disabled:active label, button:disabled:active, button:disabled:checked label, button:disabled:checked { color: rgba(255, 255, 255, 0.8); } button.image-button { min-width: 28px; padding-left: 5px; padding-right: 5px; } button.text-button { padding-left: 12px; padding-right: 12px; } button.text-button.image-button { padding-left: 5px; padding-right: 5px; } button.text-button.image-button label:first-child { padding-left: 8px; padding-right: 2px; } button.text-button.image-button label:last-child { padding-right: 8px; padding-left: 2px; } button.text-button.image-button label:only-child { padding-left: 8px; padding-right: 8px; } button.text-button.image-button.popup { padding-right: 8px; padding-left: 8px; } button:drop(active), combobox:drop(active) button.combo { color: #F08437; border-color: #F08437; box-shadow: none; } button.osd { color: #dedede; background-color: rgba(36, 36, 36, 0.95); border-color: rgba(16, 16, 16, 0.95); } button.osd.image-button { padding: 0; min-height: 42px; min-width: 42px; } button.osd:hover { color: #498dff; } button.osd:active, button.osd:checked { color: #ffffff; border-color: rgba(255, 255, 255, 0.12); background-color: #498dff; } button.osd:disabled { color: #5c5c5c; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(92, 92, 92, 0.2); } .osd button { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(92, 92, 92, 0.35); } .osd button:hover { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(110, 110, 110, 0.45); } .osd button:active, .osd button:checked { background-clip: padding-box; color: #ffffff; border-color: rgba(255, 255, 255, 0.12); background-color: #498dff; } .osd button:disabled { color: #5c5c5c; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(92, 92, 92, 0.2); } .osd button.flat, .osd button.budgie-menu-launcher, .osd .budgie-panel #tasklist-button, .budgie-panel .osd #tasklist-button, .osd .budgie-panel button.flat.launcher, .budgie-panel .osd button.flat.launcher { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; box-shadow: none; } .osd button.flat:hover, .osd button.budgie-menu-launcher:hover, .osd .budgie-panel #tasklist-button:hover, .budgie-panel .osd #tasklist-button:hover { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(110, 110, 110, 0.45); } .osd button.flat:disabled, .osd button.budgie-menu-launcher:disabled, .osd .budgie-panel #tasklist-button:disabled, .budgie-panel .osd #tasklist-button:disabled { color: #5c5c5c; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(92, 92, 92, 0.2); background-image: none; } .osd button.flat:active, .osd button.budgie-menu-launcher:active, .osd .budgie-panel #tasklist-button:active, .budgie-panel .osd #tasklist-button:active, .osd button.flat:checked, .osd button.budgie-menu-launcher:checked, .osd .budgie-panel #tasklist-button:checked, .budgie-panel .osd #tasklist-button:checked { color: #ffffff; border-color: rgba(255, 255, 255, 0.12); background-color: #498dff; } .osd .linked:not(.vertical):not(.path-bar) > button:hover:not(:checked):not(:active):not(:only-child), .osd .linked:not(.vertical):not(.path-bar) > button:hover:not(:checked):not(:active) + button:not(:checked):not(:active) { box-shadow: none; } button.suggested-action { background-clip: border-box; color: white; background-color: #3484e2; border-color: #1c6bc7; background-image: none; } button.suggested-action.flat, button.suggested-action.budgie-menu-launcher, .budgie-panel .suggested-action#tasklist-button, .budgie-panel button.suggested-action.flat.launcher { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; color: #3484e2; } button.suggested-action:hover { background-clip: border-box; color: white; background-color: #619fe8; border-color: #3484e2; background-image: none; } button.suggested-action:active, button.suggested-action:checked { background-clip: border-box; color: white; background-color: #1c6bc7; border-color: #16539a; background-image: none; box-shadow: none; } button.suggested-action.flat:disabled, button.suggested-action.budgie-menu-launcher:disabled, .budgie-panel .suggested-action#tasklist-button:disabled { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; color: rgba(222, 222, 222, 0.45); } button.suggested-action:disabled { border-color: rgba(255, 255, 255, 0.12); background-color: rgba(72, 72, 72, 0.55); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } button.suggested-action:disabled label, button.suggested-action:disabled { color: rgba(222, 222, 222, 0.45); } button.destructive-action { background-clip: border-box; color: white; background-color: #f8464c; border-color: #f6151c; background-image: none; } button.destructive-action.flat, button.destructive-action.budgie-menu-launcher, .budgie-panel .destructive-action#tasklist-button, .budgie-panel button.destructive-action.flat.launcher { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; color: #f8464c; } button.destructive-action:hover { background-clip: border-box; color: white; background-color: #fa777c; border-color: #f8464c; background-image: none; } button.destructive-action:active, button.destructive-action:checked { background-clip: border-box; color: white; background-color: #f6151c; border-color: #d0080f; background-image: none; box-shadow: none; } button.destructive-action.flat:disabled, button.destructive-action.budgie-menu-launcher:disabled, .budgie-panel .destructive-action#tasklist-button:disabled { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; color: rgba(222, 222, 222, 0.45); } button.destructive-action:disabled { border-color: rgba(255, 255, 255, 0.12); background-color: rgba(72, 72, 72, 0.55); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } button.destructive-action:disabled label, button.destructive-action:disabled { color: rgba(222, 222, 222, 0.45); } .stack-switcher > button { outline-offset: -3px; } .stack-switcher > button > label { padding-left: 6px; padding-right: 6px; } .stack-switcher > button > image { padding-left: 6px; padding-right: 6px; padding-top: 3px; padding-bottom: 3px; } .stack-switcher > button.text-button { padding-left: 10px; padding-right: 10px; } .stack-switcher > button.image-button { padding-left: 2px; padding-right: 2px; } .stack-switcher > button.needs-attention:active > label, .stack-switcher > button.needs-attention:active > image, .stack-switcher > button.needs-attention:checked > label, .stack-switcher > button.needs-attention:checked > image { animation: none; background-image: none; } .stack-switcher > button.needs-attention > label, .stack-switcher > button.needs-attention > image, button stacksidebar row.needs-attention > label, stacksidebar button row.needs-attention > label { animation: needs_attention 150ms ease-in; background-image: -gtk-gradient(radial, center center, 0, center center, 0.5, to(#498dff), to(transparent)); background-size: 6px 6px, 6px 6px; background-repeat: no-repeat; background-position: right 3px, right 2px; } .stack-switcher > button.needs-attention > label:dir(rtl), .stack-switcher > button.needs-attention > image:dir(rtl), button stacksidebar row.needs-attention > label:dir(rtl), stacksidebar button row.needs-attention > label:dir(rtl) { background-position: left 3px, left 2px; } button.font separator, button.file separator { background-color: transparent; } .inline-toolbar button, .inline-toolbar button:backdrop { border-radius: 5px; } .inline-toolbar toolbutton > button { min-height: 20px; border: none; background-color: transparent; box-shadow: none; } .inline-toolbar toolbutton > button:hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); } .inline-toolbar toolbutton > button:active, .inline-toolbar toolbutton > button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } .inline-toolbar toolbutton > button:disabled { background-color: transparent; } .inline-toolbar toolbutton > button:disabled label, .inline-toolbar toolbutton > button:disabled { color: rgba(222, 222, 222, 0.45); } .inline-toolbar toolbutton > button:disabled:active, .inline-toolbar toolbutton > button:disabled:checked { background-color: white; border-color: white; opacity: 0.6; } .inline-toolbar toolbutton > button:disabled:active label, .inline-toolbar toolbutton > button:disabled:active, .inline-toolbar toolbutton > button:disabled:checked label, .inline-toolbar toolbutton > button:disabled:checked { color: rgba(255, 255, 255, 0.8); } .linked:not(.vertical):not(.path-bar) > entry + entry { border-left-color: rgba(255, 255, 255, 0); } .linked:not(.vertical):not(.path-bar) > entry.error + entry, .linked:not(.vertical):not(.path-bar) > entry + entry.error { border-left-color: rgba(255, 255, 255, 0); } .linked:not(.vertical):not(.path-bar) > entry.warning + entry, .linked:not(.vertical):not(.path-bar) > entry + entry.warning { border-left-color: rgba(255, 255, 255, 0); } .linked:not(.vertical):not(.path-bar) > entry.error + entry.warning, .linked:not(.vertical):not(.path-bar) > entry.warning + entry.error { border-left-color: rgba(255, 255, 255, 0); } .linked:not(.vertical):not(.path-bar) > entry + entry:focus:not(:last-child), .linked:not(.vertical):not(.path-bar) > entry + entry:focus:last-child { border-left-color: #8eb9ff; } .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + entry, .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + button, .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + combobox > box > button.combo { border-left-color: #8eb9ff; } .linked:not(.vertical):not(.path-bar) > entry + entry:drop(active):not(:last-child), .linked:not(.vertical):not(.path-bar) > entry + entry:drop(active):last-child { border-left-color: #F08437; } .linked:not(.vertical):not(.path-bar) > entry:drop(active):not(:only-child) + entry, .linked:not(.vertical):not(.path-bar) > entry:drop(active):not(:only-child) + button, .linked:not(.vertical):not(.path-bar) > entry:drop(active):not(:only-child) + combobox > box > button.combo { border-left-color: #F08437; } .linked:not(.vertical):not(.path-bar) > entry + entry.warning:focus:not(:last-child), .linked:not(.vertical):not(.path-bar) > entry + entry.warning:focus:last-child { border-left-color: #F27835; } .linked:not(.vertical):not(.path-bar) > entry.warning:focus:not(:only-child) + entry, .linked:not(.vertical):not(.path-bar) > entry.warning:focus:not(:only-child) + button, .linked:not(.vertical):not(.path-bar) > entry.warning:focus:not(:only-child) + combobox > box > button.combo { border-left-color: #F27835; } .linked:not(.vertical):not(.path-bar) > entry + entry.error:focus:not(:last-child), .linked:not(.vertical):not(.path-bar) > entry + entry.error:focus:last-child { border-left-color: #FC4138; } .linked:not(.vertical):not(.path-bar) > entry.error:focus:not(:only-child) + entry, .linked:not(.vertical):not(.path-bar) > entry.error:focus:not(:only-child) + button, .linked:not(.vertical):not(.path-bar) > entry.error:focus:not(:only-child) + combobox > box > button.combo { border-left-color: #FC4138; } .linked:not(.vertical):not(.path-bar) > button:active + entry, .linked:not(.vertical):not(.path-bar) > button:checked + entry { border-left-color: #8eb9ff; } .linked:not(.vertical):not(.path-bar) > button + button { border-left-style: none; } .linked:not(.vertical).path-bar > button + button { border-left-style: solid; } .linked.vertical > entry + entry { border-top-color: rgba(255, 255, 255, 0); } .linked.vertical > entry.error + entry, .linked.vertical > entry + entry.error { border-top-color: rgba(255, 255, 255, 0); } .linked.vertical > entry.warning + entry, .linked.vertical > entry + entry.warning { border-top-color: rgba(255, 255, 255, 0); } .linked.vertical > entry.error + entry.warning, .linked.vertical > entry.warning + entry.error { border-top-color: rgba(255, 255, 255, 0); } .linked.vertical > entry + entry:focus:not(:last-child), .linked.vertical > entry + entry:focus:last-child { border-top-color: #8eb9ff; } .linked.vertical > entry:focus:not(:only-child) + entry, .linked.vertical > entry:focus:not(:only-child) + button, .linked.vertical > entry:focus:not(:only-child) + combobox > box > button.combo { border-top-color: #8eb9ff; } .linked.vertical > entry + entry:drop(active):not(:last-child), .linked.vertical > entry + entry:drop(active):last-child { border-top-color: #F08437; } .linked.vertical > entry:drop(active):not(:only-child) + entry, .linked.vertical > entry:drop(active):not(:only-child) + button, .linked.vertical > entry:drop(active):not(:only-child) + combobox > box > button.combo { border-top-color: #F08437; } .linked.vertical > entry + entry.warning:focus:not(:last-child), .linked.vertical > entry + entry.warning:focus:last-child { border-top-color: #F27835; } .linked.vertical > entry.warning:focus:not(:only-child) + entry, .linked.vertical > entry.warning:focus:not(:only-child) + button, .linked.vertical > entry.warning:focus:not(:only-child) + combobox > box > button.combo { border-top-color: #F27835; } .linked.vertical > entry + entry.error:focus:not(:last-child), .linked.vertical > entry + entry.error:focus:last-child { border-top-color: #FC4138; } .linked.vertical > entry.error:focus:not(:only-child) + entry, .linked.vertical > entry.error:focus:not(:only-child) + button, .linked.vertical > entry.error:focus:not(:only-child) + combobox > box > button.combo { border-top-color: #FC4138; } .linked.vertical > button:active + entry, .linked.vertical > button:checked + entry { border-top-color: #8eb9ff; } .linked.vertical > button + button { border-top-style: none; } .linked:not(.vertical) > entry, .linked:not(.vertical) > entry:focus, .inline-toolbar button, .inline-toolbar button:backdrop, .linked:not(.vertical) > button, .linked:not(.vertical) > button:hover, .linked:not(.vertical) > button:active, .linked:not(.vertical) > button:checked, toolbar.inline-toolbar toolbutton > button.flat, .inline-toolbar toolbutton > button.flat, toolbar.inline-toolbar toolbutton > button.budgie-menu-launcher, .inline-toolbar toolbutton > button.budgie-menu-launcher, .inline-toolbar .budgie-panel toolbutton > #tasklist-button, .budgie-panel .inline-toolbar toolbutton > #tasklist-button, .inline-toolbar .budgie-panel toolbutton > button.flat.launcher, .budgie-panel .inline-toolbar toolbutton > button.flat.launcher, spinbutton:not(.vertical) button, spinbutton:not(.vertical) entry, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:hover, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:active, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:checked, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:disabled, headerbar .linked:not(.vertical).path-bar > button, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button, headerbar .linked:not(.vertical).path-bar > button:hover, headerbar .linked:not(.vertical).path-bar > button:active, headerbar .linked:not(.vertical).path-bar > button:checked, headerbar .linked:not(.vertical).path-bar > button:disabled, .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button, .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:hover, .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:active, .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:checked, .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:disabled, .linked:not(.vertical) > combobox > box > button.combo:dir(ltr), .linked:not(.vertical) > combobox > box > button.combo:dir(rtl) { border-radius: 0; border-right-style: none; } .linked:not(.vertical) > entry:first-child, .inline-toolbar button:first-child, .linked:not(.vertical) > button:first-child, .inline-toolbar toolbutton > button.flat:first-child, .inline-toolbar toolbutton > button.budgie-menu-launcher:first-child, .inline-toolbar .budgie-panel toolbutton > #tasklist-button:first-child, .budgie-panel .inline-toolbar toolbutton > #tasklist-button:first-child, .inline-toolbar .budgie-panel toolbutton > button.flat.launcher:first-child, spinbutton:not(.vertical) button:first-child, spinbutton:not(.vertical) entry:first-child, .linked:not(.vertical) > combobox:first-child > box > button.combo, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:first-child, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:first-child, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:first-child:hover, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:first-child:active, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:first-child:checked, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:first-child:disabled, headerbar .linked:not(.vertical).path-bar > button:first-child, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button:first-child, headerbar .linked:not(.vertical).path-bar > button:first-child:hover, headerbar .linked:not(.vertical).path-bar > button:first-child:active, headerbar .linked:not(.vertical).path-bar > button:first-child:checked, headerbar .linked:not(.vertical).path-bar > button:first-child:disabled { border-top-left-radius: 5px; border-bottom-left-radius: 5px; } .linked:not(.vertical) > entry:last-child, .inline-toolbar button:last-child, .linked:not(.vertical) > button:last-child, .inline-toolbar toolbutton > button.flat:last-child, .inline-toolbar toolbutton > button.budgie-menu-launcher:last-child, .inline-toolbar .budgie-panel toolbutton > #tasklist-button:last-child, .budgie-panel .inline-toolbar toolbutton > #tasklist-button:last-child, .inline-toolbar .budgie-panel toolbutton > button.flat.launcher:last-child, spinbutton:not(.vertical) button:last-child, spinbutton:not(.vertical) entry:last-child, .linked:not(.vertical) > combobox:last-child > box > button.combo, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:last-child, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:last-child, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:last-child:hover, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:last-child:active, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:last-child:checked, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:last-child:disabled, headerbar .linked:not(.vertical).path-bar > button:last-child, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button:last-child, headerbar .linked:not(.vertical).path-bar > button:last-child:hover, headerbar .linked:not(.vertical).path-bar > button:last-child:active, headerbar .linked:not(.vertical).path-bar > button:last-child:checked, headerbar .linked:not(.vertical).path-bar > button:last-child:disabled { border-top-right-radius: 5px; border-bottom-right-radius: 5px; border-right-style: solid; } .linked:not(.vertical) > entry:only-child, .inline-toolbar button:only-child, .linked:not(.vertical) > button:only-child, .inline-toolbar toolbutton > button.flat:only-child, .inline-toolbar toolbutton > button.budgie-menu-launcher:only-child, .inline-toolbar .budgie-panel toolbutton > #tasklist-button:only-child, .budgie-panel .inline-toolbar toolbutton > #tasklist-button:only-child, .inline-toolbar .budgie-panel toolbutton > button.flat.launcher:only-child, spinbutton:not(.vertical) button:only-child, spinbutton:not(.vertical) entry:only-child, .linked:not(.vertical) > combobox:only-child > box > button.combo, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:only-child, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:only-child, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:only-child:hover, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:only-child:active, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:only-child:checked, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:only-child:disabled, headerbar .linked:not(.vertical).path-bar > button:only-child, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button:only-child, headerbar .linked:not(.vertical).path-bar > button:only-child:hover, headerbar .linked:not(.vertical).path-bar > button:only-child:active, headerbar .linked:not(.vertical).path-bar > button:only-child:checked, headerbar .linked:not(.vertical).path-bar > button:only-child:disabled { border-radius: 5px; border-style: solid; } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:first-child { border-top-left-radius: 5px; border-bottom-left-radius: 0; } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:last-child { border-top-right-radius: 5px; border-bottom-right-radius: 0; border-right-style: solid; } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:only-child { border-radius: 5px 5px 0 0; border-style: solid; } .linked.vertical > entry, .linked.vertical > entry:focus, .linked.vertical > button, .linked.vertical > button:hover, .linked.vertical > button:active, .linked.vertical > button:checked, spinbutton.vertical button, spinbutton.vertical entry, .linked.vertical > combobox > box > button.combo { border-radius: 0; border-bottom-style: none; } .linked.vertical > entry:first-child, .linked.vertical > button:first-child, spinbutton.vertical button:first-child, spinbutton.vertical entry:first-child, .linked.vertical > combobox:first-child > box > button.combo { border-top-left-radius: 5px; border-top-right-radius: 5px; } .linked.vertical > entry:last-child, .linked.vertical > button:last-child, spinbutton.vertical button:last-child, spinbutton.vertical entry:last-child, .linked.vertical > combobox:last-child > box > button.combo { border-bottom-left-radius: 5px; border-bottom-right-radius: 5px; border-bottom-style: solid; } .linked.vertical > entry:only-child, .linked.vertical > button:only-child, spinbutton.vertical button:only-child, spinbutton.vertical entry:only-child, .linked.vertical > combobox:only-child > box > button.combo { border-radius: 5px; border-style: solid; } menuitem.button.flat, modelbutton.flat, button:link, button:visited, button:link:hover, button:link:active, button:link:checked, button:visited:hover, button:visited:active, button:visited:checked, notebook > header > tabs > tab button.flat:hover, notebook > header > tabs > tab button.budgie-menu-launcher:hover, notebook > header > tabs > tab .budgie-panel #tasklist-button:hover, .budgie-panel notebook > header > tabs > tab #tasklist-button:hover, notebook > header > tabs > tab .budgie-panel button.flat.launcher:hover, .budgie-panel notebook > header > tabs > tab button.flat.launcher:hover, notebook > header > tabs > tab button.flat:active, notebook > header > tabs > tab button.budgie-menu-launcher:active, notebook > header > tabs > tab .budgie-panel #tasklist-button:active, .budgie-panel notebook > header > tabs > tab #tasklist-button:active, notebook > header > tabs > tab .budgie-panel button.flat.launcher:active, .budgie-panel notebook > header > tabs > tab button.flat.launcher:active, notebook > header > tabs > tab button.flat:active:hover, notebook > header > tabs > tab button.budgie-menu-launcher:active:hover, .app-notification button, calendar.button, calendar.raven-calendar.button { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; } menuitem.button.flat, modelbutton.flat { transition: all 0.2s cubic-bezier(0, 0, 0.2, 1); min-height: 26px; padding-left: 8px; padding-right: 8px; outline-offset: -3px; border-radius: 5px; } menuitem.button.flat:hover, modelbutton.flat:hover { background-color: #444444; transition-duration: 50ms; } menuitem.button.flat:active, menuitem.button.flat:active arrow, menuitem.button.flat:selected, menuitem.button.flat:selected arrow, modelbutton.flat:active, modelbutton.flat:active arrow, modelbutton.flat:selected, modelbutton.flat:selected arrow { color: #ffffff; background-color: rgba(132, 132, 132, 0.98); background-image: none; border-color: rgba(255, 255, 255, 0.12); border-top-color: rgba(255, 255, 255, 0.12); border-bottom-color: rgba(255, 255, 255, 0.12); text-shadow: none; -gtk-icon-shadow: none; box-shadow: none; transition: none; animation: none; } menuitem.button.flat:checked, modelbutton.flat:checked { color: #dedede; } menuitem.button.flat:disabled, modelbutton.flat:disabled { color: rgba(222, 222, 222, 0.45); } menuitem.button.flat check:last-child, menuitem.button.flat radio:last-child, modelbutton.flat check:last-child, modelbutton.flat radio:last-child { margin-left: 8px; } menuitem.button.flat check:first-child, menuitem.button.flat radio:first-child, modelbutton.flat check:first-child, modelbutton.flat radio:first-child { margin-right: 8px; } modelbutton.flat arrow.left { -gtk-icon-source: -gtk-icontheme("pan-start-symbolic"); } modelbutton.flat arrow.right { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); } *:link, button:link, button:visited { color: #3484e2; } *:link:visited, button:visited { color: #b8b8b8; } *:selected *:link:visited, *:selected button:visited:link, *:selected button:visited { color: #b6d1ff; } *:link:hover, button:hover:link, button:hover:visited { color: #619fe8; } *:selected *:link:hover, *:selected button:hover:link, *:selected button:hover:visited { color: #edf4ff; } *:link:active, button:active:link, button:active:visited { color: #3484e2; } *:selected *:link:active, *:selected button:active:link, *:selected button:active:visited { color: #dbe8ff; } infobar.info *:link, infobar.info button:link, infobar.info button:visited, infobar.question *:link, infobar.question button:link, infobar.question button:visited, infobar.warning *:link, infobar.warning button:link, infobar.warning button:visited, infobar.error *:link, infobar.error button:link, infobar.error button:visited, *:link:selected, button:selected:link, button:selected:visited, headerbar.selection-mode .subtitle:link, .selection-mode.titlebar:not(headerbar) .subtitle:link, *:selected *:link, *:selected button:link, *:selected button:visited { color: #dbe8ff; } button:link > label, button:visited > label { text-decoration-line: underline; } spinbutton:drop(active) { box-shadow: none; } spinbutton button:active { color: #ffffff; } spinbutton:disabled { color: rgba(222, 222, 222, 0.45); } spinbutton:not(.vertical) entry { min-width: 28px; } spinbutton:not(.vertical):dir(ltr) entry, spinbutton:not(.vertical):dir(rtl) button.up { border-radius: 5px 0 0 5px; } spinbutton:not(.vertical) > button + button { border-left-style: none; } spinbutton:not(.vertical) > button:hover:not(:active), spinbutton:not(.vertical) > button:hover + button { box-shadow: inset 1px 0 rgba(255, 255, 255, 0.12); } spinbutton:not(.vertical) > button:disabled + button:not(:disabled):not(:active):not(:checked):not(:hover), spinbutton:not(.vertical) > button:not(:disabled):not(:active):not(:checked):not(:hover) + button:disabled { box-shadow: inset 1px 0 rgba(255, 255, 255, 0); } spinbutton:not(.vertical) > button:first-child:hover:not(:active), spinbutton:not(.vertical) > button.up:dir(rtl):hover:not(:active), spinbutton:not(.vertical) > entry + button:not(:active):hover { box-shadow: none; } spinbutton:not(.vertical) > entry:focus + button { border-left-color: #8eb9ff; } spinbutton:not(.vertical) > entry:drop(active) + button { border-left-color: #F08437; } .osd spinbutton:not(.vertical) > button:hover:not(:active), .osd spinbutton:not(.vertical) > button:hover + button { box-shadow: inset 1px 0 rgba(255, 255, 255, 0.12); } .osd spinbutton:not(.vertical) > button:first-child:hover:not(:active), .osd spinbutton:not(.vertical) > button.up:dir(rtl):hover:not(:active), .osd spinbutton:not(.vertical) > entry + button:not(:active):hover { box-shadow: none; } .osd spinbutton:not(.vertical) > entry:focus + button { border-left-color: #8eb9ff; } spinbutton.vertical button, spinbutton.vertical entry { padding-left: 4px; padding-right: 4px; min-width: 0; } spinbutton.vertical button.up { border-radius: 5px 5px 0 0; } spinbutton.vertical > entry:focus + button { border-top-color: #8eb9ff; } spinbutton.vertical > entry:drop(active) + button { border-top-color: #F08437; } combobox button.combo { min-width: 0; padding-left: 12px; padding-right: 12px; } combobox arrow { -gtk-icon-source: -gtk-scaled(url("assets/combobox-arrow.png"), url("assets/combobox-arrow@2.png")); min-height: 16px; min-width: 20px; padding: 0; margin: -1px -13px -1px -1px; border-radius: 0 5px 5px 0; color: #ffffff; border: 1px solid #686868; background-color: #498dff; background-image: linear-gradient(180deg, #686868 0%, #686868 100%); } .linked:not(.vertical) > combobox > box > button.combo arrow { border-radius: 0; } .linked:not(.vertical) > combobox:last-child > box > button.combo arrow { border-radius: 0 5px 5px 0; } toolbar, .inline-toolbar { -GtkWidget-window-dragging: true; padding: 4px; background-color: rgba(55, 55, 55, 0.98); border-bottom: 1px solid rgba(255, 255, 255, 0.12); } toolbar separator, .inline-toolbar separator { background: none; } toolbar.horizontal separator, .horizontal.inline-toolbar separator { margin: 0 6px; } toolbar.vertical separator, .vertical.inline-toolbar separator { margin: 6px 0; } .osd toolbar, .osd .inline-toolbar { background-color: transparent; } toolbar.osd, .osd.inline-toolbar { padding: 8px; border: 1px solid rgba(255, 255, 255, 0.12); border-radius: 5px; background-color: rgba(36, 36, 36, 0.85); } toolbar.osd.left, .osd.left.inline-toolbar, toolbar.osd.right, .osd.right.inline-toolbar, toolbar.osd.top, .osd.top.inline-toolbar, toolbar.osd.bottom, .osd.bottom.inline-toolbar { border-radius: 0; } toolbar.osd.top, .osd.top.inline-toolbar { border-width: 0 0 1px 0; } toolbar.osd.bottom, .osd.bottom.inline-toolbar { border-width: 1px 0 0 0; } toolbar.osd.left, .osd.left.inline-toolbar { border-width: 0 1px 0 0; } toolbar.osd.right, .osd.right.inline-toolbar { border-width: 0 0 0 1px; } toolbar:not(.inline-toolbar) switch, .inline-toolbar:not(.inline-toolbar) switch, toolbar:not(.inline-toolbar) scale, .inline-toolbar:not(.inline-toolbar) scale, toolbar:not(.inline-toolbar) entry, .inline-toolbar:not(.inline-toolbar) entry, toolbar:not(.inline-toolbar) spinbutton, .inline-toolbar:not(.inline-toolbar) spinbutton, toolbar:not(.inline-toolbar) button, .inline-toolbar:not(.inline-toolbar) button { margin-right: 1px; margin-bottom: 1px; } toolbar:not(.inline-toolbar) .linked > button, .inline-toolbar:not(.inline-toolbar) .linked > button, toolbar:not(.inline-toolbar) .linked > entry, .inline-toolbar:not(.inline-toolbar) .linked > entry { margin-right: 0; } .primary-toolbar:not(.libreoffice-toolbar) { color: #dedede; background-color: transparent; box-shadow: none; border-width: 0 0 1px 0; border-style: solid; border-image: linear-gradient(to bottom, #4B4B4B, #4B4B4B) 1 0 1 0; } .inline-toolbar { background-color: #2b2b2b; border-style: solid; border-color: rgba(255, 255, 255, 0.12); border-width: 0 1px 1px; padding: 3px; border-radius: 0 0 5px 5px; } searchbar { background-color: #333333; border-style: solid; border-color: #4B4B4B; border-width: 0 0 1px; padding: 3px; } searchbar button.flat, searchbar button.budgie-menu-launcher, searchbar .budgie-panel #tasklist-button, .budgie-panel searchbar #tasklist-button, searchbar .budgie-panel button.flat.launcher, .budgie-panel searchbar button.flat.launcher { min-height: 16px; min-width: 16px; margin: 4px 6px; padding: 0 2px; border-radius: 100px; } actionbar { padding: 6px; border-top: 1px solid rgba(255, 255, 255, 0.12); background-color: #2b2b2b; border-radius: 0 0 6px 6px; } headerbar, .titlebar:not(headerbar) { min-height: 34px; padding: 0 8px; background-image: none; color: rgba(225, 219, 219, 0.8); background-color: #090909; border: none; } .csd headerbar, .csd .titlebar:not(headerbar) { background-image: none; background-color: #141414; border: none; } headerbar:backdrop, .titlebar:backdrop:not(headerbar) { transition: 200ms ease-out; color: rgba(225, 219, 219, 0.5); background-image: none; background-color: #141414; border: none; } .csd headerbar:backdrop, .csd .titlebar:backdrop:not(headerbar) { background-color: #141414; border: none; } .maximized headerbar, .maximized .titlebar:not(headerbar) { background-color: #090909; border: none; } .maximized headerbar:backdrop, .maximized .titlebar:backdrop:not(headerbar) { background-color: #141414; border: none; } headerbar .title, .titlebar:not(headerbar) .title { padding-left: 12px; padding-right: 12px; } headerbar .subtitle, .titlebar:not(headerbar) .subtitle { font-size: smaller; padding-left: 12px; padding-right: 12px; margin-top: -3px; } headerbar.selection-mode, .selection-mode.titlebar:not(headerbar) { color: #ffffff; background-color: #0e6bff; border-color: #0060f9; box-shadow: none; background-image: none; text-shadow: none; } headerbar.selection-mode:backdrop, .selection-mode.titlebar:backdrop:not(headerbar) { background-color: #0e6bff; color: rgba(255, 255, 255, 0.6); } headerbar.selection-mode .selection-menu, .selection-mode.titlebar:not(headerbar) .selection-menu { box-shadow: none; padding-left: 10px; padding-right: 10px; } headerbar.selection-mode .selection-menu GtkArrow, .selection-mode.titlebar:not(headerbar) .selection-menu GtkArrow { -GtkArrow-arrow-scaling: 1; } headerbar.selection-mode .selection-menu .arrow, .selection-mode.titlebar:not(headerbar) .selection-menu .arrow { -gtk-icon-source: -gtk-icontheme("pan-down-symbolic"); } .maximized headerbar.selection-mode, .maximized .selection-mode.titlebar:not(headerbar) { background-color: #0e6bff; } .tiled headerbar, .tiled headerbar:backdrop, .maximized headerbar, .maximized headerbar:backdrop, .tiled .titlebar:not(headerbar), .tiled .titlebar:backdrop:not(headerbar), .maximized .titlebar:not(headerbar), .maximized .titlebar:backdrop:not(headerbar) { border-radius: 0; } .maximized headerbar, .maximized .titlebar:not(headerbar) { background-color: #090909; border: none; } .maximized headerbar:backdrop, .maximized .titlebar:backdrop:not(headerbar) { background-color: #141414; } headerbar.default-decoration, .default-decoration.titlebar:not(headerbar) { min-height: 26px; padding: 0 6px; background-color: #090909; background-image: none; } .tiled headerbar.default-decoration, .maximized headerbar.default-decoration, .fullscreen headerbar.default-decoration, .tiled .default-decoration.titlebar:not(headerbar), .maximized .default-decoration.titlebar:not(headerbar), .fullscreen .default-decoration.titlebar:not(headerbar) { box-shadow: none; } headerbar.default-decoration button.titlebutton, .default-decoration.titlebar:not(headerbar) button.titlebutton { border: none; min-width: 16px; min-height: 16px; margin: 0; padding: 0; } headerbar.default-decoration, .csd headerbar.default-decoration, headerbar.default-decoration:backdrop, .csd headerbar.default-decoration:backdrop, .default-decoration.titlebar:not(headerbar), .csd .default-decoration.titlebar:not(headerbar), .default-decoration.titlebar:backdrop:not(headerbar), .csd .default-decoration.titlebar:backdrop:not(headerbar) { box-shadow: none; border: none; } .titlebar, .titlebar.background { border-radius: 6px 6px 0 0; } headerbar button, headerbar separator { margin-top: 6px; margin-bottom: 6px; } headerbar entry { margin-top: 5px; margin-bottom: 5px; } separator:first-child + headerbar, separator:first-child + headerbar:backdrop, headerbar:first-child, headerbar:first-child:backdrop { border-top-left-radius: 6px; } .maximized separator:first-child + headerbar, .tiled separator:first-child + headerbar, .maximized separator:first-child + headerbar:backdrop, .tiled separator:first-child + headerbar:backdrop, .maximized headerbar:first-child, .tiled headerbar:first-child, .maximized headerbar:first-child:backdrop, .tiled headerbar:first-child:backdrop { border-radius: 0; } headerbar:last-child, headerbar:last-child:backdrop { border-top-right-radius: 6px; } .maximized headerbar:last-child, .tiled headerbar:last-child, .maximized headerbar:last-child:backdrop, .tiled headerbar:last-child:backdrop { border-radius: 0; } window > .titlebar:not(headerbar), window > .titlebar:not(headerbar):backdrop, window.csd > .titlebar:not(headerbar), window.csd > .titlebar:not(headerbar):backdrop { padding: 0; background: none; background-image: none; border: none; box-shadow: none; } .titlebar:not(headerbar) > separator { background-color: none; } .titlebar:not(headerbar) > separator:backdrop { background-color: none; } .primary-toolbar:not(.libreoffice-toolbar) separator, headerbar separator.titlebutton, .titlebar:not(headerbar) separator.titlebutton { min-width: 0; min-height: 0; background-color: transparent; border: none; } .primary-toolbar:not(.libreoffice-toolbar) separator:backdrop, headerbar separator.titlebutton:backdrop, .titlebar:not(headerbar) separator.titlebutton:backdrop { opacity: 0.6; } headerbar entry, .nemo-window .primary-toolbar entry { border: none; color: rgba(225, 219, 219, 0.8); background-color: rgba(119, 119, 119, 0.58); background-image: none; } headerbar entry image, .nemo-window .primary-toolbar entry image, headerbar entry image:hover, .nemo-window .primary-toolbar entry image:hover { color: inherit; } headerbar entry:backdrop, .nemo-window .primary-toolbar entry:backdrop { opacity: 0.85; background-image: none; box-shadow: none; } headerbar entry:focus, .nemo-window .primary-toolbar entry:focus { border: none; box-shadow: 0 0 0 2px #8eb9ff, inset 0 0 0 1px #8eb9ff; border-color: #8eb9ff; background-image: none; background-clip: padding-box; } headerbar entry:focus image, .nemo-window .primary-toolbar entry:focus image { color: #498dff; } headerbar entry:disabled, .nemo-window .primary-toolbar entry:disabled { color: rgba(225, 219, 219, 0.35); background-color: rgba(111, 111, 111, 0.23); } headerbar entry selection:focus, .nemo-window .primary-toolbar entry selection:focus { background-color: #498dff; color: #ffffff; } headerbar entry progress, .nemo-window .primary-toolbar entry progress { border-color: #498dff; background-image: none; background-color: transparent; } headerbar entry.warning, .nemo-window .primary-toolbar entry.warning { color: white; border-color: rgba(24, 24, 24, 0.38); background-color: rgba(169, 95, 54, 0.992); } headerbar entry.warning:focus, .nemo-window .primary-toolbar entry.warning:focus { color: white; background-color: #F27835; } headerbar entry.warning selection, .nemo-window .primary-toolbar entry.warning selection, headerbar entry.warning selection:focus, .nemo-window .primary-toolbar entry.warning selection:focus { background-color: white; color: #F27835; } headerbar entry.error, .nemo-window .primary-toolbar entry.error { color: white; border-color: rgba(24, 24, 24, 0.38); background-color: rgba(175, 61, 56, 0.992); } headerbar entry.error:focus, .nemo-window .primary-toolbar entry.error:focus { color: white; background-color: #FC4138; } headerbar entry.error selection, .nemo-window .primary-toolbar entry.error selection, headerbar entry.error selection:focus, .nemo-window .primary-toolbar entry.error selection:focus { background-color: white; color: #FC4138; } paned.titlebar.horizontal headerbar button.flat.toggle.popup:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:not(.image-button), headerbar button, .nemo-window .primary-toolbar button { min-width: 22px; border-color: rgba(255, 255, 255, 0.12); color: rgba(225, 219, 219, 0.8); background-color: rgba(119, 119, 119, 0.58); background-image: none; box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); border: none; } paned.titlebar.horizontal headerbar button.flat.toggle.popup:backdrop:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:backdrop:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:backdrop:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:backdrop:not(.image-button), headerbar button:backdrop, .nemo-window .primary-toolbar button:backdrop { opacity: 0.7; background-image: none; box-shadow: none; } paned.titlebar.horizontal headerbar button.flat.toggle.popup:hover:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:hover:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:hover:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:hover:not(.image-button), headerbar button:hover, .nemo-window .primary-toolbar button:hover { border-color: rgba(255, 255, 255, 0.12); color: rgba(221, 213, 213, 0.8); background-color: rgba(119, 119, 119, 0.88); background-image: none; box-shadow: none; transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); } paned.titlebar.horizontal headerbar button.flat.toggle.popup:checked:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:checked:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:checked:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:checked:not(.image-button), headerbar button:checked, .nemo-window .primary-toolbar button:checked { color: #ffffff; background-color: rgba(132, 132, 132, 0.98); background-image: none; border-color: rgba(255, 255, 255, 0.12); border-top-color: rgba(255, 255, 255, 0.12); border-bottom-color: rgba(255, 255, 255, 0.12); text-shadow: none; -gtk-icon-shadow: none; box-shadow: none; background-clip: padding-box; transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); transition-duration: 300ms; } paned.titlebar.horizontal headerbar button.flat.toggle.popup:active:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:active:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:active:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:active:not(.image-button), headerbar button:active, .nemo-window .primary-toolbar button:active { color: #ffffff; background-color: rgba(119, 119, 119, 0.98); background-image: none; border-color: rgba(255, 255, 255, 0.12); text-shadow: none; -gtk-icon-shadow: none; box-shadow: none; transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); transition-duration: 300ms; background-clip: padding-box; } paned.titlebar.horizontal headerbar button.flat.toggle.popup:disabled:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:disabled:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:disabled:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:disabled:not(.image-button), headerbar button:disabled, .nemo-window .primary-toolbar button:disabled { background-color: rgba(119, 119, 119, 0.58); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } paned.titlebar.horizontal headerbar button.flat.toggle.popup:disabled:not(.image-button) label, paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:disabled:not(.image-button) label, paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:disabled:not(.image-button) label, .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:disabled:not(.image-button) label, paned.titlebar.horizontal headerbar button.flat.toggle.popup:disabled:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:disabled:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:disabled:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:disabled:not(.image-button), headerbar button:disabled label, .nemo-window .primary-toolbar button:disabled label, headerbar button:disabled, .nemo-window .primary-toolbar button:disabled { color: rgba(225, 219, 219, 0.35); } paned.titlebar.horizontal headerbar button.flat.toggle.popup:disabled:active:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:disabled:active:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:disabled:active:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:disabled:active:not(.image-button), paned.titlebar.horizontal headerbar button.flat.toggle.popup:disabled:checked:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:disabled:checked:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:disabled:checked:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:disabled:checked:not(.image-button), headerbar button:disabled:active, .nemo-window .primary-toolbar button:disabled:active, headerbar button:disabled:checked, .nemo-window .primary-toolbar button:disabled:checked { color: rgba(255, 255, 255, 0.75); background-color: rgba(119, 119, 119, 0.63); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } paned.titlebar.horizontal headerbar button.flat.toggle.popup:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:not(.image-button), headerbar button.flat, .nemo-window .primary-toolbar button.flat, headerbar button.budgie-menu-launcher, .nemo-window .primary-toolbar button.budgie-menu-launcher, headerbar .budgie-panel #tasklist-button, .budgie-panel headerbar #tasklist-button, .nemo-window .primary-toolbar .budgie-panel #tasklist-button, .budgie-panel .nemo-window .primary-toolbar #tasklist-button, headerbar .budgie-panel button.flat.launcher, .budgie-panel headerbar button.flat.launcher, .nemo-window .primary-toolbar .budgie-panel button.flat.launcher, .budgie-panel .nemo-window .primary-toolbar button.flat.launcher { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; } headerbar.selection-mode button, .nemo-window .selection-mode.primary-toolbar button, headerbar.selection-mode button.flat, .nemo-window .selection-mode.primary-toolbar button.flat, headerbar.selection-mode button.budgie-menu-launcher, .nemo-window .selection-mode.primary-toolbar button.budgie-menu-launcher, headerbar.selection-mode .budgie-panel #tasklist-button, .budgie-panel headerbar.selection-mode #tasklist-button, .nemo-window .selection-mode.primary-toolbar .budgie-panel #tasklist-button, .budgie-panel .nemo-window .selection-mode.primary-toolbar #tasklist-button, headerbar.selection-mode .budgie-panel button.flat.launcher, .budgie-panel headerbar.selection-mode button.flat.launcher { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; color: #ffffff; background-color: rgba(255, 255, 255, 0); } headerbar.selection-mode button:hover, .nemo-window .selection-mode.primary-toolbar button:hover { background-color: rgba(255, 255, 255, 0.25); } headerbar.selection-mode button:active, .nemo-window .selection-mode.primary-toolbar button:active, headerbar.selection-mode button:checked, .nemo-window .selection-mode.primary-toolbar button:checked { text-shadow: none; } headerbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child), .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child), headerbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child):hover, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child):hover, headerbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child):active, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child):active, headerbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child):checked, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child):checked, headerbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child):disabled, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child):disabled { margin-right: 1px; } headerbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) > button, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) > button { min-width: 20px; } headerbar .linked:not(.vertical):not(.path-bar) > button, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > button, headerbar .linked:not(.vertical):not(.path-bar) > button:hover, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > button:hover, headerbar .linked:not(.vertical):not(.path-bar) > button:active, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > button:active, headerbar .linked:not(.vertical):not(.path-bar) > button:checked, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > button:checked, headerbar .linked:not(.vertical):not(.path-bar) > button:disabled, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > button:disabled { border-radius: 5px; } headerbar .linked:not(.vertical):not(.path-bar) > entry, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > entry, headerbar .linked:not(.vertical):not(.path-bar) > entry:disabled, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > entry:disabled { border-radius: 5px; margin-right: 4px; margin-left: 3px; } headerbar .linked:not(.vertical):not(.path-bar) > button:active + entry, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > button:active + entry, headerbar .linked:not(.vertical):not(.path-bar) > button:checked + entry, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > button:checked + entry { border-left-color: rgba(255, 255, 255, 0.12); } headerbar .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + entry, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + entry, headerbar .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + button, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + button, headerbar .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + combobox > box > button.combo, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + combobox > box > button.combo { border-left-color: rgba(255, 255, 255, 0.12); } headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button, headerbar .linked:not(.vertical).path-bar > button, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button { border-color: rgba(255, 255, 255, 0.12); color: rgba(225, 219, 219, 0.8); background-color: rgba(119, 119, 119, 0.58); background-image: none; box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); border: none; } headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:hover, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:hover, headerbar .linked:not(.vertical).path-bar > button:hover, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button:hover { border-color: rgba(255, 255, 255, 0.12); color: rgba(221, 213, 213, 0.8); background-color: rgba(119, 119, 119, 0.88); background-image: none; box-shadow: none; } headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:active, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:active, headerbar .linked:not(.vertical).path-bar > button:active, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button:active { color: #ffffff; background-color: rgba(119, 119, 119, 0.98); background-image: none; border-color: rgba(255, 255, 255, 0.12); text-shadow: none; -gtk-icon-shadow: none; box-shadow: none; } headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:checked, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:checked, headerbar .linked:not(.vertical).path-bar > button:checked, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button:checked { color: #ffffff; background-color: rgba(132, 132, 132, 0.98); background-image: none; border-color: rgba(255, 255, 255, 0.12); border-top-color: rgba(255, 255, 255, 0.12); border-bottom-color: rgba(255, 255, 255, 0.12); text-shadow: none; -gtk-icon-shadow: none; box-shadow: none; } headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:disabled, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:disabled, headerbar .linked:not(.vertical).path-bar > button:disabled, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button:disabled { color: rgba(225, 219, 219, 0.4); } headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:backdrop, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:backdrop, headerbar .linked:not(.vertical).path-bar > button:backdrop, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button:backdrop { opacity: 0.7; background-image: none; box-shadow: none; } headerbar button.suggested-action, .nemo-window .primary-toolbar button.suggested-action { background-clip: border-box; color: white; background-color: #3484e2; border-color: #1c6bc7; background-image: none; } headerbar button.suggested-action.flat, .nemo-window .primary-toolbar button.suggested-action.flat, headerbar button.suggested-action.budgie-menu-launcher, .nemo-window .primary-toolbar button.suggested-action.budgie-menu-launcher, headerbar .budgie-panel .suggested-action#tasklist-button, .budgie-panel headerbar .suggested-action#tasklist-button, .nemo-window .primary-toolbar .budgie-panel .suggested-action#tasklist-button, .budgie-panel .nemo-window .primary-toolbar .suggested-action#tasklist-button, headerbar .budgie-panel button.suggested-action.flat.launcher, .budgie-panel headerbar button.suggested-action.flat.launcher, .nemo-window .primary-toolbar .budgie-panel button.suggested-action.flat.launcher, .budgie-panel .nemo-window .primary-toolbar button.suggested-action.flat.launcher { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; color: #3484e2; } headerbar button.suggested-action:hover, .nemo-window .primary-toolbar button.suggested-action:hover { background-clip: border-box; color: white; background-color: #619fe8; border-color: #3484e2; background-image: none; } headerbar button.suggested-action:active, .nemo-window .primary-toolbar button.suggested-action:active, headerbar button.suggested-action:checked, .nemo-window .primary-toolbar button.suggested-action:checked { background-clip: border-box; color: white; background-color: #1c6bc7; border-color: #16539a; background-image: none; box-shadow: none; } headerbar button.suggested-action.flat:disabled, .nemo-window .primary-toolbar button.suggested-action.flat:disabled, headerbar button.suggested-action.budgie-menu-launcher:disabled, .nemo-window .primary-toolbar button.suggested-action.budgie-menu-launcher:disabled, headerbar .budgie-panel .suggested-action#tasklist-button:disabled, .budgie-panel headerbar .suggested-action#tasklist-button:disabled, .nemo-window .primary-toolbar .budgie-panel .suggested-action#tasklist-button:disabled, .budgie-panel .nemo-window .primary-toolbar .suggested-action#tasklist-button:disabled, headerbar .budgie-panel button.suggested-action.flat.launcher:disabled, .budgie-panel headerbar button.suggested-action.flat.launcher:disabled, headerbar button.suggested-action:disabled, .nemo-window .primary-toolbar button.suggested-action:disabled { border-color: rgba(255, 255, 255, 0.12); background-color: rgba(72, 72, 72, 0.55); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } headerbar button.suggested-action.flat:disabled label, .nemo-window .primary-toolbar button.suggested-action.flat:disabled label, headerbar button.suggested-action.budgie-menu-launcher:disabled label, .nemo-window .primary-toolbar button.suggested-action.budgie-menu-launcher:disabled label, headerbar .budgie-panel .suggested-action#tasklist-button:disabled label, .budgie-panel headerbar .suggested-action#tasklist-button:disabled label, .nemo-window .primary-toolbar .budgie-panel .suggested-action#tasklist-button:disabled label, .budgie-panel .nemo-window .primary-toolbar .suggested-action#tasklist-button:disabled label, headerbar .budgie-panel button.suggested-action.flat.launcher:disabled label, .budgie-panel headerbar button.suggested-action.flat.launcher:disabled label, headerbar button.suggested-action.flat:disabled, .nemo-window .primary-toolbar button.suggested-action.flat:disabled, headerbar button.suggested-action.budgie-menu-launcher:disabled, .nemo-window .primary-toolbar button.suggested-action.budgie-menu-launcher:disabled, headerbar .budgie-panel .suggested-action#tasklist-button:disabled, .budgie-panel headerbar .suggested-action#tasklist-button:disabled, .nemo-window .primary-toolbar .budgie-panel .suggested-action#tasklist-button:disabled, .budgie-panel .nemo-window .primary-toolbar .suggested-action#tasklist-button:disabled, headerbar .budgie-panel button.suggested-action.flat.launcher:disabled, .budgie-panel headerbar button.suggested-action.flat.launcher:disabled, headerbar button.suggested-action:disabled label, .nemo-window .primary-toolbar button.suggested-action:disabled label, headerbar button.suggested-action:disabled, .nemo-window .primary-toolbar button.suggested-action:disabled { color: rgba(222, 222, 222, 0.45); } headerbar button.suggested-action:backdrop, .nemo-window .primary-toolbar button.suggested-action:backdrop, headerbar button.suggested-action:backdrop, .nemo-window .primary-toolbar button.suggested-action:backdrop { opacity: 0.8; } headerbar button.destructive-action, .nemo-window .primary-toolbar button.destructive-action { background-clip: border-box; color: white; background-color: #f8464c; border-color: #f6151c; background-image: none; } headerbar button.destructive-action.flat, .nemo-window .primary-toolbar button.destructive-action.flat, headerbar button.destructive-action.budgie-menu-launcher, .nemo-window .primary-toolbar button.destructive-action.budgie-menu-launcher, headerbar .budgie-panel .destructive-action#tasklist-button, .budgie-panel headerbar .destructive-action#tasklist-button, .nemo-window .primary-toolbar .budgie-panel .destructive-action#tasklist-button, .budgie-panel .nemo-window .primary-toolbar .destructive-action#tasklist-button, headerbar .budgie-panel button.destructive-action.flat.launcher, .budgie-panel headerbar button.destructive-action.flat.launcher, .nemo-window .primary-toolbar .budgie-panel button.destructive-action.flat.launcher, .budgie-panel .nemo-window .primary-toolbar button.destructive-action.flat.launcher { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; color: #f8464c; } headerbar button.destructive-action:hover, .nemo-window .primary-toolbar button.destructive-action:hover { background-clip: border-box; color: white; background-color: #fa777c; border-color: #f8464c; background-image: none; } headerbar button.destructive-action:active, .nemo-window .primary-toolbar button.destructive-action:active, headerbar button.destructive-action:checked, .nemo-window .primary-toolbar button.destructive-action:checked { background-clip: border-box; color: white; background-color: #f6151c; border-color: #d0080f; background-image: none; box-shadow: none; } headerbar button.destructive-action.flat:disabled, .nemo-window .primary-toolbar button.destructive-action.flat:disabled, headerbar button.destructive-action.budgie-menu-launcher:disabled, .nemo-window .primary-toolbar button.destructive-action.budgie-menu-launcher:disabled, headerbar .budgie-panel .destructive-action#tasklist-button:disabled, .budgie-panel headerbar .destructive-action#tasklist-button:disabled, .nemo-window .primary-toolbar .budgie-panel .destructive-action#tasklist-button:disabled, .budgie-panel .nemo-window .primary-toolbar .destructive-action#tasklist-button:disabled, headerbar .budgie-panel button.destructive-action.flat.launcher:disabled, .budgie-panel headerbar button.destructive-action.flat.launcher:disabled, headerbar button.destructive-action:disabled, .nemo-window .primary-toolbar button.destructive-action:disabled { border-color: rgba(255, 255, 255, 0.12); background-color: rgba(72, 72, 72, 0.55); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } headerbar button.destructive-action.flat:disabled label, .nemo-window .primary-toolbar button.destructive-action.flat:disabled label, headerbar button.destructive-action.budgie-menu-launcher:disabled label, .nemo-window .primary-toolbar button.destructive-action.budgie-menu-launcher:disabled label, headerbar .budgie-panel .destructive-action#tasklist-button:disabled label, .budgie-panel headerbar .destructive-action#tasklist-button:disabled label, .nemo-window .primary-toolbar .budgie-panel .destructive-action#tasklist-button:disabled label, .budgie-panel .nemo-window .primary-toolbar .destructive-action#tasklist-button:disabled label, headerbar .budgie-panel button.destructive-action.flat.launcher:disabled label, .budgie-panel headerbar button.destructive-action.flat.launcher:disabled label, headerbar button.destructive-action.flat:disabled, .nemo-window .primary-toolbar button.destructive-action.flat:disabled, headerbar button.destructive-action.budgie-menu-launcher:disabled, .nemo-window .primary-toolbar button.destructive-action.budgie-menu-launcher:disabled, headerbar .budgie-panel .destructive-action#tasklist-button:disabled, .budgie-panel headerbar .destructive-action#tasklist-button:disabled, .nemo-window .primary-toolbar .budgie-panel .destructive-action#tasklist-button:disabled, .budgie-panel .nemo-window .primary-toolbar .destructive-action#tasklist-button:disabled, headerbar .budgie-panel button.destructive-action.flat.launcher:disabled, .budgie-panel headerbar button.destructive-action.flat.launcher:disabled, headerbar button.destructive-action:disabled label, .nemo-window .primary-toolbar button.destructive-action:disabled label, headerbar button.destructive-action:disabled, .nemo-window .primary-toolbar button.destructive-action:disabled { color: rgba(222, 222, 222, 0.45); } headerbar button.destructive-action:backdrop, .nemo-window .primary-toolbar button.destructive-action:backdrop, headerbar button.destructive-action:backdrop, .nemo-window .primary-toolbar button.destructive-action:backdrop { opacity: 0.8; } headerbar spinbutton:not(.vertical):focus, .nemo-window .primary-toolbar spinbutton:not(.vertical):focus { color: rgba(225, 219, 219, 0.8); caret-color: rgba(225, 219, 219, 0.8); } headerbar spinbutton:not(.vertical) button, .nemo-window .primary-toolbar spinbutton:not(.vertical) button, headerbar spinbutton:not(.vertical) button:disabled, .nemo-window .primary-toolbar spinbutton:not(.vertical) button:disabled { border-color: rgba(255, 255, 255, 0.12); color: rgba(221, 213, 213, 0.8); background-color: rgba(119, 119, 119, 0.88); background-image: none; box-shadow: none; } headerbar spinbutton:not(.vertical) button:hover, .nemo-window .primary-toolbar spinbutton:not(.vertical) button:hover { background-color: rgba(157, 157, 157, 0.58); } headerbar spinbutton:not(.vertical) button:active, .nemo-window .primary-toolbar spinbutton:not(.vertical) button:active, headerbar spinbutton:not(.vertical) button:checked, .nemo-window .primary-toolbar spinbutton:not(.vertical) button:checked { color: #ffffff; background-color: rgba(119, 119, 119, 0.98); background-image: none; border-color: rgba(255, 255, 255, 0.12); text-shadow: none; -gtk-icon-shadow: none; box-shadow: none; } headerbar spinbutton:not(.vertical) button:disabled, .nemo-window .primary-toolbar spinbutton:not(.vertical) button:disabled { color: rgba(225, 219, 219, 0.4); } headerbar spinbutton:not(.vertical) > button + button, .nemo-window .primary-toolbar spinbutton:not(.vertical) > button + button { border-left-style: none; } headerbar spinbutton:not(.vertical) > button:hover:not(:active), .nemo-window .primary-toolbar spinbutton:not(.vertical) > button:hover:not(:active), headerbar spinbutton:not(.vertical) > button:hover + button, .nemo-window .primary-toolbar spinbutton:not(.vertical) > button:hover + button { box-shadow: inset 1px 0 rgba(255, 255, 255, 0.12); } headerbar spinbutton:not(.vertical) > button:first-child:hover:not(:active), .nemo-window .primary-toolbar spinbutton:not(.vertical) > button:first-child:hover:not(:active), headerbar spinbutton:not(.vertical) > entry + button:not(:active):hover, .nemo-window .primary-toolbar spinbutton:not(.vertical) > entry + button:not(:active):hover { box-shadow: none; } headerbar spinbutton:not(.vertical) > entry:focus + button, .nemo-window .primary-toolbar spinbutton:not(.vertical) > entry:focus + button { border-left-color: #8eb9ff; } headerbar combobox:disabled, .nemo-window .primary-toolbar combobox:disabled { color: rgba(225, 219, 219, 0.2); } headerbar combobox > .linked > button.combo, .nemo-window .primary-toolbar combobox > .linked > button.combo { border-radius: 5px; border: none; color: rgba(225, 219, 219, 0.8); background-color: rgba(119, 119, 119, 0.58); background-image: none; } headerbar combobox > .linked > button.combo image, .nemo-window .primary-toolbar combobox > .linked > button.combo image, headerbar combobox > .linked > button.combo image:hover, .nemo-window .primary-toolbar combobox > .linked > button.combo image:hover { color: inherit; } headerbar combobox > .linked > button.combo:hover, .nemo-window .primary-toolbar combobox > .linked > button.combo:hover { border: none; box-shadow: 0 0 0 2px #8eb9ff, inset 0 0 0 1px #8eb9ff; border-color: #8eb9ff; background-image: none; box-shadow: none; } headerbar combobox > .linked > button.combo:disabled, .nemo-window .primary-toolbar combobox > .linked > button.combo:disabled { color: rgba(225, 219, 219, 0.35); background-color: rgba(111, 111, 111, 0.23); } headerbar combobox > .linked > entry.combo, .nemo-window .primary-toolbar combobox > .linked > entry.combo { border-radius: 5px; } headerbar combobox > .linked > entry.combo:dir(ltr), .nemo-window .primary-toolbar combobox > .linked > entry.combo:dir(ltr) { border-right-style: none; } headerbar combobox > .linked > entry.combo:dir(ltr):focus, .nemo-window .primary-toolbar combobox > .linked > entry.combo:dir(ltr):focus { box-shadow: none; } headerbar combobox > .linked > entry.combo:dir(rtl), .nemo-window .primary-toolbar combobox > .linked > entry.combo:dir(rtl) { border-left-style: none; } headerbar combobox > .linked > entry.combo:dir(rtl):focus, .nemo-window .primary-toolbar combobox > .linked > entry.combo:dir(rtl):focus { box-shadow: none; } headerbar switch:backdrop, .nemo-window .primary-toolbar switch:backdrop { opacity: 0.75; } headerbar progressbar trough, .nemo-window .primary-toolbar progressbar trough { background-color: transparent; } headerbar progressbar:backdrop, .nemo-window .primary-toolbar progressbar:backdrop { opacity: 0.75; } headerbar scale:backdrop, .nemo-window .primary-toolbar scale:backdrop { opacity: 0.75; } headerbar scale slider, .nemo-window .primary-toolbar scale slider { background-color: #515151; border-color: rgba(0, 0, 0, 0.3); } headerbar scale slider:hover, .nemo-window .primary-toolbar scale slider:hover { background-color: #5d5d5d; border-color: rgba(0, 0, 0, 0.3); } headerbar scale slider:active, .nemo-window .primary-toolbar scale slider:active { background-color: #515151; border-color: rgba(0, 0, 0, 0.3); } headerbar scale slider:disabled, .nemo-window .primary-toolbar scale slider:disabled { background-color: rgba(73, 73, 73, 0.994); border-color: rgba(0, 0, 0, 0.3); } headerbar scale trough, .nemo-window .primary-toolbar scale trough { background-color: transparent; } headerbar scale trough:disabled, .nemo-window .primary-toolbar scale trough:disabled { background-color: transparent; } .path-bar button { min-width: 12px; } .path-bar button.text-button, .path-bar button.image-button, .path-bar button { padding-left: 6px; padding-right: 6px; } .path-bar button:hover { box-shadow: none; } .path-bar button:active, .path-bar button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.35); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); } .path-bar button.text-button.image-button label { padding-left: 0; padding-right: 0; } .path-bar button.text-button.image-button label:last-child, .path-bar button label:last-child { padding-right: 10px; } .path-bar button.text-button.image-button label:first-child, .path-bar button label:first-child { padding-left: 10px; } .path-bar button.slider-button, .path-bar button:not(.image-button):not(.text-button) { padding-left: 1px; padding-right: 1px; } .path-bar button image { padding-left: 4px; padding-right: 4px; } treeview.view { border-left-color: rgba(222, 222, 222, 0.15); border-top-color: rgba(0, 0, 0, 0.1); } * { -GtkTreeView-horizontal-separator: 4; -GtkTreeView-grid-line-width: 1; -GtkTreeView-grid-line-pattern: ''; -GtkTreeView-tree-line-width: 1; -GtkTreeView-tree-line-pattern: ''; -GtkTreeView-expander-size: 16; } treeview.view acceleditor > label { background-color: #498dff; } treeview.view:selected, treeview.view:selected:focus { border-radius: 0; border-left-color: #a4c6ff; border-top-color: rgba(222, 222, 222, 0.1); } treeview.view:disabled { color: rgba(222, 222, 222, 0.45); } treeview.view:disabled:selected { color: #92bbff; } treeview.view.separator { min-height: 2px; color: rgba(0, 0, 0, 0.1); } treeview.view:drop(active) { border-style: solid none; border-width: 1px; border-color: #94b6ef; } treeview.view:drop(active).after { border-top-style: none; } treeview.view:drop(active).before { border-bottom-style: none; } treeview.view.expander { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); color: #818181; } treeview.view.expander:dir(rtl) { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic-rtl"); } treeview.view.expander:hover { color: #dedede; } treeview.view.expander:selected { color: #c8ddff; } treeview.view.expander:selected:hover { color: #ffffff; } treeview.view.expander:checked { -gtk-icon-source: -gtk-icontheme("pan-down-symbolic"); } treeview.view.progressbar, treeview.view.progressbar:focus { color: #ffffff; border-radius: 5px; background-color: #498dff; } treeview.view.progressbar:selected, treeview.view.progressbar:selected:focus, treeview.view.progressbar:focus:selected, treeview.view.progressbar:focus:selected:focus { color: #498dff; box-shadow: none; background-color: #ffffff; } treeview.view.trough { color: #dedede; background-color: rgba(255, 255, 255, 0.12); border-radius: 5px; border-width: 0; } treeview.view.trough:selected, treeview.view.trough:selected:focus { color: #ffffff; background-color: rgba(0, 0, 0, 0.2); border-radius: 5px; border-width: 0; } treeview.view header button { min-height: 26px; min-width: 38px; padding: 0 6px; font-weight: bold; color: #b9b9b9; background-color: #242424; background-image: none; border-style: none solid none none; border-radius: 0; border-image: linear-gradient(to bottom, #242424 20%, rgba(255, 255, 255, 0.11) 20%, rgba(255, 255, 255, 0.11) 80%, #242424 80%) 0 1 0 0/0 1px 0 0 stretch; } treeview.view header button:hover { color: #498dff; } treeview.view header button:active { color: #dedede; } treeview.view header button:active, treeview.view header button:hover { background-color: #242424; } treeview.view header button:active:hover { color: #dedede; } treeview.view header button:disabled { border-color: #333333; background-image: none; } treeview.view header button:last-child { border-right-style: none; border-image: none; } treeview.view button.dnd, treeview.view button.dnd:selected, treeview.view button.dnd:hover, treeview.view button.dnd:active, treeview.view header.button.dnd, treeview.view header.button.dnd:selected, treeview.view header.button.dnd:hover, treeview.view header.button.dnd:active { padding: 0 6px; transition: none; color: #ffffff; background-color: #498dff; border-radius: 0; border-style: none; } menubar, .menubar { -GtkWidget-window-dragging: true; padding: 0px; background-color: #373737; background-image: none; color: rgba(225, 219, 219, 0.8); box-shadow: inset 0 -1px rgba(255, 255, 255, 0.12); } menubar:backdrop, .menubar:backdrop { color: rgba(225, 219, 219, 0.6); } menubar > menuitem, .menubar > menuitem { transition: all 0.2s cubic-bezier(0, 0, 0.2, 1); padding: 4px 8px; } menubar > menuitem menu, .menubar > menuitem menu { border-radius: 0 0 6px 6px; } menubar > menuitem menu menu, .menubar > menuitem menu menu { border-radius: 6px; } menubar > menuitem:hover, .menubar > menuitem:hover { background-color: #498dff; color: #ffffff; text-shadow: 0 -1px rgba(255, 255, 255, 0.04), -1px 0px rgba(32, 32, 32, 0.05), 1px 0px rgba(32, 32, 32, 0.05), 0px 1px rgba(32, 32, 32, 0.3), 0px 2px rgba(32, 32, 32, 0.05); } menubar > menuitem:disabled, .menubar > menuitem:disabled { color: rgba(225, 219, 219, 0.2); border-color: transparent; } menu, .menu { padding: 6px 0; border-radius: 6px; background-color: rgba(51, 51, 51, 0.98); } menu separator, .csd menu separator, .menu separator, .csd .menu separator { margin: 2px 0; min-height: 0; border-bottom: 2px solid rgba(255, 255, 255, 0.08); background-color: transparent; } menu menuitem, .menu menuitem { min-height: 12px; min-width: 40px; padding: 2px 6px; text-shadow: none; } menu menuitem:hover, .menu menuitem:hover { color: #ffffff; background-color: #498dff; box-shadow: inset 0 -1px #166dff; text-shadow: 0 -1px rgba(255, 255, 255, 0.04), -1px 0px rgba(32, 32, 32, 0.05), 1px 0px rgba(32, 32, 32, 0.05), 0px 1px rgba(32, 32, 32, 0.3), 0px 2px rgba(32, 32, 32, 0.05); } menu menuitem:hover arrow, .menu menuitem:hover arrow { transition: none; color: #ffffff; -gtk-icon-shadow: none; } menu menuitem:hover menu arrow, .menu menuitem:hover menu arrow { color: #dedede; text-shadow: none; -gtk-icon-shadow: none; } menu menuitem:disabled, .menu menuitem:disabled { color: rgba(222, 222, 222, 0.45); } menu menuitem arrow, .menu menuitem arrow { min-height: 16px; min-width: 16px; background-color: transparent; background-image: none; border: none; color: #dedede; } menu menuitem arrow:dir(ltr), .menu menuitem arrow:dir(ltr) { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); margin-right: 0; } menu menuitem arrow:dir(rtl), .menu menuitem arrow:dir(rtl) { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic-rtl"); margin-left: 0; } menuitem accelerator { color: alpha(currentColor,0.55); } menuitem check, menuitem radio { min-height: 16px; min-width: 16px; } menuitem check:dir(ltr), menuitem radio:dir(ltr) { margin-right: 6px; margin-left: 2px; } menuitem check:dir(rtl), menuitem radio:dir(rtl) { margin-left: 6px; margin-right: 2px; } menu > arrow, .menu > arrow { min-width: 16px; min-height: 16px; padding: 2px; background-color: transparent; border-radius: 0; border: none; background-image: none; color: #dedede; } menu > arrow.top, .menu > arrow.top { margin: -8px 0 0 0; border-radius: 6px 6px 0 0; border-bottom: 1px solid rgba(255, 255, 255, 0.12); -gtk-icon-source: -gtk-icontheme("pan-up-symbolic"); } menu > arrow.bottom, .menu > arrow.bottom { margin: 0 0 -18px 0; border-radius: 0 0 6px 6px; border-top: 1px solid rgba(255, 255, 255, 0.12); -gtk-icon-source: -gtk-icontheme("pan-down-symbolic"); } menu > arrow:hover, .menu > arrow:hover { background-color: rgba(222, 222, 222, 0.08); } menu > arrow:disabled, .menu > arrow:disabled { color: transparent; background-color: transparent; border-color: transparent; } popover, popover.background { padding: 0; border-radius: 6px; background-clip: border-box; background-color: rgba(51, 51, 51, 0.98); box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.15); } .csd popover, popover, .csd popover.background, popover.background { border-radius: 6px; border: 1px solid rgba(255, 255, 255, 0.12); } popover separator, popover separator, .csd popover separator, popover.background separator, popover.background separator, .csd popover.background separator { margin: 4px -9px; min-height: 2px; border: none; background-color: rgba(255, 255, 255, 0.08); } popover > list, popover > .view, popover > iconview, popover > toolbar, popover > .inline-toolbar, popover.background > list, popover.background > .view, popover.background > iconview, popover.background > toolbar, popover.background > .inline-toolbar { border-style: none; background-color: transparent; } cursor-handle { background-color: transparent; background-image: none; box-shadow: none; border-style: none; } cursor-handle.top { -gtk-icon-source: -gtk-icontheme("selection-start-symbolic"); } cursor-handle.bottom { -gtk-icon-source: -gtk-icontheme("selection-end-symbolic"); } notebook { padding: 0; } notebook.frame { border: 1px solid rgba(255, 255, 255, 0.12); } notebook > stack:not(:only-child) { background-color: #242424; } notebook > header { padding: 0; background-color: rgba(30, 30, 30, 0.98); } notebook > header.top { box-shadow: inset 0 1px rgba(255, 255, 255, 0.12), inset 0 -1px rgba(255, 255, 255, 0.12); margin-top: -1px; } notebook > header.bottom { box-shadow: inset 0 1px rgba(255, 255, 255, 0.12), inset 0 -1px rgba(255, 255, 255, 0.12); margin-bottom: -1px; } notebook > header.right { box-shadow: inset 1px 0 rgba(255, 255, 255, 0.12), inset -1px 0 rgba(255, 255, 255, 0.12); margin-right: -1px; } notebook > header.left { box-shadow: inset 1px 0 rgba(255, 255, 255, 0.12), inset -1px 0 rgba(255, 255, 255, 0.12); margin-left: -1px; } notebook > header button.flat, notebook > header button.budgie-menu-launcher, notebook > header .budgie-panel #tasklist-button, .budgie-panel notebook > header #tasklist-button, notebook > header .budgie-panel button.flat.launcher, .budgie-panel notebook > header button.flat.launcher { min-height: 24px; min-width: 24px; padding: 0; border: none; box-shadow: none; margin: 2px; } notebook > header.top { padding: 0; } notebook > header.top > tabs > tab { padding: 2px 10px; min-width: 20px; min-height: 20px; border-radius: 0; outline-offset: -4px; } notebook > header.top > tabs > tab + tab { margin-left: -1px; } notebook > header.bottom { padding: 0; } notebook > header.bottom > tabs > tab { padding: 2px 10px; min-width: 20px; min-height: 20px; border-radius: 0; outline-offset: -4px; } notebook > header.bottom > tabs > tab + tab { margin-left: -1px; } notebook > header.right { padding: 0; } notebook > header.right > tabs > tab { padding: 2px 10px; min-width: 20px; min-height: 20px; border-radius: 0; outline-offset: -4px; } notebook > header.right > tabs > tab + tab { margin-top: -1px; } notebook > header.left { padding: 0; } notebook > header.left > tabs > tab { padding: 2px 10px; min-width: 20px; min-height: 20px; border-radius: 0; outline-offset: -4px; } notebook > header.left > tabs > tab + tab { margin-top: -1px; } notebook > header.top > tabs > arrow.up, notebook > header.bottom > tabs > arrow.up { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); } notebook > header.top > tabs > arrow.up:last-child, notebook > header.bottom > tabs > arrow.up:last-child { margin-left: 2px; } notebook > header.top > tabs > arrow.down, notebook > header.bottom > tabs > arrow.down { -gtk-icon-source: -gtk-icontheme("pan-start-symbolic"); } notebook > header.top > tabs > arrow.down:first-child, notebook > header.bottom > tabs > arrow.down:first-child { margin-right: 2px; } notebook > header.left > tabs > arrow.up, notebook > header.right > tabs > arrow.up { -gtk-icon-source: -gtk-icontheme("pan-down-symbolic"); } notebook > header.left > tabs > arrow.up:last-child, notebook > header.right > tabs > arrow.up:last-child { margin-top: 2px; } notebook > header.left > tabs > arrow.down, notebook > header.right > tabs > arrow.down { -gtk-icon-source: -gtk-icontheme("pan-up-symbolic"); } notebook > header.left > tabs > arrow.down:first-child, notebook > header.right > tabs > arrow.down:first-child { margin-bottom: 2px; } notebook > header > tabs > arrow { color: rgba(222, 222, 222, 0.45); } notebook > header > tabs > arrow:hover { color: rgba(222, 222, 222, 0.725); } notebook > header > tabs > arrow:active { color: #dedede; } notebook > header > tabs > arrow:disabled { color: rgba(222, 222, 222, 0.15); } notebook > header > tabs > tab { color: rgba(222, 222, 222, 0.45); background-color: rgba(36, 36, 36, 0); border: 1px solid transparent; } notebook > header > tabs > tab:hover:not(:checked) { color: rgba(222, 222, 222, 0.725); background-color: rgba(255, 255, 255, 0.05); border-color: rgba(68, 68, 68, 0.98); } notebook > header > tabs > tab:checked { color: #dedede; background-color: rgba(55, 55, 55, 0.98); border-color: rgba(68, 68, 68, 0.98); } notebook > header > tabs > tab button.flat, notebook > header > tabs > tab button.budgie-menu-launcher, notebook > header > tabs > tab .budgie-panel #tasklist-button, .budgie-panel notebook > header > tabs > tab #tasklist-button, notebook > header > tabs > tab .budgie-panel button.flat.launcher, .budgie-panel notebook > header > tabs > tab button.flat.launcher { min-height: 16px; min-width: 16px; border-radius: 3px; padding: 0; margin: 2px 0; color: #a2a2a2; } notebook > header > tabs > tab button.flat:hover, notebook > header > tabs > tab button.budgie-menu-launcher:hover, notebook > header > tabs > tab .budgie-panel #tasklist-button:hover, .budgie-panel notebook > header > tabs > tab #tasklist-button:hover, notebook > header > tabs > tab .budgie-panel button.flat.launcher:hover, .budgie-panel notebook > header > tabs > tab button.flat.launcher:hover { color: rgba(255, 0, 0, 0.5); background-color: rgba(222, 222, 222, 0.1); } notebook > header > tabs > tab button.flat:active, notebook > header > tabs > tab button.budgie-menu-launcher:active, notebook > header > tabs > tab .budgie-panel #tasklist-button:active, .budgie-panel notebook > header > tabs > tab #tasklist-button:active, notebook > header > tabs > tab .budgie-panel button.flat.launcher:active, .budgie-panel notebook > header > tabs > tab button.flat.launcher:active, notebook > header > tabs > tab button.flat:active:hover, notebook > header > tabs > tab button.budgie-menu-launcher:active:hover, notebook > header > tabs > tab .budgie-panel #tasklist-button:active:hover, .budgie-panel notebook > header > tabs > tab #tasklist-button:active:hover, .budgie-panel notebook > header > tabs > tab button.flat.launcher:active:hover { color: rgba(204, 0, 0, 0.5); background-color: rgba(222, 222, 222, 0.2); } scrollbar { background-color: transparent; transition: 300ms cubic-bezier(0.25, 0.46, 0.45, 0.94); border: none; } * { -GtkScrollbar-has-backward-stepper: false; -GtkScrollbar-has-forward-stepper: false; } scrollbar button { border: none; } scrollbar.vertical button.down { -gtk-icon-source: -gtk-icontheme("pan-down-symbolic"); } scrollbar.vertical button.up { -gtk-icon-source: -gtk-icontheme("pan-up-symbolic"); } scrollbar.horizontal button.down { -gtk-icon-source: -gtk-icontheme("pan-right-symbolic"); } scrollbar.horizontal button.up { -gtk-icon-source: -gtk-icontheme("pan-left-symbolic"); } scrollbar slider { min-width: 4px; min-height: 4px; margin: -1px; border: 4px solid transparent; border-radius: 8px; background-clip: padding-box; background-color: #777777; } scrollbar slider:hover { background-color: #666666; } scrollbar slider:hover:active { background-color: rgba(132, 132, 132, 0.98); } scrollbar slider:disabled { background-color: transparent; } scrollbar.fine-tune slider { min-width: 4px; min-height: 4px; } scrollbar.fine-tune.horizontal slider { border-width: 5px 4px; } scrollbar.fine-tune.vertical slider { border-width: 4px 5px; } scrollbar.overlay-indicator:not(.dragging):not(.hovering) { opacity: 0.4; border-color: transparent; background-color: transparent; } scrollbar.overlay-indicator:not(.dragging):not(.hovering) slider { margin: 0; min-width: 4px; min-height: 4px; background-color: #ababab; border: 1px solid rgba(255, 255, 255, 0.12); } scrollbar.overlay-indicator:not(.dragging):not(.hovering).horizontal slider { margin: 0 3px; min-width: 40px; } scrollbar.overlay-indicator:not(.dragging):not(.hovering).vertical slider { margin: 3px 0; min-height: 40px; } scrollbar.overlay-indicator.dragging, scrollbar.overlay-indicator.hovering { opacity: 0.99; } scrollbar.horizontal slider { min-width: 40px; } scrollbar.vertical slider { min-height: 40px; } row switch:not(:indeterminate), row switch:not(:indeterminate) slider:not(:indeterminate), .raven .raven-background switch:not(:indeterminate), .raven .raven-background switch:not(:indeterminate) slider:not(:indeterminate), row switch:disabled:not(:indeterminate), row switch:not(:indeterminate) slider:disabled:not(:indeterminate), .raven .raven-background switch:disabled:not(:indeterminate), .raven .raven-background switch:not(:indeterminate) slider:disabled:not(:indeterminate) { padding: 0; border: none; color: transparent; background: unset; background-image: unset; background-repeat: no-repeat; background-position: right center; box-shadow: none; animation: none; font-size: 0; outline-color: transparent; } row switch:dir(rtl):not(:indeterminate), row switch:not(:indeterminate) slider:dir(rtl):not(:indeterminate), .raven .raven-background switch:dir(rtl):not(:indeterminate), .raven .raven-background switch:not(:indeterminate) slider:dir(rtl):not(:indeterminate), row switch:disabled:dir(rtl):not(:indeterminate), row switch:not(:indeterminate) slider:disabled:dir(rtl):not(:indeterminate), .raven .raven-background switch:disabled:dir(rtl):not(:indeterminate), .raven .raven-background switch:not(:indeterminate) slider:disabled:dir(rtl):not(:indeterminate) { background-position: left center; } row switch:not(:indeterminate) { min-width: 40px; min-height: 24px; margin: 0; background-size: 40px 24px; transition: all 350ms cubic-bezier(0.25, 0.46, 0.45, 0.94); background-image: -gtk-scaled(url("assets/switch.png"), url("assets/switch@2.png")); } row switch:not(:indeterminate) slider:not(:indeterminate) { margin: 0; background-size: 40px 24px; } row switch:not(:indeterminate):hover { transition: all 350ms cubic-bezier(0.25, 0.46, 0.45, 0.94); background-image: -gtk-scaled(url("assets/switch-hover.png"), url("assets/switch-hover@2.png")); } row switch:not(:indeterminate):checked { transition: all 350ms cubic-bezier(0.25, 0.46, 0.45, 0.94); background-image: -gtk-scaled(url("assets/switch-active.png"), url("assets/switch-active@2.png")); } row switch:not(:indeterminate):checked:hover { background-image: -gtk-scaled(url("assets/switch-active-hover.png"), url("assets/switch-active-hover@2.png")); } row switch:not(:indeterminate):checked:disabled, row switch:not(:indeterminate):checked:disabled:hover { background-image: -gtk-scaled(url("assets/switch-active-insensitive.png"), url("assets/switch-active-insensitive@2.png")); } row switch:not(:indeterminate):disabled, row switch:not(:indeterminate):disabled:hover { background-image: -gtk-scaled(url("assets/switch-insensitive.png"), url("assets/switch-insensitive@2.png")); } .raven .raven-background switch:not(:indeterminate) { min-width: 50px; min-height: 20px; margin: 6px 2px; background-size: 50px 20px; transition: all 350ms cubic-bezier(0.25, 0.46, 0.45, 0.94); background-image: -gtk-scaled(url("assets/toggle-off.svg")); } .raven .raven-background switch:not(:indeterminate) slider:not(:indeterminate) { margin: 0; background-size: 50px 20px; } .raven .raven-background switch:not(:indeterminate):checked { transition: all 350ms cubic-bezier(0.25, 0.46, 0.45, 0.94); background-image: -gtk-scaled(url("assets/toggle-on.svg")); } .raven .raven-background switch:not(:indeterminate):checked:disabled { background-image: -gtk-scaled(url("assets/toggle-on-disabled.svg")); } .raven .raven-background switch:not(:indeterminate):disabled { background-image: -gtk-scaled(url("assets/toggle-off-disabled.svg")); } switch { transition: all 0.3s cubic-bezier(0, 0, 0.2, 1), box-shadow 0.2s cubic-bezier(0, 0, 0.2, 1); margin: 6px 0; border-radius: 50px; background-color: alpha(currentColor,0.3); background-clip: padding-box; font-size: 0; } switch:disabled { color: alpha(currentColor,0.4); } switch:checked { animation: switch_ripple_effect 0.3s cubic-bezier(0, 0, 0.2, 1); background-color: #71c837; } switch:checked:disabled { background-color: alpha(#71c837,0.5); color: rgba(222, 222, 222, 0.45); } switch slider { transition: all 0.3s cubic-bezier(0, 0, 0.2, 1), box-shadow 0.2s cubic-bezier(0, 0, 0.2, 1), box-shadow 0.2s cubic-bezier(0, 0, 0.2, 1), margin 0; min-width: 18px; min-height: 18px; margin: 2px 0 2px 2px; border-radius: 50px; -gtk-outline-radius: 50px; background-color: white; box-shadow: 0px 1px 2px 0px rgba(16, 16, 16, 0.15), 0px 2px 3px 0px rgba(16, 16, 16, 0.1); } switch:hover slider { box-shadow: 0px 2px 3px 0px rgba(16, 16, 16, 0.2), 0px 3px 5px 0px rgba(16, 16, 16, 0.15); } switch:checked slider { margin: 2px 2px 2px 0; background-color: #ffffff; } switch:checked:disabled slider { animation: none; } .check, check, treeview.check { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-unchecked-dark.png"), url("assets/checkbox-unchecked-dark@2.png")); } .osd check, filechooser actionbar check { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-unchecked-dark.png"), url("assets/checkbox-unchecked-dark@2.png")); } menuitem check:hover, .view check:selected, iconview check:selected, treeview.check:selected, row:selected check, infobar check { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-unchecked-selected.png"), url("assets/checkbox-unchecked-selected@2.png")); } .check:disabled, check:disabled, treeview.check:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-unchecked-insensitive-dark.png"), url("assets/checkbox-unchecked-insensitive-dark@2.png")); } .osd check:disabled, filechooser actionbar check:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-unchecked-insensitive-dark.png"), url("assets/checkbox-unchecked-insensitive-dark@2.png")); } menuitem check:disabled:hover, .view check:disabled:selected, iconview check:disabled:selected, treeview.check:disabled:selected, row:selected check:disabled, infobar check:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-unchecked-insensitive-selected.png"), url("assets/checkbox-unchecked-insensitive-selected@2.png")); } .check:indeterminate, check:indeterminate, treeview.check:indeterminate { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-mixed-dark.png"), url("assets/checkbox-mixed-dark@2.png")); } .osd check:indeterminate, filechooser actionbar check:indeterminate { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-mixed-dark.png"), url("assets/checkbox-mixed-dark@2.png")); } menuitem check:indeterminate:hover, .view check:indeterminate:selected, iconview check:indeterminate:selected, treeview.check:indeterminate:selected, row:selected check:indeterminate, infobar check:indeterminate { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-mixed-selected.png"), url("assets/checkbox-mixed-selected@2.png")); } .check:indeterminate:disabled, check:indeterminate:disabled, treeview.check:indeterminate:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-mixed-insensitive-dark.png"), url("assets/checkbox-mixed-insensitive-dark@2.png")); } .osd check:indeterminate:disabled, filechooser actionbar check:indeterminate:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-mixed-insensitive-dark.png"), url("assets/checkbox-mixed-insensitive-dark@2.png")); } menuitem check:indeterminate:disabled:hover, .view check:indeterminate:disabled:selected, iconview check:indeterminate:disabled:selected, treeview.check:indeterminate:disabled:selected, row:selected check:indeterminate:disabled, infobar check:indeterminate:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-mixed-insensitive-selected.png"), url("assets/checkbox-mixed-insensitive-selected@2.png")); } .check:checked, check:checked, treeview.check:checked { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-checked-dark.png"), url("assets/checkbox-checked-dark@2.png")); } .osd check:checked, filechooser actionbar check:checked { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-checked-dark.png"), url("assets/checkbox-checked-dark@2.png")); } menuitem check:checked:hover, .view check:checked:selected, iconview check:checked:selected, treeview.check:checked:selected, row:selected check:checked, infobar check:checked { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-checked-selected.png"), url("assets/checkbox-checked-selected@2.png")); } .check:checked:disabled, check:checked:disabled, treeview.check:checked:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-checked-insensitive-dark.png"), url("assets/checkbox-checked-insensitive-dark@2.png")); } .osd check:checked:disabled, filechooser actionbar check:checked:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-checked-insensitive-dark.png"), url("assets/checkbox-checked-insensitive-dark@2.png")); } menuitem check:checked:disabled:hover, .view check:checked:disabled:selected, iconview check:checked:disabled:selected, treeview.check:checked:disabled:selected, row:selected check:checked:disabled, infobar check:checked:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-checked-insensitive-selected.png"), url("assets/checkbox-checked-insensitive-selected@2.png")); } .radio, radio, treeview.radio { -gtk-icon-source: -gtk-scaled(url("assets/radio-unchecked-dark.png"), url("assets/radio-unchecked-dark@2.png")); } .osd radio, filechooser actionbar radio { -gtk-icon-source: -gtk-scaled(url("assets/radio-unchecked-dark.png"), url("assets/radio-unchecked-dark@2.png")); } menuitem radio:hover, .view radio:selected, iconview radio:selected, treeview.radio:selected, row:selected radio, infobar radio { -gtk-icon-source: -gtk-scaled(url("assets/radio-unchecked-selected.png"), url("assets/radio-unchecked-selected@2.png")); } .radio:disabled, radio:disabled, treeview.radio:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-unchecked-insensitive-dark.png"), url("assets/radio-unchecked-insensitive-dark@2.png")); } .osd radio:disabled, filechooser actionbar radio:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-unchecked-insensitive-dark.png"), url("assets/radio-unchecked-insensitive-dark@2.png")); } menuitem radio:disabled:hover, .view radio:disabled:selected, iconview radio:disabled:selected, treeview.radio:disabled:selected, row:selected radio:disabled, infobar radio:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-unchecked-insensitive-selected.png"), url("assets/radio-unchecked-insensitive-selected@2.png")); } .radio:indeterminate, radio:indeterminate, treeview.radio:indeterminate { -gtk-icon-source: -gtk-scaled(url("assets/radio-mixed-dark.png"), url("assets/radio-mixed-dark@2.png")); } .osd radio:indeterminate, filechooser actionbar radio:indeterminate { -gtk-icon-source: -gtk-scaled(url("assets/radio-mixed-dark.png"), url("assets/radio-mixed-dark@2.png")); } menuitem radio:indeterminate:hover, .view radio:indeterminate:selected, iconview radio:indeterminate:selected, treeview.radio:indeterminate:selected, row:selected radio:indeterminate, infobar radio:indeterminate { -gtk-icon-source: -gtk-scaled(url("assets/radio-mixed-selected.png"), url("assets/radio-mixed-selected@2.png")); } .radio:indeterminate:disabled, radio:indeterminate:disabled, treeview.radio:indeterminate:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-mixed-insensitive-dark.png"), url("assets/radio-mixed-insensitive-dark@2.png")); } .osd radio:indeterminate:disabled, filechooser actionbar radio:indeterminate:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-mixed-insensitive-dark.png"), url("assets/radio-mixed-insensitive-dark@2.png")); } menuitem radio:indeterminate:disabled:hover, .view radio:indeterminate:disabled:selected, iconview radio:indeterminate:disabled:selected, treeview.radio:indeterminate:disabled:selected, row:selected radio:indeterminate:disabled, infobar radio:indeterminate:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-mixed-insensitive-selected.png"), url("assets/radio-mixed-insensitive-selected@2.png")); } .radio:checked, radio:checked, treeview.radio:checked { -gtk-icon-source: -gtk-scaled(url("assets/radio-checked-dark.png"), url("assets/radio-checked-dark@2.png")); } .osd radio:checked, filechooser actionbar radio:checked { -gtk-icon-source: -gtk-scaled(url("assets/radio-checked-dark.png"), url("assets/radio-checked-dark@2.png")); } menuitem radio:checked:hover, .view radio:checked:selected, iconview radio:checked:selected, treeview.radio:checked:selected, row:selected radio:checked, infobar radio:checked { -gtk-icon-source: -gtk-scaled(url("assets/radio-checked-selected.png"), url("assets/radio-checked-selected@2.png")); } .radio:checked:disabled, radio:checked:disabled, treeview.radio:checked:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-checked-insensitive-dark.png"), url("assets/radio-checked-insensitive-dark@2.png")); } .osd radio:checked:disabled, filechooser actionbar radio:checked:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-checked-insensitive-dark.png"), url("assets/radio-checked-insensitive-dark@2.png")); } menuitem radio:checked:disabled:hover, .view radio:checked:disabled:selected, iconview radio:checked:disabled:selected, treeview.radio:checked:disabled:selected, row:selected radio:checked:disabled, infobar radio:checked:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-checked-insensitive-selected.png"), url("assets/radio-checked-insensitive-selected@2.png")); } .view.content-view.check:not(list), iconview.content-view.check:not(list) { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-selectionmode-dark.png"), url("assets/checkbox-selectionmode-dark@2.png")); background-color: transparent; } .view.content-view.check:checked:not(list), iconview.content-view.check:checked:not(list) { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-checked-selectionmode-dark.png"), url("assets/checkbox-checked-selectionmode-dark@2.png")); background-color: transparent; } checkbutton.text-button, radiobutton.text-button { padding: 2px 0; outline-offset: 0; } checkbutton.text-button:hover, radiobutton.text-button:hover { color: #b8b8b8; } checkbutton.text-button:disabled, radiobutton.text-button:disabled { color: rgba(222, 222, 222, 0.45); } checkbutton label:not(:only-child):first-child, radiobutton label:not(:only-child):first-child { margin-left: 4px; } checkbutton label:not(:only-child):last-child, radiobutton label:not(:only-child):last-child { margin-right: 4px; } check, radio { min-width: 16px; min-height: 16px; margin: 0 2px; } check:only-child, menu menuitem check, radio:only-child, menu menuitem radio { margin: 0; } scale { min-height: 15px; min-width: 15px; padding: 3px; } scale.horizontal trough { padding: 0 4px; } scale.horizontal highlight, scale.horizontal fill { margin: 0 -4px; } scale.vertical trough { padding: 4px 0; } scale.vertical highlight, scale.vertical fill { margin: -4px 0; } scale slider { min-height: 15px; min-width: 15px; margin: -7px; } scale.fine-tune slider { margin: -4px; } scale.fine-tune fill, scale.fine-tune highlight, scale.fine-tune trough { border-radius: 5px; -gtk-outline-radius: 7px; } scale trough { outline-offset: 2px; -gtk-outline-radius: 6px; border-radius: 5px; background-color: rgba(0, 0, 0, 0.2); } scale trough:disabled { background-color: rgba(0, 0, 0, 0.12); } .osd scale trough { background-color: rgba(0, 0, 0, 0.2); } .osd scale trough highlight { background-color: #498dff; } menuitem:hover scale trough, row:selected scale trough, infobar scale trough { background-color: rgba(0, 0, 0, 0.2); } menuitem:hover scale trough highlight, row:selected scale trough highlight, infobar scale trough highlight { background-color: #ffffff; } menuitem:hover scale trough highlight:disabled, row:selected scale trough highlight:disabled, infobar scale trough highlight:disabled { background-color: #adccff; } menuitem:hover scale trough:disabled, row:selected scale trough:disabled, infobar scale trough:disabled { background-color: rgba(0, 0, 0, 0.1); } scale highlight { border-radius: 5px; background-color: #498dff; } scale highlight:disabled { background-color: rgba(73, 141, 255, 0.55); } scale fill { border-radius: 5px; background-color: rgba(73, 141, 255, 0.5); } scale fill:disabled { background-color: transparent; } scale slider { background-color: #ffffff; border: 1px solid rgba(255, 255, 255, 0.12); border-radius: 100%; box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.1), 0px 1px 2px 0px rgba(16, 16, 16, 0.05); transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); transition-property: background, border; } scale slider:hover { background-color: white; border-color: rgba(255, 255, 255, 0.12); box-shadow: 0px 1px 2px 0px rgba(16, 16, 16, 0.1), 0px 2px 2px 0px rgba(16, 16, 16, 0.05); } scale slider:active { background-clip: border-box; background-color: #ffffff; border-color: rgba(255, 255, 255, 0.12); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } scale slider:disabled { background-color: #f2f2f2; border-color: rgba(242, 242, 242, 0.12); } menuitem:hover scale slider, row:selected scale slider, infobar scale slider { background-clip: border-box; background-color: #ffffff; border-color: #ffffff; } menuitem:hover scale slider:hover, row:selected scale slider:hover, infobar scale slider:hover { background-color: #e4eeff; border-color: #e4eeff; } menuitem:hover scale slider:active, row:selected scale slider:active, infobar scale slider:active { background-color: #a4c6ff; border-color: #a4c6ff; } menuitem:hover scale slider:disabled, row:selected scale slider:disabled, infobar scale slider:disabled { background-color: #adccff; border-color: #adccff; } .osd scale slider { background-clip: border-box; background-color: #ffffff; border-color: rgba(255, 255, 255, 0.12); } .osd scale slider:hover { background-color: white; border-color: rgba(255, 255, 255, 0.12); box-shadow: 0px 1px 2px 0px rgba(16, 16, 16, 0.1), 0px 2px 2px 0px rgba(16, 16, 16, 0.05); } .osd scale slider:active { background-color: #f7f7f7; border-color: rgba(255, 255, 255, 0.12); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } scale value { color: alpha(currentColor,0.4); } scale marks { color: alpha(currentColor,0.4); } scale marks.top { margin-bottom: 1px; margin-top: -4px; } scale marks.bottom { margin-top: 1px; margin-bottom: -4px; } scale marks.top { margin-right: 1px; margin-left: -4px; } scale marks.bottom { margin-left: 1px; margin-right: -4px; } scale.fine-tune marks.top { margin-bottom: 0px; margin-top: -2px; } scale.fine-tune marks.bottom { margin-top: 0px; margin-bottom: -2px; } scale.fine-tune marks.top { margin-right: 0px; margin-left: -2px; } scale.fine-tune marks.bottom { margin-left: 0px; margin-right: -2px; } scale.horizontal indicator { min-height: 3px; min-width: 1px; } scale.horizontal.fine-tune indicator { min-height: 2px; } scale.vertical indicator { min-height: 1px; min-width: 3px; } scale.vertical.fine-tune indicator { min-width: 2px; } scale.horizontal.marks-before:not(.marks-after) slider { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-horz-scale-has-marks-above.png"), url("assets/slider-horz-scale-has-marks-above@2.png")); min-height: 26px; min-width: 24px; margin-top: -14px; background-position: top; background-repeat: no-repeat; box-shadow: none; } scale.horizontal.marks-before:not(.marks-after).fine-tune slider { margin: -7px; margin-top: -11px; } scale.horizontal.marks-before:not(.marks-after) slider:hover { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-horz-scale-has-marks-above-hover.png"), url("assets/slider-horz-scale-has-marks-above-hover@2.png")); min-height: 26px; min-width: 24px; margin-top: -14px; background-position: top; background-repeat: no-repeat; box-shadow: none; } scale.horizontal.marks-before:not(.marks-after).fine-tune slider { margin: -7px; margin-top: -11px; } scale.horizontal.marks-before:not(.marks-after) slider:active { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-horz-scale-has-marks-above-active.png"), url("assets/slider-horz-scale-has-marks-above-active@2.png")); min-height: 26px; min-width: 24px; margin-top: -14px; background-position: top; background-repeat: no-repeat; box-shadow: none; } scale.horizontal.marks-before:not(.marks-after).fine-tune slider { margin: -7px; margin-top: -11px; } scale.horizontal.marks-before:not(.marks-after) slider:disabled { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-horz-scale-has-marks-above-insensitive.png"), url("assets/slider-horz-scale-has-marks-above-insensitive@2.png")); min-height: 26px; min-width: 24px; margin-top: -14px; background-position: top; background-repeat: no-repeat; box-shadow: none; } scale.horizontal.marks-before:not(.marks-after).fine-tune slider { margin: -7px; margin-top: -11px; } scale.horizontal.marks-after:not(.marks-before) slider { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-horz-scale-has-marks-below.png"), url("assets/slider-horz-scale-has-marks-below@2.png")); min-height: 26px; min-width: 24px; margin-bottom: -14px; background-position: bottom; background-repeat: no-repeat; box-shadow: none; } scale.horizontal.marks-after:not(.marks-before).fine-tune slider { margin: -7px; margin-bottom: -11px; } scale.horizontal.marks-after:not(.marks-before) slider:hover { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-horz-scale-has-marks-below-hover.png"), url("assets/slider-horz-scale-has-marks-below-hover@2.png")); min-height: 26px; min-width: 24px; margin-bottom: -14px; background-position: bottom; background-repeat: no-repeat; box-shadow: none; } scale.horizontal.marks-after:not(.marks-before).fine-tune slider { margin: -7px; margin-bottom: -11px; } scale.horizontal.marks-after:not(.marks-before) slider:active { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-horz-scale-has-marks-below-active.png"), url("assets/slider-horz-scale-has-marks-below-active@2.png")); min-height: 26px; min-width: 24px; margin-bottom: -14px; background-position: bottom; background-repeat: no-repeat; box-shadow: none; } scale.horizontal.marks-after:not(.marks-before).fine-tune slider { margin: -7px; margin-bottom: -11px; } scale.horizontal.marks-after:not(.marks-before) slider:disabled { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-horz-scale-has-marks-below-insensitive.png"), url("assets/slider-horz-scale-has-marks-below-insensitive@2.png")); min-height: 26px; min-width: 24px; margin-bottom: -14px; background-position: bottom; background-repeat: no-repeat; box-shadow: none; } scale.horizontal.marks-after:not(.marks-before).fine-tune slider { margin: -7px; margin-bottom: -11px; } scale.vertical.marks-before:not(.marks-after) slider { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-vert-scale-has-marks-above.png"), url("assets/slider-vert-scale-has-marks-above@2.png")); min-height: 24px; min-width: 26px; margin-left: -14px; background-position: left bottom; background-repeat: no-repeat; box-shadow: none; } scale.vertical.marks-before:not(.marks-after).fine-tune slider { margin: -7px; margin-left: -11px; } scale.vertical.marks-before:not(.marks-after) slider:hover { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-vert-scale-has-marks-above-hover.png"), url("assets/slider-vert-scale-has-marks-above-hover@2.png")); min-height: 24px; min-width: 26px; margin-left: -14px; background-position: left bottom; background-repeat: no-repeat; box-shadow: none; } scale.vertical.marks-before:not(.marks-after).fine-tune slider { margin: -7px; margin-left: -11px; } scale.vertical.marks-before:not(.marks-after) slider:active { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-vert-scale-has-marks-above-active.png"), url("assets/slider-vert-scale-has-marks-above-active@2.png")); min-height: 24px; min-width: 26px; margin-left: -14px; background-position: left bottom; background-repeat: no-repeat; box-shadow: none; } scale.vertical.marks-before:not(.marks-after).fine-tune slider { margin: -7px; margin-left: -11px; } scale.vertical.marks-before:not(.marks-after) slider:disabled { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-vert-scale-has-marks-above-insensitive.png"), url("assets/slider-vert-scale-has-marks-above-insensitive@2.png")); min-height: 24px; min-width: 26px; margin-left: -14px; background-position: left bottom; background-repeat: no-repeat; box-shadow: none; } scale.vertical.marks-before:not(.marks-after).fine-tune slider { margin: -7px; margin-left: -11px; } scale.vertical.marks-after:not(.marks-before) slider { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-vert-scale-has-marks-below.png"), url("assets/slider-vert-scale-has-marks-below@2.png")); min-height: 24px; min-width: 26px; margin-right: -14px; background-position: right bottom; background-repeat: no-repeat; box-shadow: none; } scale.vertical.marks-after:not(.marks-before).fine-tune slider { margin: -7px; margin-right: -11px; } scale.vertical.marks-after:not(.marks-before) slider:hover { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-vert-scale-has-marks-below-hover.png"), url("assets/slider-vert-scale-has-marks-below-hover@2.png")); min-height: 24px; min-width: 26px; margin-right: -14px; background-position: right bottom; background-repeat: no-repeat; box-shadow: none; } scale.vertical.marks-after:not(.marks-before).fine-tune slider { margin: -7px; margin-right: -11px; } scale.vertical.marks-after:not(.marks-before) slider:active { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-vert-scale-has-marks-below-active.png"), url("assets/slider-vert-scale-has-marks-below-active@2.png")); min-height: 24px; min-width: 26px; margin-right: -14px; background-position: right bottom; background-repeat: no-repeat; box-shadow: none; } scale.vertical.marks-after:not(.marks-before).fine-tune slider { margin: -7px; margin-right: -11px; } scale.vertical.marks-after:not(.marks-before) slider:disabled { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-vert-scale-has-marks-below-insensitive.png"), url("assets/slider-vert-scale-has-marks-below-insensitive@2.png")); min-height: 24px; min-width: 26px; margin-right: -14px; background-position: right bottom; background-repeat: no-repeat; box-shadow: none; } scale.vertical.marks-after:not(.marks-before).fine-tune slider { margin: -7px; margin-right: -11px; } progressbar { padding: 0; font-size: smaller; color: rgba(222, 222, 222, 0.7); } progressbar.osd { min-width: 3px; min-height: 3px; background-color: transparent; } progressbar.osd trough { border-style: none; background-color: transparent; box-shadow: none; } progressbar progress { min-height: 4px; min-width: 4px; background-color: #498dff; border: none; border-radius: 5px; box-shadow: none; } row:selected progressbar progress, infobar progressbar progress { background-color: #ffffff; } progressbar trough { min-height: 4px; min-width: 4px; border: none; border-radius: 5px; background-color: #262626; } row:selected progressbar trough, infobar progressbar trough { background-color: rgba(0, 0, 0, 0.2); } levelbar block { min-width: 32px; min-height: 1px; } levelbar.vertical block { min-width: 1px; min-height: 32px; } levelbar trough { border: none; padding: 3px; border-radius: 5px; background-color: #262626; } levelbar.horizontal.discrete block { margin: 0 1px; } levelbar.vertical.discrete block { margin: 1px 0; } levelbar block:not(.empty) { border: 1px solid #498dff; background-color: #498dff; border-radius: 5px; } levelbar block.low { border-color: #F27835; background-color: #F27835; } levelbar block.high { border-color: #498dff; background-color: #498dff; } levelbar block.full { border-color: #71c837; background-color: #71c837; } levelbar block.empty { background-color: #242424; border-color: #242424; } printdialog paper { border: 1px solid rgba(255, 255, 255, 0.12); background: #242424; padding: 0; } printdialog .dialog-action-box { margin: 12px; } frame > border, .frame { margin: 0; padding: 0; border-radius: 0; border: 1px solid rgba(255, 255, 255, 0.12); } frame.flat > border, frame > border.flat, .frame.flat { border-style: none; } scrolledwindow viewport.frame { border-style: none; } scrolledwindow overshoot.top { background-image: -gtk-gradient(radial, center top, 0, center top, 0.6, from(rgba(73, 141, 255, 0.2)), to(rgba(73, 141, 255, 0))); background-size: 100% 60%; background-repeat: no-repeat; background-position: center top; background-color: transparent; border: none; box-shadow: none; } scrolledwindow overshoot.bottom { background-image: -gtk-gradient(radial, center bottom, 0, center bottom, 0.6, from(rgba(73, 141, 255, 0.2)), to(rgba(73, 141, 255, 0))); background-size: 100% 60%; background-repeat: no-repeat; background-position: center bottom; background-color: transparent; border: none; box-shadow: none; } scrolledwindow overshoot.left { background-image: -gtk-gradient(radial, left center, 0, left center, 0.6, from(rgba(73, 141, 255, 0.2)), to(rgba(73, 141, 255, 0))); background-size: 60% 100%; background-repeat: no-repeat; background-position: left center; background-color: transparent; border: none; box-shadow: none; } scrolledwindow overshoot.right { background-image: -gtk-gradient(radial, right center, 0, right center, 0.6, from(rgba(73, 141, 255, 0.2)), to(rgba(73, 141, 255, 0))); background-size: 60% 100%; background-repeat: no-repeat; background-position: right center; background-color: transparent; border: none; box-shadow: none; } scrolledwindow undershoot.top { background-color: transparent; background-image: linear-gradient(to left, rgba(255, 255, 255, 0.2) 50%, rgba(0, 0, 0, 0.2) 50%); padding-top: 1px; background-size: 10px 1px; background-repeat: repeat-x; background-origin: content-box; background-position: center top; border: none; } scrolledwindow undershoot.bottom { background-color: transparent; background-image: linear-gradient(to left, rgba(255, 255, 255, 0.2) 50%, rgba(0, 0, 0, 0.2) 50%); padding-bottom: 1px; background-size: 10px 1px; background-repeat: repeat-x; background-origin: content-box; background-position: center bottom; border: none; } scrolledwindow undershoot.left { background-color: transparent; background-image: linear-gradient(to top, rgba(255, 255, 255, 0.2) 50%, rgba(0, 0, 0, 0.2) 50%); padding-left: 1px; background-size: 1px 10px; background-repeat: repeat-y; background-origin: content-box; background-position: left center; border: none; } scrolledwindow undershoot.right { background-color: transparent; background-image: linear-gradient(to top, rgba(255, 255, 255, 0.2) 50%, rgba(0, 0, 0, 0.2) 50%); padding-right: 1px; background-size: 1px 10px; background-repeat: repeat-y; background-origin: content-box; background-position: right center; border: none; } scrolledwindow junction { border-color: transparent; border-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.12) 1px, transparent 1px) 0 0 0 0/0 0 stretch; background-color: #272727; } scrolledwindow junction:dir(rtl) { border-image-slice: 0 1 0 0; } separator { width: 0; } list { background-color: #242424; border-color: rgba(255, 255, 255, 0.12); } list row { padding: 2px; } row:not(:hover) { transition: all 300ms cubic-bezier(0.25, 0.46, 0.45, 0.94); } row.activatable.has-open-popup, .budgie-menu button.has-open-popup, row.activatable:hover, .budgie-menu button:hover { background-color: rgba(255, 255, 255, 0.03); } row.activatable:active, .budgie-menu button:active { color: #dedede; } row.activatable:disabled, .budgie-menu button:disabled { color: rgba(222, 222, 222, 0.45); } row.activatable:disabled image, .budgie-menu button:disabled image { color: inherit; } row.activatable:selected:active, .budgie-menu button:selected:active { color: #ffffff; } row.activatable:selected.has-open-popup, .budgie-menu button:selected.has-open-popup, row.activatable:selected:hover, .budgie-menu button:selected:hover { background-color: #427fe6; } .app-notification { padding: 16px; margin: 0 8px 8px 8px; color: #dedede; background-color: #333333; background-image: linear-gradient(0deg, #333333 0%, #333333 85%, #262626 95%, #0d0d0d 100%); border-radius: 0; border: none; box-shadow: 0px 1px 2px 0px rgba(16, 16, 16, 0.15), 0px 2px 3px 0px rgba(16, 16, 16, 0.1), 0 0 0 1px rgba(255, 255, 255, 0.12); } .app-notification border { border: none; } .app-notification button { padding: 0; margin: 0 0 0 0; min-height: 24px; min-width: 24px; border-radius: 100px; -gtk-outline-radius: 100px; } .app-notification button:hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); } .app-notification button:active, .app-notification button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } .app-notification button:disabled { background-color: transparent; } .app-notification button:disabled label, .app-notification button:disabled { color: rgba(222, 222, 222, 0.45); } expander arrow { min-width: 16px; min-height: 16px; -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); } expander arrow:dir(rtl) { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic-rtl"); } expander arrow:hover { color: white; } expander arrow:checked { -gtk-icon-source: -gtk-icontheme("pan-down-symbolic"); } calendar { color: #dedede; border: 1px solid rgba(255, 255, 255, 0.12); border-radius: 5px; padding: 2px 6px; margin: 0; } calendar:selected { border-radius: 50px; } calendar:disabled { color: rgba(222, 222, 222, 0.45); } calendar.header { color: #dedede; border: none; } calendar.button { color: rgba(222, 222, 222, 0.45); } calendar.button:hover { color: #dedede; } calendar.button:disabled { color: rgba(222, 222, 222, 0.45); } calendar:indeterminate { color: rgba(222, 222, 222, 0.55); } calendar.highlight { color: rgba(222, 222, 222, 0.65); font-weight: 500; } messagedialog .titlebar { min-height: 20px; background-color: rgba(55, 55, 55, 0.98); border-bottom: 1px solid #484848; } messagedialog .dialog-action-area button { padding: 5px 8px 6px 8px; min-height: 0; } messagedialog.csd.background { border-bottom-left-radius: 6px; border-bottom-right-radius: 6px; border: none; } messagedialog.csd .dialog-action-area button { border-bottom-style: none; background-image: none; } messagedialog.csd .dialog-action-area button:not(.suggested-action):not(.destructive-action):hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); } messagedialog.csd .dialog-action-area button:not(.suggested-action):not(.destructive-action):active, messagedialog.csd .dialog-action-area button:not(.suggested-action):not(.destructive-action):checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); text-shadow: 0 -1px rgba(255, 255, 255, 0.04), -1px 0px rgba(32, 32, 32, 0.05), 1px 0px rgba(32, 32, 32, 0.05), 0px 1px rgba(32, 32, 32, 0.3), 0px 2px rgba(32, 32, 32, 0.05); } messagedialog.csd .dialog-action-area button { border-radius: 0; border-right-style: none; } messagedialog.csd .dialog-action-area button:last-child { border-radius: 0 0 6px 0; border-right-style: none; } messagedialog.csd .dialog-action-area button:first-child { border-radius: 0 0 0 6px; border-left-style: none; } messagedialog.csd .dialog-action-area button:only-child { border-radius: 0 0 6px 6px; border-left-style: none; border-right-style: none; } filechooser #pathbarbox { border-bottom: 1px solid rgba(255, 255, 255, 0); } filechooserbutton:drop(active) { box-shadow: none; border-color: transparent; } .sidebar { border-style: none; background-color: #333333; } stacksidebar.sidebar:dir(ltr) list, stacksidebar.sidebar.left list, stacksidebar.sidebar.left:dir(rtl) list, .sidebar:dir(ltr), .sidebar.left, .sidebar.left:dir(rtl) { border-right: 1px solid rgba(255, 255, 255, 0.12); border-left-style: none; } stacksidebar.sidebar:dir(rtl) list, stacksidebar.sidebar.right list, .sidebar:dir(rtl), .sidebar.right { border-left: 1px solid rgba(255, 255, 255, 0.12); border-right-style: none; } .sidebar list { background-color: transparent; } paned .sidebar.left, paned .sidebar.right, paned .sidebar.left:dir(rtl), paned .sidebar:dir(rtl), paned .sidebar:dir(ltr), paned .sidebar { border-style: none; } stacksidebar row { padding: 4px 4px; } stacksidebar row > label { padding-left: 6px; padding-right: 6px; } stacksidebar row.needs-attention > label { background-size: 6px 6px, 0 0; } placessidebar > viewport.frame { border-style: none; } placessidebar row { min-height: 24px; padding: 2px 2px 2px 10px; } placessidebar row > revealer { padding: 0 10px; } placessidebar row image.sidebar-icon:dir(ltr) { padding-right: 8px; } placessidebar row image.sidebar-icon:dir(rtl) { padding-left: 8px; } placessidebar row label.sidebar-label:dir(ltr) { padding-right: 2px; } placessidebar row label.sidebar-label:dir(rtl) { padding-left: 2px; } button.sidebar-button { min-width: 22px; min-height: 22px; margin-top: 2px; margin-bottom: 2px; padding: 0; border-radius: 100px; -gtk-outline-radius: 100px; } button.sidebar-button:active, button.sidebar-button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.35); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.35); } button.sidebar-button:not(:hover):not(:active) > image { opacity: 0.5; } placessidebar row.sidebar-placeholder-row { padding: 0 8px; min-height: 2px; background-image: linear-gradient(to bottom, #F08437, #F08437); background-clip: content-box; } placessidebar row.sidebar-new-bookmark-row { color: #498dff; } placessidebar row:drop(active):not(:disabled) { box-shadow: inset 0 1px #F08437, inset 0 -1px #F08437; } placessidebar row:drop(active):not(:disabled), placessidebar row:drop(active):not(:disabled) label, placessidebar row:drop(active):not(:disabled) image { color: #F08437; } placessidebar row:drop(active):not(:disabled):selected { background-color: #F08437; } placessidebar row:drop(active):not(:disabled):selected, placessidebar row:drop(active):not(:disabled):selected label, placessidebar row:drop(active):not(:disabled):selected image { color: #dedede; } placesview .server-list-button > image { -gtk-icon-transform: rotate(0turn); } placesview .server-list-button:checked > image { transition: 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); -gtk-icon-transform: rotate(-0.5turn); } placesview > actionbar > revealer > box > label { padding-left: 8px; padding-right: 8px; } paned > separator { min-width: 1px; min-height: 1px; -gtk-icon-source: none; border-style: none; background-color: transparent; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.12), rgba(255, 255, 255, 0.12)); background-size: 1px 1px; } paned > separator:selected { background-image: linear-gradient(to bottom, #498dff, #498dff); } paned > separator.wide { min-width: 5px; min-height: 5px; background-color: #333333; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.12), rgba(255, 255, 255, 0.12)), linear-gradient(to bottom, rgba(255, 255, 255, 0.12), rgba(255, 255, 255, 0.12)); background-size: 1px 1px, 1px 1px; } paned.horizontal > separator { background-repeat: repeat-y; } paned.horizontal > separator:dir(ltr) { margin: 0 -8px 0 0; padding: 0 8px 0 0; background-position: left; } paned.horizontal > separator:dir(rtl) { margin: 0 0 0 -8px; padding: 0 0 0 8px; background-position: right; } paned.horizontal > separator.wide { margin: 0; padding: 0; background-repeat: repeat-y, repeat-y; background-position: left, right; } paned.vertical > separator { margin: 0 0 -8px 0; padding: 0 0 8px 0; background-repeat: repeat-x; background-position: top; } paned.vertical > separator.wide { margin: 0; padding: 0; background-repeat: repeat-x, repeat-x; background-position: bottom, top; } infobar { border-style: none; } infobar.info, infobar.question, infobar.warning, infobar.error { background-color: #498dff; color: #ffffff; caret-color: currentColor; } infobar.info selection, infobar.question selection, infobar.warning selection, infobar.error selection { color: #498dff; background-color: #ffffff; } row:selected button, infobar.info button, infobar.question button, infobar.warning button, infobar.error button, .nautilus-window .floating-bar button { color: #ffffff; background-color: rgba(255, 255, 255, 0); border-color: rgba(255, 255, 255, 0.5); background-image: none; } row:selected button.flat, row:selected button.budgie-menu-launcher, row:selected .budgie-panel #tasklist-button, .budgie-panel row:selected #tasklist-button, row:selected .budgie-panel button.flat.launcher, .budgie-panel row:selected button.flat.launcher, infobar.info button.flat, infobar.info button.budgie-menu-launcher, infobar.info .budgie-panel #tasklist-button, .budgie-panel infobar.info #tasklist-button, infobar.info .budgie-panel button.flat.launcher, .budgie-panel infobar.info button.flat.launcher, infobar.question button.flat, infobar.question button.budgie-menu-launcher, infobar.question .budgie-panel #tasklist-button, .budgie-panel infobar.question #tasklist-button, infobar.question .budgie-panel button.flat.launcher, .budgie-panel infobar.question button.flat.launcher, infobar.warning button.flat, infobar.warning button.budgie-menu-launcher, infobar.warning .budgie-panel #tasklist-button, .budgie-panel infobar.warning #tasklist-button, infobar.warning .budgie-panel button.flat.launcher, .budgie-panel infobar.warning button.flat.launcher, infobar.error button.flat, infobar.error button.budgie-menu-launcher, infobar.error .budgie-panel #tasklist-button, .budgie-panel infobar.error #tasklist-button, infobar.error .budgie-panel button.flat.launcher, .budgie-panel infobar.error button.flat.launcher, .nautilus-window .floating-bar button.flat, .nautilus-window .floating-bar button.budgie-menu-launcher, .nautilus-window .floating-bar .budgie-panel #tasklist-button, .budgie-panel .nautilus-window .floating-bar #tasklist-button { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; color: #ffffff; background-color: rgba(255, 255, 255, 0); background-image: none; } headerbar.selection-mode button:disabled, .nemo-window .selection-mode.primary-toolbar button:disabled, row:selected button.flat:disabled, row:selected button.budgie-menu-launcher:disabled, row:selected .budgie-panel #tasklist-button:disabled, .budgie-panel row:selected #tasklist-button:disabled, infobar.info button.flat:disabled, infobar.info button.budgie-menu-launcher:disabled, infobar.info .budgie-panel #tasklist-button:disabled, .budgie-panel infobar.info #tasklist-button:disabled, infobar.question button.flat:disabled, infobar.question button.budgie-menu-launcher:disabled, infobar.question .budgie-panel #tasklist-button:disabled, .budgie-panel infobar.question #tasklist-button:disabled, infobar.warning button.flat:disabled, infobar.warning button.budgie-menu-launcher:disabled, infobar.warning .budgie-panel #tasklist-button:disabled, .budgie-panel infobar.warning #tasklist-button:disabled, infobar.error button.flat:disabled, infobar.error button.budgie-menu-launcher:disabled, infobar.error .budgie-panel #tasklist-button:disabled, .budgie-panel infobar.error #tasklist-button:disabled, .nautilus-window .floating-bar button.flat:disabled, .nautilus-window .floating-bar button.budgie-menu-launcher:disabled, .nautilus-window .floating-bar .budgie-panel #tasklist-button:disabled, .budgie-panel .nautilus-window .floating-bar #tasklist-button:disabled, headerbar.selection-mode button:disabled label, .nemo-window .selection-mode.primary-toolbar button:disabled label, row:selected button.flat:disabled label, row:selected button.budgie-menu-launcher:disabled label, row:selected .budgie-panel #tasklist-button:disabled label, .budgie-panel row:selected #tasklist-button:disabled label, infobar.info button.flat:disabled label, infobar.info button.budgie-menu-launcher:disabled label, infobar.info .budgie-panel #tasklist-button:disabled label, .budgie-panel infobar.info #tasklist-button:disabled label, infobar.question button.flat:disabled label, infobar.question button.budgie-menu-launcher:disabled label, infobar.question .budgie-panel #tasklist-button:disabled label, .budgie-panel infobar.question #tasklist-button:disabled label, infobar.warning button.flat:disabled label, infobar.warning button.budgie-menu-launcher:disabled label, infobar.warning .budgie-panel #tasklist-button:disabled label, .budgie-panel infobar.warning #tasklist-button:disabled label, infobar.error button.flat:disabled label, infobar.error button.budgie-menu-launcher:disabled label, infobar.error .budgie-panel #tasklist-button:disabled label, .budgie-panel infobar.error #tasklist-button:disabled label, .nautilus-window .floating-bar button.flat:disabled label, .nautilus-window .floating-bar button.budgie-menu-launcher:disabled label, .nautilus-window .floating-bar .budgie-panel #tasklist-button:disabled label, .budgie-panel .nautilus-window .floating-bar #tasklist-button:disabled label { color: rgba(255, 255, 255, 0.4); } row:selected button:hover, infobar.info button:hover, infobar.question button:hover, infobar.warning button:hover, infobar.error button:hover, .nautilus-window .floating-bar button:hover { color: #ffffff; background-color: rgba(255, 255, 255, 0.2); border-color: rgba(255, 255, 255, 0.5); } headerbar.selection-mode button:active, .nemo-window .selection-mode.primary-toolbar button:active, headerbar.selection-mode button:checked, .nemo-window .selection-mode.primary-toolbar button:checked, row:selected button:active, infobar.info button:active, infobar.question button:active, infobar.warning button:active, infobar.error button:active, .nautilus-window .floating-bar button:active, headerbar.selection-mode button:hover:active, .nemo-window .selection-mode.primary-toolbar button:hover:active, headerbar.selection-mode button:hover:checked, .nemo-window .selection-mode.primary-toolbar button:hover:checked, row:selected button:active:hover, infobar.info button:active:hover, infobar.question button:active:hover, infobar.warning button:active:hover, infobar.error button:active:hover, .nautilus-window .floating-bar button:active:hover, row:selected button:checked, infobar.info button:checked, infobar.question button:checked, infobar.warning button:checked, infobar.error button:checked, .nautilus-window .floating-bar button:checked { color: #ffffff; background-color: rgba(255, 255, 255, 0.4); border-color: rgba(255, 255, 255, 0.5); } row:selected button:disabled, infobar.info button:disabled, infobar.question button:disabled, infobar.warning button:disabled, infobar.error button:disabled, .nautilus-window .floating-bar button:disabled { background-color: rgba(255, 255, 255, 0); border-color: rgba(255, 255, 255, 0.4); } row:selected button:disabled, infobar.info button:disabled, infobar.question button:disabled, infobar.warning button:disabled, infobar.error button:disabled, .nautilus-window .floating-bar button:disabled, row:selected button:disabled label, infobar.info button:disabled label, infobar.question button:disabled label, infobar.warning button:disabled label, infobar.error button:disabled label, .nautilus-window .floating-bar button:disabled label { color: rgba(255, 255, 255, 0.5); } headerbar.selection-mode button:disabled:active, .nemo-window .selection-mode.primary-toolbar button:disabled:active, headerbar.selection-mode button:disabled:checked, .nemo-window .selection-mode.primary-toolbar button:disabled:checked, row:selected button:disabled:active, infobar.info button:disabled:active, infobar.question button:disabled:active, infobar.warning button:disabled:active, infobar.error button:disabled:active, .nautilus-window .floating-bar button:disabled:active, headerbar.selection-mode button:disabled:checked, .nemo-window .selection-mode.primary-toolbar button:disabled:checked, headerbar.selection-mode button:disabled:active, .nemo-window .selection-mode.primary-toolbar button:disabled:active, row:selected button:disabled:checked, infobar.info button:disabled:checked, infobar.question button:disabled:checked, infobar.warning button:disabled:checked, infobar.error button:disabled:checked, .nautilus-window .floating-bar button:disabled:checked { color: #498dff; background-color: rgba(255, 255, 255, 0.5); border-color: rgba(255, 255, 255, 0.4); } tooltip { border-radius: 5px; box-shadow: none; } tooltip.background, tooltip.background.csd { background-color: rgba(62, 62, 62, 0.95); background-clip: padding-box; border-radius: 5px; } tooltip.background label, tooltip.background.csd label { padding: 4px; } tooltip decoration { background-color: transparent; } tooltip * { background-color: transparent; color: #dedede; } colorswatch, colorswatch:drop(active) { border-style: none; } colorswatch.top { border-top-left-radius: 2.5px; border-top-right-radius: 2.5px; } colorswatch.top overlay { border-top-left-radius: 2px; border-top-right-radius: 2px; } colorswatch.bottom { border-bottom-left-radius: 2.5px; border-bottom-right-radius: 2.5px; } colorswatch.bottom overlay { border-bottom-left-radius: 2px; border-bottom-right-radius: 2px; } colorswatch.left, colorswatch:first-child:not(.top) { border-top-left-radius: 2.5px; border-bottom-left-radius: 2.5px; } colorswatch.left overlay, colorswatch:first-child:not(.top) overlay { border-top-left-radius: 2px; border-bottom-left-radius: 2px; } colorswatch.right, colorswatch:last-child:not(.bottom) { border-top-right-radius: 2.5px; border-bottom-right-radius: 2.5px; } colorswatch.right overlay, colorswatch:last-child:not(.bottom) overlay { border-top-right-radius: 2px; border-bottom-right-radius: 2px; } colorswatch.dark overlay { color: rgba(255, 255, 255, 0.7); } colorswatch.dark overlay:hover { border-color: rgba(255, 255, 255, 0.12); } colorswatch.light overlay { color: rgba(0, 0, 0, 0.7); } colorswatch.light overlay:hover { border-color: rgba(255, 255, 255, 0.12); } colorswatch overlay { border: 1px solid rgba(255, 255, 255, 0.12); } colorswatch overlay:hover { background-color: rgba(255, 255, 255, 0.2); } colorswatch:disabled { opacity: 0.5; } colorswatch:disabled overlay { border-color: rgba(0, 0, 0, 0.6); box-shadow: none; } colorswatch#add-color-button { border-style: solid; border-width: 1px; color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: #484848; } colorswatch#add-color-button:hover { color: #c5c5c5; border-color: rgba(255, 255, 255, 0.12); background-color: #5c5c5c; box-shadow: none; } colorswatch#add-color-button overlay { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; } button.color { padding: 0; } button.color colorswatch:first-child:last-child, button.color colorswatch:first-child:last-child overlay { margin: 4px; border-radius: 0; } colorchooser .popover.osd { border-radius: 5px; } .content-view { background-color: #242424; } .content-view:hover { -gtk-icon-effect: highlight; } .scale-popup button:hover { color: #c5c5c5; border-color: rgba(255, 255, 255, 0.12); background-color: #5c5c5c; box-shadow: none; } .context-menu, popover.touch-selection, .csd popover.touch-selection, popover.background.touch-selection, .csd popover.background.touch-selection { font: initial; } .monospace { font-family: Monospace; } button.circular, paned.titlebar.horizontal headerbar button.circular-button.flat.toggle.popup:not(.image-button), paned.titlebar.horizontal headerbar button.circular-button.toggle.popup.budgie-menu-launcher:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .circular-button.toggle.popup#tasklist-button:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .circular-button.toggle.popup#tasklist-button:not(.image-button), headerbar button.circular-button, .nemo-window .primary-toolbar button.circular-button, row button.circular-button, button.nautilus-circular-button.image-button, button.circular-button { padding: 0; margin: 0 2px; min-width: 28px; min-height: 28px; border-radius: 100px; -gtk-outline-radius: 100px; border: none; } button.circular:active, paned.titlebar.horizontal headerbar button.circular-button.flat.toggle.popup:active:not(.image-button), paned.titlebar.horizontal headerbar button.circular-button.toggle.popup.budgie-menu-launcher:active:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .circular-button.toggle.popup#tasklist-button:active:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .circular-button.toggle.popup#tasklist-button:active:not(.image-button), headerbar button.circular-button:active, .nemo-window .primary-toolbar button.circular-button:active, row button.circular-button:active, button.nautilus-circular-button.image-button:active, button.circular-button:active { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; border: none; } button.circular:checked, paned.titlebar.horizontal headerbar button.circular-button.flat.toggle.popup:checked:not(.image-button), paned.titlebar.horizontal headerbar button.circular-button.toggle.popup.budgie-menu-launcher:checked:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .circular-button.toggle.popup#tasklist-button:checked:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .circular-button.toggle.popup#tasklist-button:checked:not(.image-button), headerbar button.circular-button:checked, .nemo-window .primary-toolbar button.circular-button:checked, row button.circular-button:checked, button.nautilus-circular-button.image-button:checked, button.circular-button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.35); text-shadow: none; -gtk-icon-shadow: none; border: none; } button.circular label, paned.titlebar.horizontal headerbar button.circular-button.flat.toggle.popup:not(.image-button) label, paned.titlebar.horizontal headerbar button.circular-button.toggle.popup.budgie-menu-launcher:not(.image-button) label, paned.titlebar.horizontal headerbar .budgie-panel .circular-button.toggle.popup#tasklist-button:not(.image-button) label, .budgie-panel paned.titlebar.horizontal headerbar .circular-button.toggle.popup#tasklist-button:not(.image-button) label, headerbar button.circular-button label, .nemo-window .primary-toolbar button.circular-button label, row button.circular-button label, button.nautilus-circular-button.image-button label, button.circular-button label { padding: 0; } .keycap { min-width: 16px; min-height: 20px; padding: 3px 6px 4px 6px; color: #dedede; background-color: #242424; border: 1px solid rgba(255, 255, 255, 0.12); border-radius: 5px; box-shadow: inset 0px -2px 0px rgba(0, 0, 0, 0.15); } stackswitcher button.text-button { min-width: 80px; } stackswitcher button.circular, stackswitcher paned.titlebar.horizontal headerbar button.circular-button.flat.toggle.popup:not(.image-button), paned.titlebar.horizontal headerbar stackswitcher button.circular-button.flat.toggle.popup:not(.image-button), stackswitcher paned.titlebar.horizontal headerbar button.circular-button.toggle.popup.budgie-menu-launcher:not(.image-button), paned.titlebar.horizontal headerbar stackswitcher button.circular-button.toggle.popup.budgie-menu-launcher:not(.image-button), stackswitcher paned.titlebar.horizontal headerbar .budgie-panel .circular-button.toggle.popup#tasklist-button:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel stackswitcher .circular-button.toggle.popup#tasklist-button:not(.image-button), stackswitcher .budgie-panel paned.titlebar.horizontal headerbar .circular-button.toggle.popup#tasklist-button:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar stackswitcher .circular-button.toggle.popup#tasklist-button:not(.image-button), stackswitcher headerbar button.circular-button, headerbar stackswitcher button.circular-button, stackswitcher .nemo-window .primary-toolbar button.circular-button, .nemo-window .primary-toolbar stackswitcher button.circular-button, stackswitcher row button.circular-button, row stackswitcher button.circular-button, stackswitcher button.nautilus-circular-button.image-button, stackswitcher button.text-button.circular, stackswitcher paned.titlebar.horizontal headerbar button.text-button.circular-button.flat.toggle.popup:not(.image-button), paned.titlebar.horizontal headerbar stackswitcher button.text-button.circular-button.flat.toggle.popup:not(.image-button), stackswitcher paned.titlebar.horizontal headerbar button.text-button.circular-button.toggle.popup.budgie-menu-launcher:not(.image-button), paned.titlebar.horizontal headerbar stackswitcher button.text-button.circular-button.toggle.popup.budgie-menu-launcher:not(.image-button), stackswitcher paned.titlebar.horizontal headerbar .budgie-panel .text-button.circular-button.toggle.popup#tasklist-button:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel stackswitcher .text-button.circular-button.toggle.popup#tasklist-button:not(.image-button), stackswitcher .budgie-panel paned.titlebar.horizontal headerbar .text-button.circular-button.toggle.popup#tasklist-button:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar stackswitcher .text-button.circular-button.toggle.popup#tasklist-button:not(.image-button), stackswitcher headerbar button.text-button.circular-button, headerbar stackswitcher button.text-button.circular-button, stackswitcher .nemo-window .primary-toolbar button.text-button.circular-button, .nemo-window .primary-toolbar stackswitcher button.text-button.circular-button, stackswitcher row button.text-button.circular-button, row stackswitcher button.text-button.circular-button, stackswitcher button.text-button.nautilus-circular-button.image-button { min-width: 28px; min-height: 28px; border-radius: 100px; -gtk-outline-radius: 100px; padding: 0; } *:drop(active):focus, *:drop(active) { box-shadow: inset 0 0 0 1px #F08437; } decoration { transition: box-shadow 0.2s cubic-bezier(0, 0, 0.2, 1); border-radius: 6px; border-width: 0; box-shadow: 0 0 8px 5px rgba(0, 0, 0, 0.4); margin: 4px; } decoration:backdrop { box-shadow: 0 0 8px 5px rgba(0, 0, 0, 0.3); } .fullscreen decoration, .tiled decoration { border-radius: 0; box-shadow: 0 0 8px 5px rgba(0, 0, 0, 0.3); } .popup decoration { border-radius: 6px; } .ssd decoration { margin: -5px; border-radius: 6px 6px 0 0; box-shadow: 0 0 8px 5px rgba(0, 0, 0, 0.3); } .ssd decoration.maximized { border-radius: 0; } .csd.popup decoration { border-radius: 6px; box-shadow: 0 0 8px 5px rgba(0, 0, 0, 0.3); } tooltip.csd decoration { border-radius: 6px; box-shadow: 0 0 8px 5px rgba(0, 0, 0, 0.3); } messagedialog.csd decoration { border-radius: 6px; } .solid-csd decoration { border: 1px solid #4B4B4B; border-radius: 0; margin: 0; background-color: rgba(55, 55, 55, 0.98); box-shadow: none; } headerbar button.titlebutton, .titlebar button.titlebutton { min-width: 24px; min-height: 24px; margin: 0; padding: 0; border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; background-color: rgba(55, 55, 55, 0); } headerbar button.titlebutton:hover, .titlebar button.titlebutton:hover { border-color: rgba(255, 255, 255, 0.12); color: rgba(221, 213, 213, 0.8); background-color: rgba(119, 119, 119, 0.88); background-image: none; box-shadow: none; } headerbar button.titlebutton:active, headerbar button.titlebutton:checked, .titlebar button.titlebutton:active, .titlebar button.titlebutton:checked { color: #ffffff; background-color: rgba(119, 119, 119, 0.98); background-image: none; border-color: rgba(255, 255, 255, 0.12); text-shadow: none; -gtk-icon-shadow: none; box-shadow: none; } headerbar button.titlebutton.close, headerbar button.titlebutton.maximize, headerbar button.titlebutton.minimize, headerbar button.titlebutton.restore, .titlebar button.titlebutton.close, .titlebar button.titlebutton.maximize, .titlebar button.titlebutton.minimize, .titlebar button.titlebutton.restore { min-width: 16px; min-height: 16px; margin: 0; color: transparent; background-color: transparent; background-position: center; background-repeat: no-repeat; background-size: auto; border-width: 0; box-shadow: none; } headerbar button.titlebutton.close:backdrop, headerbar button.titlebutton.maximize:backdrop, headerbar button.titlebutton.minimize:backdrop, headerbar button.titlebutton.restore:backdrop, .titlebar button.titlebutton.close:backdrop, .titlebar button.titlebutton.maximize:backdrop, .titlebar button.titlebutton.minimize:backdrop, .titlebar button.titlebutton.restore:backdrop { opacity: 1; } headerbar button.titlebutton.close, .titlebar button.titlebutton.close { background-image: -gtk-scaled(url("assets/titlebutton-close.png"), url("assets/titlebutton-close@2.png")); } headerbar button.titlebutton.close:backdrop, .titlebar button.titlebutton.close:backdrop { background-image: -gtk-scaled(url("assets/titlebutton-close-backdrop.png"), url("assets/titlebutton-close-backdrop@2.png")); } headerbar button.titlebutton.close:hover, .titlebar button.titlebutton.close:hover { background-image: -gtk-scaled(url("assets/titlebutton-close-hover.png"), url("assets/titlebutton-close-hover@2.png")); } headerbar button.titlebutton.close:active, .titlebar button.titlebutton.close:active { background-image: -gtk-scaled(url("assets/titlebutton-close-active.png"), url("assets/titlebutton-close-active@2.png")); } headerbar button.titlebutton.maximize, .titlebar button.titlebutton.maximize { background-image: -gtk-scaled(url("assets/titlebutton-maximize.png"), url("assets/titlebutton-maximize@2.png")); } headerbar button.titlebutton.maximize:backdrop, .titlebar button.titlebutton.maximize:backdrop { background-image: -gtk-scaled(url("assets/titlebutton-maximize-backdrop.png"), url("assets/titlebutton-maximize-backdrop@2.png")); } headerbar button.titlebutton.maximize:hover, .titlebar button.titlebutton.maximize:hover { background-image: -gtk-scaled(url("assets/titlebutton-maximize-hover.png"), url("assets/titlebutton-maximize-hover@2.png")); } headerbar button.titlebutton.maximize:active, .titlebar button.titlebutton.maximize:active { background-image: -gtk-scaled(url("assets/titlebutton-maximize-active.png"), url("assets/titlebutton-maximize-active@2.png")); } headerbar button.titlebutton.minimize, .titlebar button.titlebutton.minimize { background-image: -gtk-scaled(url("assets/titlebutton-minimize.png"), url("assets/titlebutton-minimize@2.png")); } headerbar button.titlebutton.minimize:backdrop, .titlebar button.titlebutton.minimize:backdrop { background-image: -gtk-scaled(url("assets/titlebutton-minimize-backdrop.png"), url("assets/titlebutton-minimize-backdrop@2.png")); } headerbar button.titlebutton.minimize:hover, .titlebar button.titlebutton.minimize:hover { background-image: -gtk-scaled(url("assets/titlebutton-minimize-hover.png"), url("assets/titlebutton-minimize-hover@2.png")); } headerbar button.titlebutton.minimize:active, .titlebar button.titlebutton.minimize:active { background-image: -gtk-scaled(url("assets/titlebutton-minimize-active.png"), url("assets/titlebutton-minimize-active@2.png")); } headerbar button.titlebutton.restore, .titlebar button.titlebutton.restore { background-image: -gtk-scaled(url("assets/titlebutton-restore.png"), url("assets/titlebutton-restore@2.png")); } headerbar button.titlebutton.restore:backdrop, .titlebar button.titlebutton.restore:backdrop { background-image: -gtk-scaled(url("assets/titlebutton-restore-backdrop.png"), url("assets/titlebutton-restore-backdrop@2.png")); } headerbar button.titlebutton.restore:hover, .titlebar button.titlebutton.restore:hover { background-image: -gtk-scaled(url("assets/titlebutton-restore-hover.png"), url("assets/titlebutton-restore-hover@2.png")); } headerbar button.titlebutton.restore:active, .titlebar button.titlebutton.restore:active { background-image: -gtk-scaled(url("assets/titlebutton-restore-active.png"), url("assets/titlebutton-restore-active@2.png")); } .fullscreen headerbar button.titlebutton.maximize, .maximized headerbar button.titlebutton.maximize, .fullscreen .titlebar button.titlebutton.maximize, .maximized .titlebar button.titlebutton.maximize { background-image: -gtk-scaled(url("assets/titlebutton-restore.png"), url("assets/titlebutton-restore@2.png")); } .fullscreen headerbar button.titlebutton.maximize:backdrop, .maximized headerbar button.titlebutton.maximize:backdrop, .fullscreen .titlebar button.titlebutton.maximize:backdrop, .maximized .titlebar button.titlebutton.maximize:backdrop { background-image: -gtk-scaled(url("assets/titlebutton-restore-backdrop.png"), url("assets/titlebutton-restore-backdrop@2.png")); } .fullscreen headerbar button.titlebutton.maximize:hover, .maximized headerbar button.titlebutton.maximize:hover, .fullscreen .titlebar button.titlebutton.maximize:hover, .maximized .titlebar button.titlebutton.maximize:hover { background-image: -gtk-scaled(url("assets/titlebutton-restore-hover.png"), url("assets/titlebutton-restore-hover@2.png")); } .fullscreen headerbar button.titlebutton.maximize:active, .maximized headerbar button.titlebutton.maximize:active, .fullscreen .titlebar button.titlebutton.maximize:active, .maximized .titlebar button.titlebutton.maximize:active { background-image: -gtk-scaled(url("assets/titlebutton-restore-active.png"), url("assets/titlebutton-restore-active@2.png")); } .view:selected, iconview:selected, .view:selected:focus, .view text:selected, iconview text:selected, textview text:selected, .view text selection:focus, iconview text selection:focus, .view text selection, iconview text selection, textview text selection:focus, textview text selection, flowbox flowboxchild:selected, entry selection:focus, entry selection, treeview.view:selected, treeview.view:selected:focus, row:selected, calendar:selected, .nemo-window .nemo-window-pane widget.entry:selected:focus, .nemo-window .nemo-window-pane widget.entry:selected, #MozillaGtkWidget.background > widget > scrolledwindow > textview text:selected, #MozillaGtkWidget.background > widget > scrolledwindow > textview text:selected:focus, #MozillaGtkWidget.background > widget > scrolledwindow > textview text selection, .budgie-menu button:checked { background-color: #498dff; } row:selected label, label:selected, .view:selected, iconview:selected, .view:selected:focus, .view text:selected, iconview text:selected, textview text:selected, .view text selection:focus, iconview text selection:focus, .view text selection, iconview text selection, textview text selection:focus, textview text selection, flowbox flowboxchild:selected, entry selection:focus, entry selection, treeview.view:selected, treeview.view:selected:focus, row:selected, calendar:selected, .nemo-window .nemo-window-pane widget.entry:selected:focus, .nemo-window .nemo-window-pane widget.entry:selected, #MozillaGtkWidget.background > widget > scrolledwindow > textview text:selected, #MozillaGtkWidget.background > widget > scrolledwindow > textview text:selected:focus, #MozillaGtkWidget.background > widget > scrolledwindow > textview text selection, .budgie-menu button:checked { color: #ffffff; } row:selected label:disabled, label:disabled:selected, .view:disabled:selected, iconview:disabled:selected, iconview:disabled:selected:focus, .view text:disabled:selected, iconview text:disabled:selected, textview text:disabled:selected, iconview text:disabled:selected:focus, textview text:disabled:selected:focus, iconview text selection:disabled:focus, .view text selection:disabled, iconview text selection:disabled, textview text selection:disabled, flowbox flowboxchild:disabled:selected, label:disabled selection, entry selection:disabled, treeview.view:disabled:selected:focus, row:disabled:selected, calendar:disabled:selected, .nemo-window .nemo-window-pane widget.entry:disabled:selected, #MozillaGtkWidget.background > widget > scrolledwindow > textview text:disabled:selected, #MozillaGtkWidget.background > widget > scrolledwindow > textview text selection:disabled, .budgie-menu button:disabled:checked { color: #a4c6ff; } /********* * Emoji * *********/ popover.emoji-picker { padding: 0; border-radius: 6px; } popover.emoji-picker entry { border-bottom: 1px solid rgba(255, 255, 255, 0.12); border-bottom-left-radius: 0; border-bottom-right-radius: 0; box-shadow: none; border-width: 0 0 1px 0; padding: 4px 12px; } popover.emoji-picker scrolledwindow { border-bottom: 1px solid rgba(255, 255, 255, 0.12); } button.emoji-section { margin: 2px 1px; padding: 1px 12px; border-radius: 6px; border: none; outline-offset: -2px; box-shadow: none; } .emoji { min-width: 3em; min-height: 3em; padding: 0; } .emoji widget { transition: all 0.2s cubic-bezier(0, 0, 0.2, 1); } .emoji widget:hover { font-size: larger; } terminal-window notebook > header.top tabs > tab, .mate-terminal notebook > header.top tabs > tab { border-top: 1px solid transparent; } terminal-window notebook > header.top button, .mate-terminal notebook > header.top button { padding: 0; min-width: 24px; min-height: 24px; } .nautilus-canvas-item { border-radius: 2px; } .nautilus-desktop.nautilus-canvas-item, .nemo-desktop.nemo-canvas-item, .caja-desktop { color: white; text-shadow: 1px 1px rgba(0, 0, 0, 0.6); } .nautilus-desktop.nautilus-canvas-item:active, .nemo-desktop.nemo-canvas-item:active, .caja-desktop:active { color: #dedede; } .nautilus-desktop.nautilus-canvas-item:selected, .nemo-desktop.nemo-canvas-item:selected, .caja-desktop:selected { color: #ffffff; text-shadow: none; } .nautilus-canvas-item.dim-label, label.nautilus-canvas-item.separator, popover.background label.nautilus-canvas-item.separator, headerbar .nautilus-canvas-item.subtitle, .titlebar:not(headerbar) .nautilus-canvas-item.subtitle, .budgie-notification .nautilus-canvas-item.notification-body, .budgie-switcher .nautilus-canvas-item.notification-body, .nautilus-list-dim-label { color: #898989; } .nautilus-canvas-item.dim-label:selected, label.nautilus-canvas-item.separator:selected, headerbar .nautilus-canvas-item.subtitle:selected, .titlebar:not(headerbar) .nautilus-canvas-item.subtitle:selected, .budgie-notification .nautilus-canvas-item.notification-body:selected, .budgie-switcher .nautilus-canvas-item.notification-body:selected, .nautilus-canvas-item.dim-label:selected:focus, label.nautilus-canvas-item.separator:selected:focus, headerbar .nautilus-canvas-item.subtitle:selected:focus, .titlebar:not(headerbar) .nautilus-canvas-item.subtitle:selected:focus, .budgie-notification .nautilus-canvas-item.notification-body:selected:focus, .budgie-switcher .nautilus-canvas-item.notification-body:selected:focus, .nautilus-list-dim-label:selected, .nautilus-list-dim-label:selected:focus { color: #dbe8ff; } .nautilus-window searchbar { border-top: 1px solid rgba(255, 255, 255, 0.12); } .nautilus-window .searchbar-container { margin-top: -1px; } .nautilus-window notebook, .nautilus-window notebook > stack { border-radius: 0 0 6px 6px; } .nautilus-window.maximized notebook, .nautilus-window.maximized notebook > stack { border-radius: 0 0 0 0; } .nautilus-window notebook, .nautilus-window notebook > stack:not(:only-child) searchbar { background-color: #242424; } .disk-space-display { border-style: solid; border-width: 1px; } .disk-space-display.unknown { background-color: rgba(222, 222, 222, 0.5); border-color: rgba(197, 197, 197, 0.5); } .disk-space-display.used { background-color: rgba(73, 141, 255, 0.8); border-color: rgba(22, 109, 255, 0.8); } .disk-space-display.free { background-color: #2b2b2b; border-color: #121212; } @keyframes needs_attention_keyframes { 0% { border-color: rgba(255, 255, 255, 0.12); color: rgba(221, 213, 213, 0.8); background-color: rgba(119, 119, 119, 0.88); background-image: none; box-shadow: none; } 100% { color: #ffffff; background-color: rgba(119, 119, 119, 0.98); background-image: none; border-color: rgba(255, 255, 255, 0.12); text-shadow: none; -gtk-icon-shadow: none; box-shadow: none; } } .nautilus-operations-button-needs-attention { animation: needs_attention_keyframes 2s ease-in-out; } .nautilus-operations-button-needs-attention-multiple { animation: needs_attention_keyframes 3s ease-in-out; animation-iteration-count: 3; } .conflict-row.activatable, .conflict-row.activatable:active { color: white; background-color: #FC4138; } .conflict-row.activatable:hover { background-color: #fd716a; } .conflict-row.activatable:selected { color: #ffffff; background-color: #498dff; } .nautilus-window .floating-bar { padding: 1px; background-color: #498dff; color: #ffffff; border-radius: 3px 0 4px 0; } .nautilus-window .floating-bar.bottom.left { border-top-left-radius: 0; } .nautilus-window .floating-bar.bottom.right { border-top-right-radius: 0; } .nautilus-window .floating-bar button { border: none; border-radius: 100px; min-height: 0; min-width: 0; padding: 0; margin-right: 6px; -gtk-icon-shadow: none; } .nautilus-window.maximized .floating-bar { border-radius: 3px 0 0 0; } .nemo-window .nemo-places-sidebar.frame { border-width: 0; } .nemo-window notebook { background-color: #242424; } .nemo-window .nemo-window-pane widget.entry { border: 1px solid; border-radius: 3px; color: #dedede; border-color: #8eb9ff; background-color: #242424; box-shadow: inset 0 0 0 2px #8eb9ff; } .nemo-window .primary-toolbar { border: none; color: rgba(225, 219, 219, 0.8); background-color: #373737; } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button { padding-bottom: 2px; margin: 0; color: rgba(225, 219, 219, 0.8); background-color: rgba(55, 55, 55, 0.98); } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:not(:last-child):not(:only-child) { margin: 0; } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:hover { color: rgba(225, 219, 219, 0.8); background-color: rgba(75, 75, 75, 0.98); } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:active, .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:checked { transition: background-color 0.00001s 0.3s; animation: header_ripple_effect 0.3s cubic-bezier(0, 0, 0.2, 1); color: rgba(225, 219, 219, 0.8); background-color: rgba(30, 30, 30, 0.98); box-shadow: inset 0 -2px #7cadff; } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:disabled { color: rgba(225, 219, 219, 0.4); } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button + button { border-left-style: solid; } .caja-notebook { border-top: 1px solid rgba(255, 255, 255, 0.12); } .caja-side-pane .frame { border-width: 1px 0 0; } .caja-notebook .frame { border-width: 0 0 1px; } .open-document-selector-treeview.view, iconview.open-document-selector-treeview { padding: 3px 6px 3px 6px; border-color: #242424; } .open-document-selector-treeview.view:hover, iconview.open-document-selector-treeview:hover { background-color: #313131; } .open-document-selector-treeview.view:hover:selected, iconview.open-document-selector-treeview:hover:selected { color: #ffffff; background-color: #498dff; } .open-document-selector-name-label { color: #dedede; } .open-document-selector-path-label { color: #818181; font-size: smaller; } .open-document-selector-path-label:selected { color: rgba(255, 255, 255, 0.9); } .gedit-document-panel row.activatable, .gedit-document-panel .budgie-menu button, .budgie-menu .gedit-document-panel button { padding: 6px 0; } .gedit-document-panel row button { min-width: 22px; min-height: 22px; padding: 0; margin: 0 6px; border-radius: 100px; -gtk-outline-radius: 100px; } .gedit-document-panel row button image { color: inherit; } .gedit-document-panel row:hover:not(:selected) button { color: #a2a2a2; } .gedit-document-panel row:hover:not(:selected) button:hover { color: #ff4d4d; } .gedit-document-panel row:hover:not(:selected) button:active { color: #dedede; } .gedit-document-panel row:hover:selected button:hover { color: #ff6666; } .gedit-document-panel row:hover:selected button:hover:active { color: #ffffff; } .gedit-document-panel-dragged-row { border: 1px solid rgba(255, 255, 255, 0.12); background-color: #1a1a1a; color: #dedede; } .gedit-side-panel-paned statusbar { border-top: 1px solid rgba(255, 255, 255, 0.12); background-color: #333333; border-radius: 0 0 6px 6px; } .gedit-search-slider { background-color: #383838; padding: 6px; border-color: rgba(255, 255, 255, 0.12); border-radius: 0 0 5px 5px; border-width: 0 1px 1px 1px; border-style: solid; } .gedit-search-entry-occurrences-tag { color: rgba(222, 222, 222, 0.6); border: none; margin: 2px; padding: 2px; } .gedit-map-frame border { border-width: 0; } .gedit-map-frame border:dir(ltr) { border-left-width: 1px; } .gedit-map-frame border:dir(rtl) { border-right-width: 1px; } .gedit-side-panel-paned.horizontal > box.vertical > stack > grid.horizontal > box.horizontal { margin: 4px 0; } .gedit-side-panel-paned.horizontal > box.vertical > stack > grid.horizontal > scrolledwindow { margin: 0 6px 6px 6px; border-radius: 0; box-shadow: 0px 1px 2px 0px rgba(16, 16, 16, 0.15), 0px 2px 3px 0px rgba(16, 16, 16, 0.1); } paned.titlebar.horizontal headerbar button.flat.toggle.popup:not(.image-button) box > .title, paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:not(.image-button) box > .title, paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:not(.image-button) box > .title, .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:not(.image-button) box > .title { padding: 0; margin: -2px 0; } .pluma-window statusbar frame > border { border: none; } .pluma-window notebook > stack scrolledwindow { border-width: 0 0 1px 0; } #pluma-status-combo-button { min-height: 0; padding: 0; border-top: none; border-bottom: none; border-radius: 0; } .gb-search-entry-occurrences-tag { background: none; } workbench.csd > stack.titlebar:not(headerbar) { padding: 0; background: none; border: none; box-shadow: none; } workbench.csd > stack.titlebar:not(headerbar) headerbar, workbench.csd > stack.titlebar:not(headerbar) headerbar:first-child, workbench.csd > stack.titlebar:not(headerbar) headerbar:last-child { border-radius: 6px 6px 0 0; } editortweak .linked > entry.search:focus + .gb-linked-scroller { border-top-color: #498dff; } layouttab { background-color: #242424; } layout { border: 1px solid rgba(255, 255, 255, 0.12); -PnlDockBin-handle-size: 1; } eggsearchbar box.search-bar { border-bottom: 1px solid rgba(255, 255, 255, 0.12); } pillbox { color: #ffffff; background-color: #498dff; border-radius: 3px; } pillbox:disabled label { color: rgba(255, 255, 255, 0.5); } docktabstrip { padding: 0 6px; background-color: #333333; border-bottom: 1px solid rgba(255, 255, 255, 0.12); } docktabstrip docktab { min-height: 28px; border: solid transparent; border-width: 0 1px; } docktabstrip docktab label { opacity: 0.5; } docktabstrip docktab:checked label, docktabstrip docktab:hover label { opacity: 1; } docktabstrip docktab:checked { border-color: rgba(255, 255, 255, 0.12); background-color: #242424; } dockbin { border: 1px solid rgba(255, 255, 255, 0.12); -PnlDockBin-handle-size: 1; } dockpaned { border: 1px solid rgba(255, 255, 255, 0.12); } dockoverlayedge { background-color: #333333; } dockoverlayedge docktabstrip { padding: 0; border: none; } dockoverlayedge.left-edge tab:checked, dockoverlayedge.right-edge tab:checked { border-width: 1px 0; } popover.messagepopover.background { padding: 0; } popover.messagepopover .popover-content-area { margin: 16px; } popover.messagepopover .popover-action-area { margin: 8px; } popover.messagepopover .popover-action-area button:not(:first-child):not(:last-child) { margin: 0 4px; } popover.popover-selector { padding: 0; } popover.popover-selector list row { padding: 5px 0; } popover.popover-selector list row image { margin-left: 3px; margin-right: 10px; } entry.search.preferences-search { border: none; border-right: 1px solid rgba(255, 255, 255, 0.12); border-bottom: 1px solid rgba(255, 255, 255, 0.12); border-radius: 0; } preferences stacksidebar.sidebar list { background-image: linear-gradient(to bottom, #242424, #242424); } preferences stacksidebar.sidebar list separator { background-color: transparent; } devhelppanel entry:focus, symboltreepanel entry:focus { border-color: rgba(255, 255, 255, 0.12); } button.run-arrow-button { min-width: 12px; } omnibar.linked > entry:not(:only-child) { border-style: solid; border-radius: 3px; margin-left: 1px; margin-right: 1px; } gstyleslidein #scale_box button.toggle:checked, gstyleslidein #strings_controls button.toggle:checked, gstyleslidein #palette_controls button.toggle:checked, gstyleslidein #components_controls button.toggle:checked { color: #dedede; } configurationview entry.flat, configurationview .raven .raven-background spinbutton:not(.vertical), .raven .raven-background configurationview spinbutton:not(.vertical) { background: none; } configurationview list { border-width: 0; } window.background > box.vertical box.horizontal list.categories { border-radius: 0 0 0 6px; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event { color: #dedede; transition-duration: 0.1s; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable:hover, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event:hover, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event:hover, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable:active, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event:active, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event:active { color: #dedede; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable label.compressed-entries-label, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event label.compressed-entries-label, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event label.compressed-entries-label { background-image: image(#3484e2); color: #ffffff; font-weight: 700; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row { background-image: image(#2b2b2b); color: #ababab; transition-property: opacity, border-image, background-image, box-shadow; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row:hover, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row:hover, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row:hover { background-image: image(#3c3c3c); color: #dedede; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row:active, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row:active, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row:active, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row:active:focus, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row:active:focus, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row:active:focus { background-image: image(#444444); color: #dedede; animation: none; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row.popover-activated-row, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row.popover-activated-row, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row.popover-activated-row { background-image: image(#498dff); color: #ffffff; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row-header, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row-header, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row-header { background-image: image(#242424); color: #498dff; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row-header:hover, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row-header:hover, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row-header:hover { background-image: image(#26292f); } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row-header:active, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row-header:active, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row-header:active, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row-header:active:focus, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row-header:active:focus, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row-header:active:focus { background-image: image(#282f3a); color: #498dff; animation: none; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row-header label.compressed-entries-label, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row-header label.compressed-entries-label, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row-header label.compressed-entries-label { background-image: image(#498dff); color: #ffffff; transition-duration: 0s; } .documents-scrolledwin.frame { border-width: 0; } button.documents-load-more { border-width: 1px 0 0; border-radius: 0; } .documents-icon-bg { background-color: #498dff; color: #ffffff; border-radius: 2px; } .documents-collection-icon, .photos-collection-icon { background-color: rgba(222, 222, 222, 0.3); border-radius: 2px; } button.documents-favorite:active, button.documents-favorite:active:hover { color: #afcdff; } .documents-entry-tag, .photos-entry-tag { color: #ffffff; background: #498dff; border-radius: 3px; border-width: 0; margin: 2px; padding: 4px; } .documents-entry-tag:hover, .photos-entry-tag:hover { color: #ffffff; background: #5d9aff; } .documents-entry-tag:active, .photos-entry-tag:active { color: #ffffff; background: #3580ff; } .documents-entry-tag.button, .button.photos-entry-tag { box-shadow: none; border: none; background-color: transparent; } .content-view.document-page { border-style: solid; border-width: 3px 3px 6px 4px; border-image: url("assets/thumbnail-frame.png") 3 3 6 4; } .photos-fade-in { opacity: 1.0; transition: opacity 0.2s ease-out; } .photos-fade-out { opacity: 0.0; transition: opacity 0.2s ease-out; } .tweak-categories, .tweak-category:not(:selected):not(:hover) { background-image: linear-gradient(to bottom, #242424, #242424); } .tweak-categories { border-radius: 0 0 0 6px; } .tweak-titlebar-right > switch, dialog.csd > headerbar.titlebar > switch { margin: 8px 0; } /************************ * Gnome Control Center * ************************/ box.horizontal.titlebar > headerbar > stack > box.vertical > .title { margin: 0; } box.horizontal.titlebar > headerbar > stack > box.vertical > .subtitle { margin: -3px 0; } dialog.background.csd > headerbar.titlebar > label:not(.title):not(.subtitle) { font-weight: 700; } .tr-workarea undershoot, .tr-workarea overshoot { border-color: transparent; } .atril-window .primary-toolbar toolbar, .atril-window .primary-toolbar .inline-toolbar { background: none; } #gf-bubble, #gf-bubble.solid, #gf-osd-window, #gf-osd-window.solid, #gf-input-source-popup, #gf-input-source-popup.solid, #gf-candidate-popup, #gf-candidate-popup.solid { color: #f0f0f0; background-color: rgba(36, 36, 36, 0.95); border: 1px solid rgba(16, 16, 16, 0.95); border-radius: 2px; } #gf-bubble levelbar block.low, #gf-bubble levelbar block.high, #gf-bubble levelbar block.full, #gf-osd-window levelbar block.low, #gf-osd-window levelbar block.high, #gf-osd-window levelbar block.full, #gf-input-source-popup levelbar block.low, #gf-input-source-popup levelbar block.high, #gf-input-source-popup levelbar block.full, #gf-candidate-popup levelbar block.low, #gf-candidate-popup levelbar block.high, #gf-candidate-popup levelbar block.full { background-color: #498dff; border-color: #498dff; } #gf-bubble levelbar block.empty, #gf-osd-window levelbar block.empty, #gf-input-source-popup levelbar block.empty, #gf-candidate-popup levelbar block.empty { background-color: rgba(23, 23, 23, 0.95); } #gf-bubble levelbar trough, #gf-osd-window levelbar trough, #gf-input-source-popup levelbar trough, #gf-candidate-popup levelbar trough { background: none; } #gf-input-source { min-height: 32px; min-width: 40px; } #gf-input-source:selected { color: #ffffff; background-color: #498dff; border-radius: 2px; } gf-candidate-box label { padding: 3px; } gf-candidate-box:hover, gf-candidate-box:selected { color: #ffffff; background-color: #498dff; border-radius: 2px; } /************* * rhythmbox * *************/ .sidebar-paned .inline-toolbar.horizontal.sidebar-toolbar { box-shadow: inset 0 1px rgba(255, 255, 255, 0.12); padding: 4px; background-color: #2b2b2b; } .sidebar-paned .inline-toolbar.horizontal.sidebar-toolbar button.image-button { border: none; } .sidebar-paned .inline-toolbar.horizontal.sidebar-toolbar button.image-button:active, .sidebar-paned .inline-toolbar.horizontal.sidebar-toolbar button.image-button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); } .sidebar-paned .inline-toolbar.horizontal.sidebar-toolbar button.image-button > widget > box > image { padding: 0; } .sidebar-paned scrolledwindow { border: none; } window.csd > box.vertical > box.vertical > toolbar.horizontal, window.csd > box.vertical > box.vertical > .horizontal.inline-toolbar, window.solid-csd > box.vertical > box.vertical > toolbar.horizontal, window.solid-csd > box.vertical > box.vertical > .horizontal.inline-toolbar { margin: -1px 0; border-top: 1px solid rgba(255, 255, 255, 0.12); box-shadow: none; background-color: transparent; } window.csd > box.vertical > box.vertical > toolbar.horizontal button, window.csd > box.vertical > box.vertical > .horizontal.inline-toolbar button, window.solid-csd > box.vertical > box.vertical > toolbar.horizontal button, window.solid-csd > box.vertical > box.vertical > .horizontal.inline-toolbar button { min-height: 36px; min-width: 36px; padding: 0; margin-top: 8px; margin-bottom: 8px; border: none; } window.csd > box.vertical > box.vertical > toolbar.horizontal button:active, window.csd > box.vertical > box.vertical > .horizontal.inline-toolbar button:active, window.csd > box.vertical > box.vertical > toolbar.horizontal button:checked, window.csd > box.vertical > box.vertical > .horizontal.inline-toolbar button:checked, window.solid-csd > box.vertical > box.vertical > toolbar.horizontal button:active, window.solid-csd > box.vertical > box.vertical > .horizontal.inline-toolbar button:active, window.solid-csd > box.vertical > box.vertical > toolbar.horizontal button:checked, window.solid-csd > box.vertical > box.vertical > .horizontal.inline-toolbar button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); } window.csd > box.vertical > box.vertical > frame, window.solid-csd > box.vertical > box.vertical > frame { margin: -1px 0; padding: 0; } window.csd > box.vertical > box.vertical > frame > border, window.solid-csd > box.vertical > box.vertical > frame > border { border: none; } window.background > box.vertical > toolbar.primary-toolbar toolitem .linked > button.image-button.raised, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem .linked > button.image-button.raised { min-height: 36px; min-width: 36px; padding: 0; margin: 0; border: none; } window.background > box.vertical > toolbar.primary-toolbar toolitem .linked > button.image-button.raised:active, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem .linked > button.image-button.raised:active, window.background > box.vertical > toolbar.primary-toolbar toolitem .linked > button.image-button.raised:checked, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem .linked > button.image-button.raised:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); } window.background > box.vertical > toolbar.primary-toolbar toolitem .linked > button.image-button.raised > widget > box > image, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem .linked > button.image-button.raised > widget > box > image { padding: 0; } window.background > box.vertical > toolbar.primary-toolbar toolitem button.flat.scale, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem button.flat.scale, window.background > box.vertical > toolbar.primary-toolbar toolitem button.scale.budgie-menu-launcher, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem button.scale.budgie-menu-launcher, window.background > box.vertical > toolbar.primary-toolbar toolitem .budgie-panel .scale#tasklist-button, .budgie-panel window.background > box.vertical > toolbar.primary-toolbar toolitem .scale#tasklist-button, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem .budgie-panel .scale#tasklist-button, .budgie-panel window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem .scale#tasklist-button, .budgie-panel window.background > box.vertical > toolbar.primary-toolbar toolitem button.scale.flat.launcher, .budgie-panel window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem button.scale.flat.launcher { min-height: 24px; min-width: 36px; padding: 0; margin-top: 8px; margin-bottom: 8px; } window.background > box.vertical > toolbar.primary-toolbar toolitem > box.horizontal:not(.linked) > button.toggle, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem > box.horizontal:not(.linked) > button.toggle, window.background > box.vertical > toolbar.primary-toolbar toolitem > .linked > button:not(.toggle):not(.raised):not(.flat), window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem > .linked > button:not(.toggle):not(.raised):not(.flat) { min-height: 28px; min-width: 28px; padding: 0; margin: 0; border: none; } window.background > box.vertical > toolbar.primary-toolbar toolitem > box.horizontal:not(.linked) > button.toggle:active, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem > box.horizontal:not(.linked) > button.toggle:active, window.background > box.vertical > toolbar.primary-toolbar toolitem > box.horizontal:not(.linked) > button.toggle:checked, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem > box.horizontal:not(.linked) > button.toggle:checked, window.background > box.vertical > toolbar.primary-toolbar toolitem > .linked > button:not(.toggle):not(.raised):not(.flat):active, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem > .linked > button:not(.toggle):not(.raised):not(.flat):active, window.background > box.vertical > toolbar.primary-toolbar toolitem > .linked > button:not(.toggle):not(.raised):not(.flat):checked, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem > .linked > button:not(.toggle):not(.raised):not(.flat):checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); } /******************** * Gnome Calculator * ********************/ window.background > headerbar.titlebar > button.flat.popup.toggle.text-button.title, window.background > headerbar.titlebar > button.popup.toggle.text-button.title.budgie-menu-launcher, .budgie-panel window.background > headerbar.titlebar > .popup.toggle.text-button.title#tasklist-button, .budgie-panel window.background > headerbar.titlebar > button.popup.toggle.text-button.title.flat.launcher { margin: 6px 0; } window.background > headerbar.titlebar > button.flat.popup.toggle.text-button.title > grid > widget, window.background > headerbar.titlebar > button.popup.toggle.text-button.title.budgie-menu-launcher > grid > widget, .budgie-panel window.background > headerbar.titlebar > .popup.toggle.text-button.title#tasklist-button > grid > widget, .budgie-panel window.background > headerbar.titlebar > button.popup.toggle.text-button.title.flat.launcher > grid > widget { padding-top: 3px; } window.background > headerbar.titlebar > button.flat.popup.toggle.text-button.title > grid > widget:dir(ltr), window.background > headerbar.titlebar > button.popup.toggle.text-button.title.budgie-menu-launcher > grid > widget:dir(ltr), .budgie-panel window.background > headerbar.titlebar > .popup.toggle.text-button.title#tasklist-button > grid > widget:dir(ltr), .budgie-panel window.background > headerbar.titlebar > button.popup.toggle.text-button.title.flat.launcher > grid > widget:dir(ltr) { padding-left: 4px; } window.background > headerbar.titlebar > button.flat.popup.toggle.text-button.title > grid > widget:dir(rtl), window.background > headerbar.titlebar > button.popup.toggle.text-button.title.budgie-menu-launcher > grid > widget:dir(rtl), .budgie-panel window.background > headerbar.titlebar > .popup.toggle.text-button.title#tasklist-button > grid > widget:dir(rtl), .budgie-panel window.background > headerbar.titlebar > button.popup.toggle.text-button.title.flat.launcher > grid > widget:dir(rtl) { padding-right: 4px; } window.background > grid.vertical > box.vertical > widget button, window.background > grid.vertical > box.vertical > box.vertical > widget button, window.background > grid.vertical > box.vertical grid.math-buttons button { font-weight: 700; } window.background > grid.vertical > box.vertical > widget button:not(.suggested-action):active, window.background > grid.vertical > box.vertical > box.vertical > widget button:not(.suggested-action):active, window.background > grid.vertical > box.vertical grid.math-buttons button:not(.suggested-action):active { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); } window.background > grid.vertical > box.vertical > widget button:not(.suggested-action):checked, window.background > grid.vertical > box.vertical > box.vertical > widget button:not(.suggested-action):checked, window.background > grid.vertical > box.vertical grid.math-buttons button:not(.suggested-action):checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.35); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); } /************ * Epiphany * ************/ headerbar.titlebar.incognito-mode entry { border: none; color: rgba(225, 219, 219, 0.8); background-color: rgba(119, 119, 119, 0.58); background-image: none; } headerbar.titlebar.incognito-mode entry image, headerbar.titlebar.incognito-mode entry image:hover { color: inherit; } headerbar.titlebar.incognito-mode entry:focus { border: none; box-shadow: 0 0 0 2px #8eb9ff, inset 0 0 0 1px #8eb9ff; border-color: #8eb9ff; background-image: none; } headerbar.titlebar.incognito-mode entry:disabled { color: rgba(225, 219, 219, 0.35); background-color: rgba(111, 111, 111, 0.23); } notebook > box > stack > box.vertical > paned.vertical > overlay > .floating-bar { color: rgba(222, 222, 222, 0.75); } .background headerbar entry.starred, .background headerbar entry.non-starred { border: none; color: rgba(225, 219, 219, 0.8); background-color: rgba(119, 119, 119, 0.58); background-image: none; } .background headerbar entry.starred image, .background headerbar entry.starred image:hover, .background headerbar entry.non-starred image, .background headerbar entry.non-starred image:hover { color: inherit; } .background headerbar entry.starred:focus, .background headerbar entry.non-starred:focus { border: none; box-shadow: 0 0 0 2px #8eb9ff, inset 0 0 0 1px #8eb9ff; border-color: #8eb9ff; background-image: none; } .background headerbar entry.starred:disabled, .background headerbar entry.non-starred:disabled { color: rgba(225, 219, 219, 0.35); background-color: rgba(111, 111, 111, 0.23); } .background headerbar entry.starred > image.right { color: #ccbb00; } .background headerbar entry.starred > image.right:hover, .background headerbar entry.starred > image.right:active, .background headerbar entry.starred > image.right:checked { color: #FFEA00; } popover.background:not(.emoji-picker) > box.vertical button:not(.destructive-action):not(.suggested-action):only-child:active, popover.background:not(.emoji-picker) > box.vertical button:not(.destructive-action):not(.suggested-action):only-child:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background { background-color: transparent; } popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background > row.activatable, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background > button { background-color: #4d4d4d; color: rgba(222, 222, 222, 0.85); border-radius: 5px; border: 1px solid rgba(255, 255, 255, 0.12); margin: 2px; } popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background > row.activatable:hover, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background > button:hover { color: #c5c5c5; border-color: rgba(255, 255, 255, 0.12); background-color: #5c5c5c; box-shadow: none; } popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background > row.activatable:active, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background > button:active, popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background > row.activatable:checked, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background > button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame { border: 1px solid rgba(255, 255, 255, 0.12); } popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > button.bookmarks-row { background-color: rgba(36, 36, 36, 0.35); color: rgba(222, 222, 222, 0.85); border-bottom: 1px dashed rgba(255, 255, 255, 0.05); padding: 6px; } popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row:hover, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row:hover, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > button.bookmarks-row:hover, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row:active, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row:active, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > button.bookmarks-row:active, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row:checked, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row:checked, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > button.bookmarks-row:checked { color: #dedede; background-color: rgba(222, 222, 222, 0.05); } popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row button.flat, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row button.flat, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > button.bookmarks-row button.flat, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row button.budgie-menu-launcher, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row button.budgie-menu-launcher, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > button.bookmarks-row button.budgie-menu-launcher, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row .budgie-panel #tasklist-button, .budgie-panel popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row #tasklist-button, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row .budgie-panel #tasklist-button, .budgie-panel popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row #tasklist-button, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > button.bookmarks-row .budgie-panel #tasklist-button, .budgie-panel .budgie-menu popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > button.bookmarks-row #tasklist-button, .budgie-panel popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row button.flat.launcher, .budgie-panel popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row button.flat.launcher { min-width: 16px; min-height: 16px; padding: 4px; border-radius: 100px; -gtk-outline-radius: 100px; } flowboxchild.bookmark-tag-widget { color: #333333; font-weight: 500; } flowboxchild.bookmark-tag-widget label { margin-bottom: 2px; } flowboxchild.bookmark-tag-widget-selected { color: #ffffff; } MsdOsdWindow.background.osd { border-radius: 2px; border: 1px solid rgba(16, 16, 16, 0.95); } MsdOsdWindow.background.osd .progressbar { background-color: #498dff; border: none; border-color: red; border-radius: 5px; } MsdOsdWindow.background.osd .trough { background-color: rgba(23, 23, 23, 0.95); border: none; border-radius: 5px; } .mate-panel-menu-bar, .mate-panel-menu-bar menubar, panel-toplevel.background, panel-toplevel.background menubar { background-color: #2f2f2f; } .mate-panel-menu-bar menubar, .mate-panel-menu-bar #PanelApplet label, .mate-panel-menu-bar #PanelApplet image, panel-toplevel.background menubar, panel-toplevel.background #PanelApplet label, panel-toplevel.background #PanelApplet image { color: #dedede; } .mate-panel-menu-bar button label, .mate-panel-menu-bar button image, .mate-panel-menu-bar #tasklist-button label, .mate-panel-menu-bar #tasklist-button image, panel-toplevel.background button label, panel-toplevel.background button image, panel-toplevel.background #tasklist-button label, panel-toplevel.background #tasklist-button image { color: inherit; } .mate-panel-menu-bar .wnck-pager, panel-toplevel.background .wnck-pager { color: #6f6f6f; background-color: rgba(22, 22, 22, 0.94); } .mate-panel-menu-bar .wnck-pager:hover, panel-toplevel.background .wnck-pager:hover { background-color: rgba(60, 60, 60, 0.94); } .mate-panel-menu-bar .wnck-pager:selected, panel-toplevel.background .wnck-pager:selected { color: #afcdff; background-color: #498dff; } .mate-panel-menu-bar na-tray-applet, panel-toplevel.background na-tray-applet { -NaTrayApplet-icon-padding: 0; -NaTrayApplet-icon-size: 16px; } .xfce4-panel.panel { background-color: rgba(47, 47, 47, 0.94); text-shadow: none; -gtk-icon-shadow: none; } #tasklist-button { color: rgba(222, 222, 222, 0.8); border-radius: 0; border: none; background-color: rgba(47, 47, 47, 0); } #tasklist-button:hover { color: #f8f8f8; background-color: rgba(0, 0, 0, 0.17); } #tasklist-button:checked { color: white; background-color: rgba(0, 0, 0, 0.25); box-shadow: inset 0 -2px #498dff; } .mate-panel-menu-bar button:not(#tasklist-button), panel-toplevel.background button:not(#tasklist-button), .xfce4-panel.panel button.flat, .xfce4-panel.panel button.budgie-menu-launcher, .xfce4-panel.panel .budgie-panel #tasklist-button, .budgie-panel .xfce4-panel.panel #tasklist-button { color: #dedede; border-radius: 0; border: none; background-color: rgba(47, 47, 47, 0); } .mate-panel-menu-bar button:hover:not(#tasklist-button), panel-toplevel.background button:hover:not(#tasklist-button), .xfce4-panel.panel button.flat:hover, .xfce4-panel.panel button.budgie-menu-launcher:hover, .xfce4-panel.panel .budgie-panel #tasklist-button:hover, .budgie-panel .xfce4-panel.panel #tasklist-button:hover { border: none; background-color: rgba(73, 73, 73, 0.94); } .mate-panel-menu-bar button:active:not(#tasklist-button), panel-toplevel.background button:active:not(#tasklist-button), .xfce4-panel.panel button.flat:active, .xfce4-panel.panel button.budgie-menu-launcher:active, .xfce4-panel.panel .budgie-panel #tasklist-button:active, .budgie-panel .xfce4-panel.panel #tasklist-button:active, .mate-panel-menu-bar button:checked:not(#tasklist-button), panel-toplevel.background button:checked:not(#tasklist-button), .xfce4-panel.panel button.flat:checked, .xfce4-panel.panel button.budgie-menu-launcher:checked, .xfce4-panel.panel .budgie-panel #tasklist-button:checked, .budgie-panel .xfce4-panel.panel #tasklist-button:checked { color: #ffffff; border: none; background-color: #498dff; } .mate-panel-menu-bar button:active:not(#tasklist-button) label, panel-toplevel.background button:active:not(#tasklist-button) label, .xfce4-panel.panel button.flat:active label, .xfce4-panel.panel button.budgie-menu-launcher:active label, .xfce4-panel.panel .budgie-panel #tasklist-button:active label, .budgie-panel .xfce4-panel.panel #tasklist-button:active label, .mate-panel-menu-bar button:active:not(#tasklist-button) image, panel-toplevel.background button:active:not(#tasklist-button) image, .xfce4-panel.panel button.flat:active image, .xfce4-panel.panel button.budgie-menu-launcher:active image, .xfce4-panel.panel .budgie-panel #tasklist-button:active image, .budgie-panel .xfce4-panel.panel #tasklist-button:active image, .mate-panel-menu-bar button:checked:not(#tasklist-button) label, panel-toplevel.background button:checked:not(#tasklist-button) label, .xfce4-panel.panel button.flat:checked label, .xfce4-panel.panel button.budgie-menu-launcher:checked label, .xfce4-panel.panel .budgie-panel #tasklist-button:checked label, .budgie-panel .xfce4-panel.panel #tasklist-button:checked label, .mate-panel-menu-bar button:checked:not(#tasklist-button) image, panel-toplevel.background button:checked:not(#tasklist-button) image, .xfce4-panel.panel button.flat:checked image, .xfce4-panel.panel button.budgie-menu-launcher:checked image, .xfce4-panel.panel .budgie-panel #tasklist-button:checked image, .budgie-panel .xfce4-panel.panel #tasklist-button:checked image { color: inherit; } /********* * Geary * *********/ .geary-titlebar-left separator { opacity: 0; } .geary-titlebar-left > button { min-width: 22px; } .geary-titlebar-right { box-shadow: none; } .geary-titlebar-right separator { opacity: 0; } .geary-titlebar-right > button { min-width: 22px; } window.background:not(.csd) > widget > separator { padding-top: 1px; margin-top: 1px; min-height: 2px; background-color: rgba(255, 255, 255, 0.07); } window.background:not(.csd) > widget > scrollbar { background-clip: border-box; } window.background:not(.csd) > widget > scrollbar, window.background:not(.csd) > widget > frame > border { border-color: rgba(255, 255, 255, 0.12); } window.background:not(.csd) > widget > entry, window.background:not(.csd) > widget > button > button { border: 1px solid rgba(255, 255, 255, 0.12); border-radius: 5px; box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.02); } window.background:not(.csd) > widget > entry, window.background:not(.csd) > widget .entry { border-radius: 5px; background-image: image(#242424); border: 1px solid rgba(255, 255, 255, 0.12); } window.background:not(.csd) > widget > entry:focus, window.background:not(.csd) > widget .entry:focus { border-color: #8eb9ff; box-shadow: inset 0 0 0 2px #8eb9ff; } window.background:not(.csd) > widget > spinbutton { background-image: image(#484848); border: 1px solid rgba(255, 255, 255, 0.12); } window.background:not(.csd) > widget > spinbutton:active { background-image: image(rgba(119, 119, 119, 0.98)); } window.background:not(.csd) > widget > spinbutton .entry { border-top-right-radius: 0; border-bottom-right-radius: 0; } window.background:not(.csd) > widget > button { padding-top: 3px; padding-bottom: 3px; } window.background:not(.csd) > widget > button > button { outline-style: none; } window.background:not(.csd) > widget > button > button:active { background-image: image(rgba(119, 119, 119, 0.98)); border: none; box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.12); } window.background:not(.csd) > widget > button > button label { padding: 4px 6px; } window.background:not(.csd) > menu, window.background:not(.csd) .menu { background-color: #404040; border-radius: 0; border: none; } window.background:not(.csd) > menu .separator:not(label), .csd window.background:not(.csd) > menu .separator:not(label), window.background:not(.csd) .menu .separator:not(label), .csd window.background:not(.csd) .menu .separator:not(label) { color: rgba(255, 255, 255, 0.12); } window.background:not(.csd) > menu > menuitem { padding: 4px 6px; } window.background:not(.csd) > menu > menuitem > label:disabled { color: rgba(222, 222, 222, 0.45); } window.background:not(.csd) > menu > menuitem > radio, window.background:not(.csd) > menu > menuitem > check { padding: 0 2px 0 4px; } #MozillaGtkWidget.background { background-color: #333333; } #MozillaGtkWidget.background .background, #MozillaGtkWidget.background frame, #MozillaGtkWidget.background separator, #MozillaGtkWidget.background scrolledwindow { background-color: #333333; } #MozillaGtkWidget.background scrollbar { background-color: transparent; } #MozillaGtkWidget.background scrollbar slider { background-color: gray; } #MozillaGtkWidget.background scrollbar slider:hover { background-color: #9a9a9a; } #MozillaGtkWidget.background scrollbar slider:hover:active { background-color: #b3b3b3; } #MozillaGtkWidget.background scrollbar slider:disabled { background-color: transparent; } #MozillaGtkWidget.background *:not(menuitem):hover, #MozillaGtkWidget.background *:not(menuitem):hover button, #MozillaGtkWidget.background *:focus, #MozillaGtkWidget.background *:focus button, #MozillaGtkWidget.background *:active, #MozillaGtkWidget.background *:active button, #MozillaGtkWidget.background *:checked, #MozillaGtkWidget.background *:checked button { color: #dedede; } #MozillaGtkWidget.background > window.background > menu { background-color: #404040; border-radius: 0; border-color: rgba(255, 255, 255, 0.12); } #MozillaGtkWidget.background > window.background > menu > separator { margin-top: 2px; margin-bottom: 2px; background-color: rgba(255, 255, 255, 0.12); } #MozillaGtkWidget.background > widget border { border-color: rgba(255, 255, 255, 0.12); } #MozillaGtkWidget.background > widget separator { background-color: rgba(255, 255, 255, 0.12); } #MozillaGtkWidget.background > widget > scrolledwindow > textview { background-color: #404040; } #MozillaGtkWidget.background > widget > scrolledwindow > textview text { background-color: transparent; color: #aaaaaa; } /*************** * Chrome(ium) * ***************/ window.background.chromium headerbar.titlebar button.toggle { border: none; background-color: transparent; background-image: none; } window.background.chromium headerbar.titlebar button.toggle:hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); } window.background.chromium headerbar.titlebar button.toggle:checked, window.background.chromium headerbar.titlebar button.toggle:active { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } window.background.chromium headerbar.titlebar button.titlebutton { min-width: 16px; min-height: 16px; margin: 0; padding: 0 0; background-size: auto; color: transparent; } window.background.chromium button { border: none; } window.background.chromium entry.chromium, window.background.chromium entry.chromium:focus { border-image: none; border: 1px solid rgba(255, 255, 255, 0.12); } window.background.chromium > textview.view { background-color: #242424; } /**************** * Libre-Office * ****************/ window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal { background-image: none; background-color: transparent; box-shadow: inset 0 -1px rgba(255, 255, 255, 0.12); } window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.flat.small-button, window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.budgie-menu-launcher, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > .small-button#tasklist-button, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.flat.launcher { color: rgba(225, 219, 219, 0.8); border: none; border-radius: 50px; background-image: none; } window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.flat.small-button:hover, window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.budgie-menu-launcher:hover, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > .small-button#tasklist-button:hover, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.flat.launcher:hover { background-color: rgba(93, 93, 93, 0.98); color: rgba(237, 233, 233, 0.8); } window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.flat.small-button:active, window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.budgie-menu-launcher:active, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > .small-button#tasklist-button:active, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.flat.launcher:active, window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.flat.small-button:checked, window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.budgie-menu-launcher:checked, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > .small-button#tasklist-button:checked, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.flat.launcher:checked { background-color: rgba(255, 0, 0, 0.65); color: white; } window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.flat.small-button:disabled, window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.budgie-menu-launcher:disabled, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > .small-button#tasklist-button:disabled, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.flat.launcher:disabled { color: alpha(rgba(225, 219, 219, 0.8),0.6); } window.background:not(.solid-csd) > notebook:not(.frame) { border: 0 none transparent; background-color: #242424; } window.background:not(.solid-csd) > notebook:not(.frame) > stack { border: none; box-shadow: none; } window > box.vertical > box.horizontal > toolbar, window > box.vertical > box.horizontal > .inline-toolbar { background-color: transparent; box-shadow: none; } window > box.vertical > box.horizontal > toolbar toolitem > box label, window > box.vertical > box.horizontal > .inline-toolbar toolitem > box label, window > box.vertical > box.horizontal > toolbar toolitem > box entry, window > box.vertical > box.horizontal > .inline-toolbar toolitem > box entry { min-height: 20px; padding-top: 2px; padding-bottom: 2px; font-size: 90%; } window > box.vertical > box.horizontal > toolbar toolitem > box > label, window > box.vertical > box.horizontal > .inline-toolbar toolitem > box > label { color: #dedede; } window > box.vertical > box.horizontal > widget { background-color: transparent; } .panel { background-color: transparent; transition: all 100ms ease-in-out; color: white; } .panel.maximized { background-color: black; } .panel.translucent { background-color: rgba(0, 0, 0, 0.5); box-shadow: 0 1px 3px rgba(0, 0, 0, 0.24), 0 1px 1px rgba(0, 0, 0, 0.52); } .panel.color-light .translucent { background-color: rgba(255, 255, 255, 0.85); box-shadow: inset 0 -1px 1px rgba(255, 255, 255, 0.2), 0 1px 3px rgba(0, 0, 0, 0.24), 0 1px 1px rgba(0, 0, 0, 0.12); } .panel.color-light .composited-indicator > revealer label, .panel.color-light .composited-indicator > revealer image, .panel.color-light .composited-indicator > revealer spinner { background-color: rgba(255, 255, 255, 0.85); box-shadow: inset 0 -1px 1px rgba(255, 255, 255, 0.2), 0 1px 3px rgba(0, 0, 0, 0.24), 0 1px 1px rgba(0, 0, 0, 0.12); } .panel.color-light .composited-indicator .keyboard { background-color: rgba(0, 0, 0, 0.65); box-shadow: 0 0 2px rgba(255, 255, 255, 0.3), 0 1px 0 rgba(255, 255, 255, 0.25); color: #fff; text-shadow: none; } menubar .panel, .panel menubar { box-shadow: none; border: none; background: none; color: white; } .panel popover { padding: 2px 4px; } .panel popover button { border-color: transparent; background-color: transparent; box-shadow: none; } .panel popover button:hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); } .panel popover button:active { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } .panel popover button:active label { color: white; } .panel popover button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.35); text-shadow: none; -gtk-icon-shadow: none; } .panel popover button:checked label { color: white; } .panel popover button:disabled { background-color: transparent; } .panel popover button:disabled label, .panel popover button:disabled { color: rgba(222, 222, 222, 0.45); } .panel popover button, .panel popover button:hover, .panel popover button:active, .panel popover button:checked, .panel popover button:disabled { border-color: transparent; } .panel popover .linked > button { color: #dedede; background-color: #484848; border-color: rgba(255, 255, 255, 0.12); } .panel popover .linked > button:hover { color: #c5c5c5; border-color: rgba(255, 255, 255, 0.12); background-color: #5c5c5c; box-shadow: none; } .panel popover .linked > button:active, .panel popover .linked > button:checked { color: #ffffff; background-color: #0e6bff; border-color: #0e6bff; background-image: linear-gradient(180deg, #4c97fe 0%, #0564e3 100%); box-shadow: none; } .panel popover separator.horizontal { margin: 0 -4px; } .panel popover separator.vertical { background: none; } .panel popover .sidebar { border-style: none; background: none; } .panel popover .sidebar .view:hover, .panel popover .sidebar iconview:hover { border-radius: 5px; background-color: rgba(255, 255, 255, 0.1); } .panel popover .sidebar .view:selected, .panel popover .sidebar iconview:selected, .panel popover .sidebar .view:selected:focus, .panel popover .sidebar iconview:selected:focus { text-shadow: none; transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); background-color: rgba(255, 255, 255, 0.35); border-radius: 5px; } .composited-indicator { padding: 0 6px; } .composited-indicator > revealer label, .composited-indicator > revealer image, .composited-indicator > revealer spinner { color: #fff; font-weight: bold; text-shadow: 0 0 2px alpha #000, 0.3, 0 1px 2px alpha #000, 0.6; transition: all 200ms ease-in-out; -gtk-icon-shadow: 0 0 2px alpha #000, 0.3, 0 1px 2px alpha #000, 0.6; } .composited-indicator .keyboard { background-color: #fff; border-radius: 2px; box-shadow: 0 0 2px alpha #000, 0.3, 0 1px 2px alpha #000, 0.6; color: #333; font-weight: 600; padding: 0 3px; text-shadow: none; } UnityDecoration { -UnityDecoration-extents: 28px 1px 1px 1px; -UnityDecoration-input-extents: 10px; -UnityDecoration-shadow-offset-x: 0px; -UnityDecoration-shadow-offset-y: 6px; -UnityDecoration-active-shadow-color: rgba(0, 0, 0, 0.35); -UnityDecoration-active-shadow-radius: 12px; -UnityDecoration-inactive-shadow-color: rgba(0, 0, 0, 0.15); -UnityDecoration-inactive-shadow-radius: 7px; -UnityDecoration-glow-size: 10px; -UnityDecoration-glow-color: #498dff; -UnityDecoration-title-indent: 10px; -UnityDecoration-title-fade: 35px; -UnityDecoration-title-alignment: 0.0; } UnityDecoration.background { border-radius: 6px; background-color: transparent; } UnityDecoration .top { border: 1px solid rgba(255, 255, 255, 0.12); border-bottom-width: 0; border-radius: 6px 6px 0 0; padding: 1px 6px 0 6px; background-color: rgba(55, 55, 55, 0.98); background-image: none; color: rgba(225, 219, 219, 0.8); box-shadow: inset 0 1px rgba(63, 63, 63, 0.98); } UnityDecoration .top:backdrop { border-bottom-width: 0; color: rgba(225, 219, 219, 0.5); } UnityDecoration .left, UnityDecoration .right, UnityDecoration .bottom, UnityDecoration .left:backdrop, UnityDecoration .right:backdrop, UnityDecoration .bottom:backdrop { background-color: rgba(255, 255, 255, 0.12); } UnityPanelWidget, .unity-panel { background-color: rgba(47, 47, 47, 0.95); color: white; box-shadow: none; } UnityPanelWidget:backdrop, .unity-panel:backdrop { color: #e1e1e1; } .unity-panel.menubar.menuitem:hover, .unity-panel.menubar .menuitem *:hover { border-radius: 0; color: #ffffff; background-image: linear-gradient(to bottom, #498dff, #498dff); border-bottom: none; } .lightdm.menu { background-image: none; background-color: rgba(0, 0, 0, 0.4); border-color: rgba(255, 255, 255, 0.8); border-radius: 4px; padding: 1px; color: white; } .lightdm-combo .menu { background-color: rgba(75, 75, 75, 0.98); border-radius: 0px; padding: 0px; color: white; } .lightdm.menu .menuitem *, .lightdm.menu .menuitem.check:active, .lightdm.menu .menuitem.radio:active { color: white; } .lightdm.menubar { color: rgba(255, 255, 255, 0.8); background-image: none; background-color: rgba(0, 0, 0, 0.5); } .lightdm.menubar > .menuitem { padding: 2px 6px; } .lightdm-combo.combobox-entry .button, .lightdm-combo .cell, .lightdm-combo .button, .lightdm-combo .entry, .lightdm.button, .lightdm.entry { background-image: none; background-color: rgba(0, 0, 0, 0.3); border-color: rgba(255, 255, 255, 0.4); border-radius: 10px; padding: 7px; color: white; text-shadow: none; } .lightdm.button, .lightdm.button:hover, .lightdm.button:active, .lightdm.button:active:focus, .lightdm.entry, .lightdm.entry:hover, .lightdm.entry:active, .lightdm.entry:active:focus { background-image: none; border-image: none; } .lightdm.button:focus, .lightdm.entry:focus { border-color: rgba(255, 255, 255, 0.1); border-width: 1px; border-style: solid; color: white; } .lightdm.entry:selected { background-color: rgba(255, 255, 255, 0.8); } .lightdm.entry:active { -gtk-icon-source: -gtk-icontheme("process-working-symbolic"); animation: dashentry_spinner 1s infinite linear; } .lightdm.option-button { padding: 2px; background: none; border: 0; } .lightdm.toggle-button { background: none; border-width: 0; } .lightdm.toggle-button.selected { background-color: rgba(0, 0, 0, 0.7); border-width: 1px; } @keyframes dashentry_spinner { to { -gtk-icon-transform: rotate(1turn); } } .overlay-bar { background-color: #498dff; border-color: #498dff; border-radius: 2px; padding: 3px 6px; margin: 3px; } .overlay-bar label { color: #ffffff; } GraniteWidgetsThinPaned { background-color: transparent; background-image: none; margin: 0; border-left: 1px solid rgba(255, 255, 255, 0.12); border-right: 1px solid rgba(255, 255, 255, 0.12); } GraniteWidgetsPopOver .frame, GraniteWidgetsStaticNotebook .frame { border: none; } .help_button { border-radius: 100px; padding: 3px 9px; } toolbar.secondary-toolbar, .secondary-toolbar.inline-toolbar { padding: 3px; border-bottom: 1px solid rgba(255, 255, 255, 0.12); } toolbar.secondary-toolbar button, .secondary-toolbar.inline-toolbar button { padding: 0 3px 0 3px; } toolbar.bottom-toolbar, .bottom-toolbar.inline-toolbar { padding: 5px; border-width: 1px 0 0 0; border-style: solid; border-color: rgba(255, 255, 255, 0.12); background-color: #333333; } toolbar.bottom-toolbar button, .bottom-toolbar.inline-toolbar button { padding: 2px 3px 2px 3px; } .source-list { -GtkTreeView-horizontal-separator: 1px; -GtkTreeView-vertical-separator: 6px; } .source-list, .source-list.view, iconview.source-list { background-color: #333333; color: #dedede; -gtk-icon-style: regular; } .source-list.category-expander { color: transparent; } .source-list.view:hover, iconview.source-list:hover { background-color: #404040; } .source-list.view:selected, iconview.source-list:selected, .source-list.view:hover:selected, iconview.source-list:hover:selected, .source-list.view:selected:focus, iconview.source-list:selected:focus, .source-list.category-expander:hover { color: #ffffff; background-color: #498dff; } .source-list scrollbar, .source-list junction { border-image: none; border-color: transparent; background-color: #333333; background-image: none; } .source-list.badge, .source-list.badge:hover, .source-list.badge:selected, .source-list.badge:selected:focus, .source-list.badge:hover:selected { background-image: none; background-color: #498dff; color: #ffffff; border-radius: 10px; padding: 0 6px; margin: 0 3px; border-width: 0; } .source-list.badge:selected, .source-list.badge:selected:focus, .source-list.badge:hover:selected { background-color: #ffffff; color: #498dff; } .source-list.category-expander { color: #dedede; -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); -GtkTreeView-expander-size: 16; } .source-list.category-expander, .source-list.category-expander:backdrop { color: transparent; border: none; } .source-list.category-expander:checked { -gtk-icon-source: -gtk-icontheme("pan-down-symbolic"); } GraniteWidgetsWelcome { background-color: #242424; } GraniteWidgetsWelcome label { color: #898989; font-size: 11px; text-shadow: none; } GraniteWidgetsWelcome .h1, GraniteWidgetsWelcome .h3 { color: rgba(222, 222, 222, 0.8); } .help_button { border-radius: 0; } GraniteWidgetsPopOver { -GraniteWidgetsPopOver-arrow-width: 21; -GraniteWidgetsPopOver-arrow-height: 10; -GraniteWidgetsPopOver-border-radius: 2px; -GraniteWidgetsPopOver-border-width: 1; -GraniteWidgetsPopOver-shadow-size: 12; border: 1px solid rgba(0, 0, 0, 0.3); margin: 0; } .popover_bg { background-image: linear-gradient(to bottom, #242424, #242424); border: 1px solid rgba(0, 0, 0, 0.3); } GraniteWidgetsPopOver .sidebar.view, GraniteWidgetsPopOver iconview.sidebar, GraniteWidgetsPopOver * { background-color: transparent; } GraniteWidgetsXsEntry entry { padding: 4px; } .h1 { font-size: 24px; } .h2 { font-size: 18px; } .h3 { font-size: 11px; } .h4, .category-label { color: #ababab; font-weight: 600; } .h4 { padding-bottom: 6px; padding-top: 6px; } GtkListBox .h4 { padding-left: 6px; } #panel_window { background-color: rgba(47, 47, 47, 0.94); color: #dedede; font-weight: bold; box-shadow: inset 0 -1px rgba(29, 29, 29, 0.94); } #panel_window menubar { padding-left: 5px; } #panel_window menubar, #panel_window menubar > menuitem { background-color: transparent; color: #dedede; font-weight: bold; } #panel_window menubar menuitem:disabled { color: rgba(222, 222, 222, 0.5); } #panel_window menubar menuitem:disabled label { color: inherit; } #panel_window menubar menu > menuitem { font-weight: normal; } #login_window, #shutdown_dialog, #restart_dialog { font-weight: normal; border-style: none; background-color: transparent; color: #dedede; } #content_frame { padding-bottom: 14px; background-color: #333333; border-top-left-radius: 2px; border-top-right-radius: 2px; border: solid rgba(0, 0, 0, 0.1); border-width: 1px 1px 0 1px; } #content_frame button { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: #484848; } #content_frame button:hover { color: #c5c5c5; border-color: rgba(255, 255, 255, 0.12); background-color: #5c5c5c; box-shadow: none; } #content_frame button:active, #content_frame button:checked { color: #ffffff; background-color: #0e6bff; border-color: #0e6bff; background-image: linear-gradient(180deg, #4c97fe 0%, #0564e3 100%); box-shadow: none; } #content_frame button:disabled { border-color: rgba(255, 255, 255, 0.12); background-color: rgba(72, 72, 72, 0.55); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } #content_frame button:disabled label, #content_frame button:disabled { color: rgba(222, 222, 222, 0.45); } #buttonbox_frame { padding-top: 20px; padding-bottom: 0px; border-style: none; background-color: rgba(55, 55, 55, 0.98); border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border: solid rgba(0, 0, 0, 0.1); border-width: 0 1px 1px 1px; box-shadow: inset 0 1px #484848; } #buttonbox_frame button { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(92, 92, 92, 0.35); } #buttonbox_frame button:hover { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(110, 110, 110, 0.45); } #buttonbox_frame button:active, #buttonbox_frame button:checked { color: #ffffff; border-color: rgba(255, 255, 255, 0.12); background-color: #498dff; } #buttonbox_frame button:disabled { color: #5c5c5c; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(92, 92, 92, 0.2); } #login_window #user_combobox { color: #dedede; font-size: 13px; } #login_window #user_combobox menu { font-weight: normal; } #user_image { padding: 3px; border-radius: 2px; } #shutdown_button.button { background-clip: border-box; color: green; background-color: #f8464c; border-color: #f6151c; background-image: none; } #shutdown_button.button:hover { background-clip: border-box; color: green; background-color: #fa777c; border-color: #f8464c; background-image: none; } #shutdown_button.button:active, #shutdown_button.button:checked { background-clip: border-box; color: green; background-color: #f6151c; border-color: #d0080f; background-image: none; } #restart_button.button { background-clip: border-box; color: green; background-color: #3484e2; border-color: #1c6bc7; background-image: none; } #restart_button.button:hover { background-clip: border-box; color: green; background-color: #619fe8; border-color: #3484e2; background-image: none; } #restart_button.button:active, #restart_button.button:checked { background-clip: border-box; color: green; background-color: #1c6bc7; border-color: #16539a; background-image: none; } #greeter_infobar { border-bottom-width: 0; font-weight: bold; } .nautilus-window paned > separator { background-image: linear-gradient(to bottom, #484848, #484848); } filechooser paned > separator { background-image: linear-gradient(to bottom, #484848, #484848); } filechooser.csd.background, filechooser placessidebar list, .nautilus-window.csd.background, .nautilus-window placessidebar list { background-color: transparent; } filechooser.csd.background, filechooser placessidebar, .nautilus-window.csd.background, .nautilus-window placessidebar { background-color: rgba(59, 59, 59, 0.94); border-radius: 0 0 6px 6px; } filechooser placessidebar.sidebar, .nautilus-window placessidebar.sidebar { border-right: none; background-color: transparent; } filechooser placessidebar.sidebar row.sidebar-row, .nautilus-window placessidebar.sidebar row.sidebar-row { color: #dedede; } filechooser placessidebar.sidebar row.sidebar-row .sidebar-icon, .nautilus-window placessidebar.sidebar row.sidebar-row .sidebar-icon { color: rgba(222, 222, 222, 0.85); } filechooser placessidebar.sidebar row.sidebar-row.has-open-popup, filechooser placessidebar.sidebar row.sidebar-row.has-open-popup label, filechooser placessidebar.sidebar row.sidebar-row.has-open-popup image, filechooser placessidebar.sidebar row.sidebar-row:disabled, filechooser placessidebar.sidebar row.sidebar-row:disabled label, filechooser placessidebar.sidebar row.sidebar-row:disabled image, .nautilus-window placessidebar.sidebar row.sidebar-row.has-open-popup, .nautilus-window placessidebar.sidebar row.sidebar-row.has-open-popup label, .nautilus-window placessidebar.sidebar row.sidebar-row.has-open-popup image, .nautilus-window placessidebar.sidebar row.sidebar-row:disabled, .nautilus-window placessidebar.sidebar row.sidebar-row:disabled label, .nautilus-window placessidebar.sidebar row.sidebar-row:disabled image { color: rgba(222, 222, 222, 0.4); } filechooser placessidebar.sidebar row.sidebar-row:backdrop, .nautilus-window placessidebar.sidebar row.sidebar-row:backdrop { opacity: 0.85; } filechooser placessidebar.sidebar row.sidebar-row:selected.has-open-popup, filechooser placessidebar.sidebar row.sidebar-row:selected, filechooser placessidebar.sidebar row.sidebar-row:selected:hover, filechooser placessidebar.sidebar row.sidebar-row:active:hover, .nautilus-window placessidebar.sidebar row.sidebar-row:selected.has-open-popup, .nautilus-window placessidebar.sidebar row.sidebar-row:selected, .nautilus-window placessidebar.sidebar row.sidebar-row:selected:hover, .nautilus-window placessidebar.sidebar row.sidebar-row:active:hover { color: #dedede; background-color: rgba(199, 199, 199, 0.25); } filechooser placessidebar.sidebar row.sidebar-row:selected.has-open-popup, filechooser placessidebar.sidebar row.sidebar-row:selected.has-open-popup label, filechooser placessidebar.sidebar row.sidebar-row:selected.has-open-popup image, filechooser placessidebar.sidebar row.sidebar-row:selected, filechooser placessidebar.sidebar row.sidebar-row:selected label, filechooser placessidebar.sidebar row.sidebar-row:selected image, filechooser placessidebar.sidebar row.sidebar-row:selected:hover, filechooser placessidebar.sidebar row.sidebar-row:selected:hover label, filechooser placessidebar.sidebar row.sidebar-row:selected:hover image, filechooser placessidebar.sidebar row.sidebar-row:active:hover, filechooser placessidebar.sidebar row.sidebar-row:active:hover label, filechooser placessidebar.sidebar row.sidebar-row:active:hover image, .nautilus-window placessidebar.sidebar row.sidebar-row:selected.has-open-popup, .nautilus-window placessidebar.sidebar row.sidebar-row:selected.has-open-popup label, .nautilus-window placessidebar.sidebar row.sidebar-row:selected.has-open-popup image, .nautilus-window placessidebar.sidebar row.sidebar-row:selected, .nautilus-window placessidebar.sidebar row.sidebar-row:selected label, .nautilus-window placessidebar.sidebar row.sidebar-row:selected image, .nautilus-window placessidebar.sidebar row.sidebar-row:selected:hover, .nautilus-window placessidebar.sidebar row.sidebar-row:selected:hover label, .nautilus-window placessidebar.sidebar row.sidebar-row:selected:hover image, .nautilus-window placessidebar.sidebar row.sidebar-row:active:hover, .nautilus-window placessidebar.sidebar row.sidebar-row:active:hover label, .nautilus-window placessidebar.sidebar row.sidebar-row:active:hover image { color: #dedede; } filechooser placessidebar.sidebar row.sidebar-row:not(:selected) button.sidebar-button, .nautilus-window placessidebar.sidebar row.sidebar-row:not(:selected) button.sidebar-button { color: #dedede; } filechooser placessidebar.sidebar row.sidebar-row:not(:selected) button.sidebar-button:hover, .nautilus-window placessidebar.sidebar row.sidebar-row:not(:selected) button.sidebar-button:hover { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(110, 110, 110, 0.45); } filechooser placessidebar.sidebar row.sidebar-row:not(:selected) button.sidebar-button:active, .nautilus-window placessidebar.sidebar row.sidebar-row:not(:selected) button.sidebar-button:active { color: #ffffff; background-color: #0e6bff; border-color: #0e6bff; background-image: linear-gradient(180deg, #4c97fe 0%, #0564e3 100%); box-shadow: none; } filechooser placessidebar.sidebar row.sidebar-row:not(:selected) button.sidebar-button:not(:hover):not(:active) > image, .nautilus-window placessidebar.sidebar row.sidebar-row:not(:selected) button.sidebar-button:not(:hover):not(:active) > image { opacity: 0.5; } filechooser placessidebar.sidebar row.sidebar-row.sidebar-new-bookmark-row, .nautilus-window placessidebar.sidebar row.sidebar-row.sidebar-new-bookmark-row { color: #498dff; } filechooser placessidebar.sidebar row.sidebar-row.sidebar-new-bookmark-row .sidebar-icon, .nautilus-window placessidebar.sidebar row.sidebar-row.sidebar-new-bookmark-row .sidebar-icon { color: inherit; } filechooser placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled), filechooser placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled) label, filechooser placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled) .sidebar-icon, .nautilus-window placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled), .nautilus-window placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled) label, .nautilus-window placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled) .sidebar-icon { color: #dedede; } filechooser placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled):selected, .nautilus-window placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled):selected { background-color: #F08437; } filechooser placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled):selected, filechooser placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled):selected label, filechooser placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled):selected .sidebar-icon, .nautilus-window placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled):selected, .nautilus-window placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled):selected label, .nautilus-window placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled):selected .sidebar-icon { color: #dedede; } filechooser placessidebar.sidebar separator, .nautilus-window placessidebar.sidebar separator { background-color: transparent; } filechooser.maximized placessidebar, .nautilus-window.maximized placessidebar { border-radius: 0; } filechooser.maximized placessidebar.sidebar, .nautilus-window.maximized placessidebar.sidebar { background-color: #3b3b3b; } .nemo-window .sidebar { color: #dedede; background-color: rgba(59, 59, 59, 0.94); } .nemo-window .sidebar .view, .nemo-window .sidebar iconview, .nemo-window .sidebar row { background-color: transparent; color: #dedede; } .nemo-window .sidebar .view.cell:selected, .nemo-window .sidebar iconview.cell:selected, .nemo-window .sidebar row.cell:selected { background-color: #498dff; color: #ffffff; } .nemo-window .sidebar .view.expander, .nemo-window .sidebar iconview.expander, .nemo-window .sidebar row.expander { color: rgba(145, 145, 145, 0.97); } .nemo-window .sidebar .view.expander:hover, .nemo-window .sidebar iconview.expander:hover, .nemo-window .sidebar row.expander:hover { color: #dedede; } .nemo-window .sidebar separator { background-color: transparent; } .caja-side-pane, .caja-side-pane > notebook > stack > widget > box, .caja-side-pane text, .caja-side-pane treeview { color: #dedede; caret-color: #dedede; background-color: #3b3b3b; } .caja-side-pane > box button:not(:active):not(:checked) { color: #dedede; } .caja-side-pane .frame { border-color: rgba(255, 255, 255, 0.12); } .caja-side-pane junction { background-color: rgba(46, 46, 46, 0.94); } filechooser actionbar { color: #dedede; background-color: rgba(59, 59, 59, 0.94); border-color: rgba(255, 255, 255, 0.12); } filechooser actionbar label, filechooser actionbar combobox { color: #dedede; } .gedit-bottom-panel-paned { background-color: #242424; } .gedit-side-panel-paned > separator { background-image: linear-gradient(to bottom, #484848, #484848); } .gedit-bottom-panel-paned > separator { background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.12), rgba(255, 255, 255, 0.12)); } .gedit-document-panel { background-color: rgba(59, 59, 59, 0.94); } .maximized .gedit-document-panel { background-color: #3b3b3b; } .gedit-document-panel row { color: #dedede; background-color: rgba(222, 222, 222, 0); } .gedit-document-panel row:hover { background-color: rgba(222, 222, 222, 0.15); } .gedit-document-panel row:active { color: #ffffff; background-color: #498dff; } .gedit-document-panel row:active button { color: #ffffff; } .gedit-document-panel row:selected, .gedit-document-panel row:selected:hover { color: #ffffff; background-color: #498dff; } .gedit-document-panel row:hover:not(:selected) button:active { color: #dedede; } filechooser actionbar button { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: #484848; } .caja-side-pane > box button:hover:not(:active), filechooser actionbar button:hover { color: #c5c5c5; border-color: rgba(255, 255, 255, 0.12); background-color: #5c5c5c; box-shadow: none; } filechooser actionbar button:active, filechooser actionbar button:checked { color: #ffffff; background-color: #0e6bff; border-color: #0e6bff; background-image: linear-gradient(180deg, #4c97fe 0%, #0564e3 100%); box-shadow: none; } filechooser actionbar button:disabled { border-color: rgba(255, 255, 255, 0.12); background-color: rgba(72, 72, 72, 0.55); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } filechooser actionbar button:disabled label, filechooser actionbar button:disabled { color: rgba(222, 222, 222, 0.45); } filechooser actionbar entry { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: #242424; } filechooser actionbar entry:focus { color: #dedede; border-color: #8eb9ff; background-color: #242424; box-shadow: inset 0 0 0 2px #8eb9ff; } filechooser actionbar entry:disabled { color: rgba(222, 222, 222, 0.45); border-color: rgba(255, 255, 255, 0.12); background-color: rgba(36, 36, 36, 0.55); } filechooser placessidebar.sidebar scrollbar, .nautilus-window placessidebar.sidebar scrollbar, .nemo-window .sidebar scrollbar, .caja-side-pane scrollbar { border-color: transparent; } filechooser placessidebar.sidebar scrollbar.overlay-indicator:not(.dragging):not(.hovering) slider, .nautilus-window placessidebar.sidebar scrollbar.overlay-indicator:not(.dragging):not(.hovering) slider, .nemo-window .sidebar scrollbar.overlay-indicator:not(.dragging):not(.hovering) slider, .caja-side-pane scrollbar.overlay-indicator:not(.dragging):not(.hovering) slider { background-color: rgba(255, 255, 255, 0.35); border: none; } filechooser placessidebar.sidebar scrollbar slider, .nautilus-window placessidebar.sidebar scrollbar slider, .nemo-window .sidebar scrollbar slider, .caja-side-pane scrollbar slider { min-width: 4px; background-color: rgba(255, 255, 255, 0.7); } filechooser placessidebar.sidebar scrollbar slider:hover, .nautilus-window placessidebar.sidebar scrollbar slider:hover, .nemo-window .sidebar scrollbar slider:hover, .caja-side-pane scrollbar slider:hover { background-color: white; } filechooser placessidebar.sidebar scrollbar slider:hover:active, .nautilus-window placessidebar.sidebar scrollbar slider:hover:active, .nemo-window .sidebar scrollbar slider:hover:active, .caja-side-pane scrollbar slider:hover:active { background-color: rgba(132, 132, 132, 0.98); } filechooser placessidebar.sidebar scrollbar slider:disabled, .nautilus-window placessidebar.sidebar scrollbar slider:disabled, .nemo-window .sidebar scrollbar slider:disabled, .caja-side-pane scrollbar slider:disabled { background-color: transparent; } filechooser placessidebar.sidebar scrollbar trough, .nautilus-window placessidebar.sidebar scrollbar trough, .nemo-window .sidebar scrollbar trough, .caja-side-pane scrollbar trough { background-color: transparent; } @define-color theme_fg_color #dedede; @define-color theme_text_color #dedede; @define-color theme_bg_color #333333; @define-color theme_base_color #242424; @define-color theme_selected_bg_color #498dff; @define-color theme_selected_fg_color #ffffff; @define-color fg_color #dedede; @define-color text_color #dedede; @define-color bg_color #333333; @define-color base_color #242424; @define-color selected_bg_color #498dff; @define-color selected_fg_color #ffffff; @define-color insensitive_bg_color #383838; @define-color insensitive_fg_color alpha(#dedede, 0.5); @define-color insensitive_base_color #242424; @define-color theme_unfocused_fg_color #dedede; @define-color theme_unfocused_text_color #dedede; @define-color theme_unfocused_bg_color #333333; @define-color theme_unfocused_base_color #242424; @define-color borders rgba(255, 255, 255, 0.12); @define-color unfocused_borders rgba(255, 255, 255, 0.12); @define-color warning_color #F27835; @define-color error_color #FC4138; @define-color success_color #71c837; @define-color placeholder_text_color #A8A8A8; @define-color link_color #3484e2; @define-color content_view_bg #242424; /****************** * Budgie Desktop * ******************/ .budgie-settings-window buttonbox.inline-toolbar button, .budgie-popover:not(.budgie-menu) button.flat:not(.image-button), .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:not(.image-button), .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:not(.image-button), .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:not(.image-button), .workspace-switcher .workspace-add-button, .raven-mpris button.image-button, .drop-shadow button, window.budgie-switcher-window .drop-shadow button { border: none; background-color: transparent; box-shadow: none; } .budgie-settings-window buttonbox.inline-toolbar button:hover, .budgie-popover:not(.budgie-menu) button.flat:hover:not(.image-button), .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:hover:not(.image-button), .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:hover:not(.image-button), .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:hover:not(.image-button), .workspace-switcher .workspace-add-button:hover, .raven-mpris button.image-button:hover, .drop-shadow button:hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); } .budgie-settings-window buttonbox.inline-toolbar button:checked, .budgie-popover:not(.budgie-menu) button.flat:checked:not(.image-button), .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:checked:not(.image-button), .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:checked:not(.image-button), .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:checked:not(.image-button), .workspace-switcher .workspace-add-button:checked, .raven-mpris button.image-button:checked, .drop-shadow button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.35); text-shadow: none; -gtk-icon-shadow: none; } .budgie-settings-window buttonbox.inline-toolbar button:active, .budgie-popover:not(.budgie-menu) button.flat:active:not(.image-button), .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:active:not(.image-button), .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:active:not(.image-button), .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:active:not(.image-button), .workspace-switcher .workspace-add-button:active, .raven-mpris button.image-button:active, .drop-shadow button:active { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } .budgie-settings-window buttonbox.inline-toolbar button:disabled, .budgie-popover:not(.budgie-menu) button.flat:disabled:not(.image-button), .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:disabled:not(.image-button), .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:disabled:not(.image-button), .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:disabled:not(.image-button), .workspace-switcher .workspace-add-button:disabled, .raven-mpris button.image-button:disabled, .drop-shadow button:disabled { background-color: transparent; } .budgie-settings-window buttonbox.inline-toolbar button:disabled label, .budgie-popover:not(.budgie-menu) button.flat:disabled:not(.image-button) label, .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:disabled:not(.image-button) label, .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:disabled:not(.image-button) label, .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:disabled:not(.image-button) label, .workspace-switcher .workspace-add-button:disabled label, .raven-mpris button.image-button:disabled label, .drop-shadow button:disabled label, .budgie-settings-window buttonbox.inline-toolbar button:disabled, .budgie-popover:not(.budgie-menu) button.flat:disabled:not(.image-button), .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:disabled:not(.image-button), .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:disabled:not(.image-button), .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:disabled:not(.image-button), .workspace-switcher .workspace-add-button:disabled, .raven-mpris button.image-button:disabled, .drop-shadow button:disabled { color: rgba(222, 222, 222, 0.45); } .raven .raven-header:not(.top) button { border: none; background-color: transparent; color: #dedede; box-shadow: none; } .raven .raven-header:not(.top) button:hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); } .raven .raven-header:not(.top) button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.35); text-shadow: none; -gtk-icon-shadow: none; } .raven .raven-header:not(.top) button:active { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } .raven .raven-header:not(.top) button:disabled { background-color: transparent; } .raven .raven-header:not(.top) button:disabled label, .raven .raven-header:not(.top) button:disabled { color: rgba(222, 222, 222, 0.45); } .budgie-container { background-color: transparent; } .budgie-settings-window buttonbox.inline-toolbar { border-style: none none solid; } .budgie-settings-window buttonbox.inline-toolbar button { border-radius: 5px; -gtk-outline-radius: 5px; } .budgie-popover { margin: 0; padding: 0; border: 1px solid rgba(255, 255, 255, 0.12); border-radius: 6px; box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.3), 0 2px 3px 0 rgba(0, 0, 0, 0.3); background-color: rgba(51, 51, 51, 0.95); } .budgie-popover .container { padding: 2px; } .budgie-popover border { border: none; } .budgie-popover list { background-color: transparent; } .budgie-popover row { padding: 0; background-color: transparent; } .budgie-popover row:hover { box-shadow: none; background-color: transparent; } .budgie-popover:not(.budgie-menu) button.flat:not(.image-button), .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:not(.image-button), .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:not(.image-button), .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:not(.image-button) { min-height: 28px; padding: 0 8px; color: #dedede; font-weight: normal; } .budgie-popover:not(.budgie-menu) button.flat:not(.image-button):disabled, .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:not(.image-button):disabled, .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:not(.image-button):disabled, .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:not(.image-button):disabled { color: rgba(222, 222, 222, 0.45); } .budgie-popover.budgie-menu .container { padding: 0; } .budgie-popover.user-menu .container { padding: 8px; } .budgie-popover.user-menu separator { margin: 4px 0; } .budgie-popover.sound-popover separator { margin: 3px 0; } .budgie-popover.night-light-indicator .container { padding: 8px; } .budgie-popover.places-menu .container { padding: 8px; } .budgie-popover.places-menu .places-list:not(.always-expand) { margin-top: 4px; padding-top: 4px; border-top: 1px solid rgba(255, 255, 255, 0.12); } .budgie-popover.places-menu .alternative-label { padding: 3px; font-size: 15px; } .budgie-popover.workspace-popover .container { padding: 2px 8px 8px; } .budgie-popover.workspace-popover separator { margin: 4px 0; } .budgie-popover.workspace-popover flowboxchild { padding: 0; } .workspace-switcher .workspace-layout { border: 0 solid rgba(255, 255, 255, 0.12); } .top .workspace-switcher .workspace-layout:dir(ltr), .bottom .workspace-switcher .workspace-layout:dir(ltr) { border-left-width: 1px; } .top .workspace-switcher .workspace-layout:dir(rtl), .bottom .workspace-switcher .workspace-layout:dir(rtl) { border-right-width: 1px; } .left .workspace-switcher .workspace-layout, .right .workspace-switcher .workspace-layout { border-top-width: 1px; } .workspace-switcher .workspace-item, .workspace-switcher .workspace-add-button { border: 0 solid rgba(255, 255, 255, 0.12); } .top .workspace-switcher .workspace-item:dir(ltr), .bottom .workspace-switcher .workspace-item:dir(ltr), .top .workspace-switcher .workspace-add-button:dir(ltr), .bottom .workspace-switcher .workspace-add-button:dir(ltr) { border-right-width: 1px; } .top .workspace-switcher .workspace-item:dir(rtl), .bottom .workspace-switcher .workspace-item:dir(rtl), .top .workspace-switcher .workspace-add-button:dir(rtl), .bottom .workspace-switcher .workspace-add-button:dir(rtl) { border-left-width: 1px; } .left .workspace-switcher .workspace-item, .right .workspace-switcher .workspace-item, .left .workspace-switcher .workspace-add-button, .right .workspace-switcher .workspace-add-button { border-bottom-width: 1px; } .workspace-switcher .workspace-item { transition: all 0.2s cubic-bezier(0, 0, 0.2, 1); } .workspace-switcher .workspace-item.current-workspace { background-color: rgba(255, 255, 255, 0.12); } .workspace-switcher .workspace-add-button { background-color: transparent; background-image: none; } .workspace-switcher .workspace-add-button:hover { box-shadow: none; } .workspace-switcher .workspace-add-button:active { background-image: none; } .workspace-switcher .workspace-add-button:active image { margin: 1px 0 -1px; } .budgie-panel .workspace-switcher .workspace-icon-button { min-height: 24px; min-width: 24px; padding: 0; border-radius: 5px; } .budgie-menu.background { padding: 0; background-color: #242424; } .budgie-menu scrollbar, .budgie-menu entry.search { background-color: transparent; } .budgie-menu entry.search { border: none; border-bottom: 1px solid rgba(255, 255, 255, 0.12); border-radius: 0; box-shadow: none; font-size: 120%; } .budgie-menu .categories:dir(ltr) { border-bottom-left-radius: 5px; } .budgie-menu .categories:dir(rtl) { border-bottom-right-radius: 5px; } .budgie-menu button { min-height: 32px; padding: 0 8px; border-radius: 0; color: #dedede; font-weight: normal; border: none; } .budgie-menu button:disabled { color: rgba(222, 222, 222, 0.45); } .budgie-menu button:checked:disabled { background-color: #498dff; } .budgie-menu row { padding: 0; } .budgie-menu row:hover { box-shadow: none; } popover.background.user-menu { padding: 8px; } popover.background.user-menu .content-box { background-color: transparent; } popover.background.user-menu separator { margin: 4px 0; } popover.background.user-menu row { padding: 0; box-shadow: none; background-image: none; } popover.background.places-menu { padding: 8px; } popover.background.places-menu .name-button.text-button { padding-left: 8px; padding-right: 8px; } popover.background.places-menu .name-button.text-button image:dir(ltr) { margin-right: 3px; } popover.background.places-menu .name-button.text-button image:dir(rtl) { margin-left: 3px; } popover.background.places-menu .places-section-header > image:dir(ltr) { margin: 0 -2px 0 5px; } popover.background.places-menu .places-section-header > image:dir(rtl) { margin: 0 5px 0 -2px; } popover.background.places-menu .places-list { margin-top: 4px; padding-top: 4px; border-top: 1px solid rgba(255, 255, 255, 0.12); background-color: transparent; } popover.background.places-menu row { padding: 0; box-shadow: none; background-image: none; } .budgie-panel { transition: background-color 0.2s cubic-bezier(0, 0, 0.2, 1); background-color: rgba(55, 55, 55, 0.98); color: rgba(225, 219, 219, 0.8); font-weight: 500; } .budgie-panel.transparent { background-color: rgba(55, 55, 55, 0.65); } .budgie-panel button { min-height: 16px; min-width: 16px; padding: 0; border-radius: 0; border-top-width: 0; border-bottom-width: 0; border: none; color: rgba(225, 219, 219, 0.8); } .budgie-panel button:active { background-color: rgba(225, 219, 219, 0.15); color: rgba(225, 219, 219, 0.75); } .budgie-panel button:checked { background-color: rgba(225, 219, 219, 0.12); color: rgba(225, 219, 219, 0.8); } .budgie-panel.horizontal button { padding: 0 4px; } .budgie-panel.vertical button { padding: 4px 0; } .budgie-panel separator { background-color: rgba(255, 255, 255, 0.12); } .budgie-panel menubar, .budgie-panel .menubar { box-shadow: none; color: rgba(225, 219, 219, 0.8); background-image: none; background-color: transparent; } .budgie-panel menubar > menuitem, .budgie-panel .menubar > menuitem { border: none; background-image: none; } .budgie-panel menubar > menuitem menu, .budgie-panel .menubar > menuitem menu { border-radius: 0 0 6px 6px; } .budgie-panel menubar > menuitem menu menu, .budgie-panel .menubar > menuitem menu menu { border-radius: 6px; } .budgie-panel menubar > menuitem:hover, .budgie-panel .menubar > menuitem:hover { background-color: #498dff; } .budgie-panel menubar > menuitem:disabled, .budgie-panel .menubar > menuitem:disabled { color: rgba(225, 219, 219, 0.2); } .budgie-panel .alert { color: #f8464c; } .budgie-panel #tasklist-button { padding: 0 4px; } .budgie-panel.vertical #tasklist-button { min-height: 32px; } .budgie-panel button.launcher.budgie-menu-launcher, .budgie-panel .launcher#tasklist-button, .budgie-panel button.launcher.flat { padding: 0; } .budgie-panel button.launcher.budgie-menu-launcher:not(:checked), .budgie-panel .launcher#tasklist-button:not(:checked), .budgie-panel button.launcher.flat:not(:checked) { color: #dedede; } .budgie-panel button.launcher.budgie-menu-launcher:not(:checked):hover, .budgie-panel .launcher#tasklist-button:not(:checked):hover, .budgie-panel button.launcher.flat:not(:checked):hover, .budgie-panel button.launcher.budgie-menu-launcher:not(:checked):active, .budgie-panel .launcher#tasklist-button:not(:checked):active, .budgie-panel button.launcher.flat:not(:checked):active { color: rgba(222, 222, 222, 0.8); } .budgie-panel button.launcher.budgie-menu-launcher:not(:checked):disabled, .budgie-panel .launcher#tasklist-button:not(:checked):disabled, .budgie-panel button.launcher.flat:not(:checked):disabled { color: rgba(222, 222, 222, 0.5); } .budgie-panel button.launcher.budgie-menu-launcher:active, .budgie-panel .launcher#tasklist-button:active, .budgie-panel button.launcher.flat:active { background-color: rgba(222, 222, 222, 0.2); } .budgie-panel button.launcher.budgie-menu-launcher:checked, .budgie-panel .launcher#tasklist-button:checked, .budgie-panel button.launcher.flat:checked { background-color: rgba(222, 222, 222, 0.15); } .top .budgie-panel #tasklist-button, .budgie-panel .top #tasklist-button, .top .budgie-panel button.flat.launcher, .budgie-panel .top button.flat.launcher { border-image: radial-gradient(circle closest-corner at center calc(1px), #0e6bff 0%, transparent 0%) 0 0 0 0/0 0 0 0; } .top .budgie-panel #tasklist-button:checked, .budgie-panel .top #tasklist-button:checked, .top .budgie-panel button.flat.launcher:checked, .budgie-panel .top button.flat.launcher:checked, .top .budgie-panel .unpinned button.launcher.budgie-menu-launcher, .budgie-panel .unpinned .top button.launcher.budgie-menu-launcher, .top .budgie-panel .unpinned .launcher#tasklist-button, .budgie-panel .unpinned .top .launcher#tasklist-button, .top .budgie-panel .unpinned button.launcher.flat, .budgie-panel .unpinned .top button.launcher.flat, .top .budgie-panel .pinned button.launcher.running.budgie-menu-launcher, .budgie-panel .pinned .top button.launcher.running.budgie-menu-launcher, .top .budgie-panel .pinned .launcher.running#tasklist-button, .budgie-panel .pinned .top .launcher.running#tasklist-button, .top .budgie-panel .pinned button.launcher.running.flat, .budgie-panel .pinned .top button.launcher.running.flat { border-image: radial-gradient(circle closest-corner at center calc(1px), #0e6bff 100%, transparent 0%) 2 0 0 0/2px 0 0 0; } .bottom .budgie-panel #tasklist-button, .budgie-panel .bottom #tasklist-button, .bottom .budgie-panel button.flat.launcher, .budgie-panel .bottom button.flat.launcher { border-image: radial-gradient(circle closest-corner at center calc(100% - 1px), #0e6bff 0%, transparent 0%) 0 0 0 0/0 0 0 0; } .bottom .budgie-panel #tasklist-button:checked, .budgie-panel .bottom #tasklist-button:checked, .bottom .budgie-panel button.flat.launcher:checked, .budgie-panel .bottom button.flat.launcher:checked, .bottom .budgie-panel .unpinned button.launcher.budgie-menu-launcher, .budgie-panel .unpinned .bottom button.launcher.budgie-menu-launcher, .bottom .budgie-panel .unpinned .launcher#tasklist-button, .budgie-panel .unpinned .bottom .launcher#tasklist-button, .bottom .budgie-panel .unpinned button.launcher.flat, .budgie-panel .unpinned .bottom button.launcher.flat, .bottom .budgie-panel .pinned button.launcher.running.budgie-menu-launcher, .budgie-panel .pinned .bottom button.launcher.running.budgie-menu-launcher, .bottom .budgie-panel .pinned .launcher.running#tasklist-button, .budgie-panel .pinned .bottom .launcher.running#tasklist-button, .bottom .budgie-panel .pinned button.launcher.running.flat, .budgie-panel .pinned .bottom button.launcher.running.flat { border-image: radial-gradient(circle closest-corner at center calc(100% - 1px), #0e6bff 100%, transparent 0%) 0 0 2 0/0 0 2px 0; } .left .budgie-panel #tasklist-button, .budgie-panel .left #tasklist-button, .left .budgie-panel button.flat.launcher, .budgie-panel .left button.flat.launcher { border-image: radial-gradient(circle closest-corner at calc(1px) center, #0e6bff 0%, transparent 0%) 0 0 0 0/0 0 0 0; } .left .budgie-panel #tasklist-button:checked, .budgie-panel .left #tasklist-button:checked, .left .budgie-panel button.flat.launcher:checked, .budgie-panel .left button.flat.launcher:checked, .left .budgie-panel .unpinned button.launcher.budgie-menu-launcher, .budgie-panel .unpinned .left button.launcher.budgie-menu-launcher, .left .budgie-panel .unpinned .launcher#tasklist-button, .budgie-panel .unpinned .left .launcher#tasklist-button, .left .budgie-panel .unpinned button.launcher.flat, .budgie-panel .unpinned .left button.launcher.flat, .left .budgie-panel .pinned button.launcher.running.budgie-menu-launcher, .budgie-panel .pinned .left button.launcher.running.budgie-menu-launcher, .left .budgie-panel .pinned .launcher.running#tasklist-button, .budgie-panel .pinned .left .launcher.running#tasklist-button, .left .budgie-panel .pinned button.launcher.running.flat, .budgie-panel .pinned .left button.launcher.running.flat { border-image: radial-gradient(circle closest-corner at calc(1px) center, #0e6bff 100%, transparent 0%) 0 0 0 2/0 0 0 2px; } .right .budgie-panel #tasklist-button, .budgie-panel .right #tasklist-button, .right .budgie-panel button.flat.launcher, .budgie-panel .right button.flat.launcher { border-image: radial-gradient(circle closest-corner at calc(100% - 1px) center, #0e6bff 0%, transparent 0%) 0 0 0 0/0 0 0 0; } .right .budgie-panel #tasklist-button:checked, .budgie-panel .right #tasklist-button:checked, .right .budgie-panel button.flat.launcher:checked, .budgie-panel .right button.flat.launcher:checked, .right .budgie-panel .unpinned button.launcher.budgie-menu-launcher, .budgie-panel .unpinned .right button.launcher.budgie-menu-launcher, .right .budgie-panel .unpinned .launcher#tasklist-button, .budgie-panel .unpinned .right .launcher#tasklist-button, .right .budgie-panel .unpinned button.launcher.flat, .budgie-panel .unpinned .right button.launcher.flat, .right .budgie-panel .pinned button.launcher.running.budgie-menu-launcher, .budgie-panel .pinned .right button.launcher.running.budgie-menu-launcher, .right .budgie-panel .pinned .launcher.running#tasklist-button, .budgie-panel .pinned .right .launcher.running#tasklist-button, .right .budgie-panel .pinned button.launcher.running.flat, .budgie-panel .pinned .right button.launcher.running.flat { border-image: radial-gradient(circle closest-corner at calc(100% - 1px) center, #0e6bff 100%, transparent 0%) 0 2 0 0/0 2px 0 0; } frame.raven-frame > border { border-style: none; box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.3), 0 0 8px 0 rgba(0, 0, 0, 0.3); } .top frame.raven-frame > border { margin-bottom: 32px; } .bottom frame.raven-frame > border { margin-top: 32px; } .left frame.raven-frame > border { margin-right: 32px; } .right frame.raven-frame > border { margin-left: 32px; } .raven { background-color: rgba(42, 42, 42, 0.95); color: #dedede; } .raven > box { margin-bottom: -10px; } .raven > stack { margin-bottom: -10px; } .raven stackswitcher.linked > button { background-color: #616161; color: #dedede; border: none; } .raven stackswitcher.linked > button:hover { background-color: #6e6e6e; } .raven stackswitcher.linked > button:active { background-color: #bcbcbc; background-image: none; color: #242424; } .raven stackswitcher.linked > button:checked { background-color: #AFAFAF; background-image: none; color: #2A2A2A; } .raven .raven-header { min-height: 36px; padding: 2px; } .raven .raven-header:not(.top) { margin-top: -6px; } .raven .raven-header:not(.top) button { min-height: 32px; min-width: 32px; margin: 0; padding: 0; } .raven .raven-header:not(.top) button.image-button { border-radius: 100px; -gtk-outline-radius: 100px; } .raven .raven-header.top { padding: 2px 12px; color: #dedede; } .raven .raven-header.top stackswitcher button { margin: 0; padding: 0 20px; min-height: 20px; } .raven .raven-header.top button.image-button:dir(ltr) { margin-right: 2px; } .raven .raven-header.top button.image-button:dir(rtl) { margin-left: 2px; } .raven .raven-header.top > image { margin: 0 8px; } .raven .raven-header.top > label { margin: 0 -8px; font-weight: bold; } .raven .raven-header.bottom { border-top: 1px solid rgba(255, 255, 255, 0.12); } .raven viewport.frame .raven-header { margin-top: -8px; } .raven .expander-button { border-radius: 100px; -gtk-outline-radius: 100px; } .raven .raven-background { border-style: solid none; border-width: 1px; border-color: rgba(255, 255, 255, 0.12); background-color: #242424; color: #dedede; } .raven .raven-background.middle { border-bottom-style: none; } .raven .raven-background checkbutton.text-button:hover, .raven .raven-background radiobutton.text-button:hover { color: #b8b8b8; } .raven .raven-background checkbutton.text-button:disabled, .raven .raven-background radiobutton.text-button:disabled { color: rgba(222, 222, 222, 0.45); } .raven .raven-background list { color: #dedede; background-color: #242424; } .raven .raven-background.frame { border-style: solid none; border-color: rgba(255, 255, 255, 0.12); } .raven .raven-background > overlay > widget > image { color: alpha(#dedede,0.12); } .raven .raven-background grid > label:first-child { min-height: 26px; } .raven scrolledwindow.raven-background { border-bottom-style: none; } .raven .raven-header.top + .raven-background { border-style: none; background-color: #498dff; color: #ffffff; } .raven .raven-header.top + .raven-background stackswitcher button { margin: -4px 0; } .raven .powerstrip button.image-button { min-height: 28px; min-width: 28px; margin: 0 4px; padding: 6px; } .raven .option-subtitle { font-size: smaller; } calendar.raven-calendar { margin: 2px 0; padding: 2px; border-style: none; background-color: transparent; color: #dedede; } calendar.raven-calendar:selected { border-radius: 3px; background-color: #498dff; } calendar.raven-calendar.button { color: rgba(222, 222, 222, 0.45); } calendar.raven-calendar.button:hover { color: #dedede; } calendar.raven-calendar.button:disabled { color: rgba(222, 222, 222, 0.25); } calendar.raven-calendar:indeterminate { color: alpha(#dedede,0.35); } calendar.raven-calendar.highlight { color: #dedede; } .raven-mpris { background-color: rgba(0, 0, 0, 0.5); color: #ffffff; } .raven-mpris label { min-height: 24px; } .raven-mpris button.image-button { padding: 8px; } .budgie-notification-window, .budgie-osd-window, .budgie-switcher-window { background-color: transparent; background-image: none; border-radius: 6px; } .budgie-notification, .budgie-switcher { background-color: transparent; background-image: none; } .budgie-notification .notification-title, .budgie-switcher .notification-title { font-size: 120%; } .budgie-osd { background-color: transparent; background-image: none; } .budgie-osd .budgie-osd-text { font-size: 120%; } window.budgie-switcher-window { border-radius: 6px; background-color: transparent; background-image: none; } window.budgie-switcher-window flowboxchild { margin: 2px; border-radius: 6px; -gtk-outline-radius: 6px; background-image: none; } .drop-shadow, window.budgie-switcher-window .drop-shadow { margin: 5px 9px; padding: 8px; border-radius: 6px; box-shadow: 0 5px 5px 0 transparent, 0 8px 15px 0 transparent, 0 3px 3px 0 rgba(0, 0, 0, 0.3); background-color: rgba(36, 36, 36, 0.95); background-image: none; } .drop-shadow .linked > button { border-radius: 5px; } .budgie-session-dialog, .budgie-polkit-dialog, .budgie-run-dialog { border-radius: 6px; background-color: #333333; } .background.budgie-session-dialog, .background.budgie-polkit-dialog, .background.budgie-run-dialog { border-radius: 6px; } .budgie-session-dialog decoration, .budgie-polkit-dialog decoration, .budgie-run-dialog decoration { border-radius: 6px; } .budgie-session-dialog label:not(:last-child), .budgie-session-dialog .dialog-title { font-size: 120%; } .budgie-session-dialog .linked.horizontal > button { padding: 8px 16px; border: none; border-top: 1px solid rgba(255, 255, 255, 0.12); border-radius: 0; } .budgie-session-dialog .linked.horizontal > button:first-child { border-bottom-left-radius: 6px; } .budgie-session-dialog .linked.horizontal > button:last-child { border-bottom-right-radius: 6px; } .budgie-session-dialog .linked.horizontal > button:not(.suggested-action):not(.destructive-action):hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.12); transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); } .budgie-session-dialog .linked.horizontal > button:not(.suggested-action):not(.destructive-action):active, .budgie-session-dialog .linked.horizontal > button:not(.suggested-action):not(.destructive-action):checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); text-shadow: 0 -1px rgba(255, 255, 255, 0.04), -1px 0px rgba(32, 32, 32, 0.05), 1px 0px rgba(32, 32, 32, 0.05), 0px 1px rgba(32, 32, 32, 0.3), 0px 2px rgba(32, 32, 32, 0.05); } .budgie-polkit-dialog .message { color: alpha(currentColor,0.6); } .budgie-polkit-dialog .failure { color: #f8464c; } .budgie-run-dialog { background-color: #242424; } .budgie-run-dialog entry.search { font-size: 120%; padding: 6px 12px; box-shadow: inset 0 1px transparent; background-color: transparent; } .budgie-run-dialog list .dim-label, .budgie-run-dialog list label.separator, .budgie-run-dialog list headerbar .subtitle, headerbar .budgie-run-dialog list .subtitle, .budgie-run-dialog list .titlebar:not(headerbar) .subtitle, .titlebar:not(headerbar) .budgie-run-dialog list .subtitle, .budgie-run-dialog list .budgie-notification .notification-body, .budgie-notification .budgie-run-dialog list .notification-body, .budgie-run-dialog list .budgie-switcher .notification-body, .budgie-switcher .budgie-run-dialog list .notification-body { opacity: 1; } .budgie-run-dialog scrolledwindow { border-top: 1px solid rgba(255, 255, 255, 0.12); }]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FLinux%2FMacterial%2Fgtk-3.0%2Fgtk%20(another%20copy)%2F</url>
    <content type="text"><![CDATA[@keyframes switch_ripple_effect { from { background-image: radial-gradient(circle farthest-corner at center, #71c837 0%, transparent 0%); } to { background-image: radial-gradient(circle farthest-corner at center, #71c837 100%, transparent 0%); } } @keyframes header_ripple_effect { from { background-image: radial-gradient(circle farthest-corner at center, rgba(55, 55, 55, 0.98) 0%, transparent 0%); } to { background-image: radial-gradient(circle farthest-corner at center, rgba(55, 55, 55, 0.98) 100%, transparent 0%); } } * { background-clip: padding-box; -GtkToolButton-icon-spacing: 4; -GtkTextView-error-underline-color: #FC4138; -GtkScrolledWindow-scrollbar-spacing: 0; -GtkToolItemGroup-expander-size: 11; -GtkWidget-text-handle-width: 20; -GtkWidget-text-handle-height: 20; -GtkDialog-button-spacing: 4; -GtkDialog-action-area-border: 0; outline-color: alpha(currentColor,0.3); outline-style: dashed; outline-offset: -3px; outline-width: 0px; -gtk-outline-radius: 5px; } .background { color: #dedede; background-color: #262626; } .background.csd, .background.ssd, .background.osd { border-radius: 0 0 6px 6px; } .background.maximized, .background.solid-csd { border-radius: 0; } .popup.background { background-color: transparent; } *:disabled { -gtk-icon-effect: dim; } .gtkstyle-fallback { background-color: #333333; color: #dedede; } .gtkstyle-fallback:hover { background-color: #4d4d4d; color: #dedede; } .gtkstyle-fallback:active { background-color: #1a1a1a; color: #dedede; } .gtkstyle-fallback:disabled { background-color: #383838; color: rgba(222, 222, 222, 0.45); } .gtkstyle-fallback:selected { background-color: #498dff; color: #ffffff; } .view, iconview, .view text, iconview text, textview text { color: #dedede; background-color: #242424; transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); } .view:hover, iconview:hover, .view text:hover, iconview text:hover, textview text:hover { background-color: #2c2c2c; } .view:selected, iconview:selected, .view:selected:focus, iconview:selected:focus, .view text:selected, iconview text:selected, textview text:selected, .view text:selected:focus, iconview text:selected:focus, textview text:selected:focus { transition: all 350ms cubic-bezier(0.25, 0.46, 0.45, 0.94); border-radius: 5px; } textview border { background-color: #2c2c2c; } rubberband, flowbox rubberband, treeview.view rubberband, .content-view rubberband, .rubberband { border: 1px solid #166dff; background-color: rgba(22, 109, 255, 0.2); } flowbox flowboxchild { padding: 3px; border-radius: 5px; } flowbox flowboxchild:selected { outline-offset: -2px; } label.separator, popover label.separator, popover.background label.separator { color: #dedede; } label selection { color: #ffffff; background-color: #498dff; } .dim-label, label.separator, popover label.separator, popover.background label.separator, headerbar .subtitle, .titlebar:not(headerbar) .subtitle, .budgie-notification .notification-body, .budgie-switcher .notification-body { opacity: 0.55; } assistant .sidebar { background-color: #242424; border-top: 1px solid rgba(255, 255, 255, 0.12); } assistant.csd .sidebar { border-top-style: none; } assistant .sidebar label { padding: 6px 12px; } assistant .sidebar label.highlight { background-color: #498dff; color: #ffffff; } textview { background-color: #242424; } popover.osd, popover.magnifier, .csd popover.osd, .csd popover.magnifier, popover.background.osd, popover.background.magnifier, .csd popover.background.osd, .csd popover.background.magnifier, .osd .scale-popup, .osd { color: #dedede; border: none; background-color: rgba(36, 36, 36, 0.95); background-clip: padding-box; box-shadow: none; } @keyframes spin { to { -gtk-icon-transform: rotate(1turn); } } spinner { background: none; opacity: 0; -gtk-icon-source: -gtk-icontheme("process-working-symbolic"); } spinner:checked { opacity: 1; animation: spin 1s linear infinite; } spinner:checked:disabled { opacity: 0.5; } entry { min-height: 22px; border: 1px solid; padding: 2px 8px; caret-color: currentColor; border-radius: 5px; transition: all 0.2s cubic-bezier(0, 0, 0.2, 1); color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: #242424; } entry.search { border-radius: 5px; } entry image { color: #b9b9b9; } entry image.left { padding-left: 0; padding-right: 5px; } entry image.right { padding-right: 0; padding-left: 5px; } entry.flat, .raven .raven-background spinbutton:not(.vertical), entry.flat:focus, .raven .raven-background spinbutton:focus:not(.vertical) { min-height: 0; padding: 2px; background-image: none; border-color: transparent; border-radius: 0; } entry:focus { background-clip: border-box; color: #dedede; border-color: #8eb9ff; background-color: #242424; box-shadow: inset 0 0 0 2px #8eb9ff; } entry:disabled { color: rgba(222, 222, 222, 0.45); border-color: rgba(255, 255, 255, 0.12); background-color: rgba(36, 36, 36, 0.55); } entry.warning { color: white; border-color: rgba(255, 255, 255, 0.12); background-color: #a0562e; } entry.warning image { color: white; } entry.warning:focus { color: white; background-color: #F27835; box-shadow: none; } entry.warning selection, entry.warning selection:focus { background-color: white; color: #F27835; } entry.error { color: white; border-color: rgba(255, 255, 255, 0.12); background-color: #a63530; } entry.error image { color: white; } entry.error:focus { color: white; background-color: #FC4138; box-shadow: none; } entry.error selection, entry.error selection:focus { background-color: white; color: #FC4138; } entry.search-missing { color: white; border-color: rgba(255, 255, 255, 0.12); background-color: #a63530; } entry.search-missing image { color: white; } entry.search-missing:focus { color: white; background-color: #FC4138; box-shadow: none; } entry.search-missing selection, entry.search-missing selection:focus { background-color: white; color: #FC4138; } entry:drop(active):focus, entry:drop(active) { border-color: #F08437; box-shadow: none; } .osd entry { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(92, 92, 92, 0.35); } .osd entry image, .osd entry image:hover { color: inherit; } .osd entry:focus { color: #ffffff; border-color: rgba(255, 255, 255, 0.12); background-color: #498dff; } .osd entry:disabled { color: #dedede; background-color: rgba(92, 92, 92, 0.2); } .osd entry selection:focus, .osd entry selection { color: #498dff; background-color: #ffffff; } entry progress { margin: 0 -6px; border-radius: 0; border-width: 0 0 2px; border-color: #498dff; border-style: solid; background-image: none; background-color: transparent; box-shadow: none; } .linked:not(.vertical) > entry + button.combo { padding-left: 0; } .linked.vertical > entry + button.combo { padding: 0; } treeview entry.flat, treeview .raven .raven-background spinbutton:not(.vertical), .raven .raven-background treeview spinbutton:not(.vertical), treeview entry { border-radius: 0; background-image: none; background-color: #242424; } treeview entry.flat:focus, treeview .raven .raven-background spinbutton:focus:not(.vertical), .raven .raven-background treeview spinbutton:focus:not(.vertical), treeview entry:focus { border-color: #498dff; } .entry-tag { margin: 8px; border-radius: 50px; box-shadow: none; background-color: #f8464c; color: #ffffff; border: none; } .entry-tag:hover { box-shadow: 0 0 0 1px rgba(255, 255, 255, 0.12); } :dir(ltr) .entry-tag { margin-left: 8px; margin-right: 0px; padding-left: 8px; padding-right: 4px; } :dir(rtl) .entry-tag { margin-left: 0px; margin-right: 8px; padding-left: 4px; padding-right: 8px; } .entry-tag.button { box-shadow: none; border: none; background-color: transparent; } .entry-tag.button:not(:hover):not(:active) { color: rgba(222, 222, 222, 0.45); } @keyframes needs_attention { from { background-image: -gtk-gradient(radial, center center, 0, center center, 0.01, to(#498dff), to(transparent)); } to { background-image: -gtk-gradient(radial, center center, 0, center center, 0.5, to(#498dff), to(transparent)); } } button { outline-color: #8eb9ff; outline-style: solid; outline-offset: -1px; outline-width: 3px; -gtk-outline-radius: 6px; } button { min-height: 26px; min-width: 16px; transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); border: 1px solid; border-radius: 5px; padding: 0 6px; color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: #484848; } button separator { margin: 4px 1px; } .linked:not(.vertical) > button, .linked.vertical > button, combobox, popover button, popover.background button, button.flat, button.budgie-menu-launcher, .budgie-panel #tasklist-button, .budgie-panel button.flat.launcher, button.osd, button.sidebar-button, button.circular-button { outline-color: alpha(currentColor,0.3); outline-style: dashed; outline-offset: -3px; outline-width: 1px; } button.flat, button.budgie-menu-launcher, .budgie-panel #tasklist-button, .budgie-panel button.flat.launcher { border: none; background-color: transparent; box-shadow: none; transition: none; } button.flat:hover, button.budgie-menu-launcher:hover, .budgie-panel #tasklist-button:hover, .budgie-panel button.flat.launcher:hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); transition-duration: 350ms; } button.flat:hover:active, button.budgie-menu-launcher:hover:active, .budgie-panel #tasklist-button:hover:active { transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); } button.flat:active, button.budgie-menu-launcher:active, .budgie-panel #tasklist-button:active, .budgie-panel button.flat.launcher:active, button.flat:checked, button.budgie-menu-launcher:checked, .budgie-panel #tasklist-button:checked, .budgie-panel button.flat.launcher:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } button.flat:disabled, button.budgie-menu-launcher:disabled, .budgie-panel #tasklist-button:disabled, .budgie-panel button.flat.launcher:disabled { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; } button:hover { color: #c5c5c5; border-color: rgba(255, 255, 255, 0.12); background-color: #5c5c5c; box-shadow: none; -gtk-icon-effect: highlight; } button:active, button:checked { color: #ffffff; background-color: #0e6bff; border-color: #0e6bff; background-image: linear-gradient(180deg, #4c97fe 0%, #0564e3 100%); box-shadow: none; background-clip: padding-box; transition-duration: 200ms; } button:active:not(:disabled) label:disabled, button:checked:not(:disabled) label:disabled { color: inherit; opacity: 0.6; } button:active { color: #dedede; } button:active:hover, button:checked { color: #ffffff; } button:disabled { border-color: rgba(255, 255, 255, 0.12); background-color: rgba(72, 72, 72, 0.55); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } button:disabled label, button:disabled { color: rgba(222, 222, 222, 0.45); } button:disabled:active, button:disabled:checked { border-color: rgba(73, 141, 255, 0.75); background-color: rgba(73, 141, 255, 0.75); box-shadow: none; opacity: 0.6; } button:disabled:active label, button:disabled:active, button:disabled:checked label, button:disabled:checked { color: rgba(255, 255, 255, 0.8); } button.image-button { min-width: 28px; padding-left: 5px; padding-right: 5px; } button.text-button { padding-left: 12px; padding-right: 12px; } button.text-button.image-button { padding-left: 5px; padding-right: 5px; } button.text-button.image-button label:first-child { padding-left: 8px; padding-right: 2px; } button.text-button.image-button label:last-child { padding-right: 8px; padding-left: 2px; } button.text-button.image-button label:only-child { padding-left: 8px; padding-right: 8px; } button.text-button.image-button.popup { padding-right: 8px; padding-left: 8px; } button:drop(active), combobox:drop(active) button.combo { color: #F08437; border-color: #F08437; box-shadow: none; } button.osd { color: #dedede; background-color: rgba(36, 36, 36, 0.95); border-color: rgba(16, 16, 16, 0.95); } button.osd.image-button { padding: 0; min-height: 42px; min-width: 42px; } button.osd:hover { color: #498dff; } button.osd:active, button.osd:checked { color: #ffffff; border-color: rgba(255, 255, 255, 0.12); background-color: #498dff; } button.osd:disabled { color: #5c5c5c; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(92, 92, 92, 0.2); } .osd button { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(92, 92, 92, 0.35); } .osd button:hover { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(110, 110, 110, 0.45); } .osd button:active, .osd button:checked { background-clip: padding-box; color: #ffffff; border-color: rgba(255, 255, 255, 0.12); background-color: #498dff; } .osd button:disabled { color: #5c5c5c; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(92, 92, 92, 0.2); } .osd button.flat, .osd button.budgie-menu-launcher, .osd .budgie-panel #tasklist-button, .budgie-panel .osd #tasklist-button, .osd .budgie-panel button.flat.launcher, .budgie-panel .osd button.flat.launcher { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; box-shadow: none; } .osd button.flat:hover, .osd button.budgie-menu-launcher:hover, .osd .budgie-panel #tasklist-button:hover, .budgie-panel .osd #tasklist-button:hover { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(110, 110, 110, 0.45); } .osd button.flat:disabled, .osd button.budgie-menu-launcher:disabled, .osd .budgie-panel #tasklist-button:disabled, .budgie-panel .osd #tasklist-button:disabled { color: #5c5c5c; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(92, 92, 92, 0.2); background-image: none; } .osd button.flat:active, .osd button.budgie-menu-launcher:active, .osd .budgie-panel #tasklist-button:active, .budgie-panel .osd #tasklist-button:active, .osd button.flat:checked, .osd button.budgie-menu-launcher:checked, .osd .budgie-panel #tasklist-button:checked, .budgie-panel .osd #tasklist-button:checked { color: #ffffff; border-color: rgba(255, 255, 255, 0.12); background-color: #498dff; } .osd .linked:not(.vertical):not(.path-bar) > button:hover:not(:checked):not(:active):not(:only-child), .osd .linked:not(.vertical):not(.path-bar) > button:hover:not(:checked):not(:active) + button:not(:checked):not(:active) { box-shadow: none; } button.suggested-action { background-clip: border-box; color: white; background-color: #3484e2; border-color: #1c6bc7; background-image: none; } button.suggested-action.flat, button.suggested-action.budgie-menu-launcher, .budgie-panel .suggested-action#tasklist-button, .budgie-panel button.suggested-action.flat.launcher { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; color: #3484e2; } button.suggested-action:hover { background-clip: border-box; color: white; background-color: #619fe8; border-color: #3484e2; background-image: none; } button.suggested-action:active, button.suggested-action:checked { background-clip: border-box; color: white; background-color: #1c6bc7; border-color: #16539a; background-image: none; box-shadow: none; } button.suggested-action.flat:disabled, button.suggested-action.budgie-menu-launcher:disabled, .budgie-panel .suggested-action#tasklist-button:disabled { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; color: rgba(222, 222, 222, 0.45); } button.suggested-action:disabled { border-color: rgba(255, 255, 255, 0.12); background-color: rgba(72, 72, 72, 0.55); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } button.suggested-action:disabled label, button.suggested-action:disabled { color: rgba(222, 222, 222, 0.45); } button.destructive-action { background-clip: border-box; color: white; background-color: #f8464c; border-color: #f6151c; background-image: none; } button.destructive-action.flat, button.destructive-action.budgie-menu-launcher, .budgie-panel .destructive-action#tasklist-button, .budgie-panel button.destructive-action.flat.launcher { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; color: #f8464c; } button.destructive-action:hover { background-clip: border-box; color: white; background-color: #fa777c; border-color: #f8464c; background-image: none; } button.destructive-action:active, button.destructive-action:checked { background-clip: border-box; color: white; background-color: #f6151c; border-color: #d0080f; background-image: none; box-shadow: none; } button.destructive-action.flat:disabled, button.destructive-action.budgie-menu-launcher:disabled, .budgie-panel .destructive-action#tasklist-button:disabled { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; color: rgba(222, 222, 222, 0.45); } button.destructive-action:disabled { border-color: rgba(255, 255, 255, 0.12); background-color: rgba(72, 72, 72, 0.55); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } button.destructive-action:disabled label, button.destructive-action:disabled { color: rgba(222, 222, 222, 0.45); } .stack-switcher > button { outline-offset: -3px; } .stack-switcher > button > label { padding-left: 6px; padding-right: 6px; } .stack-switcher > button > image { padding-left: 6px; padding-right: 6px; padding-top: 3px; padding-bottom: 3px; } .stack-switcher > button.text-button { padding-left: 10px; padding-right: 10px; } .stack-switcher > button.image-button { padding-left: 2px; padding-right: 2px; } .stack-switcher > button.needs-attention:active > label, .stack-switcher > button.needs-attention:active > image, .stack-switcher > button.needs-attention:checked > label, .stack-switcher > button.needs-attention:checked > image { animation: none; background-image: none; } .stack-switcher > button.needs-attention > label, .stack-switcher > button.needs-attention > image, button stacksidebar row.needs-attention > label, stacksidebar button row.needs-attention > label { animation: needs_attention 150ms ease-in; background-image: -gtk-gradient(radial, center center, 0, center center, 0.5, to(#498dff), to(transparent)); background-size: 6px 6px, 6px 6px; background-repeat: no-repeat; background-position: right 3px, right 2px; } .stack-switcher > button.needs-attention > label:dir(rtl), .stack-switcher > button.needs-attention > image:dir(rtl), button stacksidebar row.needs-attention > label:dir(rtl), stacksidebar button row.needs-attention > label:dir(rtl) { background-position: left 3px, left 2px; } button.font separator, button.file separator { background-color: transparent; } .inline-toolbar button, .inline-toolbar button:backdrop { border-radius: 5px; } .inline-toolbar toolbutton > button { min-height: 20px; border: none; background-color: transparent; box-shadow: none; } .inline-toolbar toolbutton > button:hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); } .inline-toolbar toolbutton > button:active, .inline-toolbar toolbutton > button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } .inline-toolbar toolbutton > button:disabled { background-color: transparent; } .inline-toolbar toolbutton > button:disabled label, .inline-toolbar toolbutton > button:disabled { color: rgba(222, 222, 222, 0.45); } .inline-toolbar toolbutton > button:disabled:active, .inline-toolbar toolbutton > button:disabled:checked { background-color: white; border-color: white; opacity: 0.6; } .inline-toolbar toolbutton > button:disabled:active label, .inline-toolbar toolbutton > button:disabled:active, .inline-toolbar toolbutton > button:disabled:checked label, .inline-toolbar toolbutton > button:disabled:checked { color: rgba(255, 255, 255, 0.8); } .linked:not(.vertical):not(.path-bar) > entry + entry { border-left-color: rgba(255, 255, 255, 0); } .linked:not(.vertical):not(.path-bar) > entry.error + entry, .linked:not(.vertical):not(.path-bar) > entry + entry.error { border-left-color: rgba(255, 255, 255, 0); } .linked:not(.vertical):not(.path-bar) > entry.warning + entry, .linked:not(.vertical):not(.path-bar) > entry + entry.warning { border-left-color: rgba(255, 255, 255, 0); } .linked:not(.vertical):not(.path-bar) > entry.error + entry.warning, .linked:not(.vertical):not(.path-bar) > entry.warning + entry.error { border-left-color: rgba(255, 255, 255, 0); } .linked:not(.vertical):not(.path-bar) > entry + entry:focus:not(:last-child), .linked:not(.vertical):not(.path-bar) > entry + entry:focus:last-child { border-left-color: #8eb9ff; } .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + entry, .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + button, .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + combobox > box > button.combo { border-left-color: #8eb9ff; } .linked:not(.vertical):not(.path-bar) > entry + entry:drop(active):not(:last-child), .linked:not(.vertical):not(.path-bar) > entry + entry:drop(active):last-child { border-left-color: #F08437; } .linked:not(.vertical):not(.path-bar) > entry:drop(active):not(:only-child) + entry, .linked:not(.vertical):not(.path-bar) > entry:drop(active):not(:only-child) + button, .linked:not(.vertical):not(.path-bar) > entry:drop(active):not(:only-child) + combobox > box > button.combo { border-left-color: #F08437; } .linked:not(.vertical):not(.path-bar) > entry + entry.warning:focus:not(:last-child), .linked:not(.vertical):not(.path-bar) > entry + entry.warning:focus:last-child { border-left-color: #F27835; } .linked:not(.vertical):not(.path-bar) > entry.warning:focus:not(:only-child) + entry, .linked:not(.vertical):not(.path-bar) > entry.warning:focus:not(:only-child) + button, .linked:not(.vertical):not(.path-bar) > entry.warning:focus:not(:only-child) + combobox > box > button.combo { border-left-color: #F27835; } .linked:not(.vertical):not(.path-bar) > entry + entry.error:focus:not(:last-child), .linked:not(.vertical):not(.path-bar) > entry + entry.error:focus:last-child { border-left-color: #FC4138; } .linked:not(.vertical):not(.path-bar) > entry.error:focus:not(:only-child) + entry, .linked:not(.vertical):not(.path-bar) > entry.error:focus:not(:only-child) + button, .linked:not(.vertical):not(.path-bar) > entry.error:focus:not(:only-child) + combobox > box > button.combo { border-left-color: #FC4138; } .linked:not(.vertical):not(.path-bar) > button:active + entry, .linked:not(.vertical):not(.path-bar) > button:checked + entry { border-left-color: #8eb9ff; } .linked:not(.vertical):not(.path-bar) > button + button { border-left-style: none; } .linked:not(.vertical).path-bar > button + button { border-left-style: solid; } .linked.vertical > entry + entry { border-top-color: rgba(255, 255, 255, 0); } .linked.vertical > entry.error + entry, .linked.vertical > entry + entry.error { border-top-color: rgba(255, 255, 255, 0); } .linked.vertical > entry.warning + entry, .linked.vertical > entry + entry.warning { border-top-color: rgba(255, 255, 255, 0); } .linked.vertical > entry.error + entry.warning, .linked.vertical > entry.warning + entry.error { border-top-color: rgba(255, 255, 255, 0); } .linked.vertical > entry + entry:focus:not(:last-child), .linked.vertical > entry + entry:focus:last-child { border-top-color: #8eb9ff; } .linked.vertical > entry:focus:not(:only-child) + entry, .linked.vertical > entry:focus:not(:only-child) + button, .linked.vertical > entry:focus:not(:only-child) + combobox > box > button.combo { border-top-color: #8eb9ff; } .linked.vertical > entry + entry:drop(active):not(:last-child), .linked.vertical > entry + entry:drop(active):last-child { border-top-color: #F08437; } .linked.vertical > entry:drop(active):not(:only-child) + entry, .linked.vertical > entry:drop(active):not(:only-child) + button, .linked.vertical > entry:drop(active):not(:only-child) + combobox > box > button.combo { border-top-color: #F08437; } .linked.vertical > entry + entry.warning:focus:not(:last-child), .linked.vertical > entry + entry.warning:focus:last-child { border-top-color: #F27835; } .linked.vertical > entry.warning:focus:not(:only-child) + entry, .linked.vertical > entry.warning:focus:not(:only-child) + button, .linked.vertical > entry.warning:focus:not(:only-child) + combobox > box > button.combo { border-top-color: #F27835; } .linked.vertical > entry + entry.error:focus:not(:last-child), .linked.vertical > entry + entry.error:focus:last-child { border-top-color: #FC4138; } .linked.vertical > entry.error:focus:not(:only-child) + entry, .linked.vertical > entry.error:focus:not(:only-child) + button, .linked.vertical > entry.error:focus:not(:only-child) + combobox > box > button.combo { border-top-color: #FC4138; } .linked.vertical > button:active + entry, .linked.vertical > button:checked + entry { border-top-color: #8eb9ff; } .linked.vertical > button + button { border-top-style: none; } .linked:not(.vertical) > entry, .linked:not(.vertical) > entry:focus, .inline-toolbar button, .inline-toolbar button:backdrop, .linked:not(.vertical) > button, .linked:not(.vertical) > button:hover, .linked:not(.vertical) > button:active, .linked:not(.vertical) > button:checked, toolbar.inline-toolbar toolbutton > button.flat, .inline-toolbar toolbutton > button.flat, toolbar.inline-toolbar toolbutton > button.budgie-menu-launcher, .inline-toolbar toolbutton > button.budgie-menu-launcher, .inline-toolbar .budgie-panel toolbutton > #tasklist-button, .budgie-panel .inline-toolbar toolbutton > #tasklist-button, .inline-toolbar .budgie-panel toolbutton > button.flat.launcher, .budgie-panel .inline-toolbar toolbutton > button.flat.launcher, spinbutton:not(.vertical) button, spinbutton:not(.vertical) entry, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:hover, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:active, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:checked, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:disabled, headerbar .linked:not(.vertical).path-bar > button, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button, headerbar .linked:not(.vertical).path-bar > button:hover, headerbar .linked:not(.vertical).path-bar > button:active, headerbar .linked:not(.vertical).path-bar > button:checked, headerbar .linked:not(.vertical).path-bar > button:disabled, .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button, .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:hover, .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:active, .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:checked, .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:disabled, .linked:not(.vertical) > combobox > box > button.combo:dir(ltr), .linked:not(.vertical) > combobox > box > button.combo:dir(rtl) { border-radius: 0; border-right-style: none; } .linked:not(.vertical) > entry:first-child, .inline-toolbar button:first-child, .linked:not(.vertical) > button:first-child, .inline-toolbar toolbutton > button.flat:first-child, .inline-toolbar toolbutton > button.budgie-menu-launcher:first-child, .inline-toolbar .budgie-panel toolbutton > #tasklist-button:first-child, .budgie-panel .inline-toolbar toolbutton > #tasklist-button:first-child, .inline-toolbar .budgie-panel toolbutton > button.flat.launcher:first-child, spinbutton:not(.vertical) button:first-child, spinbutton:not(.vertical) entry:first-child, .linked:not(.vertical) > combobox:first-child > box > button.combo, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:first-child, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:first-child, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:first-child:hover, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:first-child:active, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:first-child:checked, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:first-child:disabled, headerbar .linked:not(.vertical).path-bar > button:first-child, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button:first-child, headerbar .linked:not(.vertical).path-bar > button:first-child:hover, headerbar .linked:not(.vertical).path-bar > button:first-child:active, headerbar .linked:not(.vertical).path-bar > button:first-child:checked, headerbar .linked:not(.vertical).path-bar > button:first-child:disabled { border-top-left-radius: 5px; border-bottom-left-radius: 5px; } .linked:not(.vertical) > entry:last-child, .inline-toolbar button:last-child, .linked:not(.vertical) > button:last-child, .inline-toolbar toolbutton > button.flat:last-child, .inline-toolbar toolbutton > button.budgie-menu-launcher:last-child, .inline-toolbar .budgie-panel toolbutton > #tasklist-button:last-child, .budgie-panel .inline-toolbar toolbutton > #tasklist-button:last-child, .inline-toolbar .budgie-panel toolbutton > button.flat.launcher:last-child, spinbutton:not(.vertical) button:last-child, spinbutton:not(.vertical) entry:last-child, .linked:not(.vertical) > combobox:last-child > box > button.combo, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:last-child, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:last-child, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:last-child:hover, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:last-child:active, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:last-child:checked, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:last-child:disabled, headerbar .linked:not(.vertical).path-bar > button:last-child, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button:last-child, headerbar .linked:not(.vertical).path-bar > button:last-child:hover, headerbar .linked:not(.vertical).path-bar > button:last-child:active, headerbar .linked:not(.vertical).path-bar > button:last-child:checked, headerbar .linked:not(.vertical).path-bar > button:last-child:disabled { border-top-right-radius: 5px; border-bottom-right-radius: 5px; border-right-style: solid; } .linked:not(.vertical) > entry:only-child, .inline-toolbar button:only-child, .linked:not(.vertical) > button:only-child, .inline-toolbar toolbutton > button.flat:only-child, .inline-toolbar toolbutton > button.budgie-menu-launcher:only-child, .inline-toolbar .budgie-panel toolbutton > #tasklist-button:only-child, .budgie-panel .inline-toolbar toolbutton > #tasklist-button:only-child, .inline-toolbar .budgie-panel toolbutton > button.flat.launcher:only-child, spinbutton:not(.vertical) button:only-child, spinbutton:not(.vertical) entry:only-child, .linked:not(.vertical) > combobox:only-child > box > button.combo, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:only-child, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:only-child, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:only-child:hover, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:only-child:active, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:only-child:checked, headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:only-child:disabled, headerbar .linked:not(.vertical).path-bar > button:only-child, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button:only-child, headerbar .linked:not(.vertical).path-bar > button:only-child:hover, headerbar .linked:not(.vertical).path-bar > button:only-child:active, headerbar .linked:not(.vertical).path-bar > button:only-child:checked, headerbar .linked:not(.vertical).path-bar > button:only-child:disabled { border-radius: 5px; border-style: solid; } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:first-child { border-top-left-radius: 5px; border-bottom-left-radius: 0; } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:last-child { border-top-right-radius: 5px; border-bottom-right-radius: 0; border-right-style: solid; } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:only-child { border-radius: 5px 5px 0 0; border-style: solid; } .linked.vertical > entry, .linked.vertical > entry:focus, .linked.vertical > button, .linked.vertical > button:hover, .linked.vertical > button:active, .linked.vertical > button:checked, spinbutton.vertical button, spinbutton.vertical entry, .linked.vertical > combobox > box > button.combo { border-radius: 0; border-bottom-style: none; } .linked.vertical > entry:first-child, .linked.vertical > button:first-child, spinbutton.vertical button:first-child, spinbutton.vertical entry:first-child, .linked.vertical > combobox:first-child > box > button.combo { border-top-left-radius: 5px; border-top-right-radius: 5px; } .linked.vertical > entry:last-child, .linked.vertical > button:last-child, spinbutton.vertical button:last-child, spinbutton.vertical entry:last-child, .linked.vertical > combobox:last-child > box > button.combo { border-bottom-left-radius: 5px; border-bottom-right-radius: 5px; border-bottom-style: solid; } .linked.vertical > entry:only-child, .linked.vertical > button:only-child, spinbutton.vertical button:only-child, spinbutton.vertical entry:only-child, .linked.vertical > combobox:only-child > box > button.combo { border-radius: 5px; border-style: solid; } menuitem.button.flat, modelbutton.flat, button:link, button:visited, button:link:hover, button:link:active, button:link:checked, button:visited:hover, button:visited:active, button:visited:checked, notebook > header > tabs > tab button.flat:hover, notebook > header > tabs > tab button.budgie-menu-launcher:hover, notebook > header > tabs > tab .budgie-panel #tasklist-button:hover, .budgie-panel notebook > header > tabs > tab #tasklist-button:hover, notebook > header > tabs > tab .budgie-panel button.flat.launcher:hover, .budgie-panel notebook > header > tabs > tab button.flat.launcher:hover, notebook > header > tabs > tab button.flat:active, notebook > header > tabs > tab button.budgie-menu-launcher:active, notebook > header > tabs > tab .budgie-panel #tasklist-button:active, .budgie-panel notebook > header > tabs > tab #tasklist-button:active, notebook > header > tabs > tab .budgie-panel button.flat.launcher:active, .budgie-panel notebook > header > tabs > tab button.flat.launcher:active, notebook > header > tabs > tab button.flat:active:hover, notebook > header > tabs > tab button.budgie-menu-launcher:active:hover, .app-notification button, calendar.button, calendar.raven-calendar.button { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; } menuitem.button.flat, modelbutton.flat { transition: all 0.2s cubic-bezier(0, 0, 0.2, 1); min-height: 26px; padding-left: 8px; padding-right: 8px; outline-offset: -3px; border-radius: 5px; } menuitem.button.flat:hover, modelbutton.flat:hover { background-color: #444444; transition-duration: 50ms; } menuitem.button.flat:active, menuitem.button.flat:active arrow, menuitem.button.flat:selected, menuitem.button.flat:selected arrow, modelbutton.flat:active, modelbutton.flat:active arrow, modelbutton.flat:selected, modelbutton.flat:selected arrow { color: #ffffff; background-color: rgba(132, 132, 132, 0.98); background-image: none; border-color: rgba(255, 255, 255, 0.12); border-top-color: rgba(255, 255, 255, 0.12); border-bottom-color: rgba(255, 255, 255, 0.12); text-shadow: none; -gtk-icon-shadow: none; box-shadow: none; transition: none; animation: none; } menuitem.button.flat:checked, modelbutton.flat:checked { color: #dedede; } menuitem.button.flat:disabled, modelbutton.flat:disabled { color: rgba(222, 222, 222, 0.45); } menuitem.button.flat check:last-child, menuitem.button.flat radio:last-child, modelbutton.flat check:last-child, modelbutton.flat radio:last-child { margin-left: 8px; } menuitem.button.flat check:first-child, menuitem.button.flat radio:first-child, modelbutton.flat check:first-child, modelbutton.flat radio:first-child { margin-right: 8px; } modelbutton.flat arrow.left { -gtk-icon-source: -gtk-icontheme("pan-start-symbolic"); } modelbutton.flat arrow.right { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); } *:link, button:link, button:visited { color: #3484e2; } *:link:visited, button:visited { color: #b8b8b8; } *:selected *:link:visited, *:selected button:visited:link, *:selected button:visited { color: #b6d1ff; } *:link:hover, button:hover:link, button:hover:visited { color: #619fe8; } *:selected *:link:hover, *:selected button:hover:link, *:selected button:hover:visited { color: #edf4ff; } *:link:active, button:active:link, button:active:visited { color: #3484e2; } *:selected *:link:active, *:selected button:active:link, *:selected button:active:visited { color: #dbe8ff; } infobar.info *:link, infobar.info button:link, infobar.info button:visited, infobar.question *:link, infobar.question button:link, infobar.question button:visited, infobar.warning *:link, infobar.warning button:link, infobar.warning button:visited, infobar.error *:link, infobar.error button:link, infobar.error button:visited, *:link:selected, button:selected:link, button:selected:visited, headerbar.selection-mode .subtitle:link, .selection-mode.titlebar:not(headerbar) .subtitle:link, *:selected *:link, *:selected button:link, *:selected button:visited { color: #dbe8ff; } button:link > label, button:visited > label { text-decoration-line: underline; } spinbutton:drop(active) { box-shadow: none; } spinbutton button:active { color: #ffffff; } spinbutton:disabled { color: rgba(222, 222, 222, 0.45); } spinbutton:not(.vertical) entry { min-width: 28px; } spinbutton:not(.vertical):dir(ltr) entry, spinbutton:not(.vertical):dir(rtl) button.up { border-radius: 5px 0 0 5px; } spinbutton:not(.vertical) > button + button { border-left-style: none; } spinbutton:not(.vertical) > button:hover:not(:active), spinbutton:not(.vertical) > button:hover + button { box-shadow: inset 1px 0 rgba(255, 255, 255, 0.12); } spinbutton:not(.vertical) > button:disabled + button:not(:disabled):not(:active):not(:checked):not(:hover), spinbutton:not(.vertical) > button:not(:disabled):not(:active):not(:checked):not(:hover) + button:disabled { box-shadow: inset 1px 0 rgba(255, 255, 255, 0); } spinbutton:not(.vertical) > button:first-child:hover:not(:active), spinbutton:not(.vertical) > button.up:dir(rtl):hover:not(:active), spinbutton:not(.vertical) > entry + button:not(:active):hover { box-shadow: none; } spinbutton:not(.vertical) > entry:focus + button { border-left-color: #8eb9ff; } spinbutton:not(.vertical) > entry:drop(active) + button { border-left-color: #F08437; } .osd spinbutton:not(.vertical) > button:hover:not(:active), .osd spinbutton:not(.vertical) > button:hover + button { box-shadow: inset 1px 0 rgba(255, 255, 255, 0.12); } .osd spinbutton:not(.vertical) > button:first-child:hover:not(:active), .osd spinbutton:not(.vertical) > button.up:dir(rtl):hover:not(:active), .osd spinbutton:not(.vertical) > entry + button:not(:active):hover { box-shadow: none; } .osd spinbutton:not(.vertical) > entry:focus + button { border-left-color: #8eb9ff; } spinbutton.vertical button, spinbutton.vertical entry { padding-left: 4px; padding-right: 4px; min-width: 0; } spinbutton.vertical button.up { border-radius: 5px 5px 0 0; } spinbutton.vertical > entry:focus + button { border-top-color: #8eb9ff; } spinbutton.vertical > entry:drop(active) + button { border-top-color: #F08437; } combobox button.combo { min-width: 0; padding-left: 12px; padding-right: 12px; } combobox arrow { -gtk-icon-source: -gtk-scaled(url("assets/combobox-arrow.png"), url("assets/combobox-arrow@2.png")); min-height: 16px; min-width: 20px; padding: 0; margin: -1px -13px -1px -1px; border-radius: 0 5px 5px 0; color: #ffffff; border: 1px solid #686868; background-color: #498dff; background-image: linear-gradient(180deg, #686868 0%, #686868 100%); } .linked:not(.vertical) > combobox > box > button.combo arrow { border-radius: 0; } .linked:not(.vertical) > combobox:last-child > box > button.combo arrow { border-radius: 0 5px 5px 0; } toolbar, .inline-toolbar { -GtkWidget-window-dragging: true; padding: 4px; background-color: rgba(55, 55, 55, 0.98); border-bottom: 1px solid rgba(255, 255, 255, 0.12); } toolbar separator, .inline-toolbar separator { background: none; } toolbar.horizontal separator, .horizontal.inline-toolbar separator { margin: 0 6px; } toolbar.vertical separator, .vertical.inline-toolbar separator { margin: 6px 0; } .osd toolbar, .osd .inline-toolbar { background-color: transparent; } toolbar.osd, .osd.inline-toolbar { padding: 8px; border: 1px solid rgba(255, 255, 255, 0.12); border-radius: 5px; background-color: rgba(36, 36, 36, 0.85); } toolbar.osd.left, .osd.left.inline-toolbar, toolbar.osd.right, .osd.right.inline-toolbar, toolbar.osd.top, .osd.top.inline-toolbar, toolbar.osd.bottom, .osd.bottom.inline-toolbar { border-radius: 0; } toolbar.osd.top, .osd.top.inline-toolbar { border-width: 0 0 1px 0; } toolbar.osd.bottom, .osd.bottom.inline-toolbar { border-width: 1px 0 0 0; } toolbar.osd.left, .osd.left.inline-toolbar { border-width: 0 1px 0 0; } toolbar.osd.right, .osd.right.inline-toolbar { border-width: 0 0 0 1px; } toolbar:not(.inline-toolbar) switch, .inline-toolbar:not(.inline-toolbar) switch, toolbar:not(.inline-toolbar) scale, .inline-toolbar:not(.inline-toolbar) scale, toolbar:not(.inline-toolbar) entry, .inline-toolbar:not(.inline-toolbar) entry, toolbar:not(.inline-toolbar) spinbutton, .inline-toolbar:not(.inline-toolbar) spinbutton, toolbar:not(.inline-toolbar) button, .inline-toolbar:not(.inline-toolbar) button { margin-right: 1px; margin-bottom: 1px; } toolbar:not(.inline-toolbar) .linked > button, .inline-toolbar:not(.inline-toolbar) .linked > button, toolbar:not(.inline-toolbar) .linked > entry, .inline-toolbar:not(.inline-toolbar) .linked > entry { margin-right: 0; } .primary-toolbar:not(.libreoffice-toolbar) { color: #dedede; background-color: transparent; box-shadow: none; border-width: 0 0 1px 0; border-style: solid; border-image: linear-gradient(to bottom, #4B4B4B, #4B4B4B) 1 0 1 0; } .inline-toolbar { background-color: #2b2b2b; border-style: solid; border-color: rgba(255, 255, 255, 0.12); border-width: 0 1px 1px; padding: 3px; border-radius: 0 0 5px 5px; } searchbar { background-color: #333333; border-style: solid; border-color: #4B4B4B; border-width: 0 0 1px; padding: 3px; } searchbar button.flat, searchbar button.budgie-menu-launcher, searchbar .budgie-panel #tasklist-button, .budgie-panel searchbar #tasklist-button, searchbar .budgie-panel button.flat.launcher, .budgie-panel searchbar button.flat.launcher { min-height: 16px; min-width: 16px; margin: 4px 6px; padding: 0 2px; border-radius: 100px; } actionbar { padding: 6px; border-top: 1px solid rgba(255, 255, 255, 0.12); background-color: #2b2b2b; border-radius: 0 0 6px 6px; } headerbar, .titlebar:not(headerbar) { min-height: 34px; padding: 0 8px; background-image: none; color: rgba(225, 219, 219, 0.8); background-color: #090909; border: none; } .csd headerbar, .csd .titlebar:not(headerbar) { background-image: none; background-color: #141414; border: none; } headerbar:backdrop, .titlebar:backdrop:not(headerbar) { transition: 200ms ease-out; color: rgba(225, 219, 219, 0.5); background-image: none; background-color: #141414; border: none; } .csd headerbar:backdrop, .csd .titlebar:backdrop:not(headerbar) { background-color: #141414; border: none; } .maximized headerbar, .maximized .titlebar:not(headerbar) { background-color: #090909; border: none; } .maximized headerbar:backdrop, .maximized .titlebar:backdrop:not(headerbar) { background-color: #141414; border: none; } headerbar .title, .titlebar:not(headerbar) .title { padding-left: 12px; padding-right: 12px; } headerbar .subtitle, .titlebar:not(headerbar) .subtitle { font-size: smaller; padding-left: 12px; padding-right: 12px; margin-top: -3px; } headerbar.selection-mode, .selection-mode.titlebar:not(headerbar) { color: #ffffff; background-color: #0e6bff; border-color: #0060f9; box-shadow: none; background-image: none; text-shadow: none; } headerbar.selection-mode:backdrop, .selection-mode.titlebar:backdrop:not(headerbar) { background-color: #0e6bff; color: rgba(255, 255, 255, 0.6); } headerbar.selection-mode .selection-menu, .selection-mode.titlebar:not(headerbar) .selection-menu { box-shadow: none; padding-left: 10px; padding-right: 10px; } headerbar.selection-mode .selection-menu GtkArrow, .selection-mode.titlebar:not(headerbar) .selection-menu GtkArrow { -GtkArrow-arrow-scaling: 1; } headerbar.selection-mode .selection-menu .arrow, .selection-mode.titlebar:not(headerbar) .selection-menu .arrow { -gtk-icon-source: -gtk-icontheme("pan-down-symbolic"); } .maximized headerbar.selection-mode, .maximized .selection-mode.titlebar:not(headerbar) { background-color: #0e6bff; } .tiled headerbar, .tiled headerbar:backdrop, .maximized headerbar, .maximized headerbar:backdrop, .tiled .titlebar:not(headerbar), .tiled .titlebar:backdrop:not(headerbar), .maximized .titlebar:not(headerbar), .maximized .titlebar:backdrop:not(headerbar) { border-radius: 0; } .maximized headerbar, .maximized .titlebar:not(headerbar) { background-color: #090909; border: none; } .maximized headerbar:backdrop, .maximized .titlebar:backdrop:not(headerbar) { background-color: #141414; } headerbar.default-decoration, .default-decoration.titlebar:not(headerbar) { min-height: 26px; padding: 0 6px; background-color: #090909; background-image: none; } .tiled headerbar.default-decoration, .maximized headerbar.default-decoration, .fullscreen headerbar.default-decoration, .tiled .default-decoration.titlebar:not(headerbar), .maximized .default-decoration.titlebar:not(headerbar), .fullscreen .default-decoration.titlebar:not(headerbar) { box-shadow: none; } headerbar.default-decoration button.titlebutton, .default-decoration.titlebar:not(headerbar) button.titlebutton { border: none; min-width: 16px; min-height: 16px; margin: 0; padding: 0; } headerbar.default-decoration, .csd headerbar.default-decoration, headerbar.default-decoration:backdrop, .csd headerbar.default-decoration:backdrop, .default-decoration.titlebar:not(headerbar), .csd .default-decoration.titlebar:not(headerbar), .default-decoration.titlebar:backdrop:not(headerbar), .csd .default-decoration.titlebar:backdrop:not(headerbar) { box-shadow: none; border: none; } .titlebar, .titlebar.background { border-radius: 6px 6px 0 0; } headerbar button, headerbar separator { margin-top: 6px; margin-bottom: 6px; } headerbar entry { margin-top: 5px; margin-bottom: 5px; } separator:first-child + headerbar, separator:first-child + headerbar:backdrop, headerbar:first-child, headerbar:first-child:backdrop { border-top-left-radius: 6px; } .maximized separator:first-child + headerbar, .tiled separator:first-child + headerbar, .maximized separator:first-child + headerbar:backdrop, .tiled separator:first-child + headerbar:backdrop, .maximized headerbar:first-child, .tiled headerbar:first-child, .maximized headerbar:first-child:backdrop, .tiled headerbar:first-child:backdrop { border-radius: 0; } headerbar:last-child, headerbar:last-child:backdrop { border-top-right-radius: 6px; } .maximized headerbar:last-child, .tiled headerbar:last-child, .maximized headerbar:last-child:backdrop, .tiled headerbar:last-child:backdrop { border-radius: 0; } window > .titlebar:not(headerbar), window > .titlebar:not(headerbar):backdrop, window.csd > .titlebar:not(headerbar), window.csd > .titlebar:not(headerbar):backdrop { padding: 0; background: none; background-image: none; border: none; box-shadow: none; } .titlebar:not(headerbar) > separator { background-color: none; } .titlebar:not(headerbar) > separator:backdrop { background-color: none; } .primary-toolbar:not(.libreoffice-toolbar) separator, headerbar separator.titlebutton, .titlebar:not(headerbar) separator.titlebutton { min-width: 0; min-height: 0; background-color: transparent; border: none; } .primary-toolbar:not(.libreoffice-toolbar) separator:backdrop, headerbar separator.titlebutton:backdrop, .titlebar:not(headerbar) separator.titlebutton:backdrop { opacity: 0.6; } headerbar entry, .nemo-window .primary-toolbar entry { border: none; color: rgba(225, 219, 219, 0.8); background-color: rgba(119, 119, 119, 0.58); background-image: none; } headerbar entry image, .nemo-window .primary-toolbar entry image, headerbar entry image:hover, .nemo-window .primary-toolbar entry image:hover { color: inherit; } headerbar entry:backdrop, .nemo-window .primary-toolbar entry:backdrop { opacity: 0.85; background-image: none; box-shadow: none; } headerbar entry:focus, .nemo-window .primary-toolbar entry:focus { border: none; box-shadow: 0 0 0 2px #8eb9ff, inset 0 0 0 1px #8eb9ff; border-color: #8eb9ff; background-image: none; background-clip: padding-box; } headerbar entry:focus image, .nemo-window .primary-toolbar entry:focus image { color: #498dff; } headerbar entry:disabled, .nemo-window .primary-toolbar entry:disabled { color: rgba(225, 219, 219, 0.35); background-color: rgba(111, 111, 111, 0.23); } headerbar entry selection:focus, .nemo-window .primary-toolbar entry selection:focus { background-color: #498dff; color: #ffffff; } headerbar entry progress, .nemo-window .primary-toolbar entry progress { border-color: #498dff; background-image: none; background-color: transparent; } headerbar entry.warning, .nemo-window .primary-toolbar entry.warning { color: white; border-color: rgba(24, 24, 24, 0.38); background-color: rgba(169, 95, 54, 0.992); } headerbar entry.warning:focus, .nemo-window .primary-toolbar entry.warning:focus { color: white; background-color: #F27835; } headerbar entry.warning selection, .nemo-window .primary-toolbar entry.warning selection, headerbar entry.warning selection:focus, .nemo-window .primary-toolbar entry.warning selection:focus { background-color: white; color: #F27835; } headerbar entry.error, .nemo-window .primary-toolbar entry.error { color: white; border-color: rgba(24, 24, 24, 0.38); background-color: rgba(175, 61, 56, 0.992); } headerbar entry.error:focus, .nemo-window .primary-toolbar entry.error:focus { color: white; background-color: #FC4138; } headerbar entry.error selection, .nemo-window .primary-toolbar entry.error selection, headerbar entry.error selection:focus, .nemo-window .primary-toolbar entry.error selection:focus { background-color: white; color: #FC4138; } paned.titlebar.horizontal headerbar button.flat.toggle.popup:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:not(.image-button), headerbar button, .nemo-window .primary-toolbar button { min-width: 22px; border-color: rgba(255, 255, 255, 0.12); color: rgba(225, 219, 219, 0.8); background-color: rgba(119, 119, 119, 0.58); background-image: none; box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); border: none; } paned.titlebar.horizontal headerbar button.flat.toggle.popup:backdrop:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:backdrop:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:backdrop:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:backdrop:not(.image-button), headerbar button:backdrop, .nemo-window .primary-toolbar button:backdrop { opacity: 0.7; background-image: none; box-shadow: none; } paned.titlebar.horizontal headerbar button.flat.toggle.popup:hover:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:hover:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:hover:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:hover:not(.image-button), headerbar button:hover, .nemo-window .primary-toolbar button:hover { border-color: rgba(255, 255, 255, 0.12); color: rgba(221, 213, 213, 0.8); background-color: rgba(119, 119, 119, 0.88); background-image: none; box-shadow: none; transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); } paned.titlebar.horizontal headerbar button.flat.toggle.popup:checked:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:checked:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:checked:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:checked:not(.image-button), headerbar button:checked, .nemo-window .primary-toolbar button:checked { color: #ffffff; background-color: rgba(132, 132, 132, 0.98); background-image: none; border-color: rgba(255, 255, 255, 0.12); border-top-color: rgba(255, 255, 255, 0.12); border-bottom-color: rgba(255, 255, 255, 0.12); text-shadow: none; -gtk-icon-shadow: none; box-shadow: none; background-clip: padding-box; transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); transition-duration: 300ms; } paned.titlebar.horizontal headerbar button.flat.toggle.popup:active:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:active:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:active:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:active:not(.image-button), headerbar button:active, .nemo-window .primary-toolbar button:active { color: #ffffff; background-color: rgba(119, 119, 119, 0.98); background-image: none; border-color: rgba(255, 255, 255, 0.12); text-shadow: none; -gtk-icon-shadow: none; box-shadow: none; transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); transition-duration: 300ms; background-clip: padding-box; } paned.titlebar.horizontal headerbar button.flat.toggle.popup:disabled:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:disabled:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:disabled:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:disabled:not(.image-button), headerbar button:disabled, .nemo-window .primary-toolbar button:disabled { background-color: rgba(119, 119, 119, 0.58); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } paned.titlebar.horizontal headerbar button.flat.toggle.popup:disabled:not(.image-button) label, paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:disabled:not(.image-button) label, paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:disabled:not(.image-button) label, .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:disabled:not(.image-button) label, paned.titlebar.horizontal headerbar button.flat.toggle.popup:disabled:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:disabled:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:disabled:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:disabled:not(.image-button), headerbar button:disabled label, .nemo-window .primary-toolbar button:disabled label, headerbar button:disabled, .nemo-window .primary-toolbar button:disabled { color: rgba(225, 219, 219, 0.35); } paned.titlebar.horizontal headerbar button.flat.toggle.popup:disabled:active:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:disabled:active:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:disabled:active:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:disabled:active:not(.image-button), paned.titlebar.horizontal headerbar button.flat.toggle.popup:disabled:checked:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:disabled:checked:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:disabled:checked:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:disabled:checked:not(.image-button), headerbar button:disabled:active, .nemo-window .primary-toolbar button:disabled:active, headerbar button:disabled:checked, .nemo-window .primary-toolbar button:disabled:checked { color: rgba(255, 255, 255, 0.75); background-color: rgba(119, 119, 119, 0.63); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } paned.titlebar.horizontal headerbar button.flat.toggle.popup:not(.image-button), paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:not(.image-button), headerbar button.flat, .nemo-window .primary-toolbar button.flat, headerbar button.budgie-menu-launcher, .nemo-window .primary-toolbar button.budgie-menu-launcher, headerbar .budgie-panel #tasklist-button, .budgie-panel headerbar #tasklist-button, .nemo-window .primary-toolbar .budgie-panel #tasklist-button, .budgie-panel .nemo-window .primary-toolbar #tasklist-button, headerbar .budgie-panel button.flat.launcher, .budgie-panel headerbar button.flat.launcher, .nemo-window .primary-toolbar .budgie-panel button.flat.launcher, .budgie-panel .nemo-window .primary-toolbar button.flat.launcher { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; } headerbar.selection-mode button, .nemo-window .selection-mode.primary-toolbar button, headerbar.selection-mode button.flat, .nemo-window .selection-mode.primary-toolbar button.flat, headerbar.selection-mode button.budgie-menu-launcher, .nemo-window .selection-mode.primary-toolbar button.budgie-menu-launcher, headerbar.selection-mode .budgie-panel #tasklist-button, .budgie-panel headerbar.selection-mode #tasklist-button, .nemo-window .selection-mode.primary-toolbar .budgie-panel #tasklist-button, .budgie-panel .nemo-window .selection-mode.primary-toolbar #tasklist-button, headerbar.selection-mode .budgie-panel button.flat.launcher, .budgie-panel headerbar.selection-mode button.flat.launcher { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; color: #ffffff; background-color: rgba(255, 255, 255, 0); } headerbar.selection-mode button:hover, .nemo-window .selection-mode.primary-toolbar button:hover { background-color: rgba(255, 255, 255, 0.25); } headerbar.selection-mode button:active, .nemo-window .selection-mode.primary-toolbar button:active, headerbar.selection-mode button:checked, .nemo-window .selection-mode.primary-toolbar button:checked { text-shadow: none; } headerbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child), .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child), headerbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child):hover, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child):hover, headerbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child):active, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child):active, headerbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child):checked, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child):checked, headerbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child):disabled, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) button:not(:only-child):not(:last-child):disabled { margin-right: 1px; } headerbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) > button, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar):not(.stack-switcher) > button { min-width: 20px; } headerbar .linked:not(.vertical):not(.path-bar) > button, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > button, headerbar .linked:not(.vertical):not(.path-bar) > button:hover, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > button:hover, headerbar .linked:not(.vertical):not(.path-bar) > button:active, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > button:active, headerbar .linked:not(.vertical):not(.path-bar) > button:checked, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > button:checked, headerbar .linked:not(.vertical):not(.path-bar) > button:disabled, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > button:disabled { border-radius: 5px; } headerbar .linked:not(.vertical):not(.path-bar) > entry, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > entry, headerbar .linked:not(.vertical):not(.path-bar) > entry:disabled, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > entry:disabled { border-radius: 5px; margin-right: 4px; margin-left: 3px; } headerbar .linked:not(.vertical):not(.path-bar) > button:active + entry, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > button:active + entry, headerbar .linked:not(.vertical):not(.path-bar) > button:checked + entry, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > button:checked + entry { border-left-color: rgba(255, 255, 255, 0.12); } headerbar .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + entry, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + entry, headerbar .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + button, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + button, headerbar .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + combobox > box > button.combo, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar) > entry:focus:not(:only-child) + combobox > box > button.combo { border-left-color: rgba(255, 255, 255, 0.12); } headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button, headerbar .linked:not(.vertical).path-bar > button, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button { border-color: rgba(255, 255, 255, 0.12); color: rgba(225, 219, 219, 0.8); background-color: rgba(119, 119, 119, 0.58); background-image: none; box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); border: none; } headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:hover, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:hover, headerbar .linked:not(.vertical).path-bar > button:hover, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button:hover { border-color: rgba(255, 255, 255, 0.12); color: rgba(221, 213, 213, 0.8); background-color: rgba(119, 119, 119, 0.88); background-image: none; box-shadow: none; } headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:active, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:active, headerbar .linked:not(.vertical).path-bar > button:active, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button:active { color: #ffffff; background-color: rgba(119, 119, 119, 0.98); background-image: none; border-color: rgba(255, 255, 255, 0.12); text-shadow: none; -gtk-icon-shadow: none; box-shadow: none; } headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:checked, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:checked, headerbar .linked:not(.vertical).path-bar > button:checked, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button:checked { color: #ffffff; background-color: rgba(132, 132, 132, 0.98); background-image: none; border-color: rgba(255, 255, 255, 0.12); border-top-color: rgba(255, 255, 255, 0.12); border-bottom-color: rgba(255, 255, 255, 0.12); text-shadow: none; -gtk-icon-shadow: none; box-shadow: none; } headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:disabled, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:disabled, headerbar .linked:not(.vertical).path-bar > button:disabled, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button:disabled { color: rgba(225, 219, 219, 0.4); } headerbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:backdrop, .nemo-window .primary-toolbar .linked:not(.vertical):not(.path-bar).stack-switcher > button:backdrop, headerbar .linked:not(.vertical).path-bar > button:backdrop, .nemo-window .primary-toolbar .linked:not(.vertical).path-bar > button:backdrop { opacity: 0.7; background-image: none; box-shadow: none; } headerbar button.suggested-action, .nemo-window .primary-toolbar button.suggested-action { background-clip: border-box; color: white; background-color: #3484e2; border-color: #1c6bc7; background-image: none; } headerbar button.suggested-action.flat, .nemo-window .primary-toolbar button.suggested-action.flat, headerbar button.suggested-action.budgie-menu-launcher, .nemo-window .primary-toolbar button.suggested-action.budgie-menu-launcher, headerbar .budgie-panel .suggested-action#tasklist-button, .budgie-panel headerbar .suggested-action#tasklist-button, .nemo-window .primary-toolbar .budgie-panel .suggested-action#tasklist-button, .budgie-panel .nemo-window .primary-toolbar .suggested-action#tasklist-button, headerbar .budgie-panel button.suggested-action.flat.launcher, .budgie-panel headerbar button.suggested-action.flat.launcher, .nemo-window .primary-toolbar .budgie-panel button.suggested-action.flat.launcher, .budgie-panel .nemo-window .primary-toolbar button.suggested-action.flat.launcher { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; color: #3484e2; } headerbar button.suggested-action:hover, .nemo-window .primary-toolbar button.suggested-action:hover { background-clip: border-box; color: white; background-color: #619fe8; border-color: #3484e2; background-image: none; } headerbar button.suggested-action:active, .nemo-window .primary-toolbar button.suggested-action:active, headerbar button.suggested-action:checked, .nemo-window .primary-toolbar button.suggested-action:checked { background-clip: border-box; color: white; background-color: #1c6bc7; border-color: #16539a; background-image: none; box-shadow: none; } headerbar button.suggested-action.flat:disabled, .nemo-window .primary-toolbar button.suggested-action.flat:disabled, headerbar button.suggested-action.budgie-menu-launcher:disabled, .nemo-window .primary-toolbar button.suggested-action.budgie-menu-launcher:disabled, headerbar .budgie-panel .suggested-action#tasklist-button:disabled, .budgie-panel headerbar .suggested-action#tasklist-button:disabled, .nemo-window .primary-toolbar .budgie-panel .suggested-action#tasklist-button:disabled, .budgie-panel .nemo-window .primary-toolbar .suggested-action#tasklist-button:disabled, headerbar .budgie-panel button.suggested-action.flat.launcher:disabled, .budgie-panel headerbar button.suggested-action.flat.launcher:disabled, headerbar button.suggested-action:disabled, .nemo-window .primary-toolbar button.suggested-action:disabled { border-color: rgba(255, 255, 255, 0.12); background-color: rgba(72, 72, 72, 0.55); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } headerbar button.suggested-action.flat:disabled label, .nemo-window .primary-toolbar button.suggested-action.flat:disabled label, headerbar button.suggested-action.budgie-menu-launcher:disabled label, .nemo-window .primary-toolbar button.suggested-action.budgie-menu-launcher:disabled label, headerbar .budgie-panel .suggested-action#tasklist-button:disabled label, .budgie-panel headerbar .suggested-action#tasklist-button:disabled label, .nemo-window .primary-toolbar .budgie-panel .suggested-action#tasklist-button:disabled label, .budgie-panel .nemo-window .primary-toolbar .suggested-action#tasklist-button:disabled label, headerbar .budgie-panel button.suggested-action.flat.launcher:disabled label, .budgie-panel headerbar button.suggested-action.flat.launcher:disabled label, headerbar button.suggested-action.flat:disabled, .nemo-window .primary-toolbar button.suggested-action.flat:disabled, headerbar button.suggested-action.budgie-menu-launcher:disabled, .nemo-window .primary-toolbar button.suggested-action.budgie-menu-launcher:disabled, headerbar .budgie-panel .suggested-action#tasklist-button:disabled, .budgie-panel headerbar .suggested-action#tasklist-button:disabled, .nemo-window .primary-toolbar .budgie-panel .suggested-action#tasklist-button:disabled, .budgie-panel .nemo-window .primary-toolbar .suggested-action#tasklist-button:disabled, headerbar .budgie-panel button.suggested-action.flat.launcher:disabled, .budgie-panel headerbar button.suggested-action.flat.launcher:disabled, headerbar button.suggested-action:disabled label, .nemo-window .primary-toolbar button.suggested-action:disabled label, headerbar button.suggested-action:disabled, .nemo-window .primary-toolbar button.suggested-action:disabled { color: rgba(222, 222, 222, 0.45); } headerbar button.suggested-action:backdrop, .nemo-window .primary-toolbar button.suggested-action:backdrop, headerbar button.suggested-action:backdrop, .nemo-window .primary-toolbar button.suggested-action:backdrop { opacity: 0.8; } headerbar button.destructive-action, .nemo-window .primary-toolbar button.destructive-action { background-clip: border-box; color: white; background-color: #f8464c; border-color: #f6151c; background-image: none; } headerbar button.destructive-action.flat, .nemo-window .primary-toolbar button.destructive-action.flat, headerbar button.destructive-action.budgie-menu-launcher, .nemo-window .primary-toolbar button.destructive-action.budgie-menu-launcher, headerbar .budgie-panel .destructive-action#tasklist-button, .budgie-panel headerbar .destructive-action#tasklist-button, .nemo-window .primary-toolbar .budgie-panel .destructive-action#tasklist-button, .budgie-panel .nemo-window .primary-toolbar .destructive-action#tasklist-button, headerbar .budgie-panel button.destructive-action.flat.launcher, .budgie-panel headerbar button.destructive-action.flat.launcher, .nemo-window .primary-toolbar .budgie-panel button.destructive-action.flat.launcher, .budgie-panel .nemo-window .primary-toolbar button.destructive-action.flat.launcher { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; color: #f8464c; } headerbar button.destructive-action:hover, .nemo-window .primary-toolbar button.destructive-action:hover { background-clip: border-box; color: white; background-color: #fa777c; border-color: #f8464c; background-image: none; } headerbar button.destructive-action:active, .nemo-window .primary-toolbar button.destructive-action:active, headerbar button.destructive-action:checked, .nemo-window .primary-toolbar button.destructive-action:checked { background-clip: border-box; color: white; background-color: #f6151c; border-color: #d0080f; background-image: none; box-shadow: none; } headerbar button.destructive-action.flat:disabled, .nemo-window .primary-toolbar button.destructive-action.flat:disabled, headerbar button.destructive-action.budgie-menu-launcher:disabled, .nemo-window .primary-toolbar button.destructive-action.budgie-menu-launcher:disabled, headerbar .budgie-panel .destructive-action#tasklist-button:disabled, .budgie-panel headerbar .destructive-action#tasklist-button:disabled, .nemo-window .primary-toolbar .budgie-panel .destructive-action#tasklist-button:disabled, .budgie-panel .nemo-window .primary-toolbar .destructive-action#tasklist-button:disabled, headerbar .budgie-panel button.destructive-action.flat.launcher:disabled, .budgie-panel headerbar button.destructive-action.flat.launcher:disabled, headerbar button.destructive-action:disabled, .nemo-window .primary-toolbar button.destructive-action:disabled { border-color: rgba(255, 255, 255, 0.12); background-color: rgba(72, 72, 72, 0.55); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } headerbar button.destructive-action.flat:disabled label, .nemo-window .primary-toolbar button.destructive-action.flat:disabled label, headerbar button.destructive-action.budgie-menu-launcher:disabled label, .nemo-window .primary-toolbar button.destructive-action.budgie-menu-launcher:disabled label, headerbar .budgie-panel .destructive-action#tasklist-button:disabled label, .budgie-panel headerbar .destructive-action#tasklist-button:disabled label, .nemo-window .primary-toolbar .budgie-panel .destructive-action#tasklist-button:disabled label, .budgie-panel .nemo-window .primary-toolbar .destructive-action#tasklist-button:disabled label, headerbar .budgie-panel button.destructive-action.flat.launcher:disabled label, .budgie-panel headerbar button.destructive-action.flat.launcher:disabled label, headerbar button.destructive-action.flat:disabled, .nemo-window .primary-toolbar button.destructive-action.flat:disabled, headerbar button.destructive-action.budgie-menu-launcher:disabled, .nemo-window .primary-toolbar button.destructive-action.budgie-menu-launcher:disabled, headerbar .budgie-panel .destructive-action#tasklist-button:disabled, .budgie-panel headerbar .destructive-action#tasklist-button:disabled, .nemo-window .primary-toolbar .budgie-panel .destructive-action#tasklist-button:disabled, .budgie-panel .nemo-window .primary-toolbar .destructive-action#tasklist-button:disabled, headerbar .budgie-panel button.destructive-action.flat.launcher:disabled, .budgie-panel headerbar button.destructive-action.flat.launcher:disabled, headerbar button.destructive-action:disabled label, .nemo-window .primary-toolbar button.destructive-action:disabled label, headerbar button.destructive-action:disabled, .nemo-window .primary-toolbar button.destructive-action:disabled { color: rgba(222, 222, 222, 0.45); } headerbar button.destructive-action:backdrop, .nemo-window .primary-toolbar button.destructive-action:backdrop, headerbar button.destructive-action:backdrop, .nemo-window .primary-toolbar button.destructive-action:backdrop { opacity: 0.8; } headerbar spinbutton:not(.vertical):focus, .nemo-window .primary-toolbar spinbutton:not(.vertical):focus { color: rgba(225, 219, 219, 0.8); caret-color: rgba(225, 219, 219, 0.8); } headerbar spinbutton:not(.vertical) button, .nemo-window .primary-toolbar spinbutton:not(.vertical) button, headerbar spinbutton:not(.vertical) button:disabled, .nemo-window .primary-toolbar spinbutton:not(.vertical) button:disabled { border-color: rgba(255, 255, 255, 0.12); color: rgba(221, 213, 213, 0.8); background-color: rgba(119, 119, 119, 0.88); background-image: none; box-shadow: none; } headerbar spinbutton:not(.vertical) button:hover, .nemo-window .primary-toolbar spinbutton:not(.vertical) button:hover { background-color: rgba(157, 157, 157, 0.58); } headerbar spinbutton:not(.vertical) button:active, .nemo-window .primary-toolbar spinbutton:not(.vertical) button:active, headerbar spinbutton:not(.vertical) button:checked, .nemo-window .primary-toolbar spinbutton:not(.vertical) button:checked { color: #ffffff; background-color: rgba(119, 119, 119, 0.98); background-image: none; border-color: rgba(255, 255, 255, 0.12); text-shadow: none; -gtk-icon-shadow: none; box-shadow: none; } headerbar spinbutton:not(.vertical) button:disabled, .nemo-window .primary-toolbar spinbutton:not(.vertical) button:disabled { color: rgba(225, 219, 219, 0.4); } headerbar spinbutton:not(.vertical) > button + button, .nemo-window .primary-toolbar spinbutton:not(.vertical) > button + button { border-left-style: none; } headerbar spinbutton:not(.vertical) > button:hover:not(:active), .nemo-window .primary-toolbar spinbutton:not(.vertical) > button:hover:not(:active), headerbar spinbutton:not(.vertical) > button:hover + button, .nemo-window .primary-toolbar spinbutton:not(.vertical) > button:hover + button { box-shadow: inset 1px 0 rgba(255, 255, 255, 0.12); } headerbar spinbutton:not(.vertical) > button:first-child:hover:not(:active), .nemo-window .primary-toolbar spinbutton:not(.vertical) > button:first-child:hover:not(:active), headerbar spinbutton:not(.vertical) > entry + button:not(:active):hover, .nemo-window .primary-toolbar spinbutton:not(.vertical) > entry + button:not(:active):hover { box-shadow: none; } headerbar spinbutton:not(.vertical) > entry:focus + button, .nemo-window .primary-toolbar spinbutton:not(.vertical) > entry:focus + button { border-left-color: #8eb9ff; } headerbar combobox:disabled, .nemo-window .primary-toolbar combobox:disabled { color: rgba(225, 219, 219, 0.2); } headerbar combobox > .linked > button.combo, .nemo-window .primary-toolbar combobox > .linked > button.combo { border-radius: 5px; border: none; color: rgba(225, 219, 219, 0.8); background-color: rgba(119, 119, 119, 0.58); background-image: none; } headerbar combobox > .linked > button.combo image, .nemo-window .primary-toolbar combobox > .linked > button.combo image, headerbar combobox > .linked > button.combo image:hover, .nemo-window .primary-toolbar combobox > .linked > button.combo image:hover { color: inherit; } headerbar combobox > .linked > button.combo:hover, .nemo-window .primary-toolbar combobox > .linked > button.combo:hover { border: none; box-shadow: 0 0 0 2px #8eb9ff, inset 0 0 0 1px #8eb9ff; border-color: #8eb9ff; background-image: none; box-shadow: none; } headerbar combobox > .linked > button.combo:disabled, .nemo-window .primary-toolbar combobox > .linked > button.combo:disabled { color: rgba(225, 219, 219, 0.35); background-color: rgba(111, 111, 111, 0.23); } headerbar combobox > .linked > entry.combo, .nemo-window .primary-toolbar combobox > .linked > entry.combo { border-radius: 5px; } headerbar combobox > .linked > entry.combo:dir(ltr), .nemo-window .primary-toolbar combobox > .linked > entry.combo:dir(ltr) { border-right-style: none; } headerbar combobox > .linked > entry.combo:dir(ltr):focus, .nemo-window .primary-toolbar combobox > .linked > entry.combo:dir(ltr):focus { box-shadow: none; } headerbar combobox > .linked > entry.combo:dir(rtl), .nemo-window .primary-toolbar combobox > .linked > entry.combo:dir(rtl) { border-left-style: none; } headerbar combobox > .linked > entry.combo:dir(rtl):focus, .nemo-window .primary-toolbar combobox > .linked > entry.combo:dir(rtl):focus { box-shadow: none; } headerbar switch:backdrop, .nemo-window .primary-toolbar switch:backdrop { opacity: 0.75; } headerbar progressbar trough, .nemo-window .primary-toolbar progressbar trough { background-color: transparent; } headerbar progressbar:backdrop, .nemo-window .primary-toolbar progressbar:backdrop { opacity: 0.75; } headerbar scale:backdrop, .nemo-window .primary-toolbar scale:backdrop { opacity: 0.75; } headerbar scale slider, .nemo-window .primary-toolbar scale slider { background-color: #515151; border-color: rgba(0, 0, 0, 0.3); } headerbar scale slider:hover, .nemo-window .primary-toolbar scale slider:hover { background-color: #5d5d5d; border-color: rgba(0, 0, 0, 0.3); } headerbar scale slider:active, .nemo-window .primary-toolbar scale slider:active { background-color: #515151; border-color: rgba(0, 0, 0, 0.3); } headerbar scale slider:disabled, .nemo-window .primary-toolbar scale slider:disabled { background-color: rgba(73, 73, 73, 0.994); border-color: rgba(0, 0, 0, 0.3); } headerbar scale trough, .nemo-window .primary-toolbar scale trough { background-color: transparent; } headerbar scale trough:disabled, .nemo-window .primary-toolbar scale trough:disabled { background-color: transparent; } .path-bar button { min-width: 12px; } .path-bar button.text-button, .path-bar button.image-button, .path-bar button { padding-left: 6px; padding-right: 6px; } .path-bar button:hover { box-shadow: none; } .path-bar button:active, .path-bar button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.35); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); } .path-bar button.text-button.image-button label { padding-left: 0; padding-right: 0; } .path-bar button.text-button.image-button label:last-child, .path-bar button label:last-child { padding-right: 10px; } .path-bar button.text-button.image-button label:first-child, .path-bar button label:first-child { padding-left: 10px; } .path-bar button.slider-button, .path-bar button:not(.image-button):not(.text-button) { padding-left: 1px; padding-right: 1px; } .path-bar button image { padding-left: 4px; padding-right: 4px; } treeview.view { border-left-color: rgba(222, 222, 222, 0.15); border-top-color: rgba(0, 0, 0, 0.1); } * { -GtkTreeView-horizontal-separator: 4; -GtkTreeView-grid-line-width: 1; -GtkTreeView-grid-line-pattern: ''; -GtkTreeView-tree-line-width: 1; -GtkTreeView-tree-line-pattern: ''; -GtkTreeView-expander-size: 16; } treeview.view acceleditor > label { background-color: #498dff; } treeview.view:selected, treeview.view:selected:focus { border-radius: 0; border-left-color: #a4c6ff; border-top-color: rgba(222, 222, 222, 0.1); } treeview.view:disabled { color: rgba(222, 222, 222, 0.45); } treeview.view:disabled:selected { color: #92bbff; } treeview.view.separator { min-height: 2px; color: rgba(0, 0, 0, 0.1); } treeview.view:drop(active) { border-style: solid none; border-width: 1px; border-color: #94b6ef; } treeview.view:drop(active).after { border-top-style: none; } treeview.view:drop(active).before { border-bottom-style: none; } treeview.view.expander { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); color: #818181; } treeview.view.expander:dir(rtl) { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic-rtl"); } treeview.view.expander:hover { color: #dedede; } treeview.view.expander:selected { color: #c8ddff; } treeview.view.expander:selected:hover { color: #ffffff; } treeview.view.expander:checked { -gtk-icon-source: -gtk-icontheme("pan-down-symbolic"); } treeview.view.progressbar, treeview.view.progressbar:focus { color: #ffffff; border-radius: 5px; background-color: #498dff; } treeview.view.progressbar:selected, treeview.view.progressbar:selected:focus, treeview.view.progressbar:focus:selected, treeview.view.progressbar:focus:selected:focus { color: #498dff; box-shadow: none; background-color: #ffffff; } treeview.view.trough { color: #dedede; background-color: rgba(255, 255, 255, 0.12); border-radius: 5px; border-width: 0; } treeview.view.trough:selected, treeview.view.trough:selected:focus { color: #ffffff; background-color: rgba(0, 0, 0, 0.2); border-radius: 5px; border-width: 0; } treeview.view header button { min-height: 26px; min-width: 38px; padding: 0 6px; font-weight: bold; color: #b9b9b9; background-color: #242424; background-image: none; border-style: none solid none none; border-radius: 0; border-image: linear-gradient(to bottom, #242424 20%, rgba(255, 255, 255, 0.11) 20%, rgba(255, 255, 255, 0.11) 80%, #242424 80%) 0 1 0 0/0 1px 0 0 stretch; } treeview.view header button:hover { color: #498dff; } treeview.view header button:active { color: #dedede; } treeview.view header button:active, treeview.view header button:hover { background-color: #242424; } treeview.view header button:active:hover { color: #dedede; } treeview.view header button:disabled { border-color: #333333; background-image: none; } treeview.view header button:last-child { border-right-style: none; border-image: none; } treeview.view button.dnd, treeview.view button.dnd:selected, treeview.view button.dnd:hover, treeview.view button.dnd:active, treeview.view header.button.dnd, treeview.view header.button.dnd:selected, treeview.view header.button.dnd:hover, treeview.view header.button.dnd:active { padding: 0 6px; transition: none; color: #ffffff; background-color: #498dff; border-radius: 0; border-style: none; } menubar, .menubar { -GtkWidget-window-dragging: true; padding: 0px; background-color: #373737; background-image: none; color: rgba(225, 219, 219, 0.8); box-shadow: inset 0 -1px rgba(255, 255, 255, 0.12); } menubar:backdrop, .menubar:backdrop { color: rgba(225, 219, 219, 0.6); } menubar > menuitem, .menubar > menuitem { transition: all 0.2s cubic-bezier(0, 0, 0.2, 1); padding: 4px 8px; } menubar > menuitem menu, .menubar > menuitem menu { border-radius: 0 0 6px 6px; } menubar > menuitem menu menu, .menubar > menuitem menu menu { border-radius: 6px; } menubar > menuitem:hover, .menubar > menuitem:hover { background-color: #498dff; color: #ffffff; text-shadow: 0 -1px rgba(255, 255, 255, 0.04), -1px 0px rgba(32, 32, 32, 0.05), 1px 0px rgba(32, 32, 32, 0.05), 0px 1px rgba(32, 32, 32, 0.3), 0px 2px rgba(32, 32, 32, 0.05); } menubar > menuitem:disabled, .menubar > menuitem:disabled { color: rgba(225, 219, 219, 0.2); border-color: transparent; } menu, .menu { padding: 6px 0; border-radius: 8px; background-color: #191919; } menu separator, .csd menu separator, .menu separator, .csd .menu separator { margin: 0; min-height: 0; border-bottom: 1px solid rgba(255, 255, 255, 0.04); background-color: transparent; } menu menuitem, .menu menuitem { min-height: 20px; min-width: 40px; padding: 2px 6px; text-shadow: none; } menu menuitem:hover, .menu menuitem:hover { color: #ffffff; background-color: #498dff; text-shadow: 0 -2px rgba(255, 255, 255, 0.04), -1px 0px rgba(32, 32, 32, 0.05), 1px 0px rgba(32, 32, 32, 0.05), 0px 1px rgba(32, 32, 32, 0.3), 0px 2px rgba(32, 32, 32, 0.05); } menu menuitem:hover arrow, .menu menuitem:hover arrow { transition: none; color: #ffffff; -gtk-icon-shadow: none; } menu menuitem:hover menu arrow, .menu menuitem:hover menu arrow { color: #dedede; text-shadow: none; -gtk-icon-shadow: none; } menu menuitem:disabled, .menu menuitem:disabled { color: rgba(222, 222, 222, 0.45); } menu menuitem arrow, .menu menuitem arrow { min-height: 16px; min-width: 16px; background-color: transparent; background-image: none; border: none; color: #dedede; } menu menuitem arrow:dir(ltr), .menu menuitem arrow:dir(ltr) { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); margin-right: 0; } menu menuitem arrow:dir(rtl), .menu menuitem arrow:dir(rtl) { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic-rtl"); margin-left: 0; } menuitem accelerator { color: alpha(currentColor,0.55); } menuitem check, menuitem radio { min-height: 16px; min-width: 16px; } menuitem check:dir(ltr), menuitem radio:dir(ltr) { margin-right: 6px; margin-left: 2px; } menuitem check:dir(rtl), menuitem radio:dir(rtl) { margin-left: 6px; margin-right: 2px; } menu > arrow, .menu > arrow { min-width: 16px; min-height: 16px; padding: 2px; background-color: transparent; border-radius: 0; border: none; background-image: none; color: #dedede; } menu > arrow.top, .menu > arrow.top { margin: -8px 0 0 0; border-radius: 6px 6px 0 0; border-bottom: 1px solid rgba(255, 255, 255, 0.12); -gtk-icon-source: -gtk-icontheme("pan-up-symbolic"); } menu > arrow.bottom, .menu > arrow.bottom { margin: 0 0 -18px 0; border-radius: 0 0 6px 6px; border-top: 1px solid rgba(255, 255, 255, 0.12); -gtk-icon-source: -gtk-icontheme("pan-down-symbolic"); } menu > arrow:hover, .menu > arrow:hover { background-color: rgba(222, 222, 222, 0.08); } menu > arrow:disabled, .menu > arrow:disabled { color: transparent; background-color: transparent; border-color: transparent; } popover, popover.background { padding: 0; border-radius: 6px; background-clip: border-box; background-color: rgba(51, 51, 51, 0.98); box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.15); } .csd popover, popover, .csd popover.background, popover.background { border-radius: 6px; border: 1px solid rgba(255, 255, 255, 0.12); } popover separator, popover separator, .csd popover separator, popover.background separator, popover.background separator, .csd popover.background separator { margin: 4px -9px; min-height: 2px; border: none; background-color: rgba(255, 255, 255, 0.08); } popover > list, popover > .view, popover > iconview, popover > toolbar, popover > .inline-toolbar, popover.background > list, popover.background > .view, popover.background > iconview, popover.background > toolbar, popover.background > .inline-toolbar { border-style: none; background-color: transparent; } cursor-handle { background-color: transparent; background-image: none; box-shadow: none; border-style: none; } cursor-handle.top { -gtk-icon-source: -gtk-icontheme("selection-start-symbolic"); } cursor-handle.bottom { -gtk-icon-source: -gtk-icontheme("selection-end-symbolic"); } notebook { padding: 0; } notebook.frame { border: 1px solid rgba(255, 255, 255, 0.12); } notebook > stack:not(:only-child) { background-color: #242424; } notebook > header { padding: 0; background-color: rgba(30, 30, 30, 0.98); } notebook > header.top { box-shadow: inset 0 1px rgba(255, 255, 255, 0.12), inset 0 -1px rgba(255, 255, 255, 0.12); margin-top: -1px; } notebook > header.bottom { box-shadow: inset 0 1px rgba(255, 255, 255, 0.12), inset 0 -1px rgba(255, 255, 255, 0.12); margin-bottom: -1px; } notebook > header.right { box-shadow: inset 1px 0 rgba(255, 255, 255, 0.12), inset -1px 0 rgba(255, 255, 255, 0.12); margin-right: -1px; } notebook > header.left { box-shadow: inset 1px 0 rgba(255, 255, 255, 0.12), inset -1px 0 rgba(255, 255, 255, 0.12); margin-left: -1px; } notebook > header button.flat, notebook > header button.budgie-menu-launcher, notebook > header .budgie-panel #tasklist-button, .budgie-panel notebook > header #tasklist-button, notebook > header .budgie-panel button.flat.launcher, .budgie-panel notebook > header button.flat.launcher { min-height: 24px; min-width: 24px; padding: 0; border: none; box-shadow: none; margin: 2px; } notebook > header.top { padding: 0; } notebook > header.top > tabs > tab { padding: 2px 10px; min-width: 20px; min-height: 20px; border-radius: 0; outline-offset: -4px; } notebook > header.top > tabs > tab + tab { margin-left: -1px; } notebook > header.bottom { padding: 0; } notebook > header.bottom > tabs > tab { padding: 2px 10px; min-width: 20px; min-height: 20px; border-radius: 0; outline-offset: -4px; } notebook > header.bottom > tabs > tab + tab { margin-left: -1px; } notebook > header.right { padding: 0; } notebook > header.right > tabs > tab { padding: 2px 10px; min-width: 20px; min-height: 20px; border-radius: 0; outline-offset: -4px; } notebook > header.right > tabs > tab + tab { margin-top: -1px; } notebook > header.left { padding: 0; } notebook > header.left > tabs > tab { padding: 2px 10px; min-width: 20px; min-height: 20px; border-radius: 0; outline-offset: -4px; } notebook > header.left > tabs > tab + tab { margin-top: -1px; } notebook > header.top > tabs > arrow.up, notebook > header.bottom > tabs > arrow.up { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); } notebook > header.top > tabs > arrow.up:last-child, notebook > header.bottom > tabs > arrow.up:last-child { margin-left: 2px; } notebook > header.top > tabs > arrow.down, notebook > header.bottom > tabs > arrow.down { -gtk-icon-source: -gtk-icontheme("pan-start-symbolic"); } notebook > header.top > tabs > arrow.down:first-child, notebook > header.bottom > tabs > arrow.down:first-child { margin-right: 2px; } notebook > header.left > tabs > arrow.up, notebook > header.right > tabs > arrow.up { -gtk-icon-source: -gtk-icontheme("pan-down-symbolic"); } notebook > header.left > tabs > arrow.up:last-child, notebook > header.right > tabs > arrow.up:last-child { margin-top: 2px; } notebook > header.left > tabs > arrow.down, notebook > header.right > tabs > arrow.down { -gtk-icon-source: -gtk-icontheme("pan-up-symbolic"); } notebook > header.left > tabs > arrow.down:first-child, notebook > header.right > tabs > arrow.down:first-child { margin-bottom: 2px; } notebook > header > tabs > arrow { color: rgba(222, 222, 222, 0.45); } notebook > header > tabs > arrow:hover { color: rgba(222, 222, 222, 0.725); } notebook > header > tabs > arrow:active { color: #dedede; } notebook > header > tabs > arrow:disabled { color: rgba(222, 222, 222, 0.15); } notebook > header > tabs > tab { color: rgba(222, 222, 222, 0.45); background-color: rgba(36, 36, 36, 0); border: 1px solid transparent; } notebook > header > tabs > tab:hover:not(:checked) { color: rgba(222, 222, 222, 0.725); background-color: rgba(255, 255, 255, 0.05); border-color: rgba(68, 68, 68, 0.98); } notebook > header > tabs > tab:checked { color: #dedede; background-color: rgba(55, 55, 55, 0.98); border-color: rgba(68, 68, 68, 0.98); } notebook > header > tabs > tab button.flat, notebook > header > tabs > tab button.budgie-menu-launcher, notebook > header > tabs > tab .budgie-panel #tasklist-button, .budgie-panel notebook > header > tabs > tab #tasklist-button, notebook > header > tabs > tab .budgie-panel button.flat.launcher, .budgie-panel notebook > header > tabs > tab button.flat.launcher { min-height: 16px; min-width: 16px; border-radius: 3px; padding: 0; margin: 2px 0; color: #a2a2a2; } notebook > header > tabs > tab button.flat:hover, notebook > header > tabs > tab button.budgie-menu-launcher:hover, notebook > header > tabs > tab .budgie-panel #tasklist-button:hover, .budgie-panel notebook > header > tabs > tab #tasklist-button:hover, notebook > header > tabs > tab .budgie-panel button.flat.launcher:hover, .budgie-panel notebook > header > tabs > tab button.flat.launcher:hover { color: rgba(255, 0, 0, 0.5); background-color: rgba(222, 222, 222, 0.1); } notebook > header > tabs > tab button.flat:active, notebook > header > tabs > tab button.budgie-menu-launcher:active, notebook > header > tabs > tab .budgie-panel #tasklist-button:active, .budgie-panel notebook > header > tabs > tab #tasklist-button:active, notebook > header > tabs > tab .budgie-panel button.flat.launcher:active, .budgie-panel notebook > header > tabs > tab button.flat.launcher:active, notebook > header > tabs > tab button.flat:active:hover, notebook > header > tabs > tab button.budgie-menu-launcher:active:hover, notebook > header > tabs > tab .budgie-panel #tasklist-button:active:hover, .budgie-panel notebook > header > tabs > tab #tasklist-button:active:hover, .budgie-panel notebook > header > tabs > tab button.flat.launcher:active:hover { color: rgba(204, 0, 0, 0.5); background-color: rgba(222, 222, 222, 0.2); } scrollbar { background-color: transparent; transition: 300ms cubic-bezier(0.25, 0.46, 0.45, 0.94); border: none; } * { -GtkScrollbar-has-backward-stepper: false; -GtkScrollbar-has-forward-stepper: false; } scrollbar button { border: none; } scrollbar.vertical button.down { -gtk-icon-source: -gtk-icontheme("pan-down-symbolic"); } scrollbar.vertical button.up { -gtk-icon-source: -gtk-icontheme("pan-up-symbolic"); } scrollbar.horizontal button.down { -gtk-icon-source: -gtk-icontheme("pan-right-symbolic"); } scrollbar.horizontal button.up { -gtk-icon-source: -gtk-icontheme("pan-left-symbolic"); } scrollbar slider { min-width: 4px; min-height: 4px; margin: -1px; border: 4px solid transparent; border-radius: 8px; background-clip: padding-box; background-color: #777777; } scrollbar slider:hover { background-color: #666666; } scrollbar slider:hover:active { background-color: rgba(132, 132, 132, 0.98); } scrollbar slider:disabled { background-color: transparent; } scrollbar.fine-tune slider { min-width: 4px; min-height: 4px; } scrollbar.fine-tune.horizontal slider { border-width: 5px 4px; } scrollbar.fine-tune.vertical slider { border-width: 4px 5px; } scrollbar.overlay-indicator:not(.dragging):not(.hovering) { opacity: 0.4; border-color: transparent; background-color: transparent; } scrollbar.overlay-indicator:not(.dragging):not(.hovering) slider { margin: 0; min-width: 4px; min-height: 4px; background-color: #ababab; border: 1px solid rgba(255, 255, 255, 0.12); } scrollbar.overlay-indicator:not(.dragging):not(.hovering).horizontal slider { margin: 0 3px; min-width: 40px; } scrollbar.overlay-indicator:not(.dragging):not(.hovering).vertical slider { margin: 3px 0; min-height: 40px; } scrollbar.overlay-indicator.dragging, scrollbar.overlay-indicator.hovering { opacity: 0.99; } scrollbar.horizontal slider { min-width: 40px; } scrollbar.vertical slider { min-height: 40px; } row switch:not(:indeterminate), row switch:not(:indeterminate) slider:not(:indeterminate), .raven .raven-background switch:not(:indeterminate), .raven .raven-background switch:not(:indeterminate) slider:not(:indeterminate), row switch:disabled:not(:indeterminate), row switch:not(:indeterminate) slider:disabled:not(:indeterminate), .raven .raven-background switch:disabled:not(:indeterminate), .raven .raven-background switch:not(:indeterminate) slider:disabled:not(:indeterminate) { padding: 0; border: none; color: transparent; background: unset; background-image: unset; background-repeat: no-repeat; background-position: right center; box-shadow: none; animation: none; font-size: 0; outline-color: transparent; } row switch:dir(rtl):not(:indeterminate), row switch:not(:indeterminate) slider:dir(rtl):not(:indeterminate), .raven .raven-background switch:dir(rtl):not(:indeterminate), .raven .raven-background switch:not(:indeterminate) slider:dir(rtl):not(:indeterminate), row switch:disabled:dir(rtl):not(:indeterminate), row switch:not(:indeterminate) slider:disabled:dir(rtl):not(:indeterminate), .raven .raven-background switch:disabled:dir(rtl):not(:indeterminate), .raven .raven-background switch:not(:indeterminate) slider:disabled:dir(rtl):not(:indeterminate) { background-position: left center; } row switch:not(:indeterminate) { min-width: 40px; min-height: 24px; margin: 0; background-size: 40px 24px; transition: all 350ms cubic-bezier(0.25, 0.46, 0.45, 0.94); background-image: -gtk-scaled(url("assets/switch.png"), url("assets/switch@2.png")); } row switch:not(:indeterminate) slider:not(:indeterminate) { margin: 0; background-size: 40px 24px; } row switch:not(:indeterminate):hover { transition: all 350ms cubic-bezier(0.25, 0.46, 0.45, 0.94); background-image: -gtk-scaled(url("assets/switch-hover.png"), url("assets/switch-hover@2.png")); } row switch:not(:indeterminate):checked { transition: all 350ms cubic-bezier(0.25, 0.46, 0.45, 0.94); background-image: -gtk-scaled(url("assets/switch-active.png"), url("assets/switch-active@2.png")); } row switch:not(:indeterminate):checked:hover { background-image: -gtk-scaled(url("assets/switch-active-hover.png"), url("assets/switch-active-hover@2.png")); } row switch:not(:indeterminate):checked:disabled, row switch:not(:indeterminate):checked:disabled:hover { background-image: -gtk-scaled(url("assets/switch-active-insensitive.png"), url("assets/switch-active-insensitive@2.png")); } row switch:not(:indeterminate):disabled, row switch:not(:indeterminate):disabled:hover { background-image: -gtk-scaled(url("assets/switch-insensitive.png"), url("assets/switch-insensitive@2.png")); } .raven .raven-background switch:not(:indeterminate) { min-width: 50px; min-height: 20px; margin: 6px 2px; background-size: 50px 20px; transition: all 350ms cubic-bezier(0.25, 0.46, 0.45, 0.94); background-image: -gtk-scaled(url("assets/toggle-off.svg")); } .raven .raven-background switch:not(:indeterminate) slider:not(:indeterminate) { margin: 0; background-size: 50px 20px; } .raven .raven-background switch:not(:indeterminate):checked { transition: all 350ms cubic-bezier(0.25, 0.46, 0.45, 0.94); background-image: -gtk-scaled(url("assets/toggle-on.svg")); } .raven .raven-background switch:not(:indeterminate):checked:disabled { background-image: -gtk-scaled(url("assets/toggle-on-disabled.svg")); } .raven .raven-background switch:not(:indeterminate):disabled { background-image: -gtk-scaled(url("assets/toggle-off-disabled.svg")); } switch { transition: all 0.3s cubic-bezier(0, 0, 0.2, 1), box-shadow 0.2s cubic-bezier(0, 0, 0.2, 1); margin: 6px 0; border-radius: 50px; background-color: alpha(currentColor,0.3); background-clip: padding-box; font-size: 0; } switch:disabled { color: alpha(currentColor,0.4); } switch:checked { animation: switch_ripple_effect 0.3s cubic-bezier(0, 0, 0.2, 1); background-color: #71c837; } switch:checked:disabled { background-color: alpha(#71c837,0.5); color: rgba(222, 222, 222, 0.45); } switch slider { transition: all 0.3s cubic-bezier(0, 0, 0.2, 1), box-shadow 0.2s cubic-bezier(0, 0, 0.2, 1), box-shadow 0.2s cubic-bezier(0, 0, 0.2, 1), margin 0; min-width: 18px; min-height: 18px; margin: 2px 0 2px 2px; border-radius: 50px; -gtk-outline-radius: 50px; background-color: white; box-shadow: 0px 1px 2px 0px rgba(16, 16, 16, 0.15), 0px 2px 3px 0px rgba(16, 16, 16, 0.1); } switch:hover slider { box-shadow: 0px 2px 3px 0px rgba(16, 16, 16, 0.2), 0px 3px 5px 0px rgba(16, 16, 16, 0.15); } switch:checked slider { margin: 2px 2px 2px 0; background-color: #ffffff; } switch:checked:disabled slider { animation: none; } .check, check, treeview.check { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-unchecked-dark.png"), url("assets/checkbox-unchecked-dark@2.png")); } .osd check, filechooser actionbar check { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-unchecked-dark.png"), url("assets/checkbox-unchecked-dark@2.png")); } menuitem check:hover, .view check:selected, iconview check:selected, treeview.check:selected, row:selected check, infobar check { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-unchecked-selected.png"), url("assets/checkbox-unchecked-selected@2.png")); } .check:disabled, check:disabled, treeview.check:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-unchecked-insensitive-dark.png"), url("assets/checkbox-unchecked-insensitive-dark@2.png")); } .osd check:disabled, filechooser actionbar check:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-unchecked-insensitive-dark.png"), url("assets/checkbox-unchecked-insensitive-dark@2.png")); } menuitem check:disabled:hover, .view check:disabled:selected, iconview check:disabled:selected, treeview.check:disabled:selected, row:selected check:disabled, infobar check:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-unchecked-insensitive-selected.png"), url("assets/checkbox-unchecked-insensitive-selected@2.png")); } .check:indeterminate, check:indeterminate, treeview.check:indeterminate { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-mixed-dark.png"), url("assets/checkbox-mixed-dark@2.png")); } .osd check:indeterminate, filechooser actionbar check:indeterminate { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-mixed-dark.png"), url("assets/checkbox-mixed-dark@2.png")); } menuitem check:indeterminate:hover, .view check:indeterminate:selected, iconview check:indeterminate:selected, treeview.check:indeterminate:selected, row:selected check:indeterminate, infobar check:indeterminate { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-mixed-selected.png"), url("assets/checkbox-mixed-selected@2.png")); } .check:indeterminate:disabled, check:indeterminate:disabled, treeview.check:indeterminate:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-mixed-insensitive-dark.png"), url("assets/checkbox-mixed-insensitive-dark@2.png")); } .osd check:indeterminate:disabled, filechooser actionbar check:indeterminate:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-mixed-insensitive-dark.png"), url("assets/checkbox-mixed-insensitive-dark@2.png")); } menuitem check:indeterminate:disabled:hover, .view check:indeterminate:disabled:selected, iconview check:indeterminate:disabled:selected, treeview.check:indeterminate:disabled:selected, row:selected check:indeterminate:disabled, infobar check:indeterminate:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-mixed-insensitive-selected.png"), url("assets/checkbox-mixed-insensitive-selected@2.png")); } .check:checked, check:checked, treeview.check:checked { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-checked-dark.png"), url("assets/checkbox-checked-dark@2.png")); } .osd check:checked, filechooser actionbar check:checked { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-checked-dark.png"), url("assets/checkbox-checked-dark@2.png")); } menuitem check:checked:hover, .view check:checked:selected, iconview check:checked:selected, treeview.check:checked:selected, row:selected check:checked, infobar check:checked { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-checked-selected.png"), url("assets/checkbox-checked-selected@2.png")); } .check:checked:disabled, check:checked:disabled, treeview.check:checked:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-checked-insensitive-dark.png"), url("assets/checkbox-checked-insensitive-dark@2.png")); } .osd check:checked:disabled, filechooser actionbar check:checked:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-checked-insensitive-dark.png"), url("assets/checkbox-checked-insensitive-dark@2.png")); } menuitem check:checked:disabled:hover, .view check:checked:disabled:selected, iconview check:checked:disabled:selected, treeview.check:checked:disabled:selected, row:selected check:checked:disabled, infobar check:checked:disabled { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-checked-insensitive-selected.png"), url("assets/checkbox-checked-insensitive-selected@2.png")); } .radio, radio, treeview.radio { -gtk-icon-source: -gtk-scaled(url("assets/radio-unchecked-dark.png"), url("assets/radio-unchecked-dark@2.png")); } .osd radio, filechooser actionbar radio { -gtk-icon-source: -gtk-scaled(url("assets/radio-unchecked-dark.png"), url("assets/radio-unchecked-dark@2.png")); } menuitem radio:hover, .view radio:selected, iconview radio:selected, treeview.radio:selected, row:selected radio, infobar radio { -gtk-icon-source: -gtk-scaled(url("assets/radio-unchecked-selected.png"), url("assets/radio-unchecked-selected@2.png")); } .radio:disabled, radio:disabled, treeview.radio:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-unchecked-insensitive-dark.png"), url("assets/radio-unchecked-insensitive-dark@2.png")); } .osd radio:disabled, filechooser actionbar radio:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-unchecked-insensitive-dark.png"), url("assets/radio-unchecked-insensitive-dark@2.png")); } menuitem radio:disabled:hover, .view radio:disabled:selected, iconview radio:disabled:selected, treeview.radio:disabled:selected, row:selected radio:disabled, infobar radio:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-unchecked-insensitive-selected.png"), url("assets/radio-unchecked-insensitive-selected@2.png")); } .radio:indeterminate, radio:indeterminate, treeview.radio:indeterminate { -gtk-icon-source: -gtk-scaled(url("assets/radio-mixed-dark.png"), url("assets/radio-mixed-dark@2.png")); } .osd radio:indeterminate, filechooser actionbar radio:indeterminate { -gtk-icon-source: -gtk-scaled(url("assets/radio-mixed-dark.png"), url("assets/radio-mixed-dark@2.png")); } menuitem radio:indeterminate:hover, .view radio:indeterminate:selected, iconview radio:indeterminate:selected, treeview.radio:indeterminate:selected, row:selected radio:indeterminate, infobar radio:indeterminate { -gtk-icon-source: -gtk-scaled(url("assets/radio-mixed-selected.png"), url("assets/radio-mixed-selected@2.png")); } .radio:indeterminate:disabled, radio:indeterminate:disabled, treeview.radio:indeterminate:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-mixed-insensitive-dark.png"), url("assets/radio-mixed-insensitive-dark@2.png")); } .osd radio:indeterminate:disabled, filechooser actionbar radio:indeterminate:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-mixed-insensitive-dark.png"), url("assets/radio-mixed-insensitive-dark@2.png")); } menuitem radio:indeterminate:disabled:hover, .view radio:indeterminate:disabled:selected, iconview radio:indeterminate:disabled:selected, treeview.radio:indeterminate:disabled:selected, row:selected radio:indeterminate:disabled, infobar radio:indeterminate:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-mixed-insensitive-selected.png"), url("assets/radio-mixed-insensitive-selected@2.png")); } .radio:checked, radio:checked, treeview.radio:checked { -gtk-icon-source: -gtk-scaled(url("assets/radio-checked-dark.png"), url("assets/radio-checked-dark@2.png")); } .osd radio:checked, filechooser actionbar radio:checked { -gtk-icon-source: -gtk-scaled(url("assets/radio-checked-dark.png"), url("assets/radio-checked-dark@2.png")); } menuitem radio:checked:hover, .view radio:checked:selected, iconview radio:checked:selected, treeview.radio:checked:selected, row:selected radio:checked, infobar radio:checked { -gtk-icon-source: -gtk-scaled(url("assets/radio-checked-selected.png"), url("assets/radio-checked-selected@2.png")); } .radio:checked:disabled, radio:checked:disabled, treeview.radio:checked:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-checked-insensitive-dark.png"), url("assets/radio-checked-insensitive-dark@2.png")); } .osd radio:checked:disabled, filechooser actionbar radio:checked:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-checked-insensitive-dark.png"), url("assets/radio-checked-insensitive-dark@2.png")); } menuitem radio:checked:disabled:hover, .view radio:checked:disabled:selected, iconview radio:checked:disabled:selected, treeview.radio:checked:disabled:selected, row:selected radio:checked:disabled, infobar radio:checked:disabled { -gtk-icon-source: -gtk-scaled(url("assets/radio-checked-insensitive-selected.png"), url("assets/radio-checked-insensitive-selected@2.png")); } .view.content-view.check:not(list), iconview.content-view.check:not(list) { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-selectionmode-dark.png"), url("assets/checkbox-selectionmode-dark@2.png")); background-color: transparent; } .view.content-view.check:checked:not(list), iconview.content-view.check:checked:not(list) { -gtk-icon-source: -gtk-scaled(url("assets/checkbox-checked-selectionmode-dark.png"), url("assets/checkbox-checked-selectionmode-dark@2.png")); background-color: transparent; } checkbutton.text-button, radiobutton.text-button { padding: 2px 0; outline-offset: 0; } checkbutton.text-button:hover, radiobutton.text-button:hover { color: #b8b8b8; } checkbutton.text-button:disabled, radiobutton.text-button:disabled { color: rgba(222, 222, 222, 0.45); } checkbutton label:not(:only-child):first-child, radiobutton label:not(:only-child):first-child { margin-left: 4px; } checkbutton label:not(:only-child):last-child, radiobutton label:not(:only-child):last-child { margin-right: 4px; } check, radio { min-width: 16px; min-height: 16px; margin: 0 2px; } check:only-child, menu menuitem check, radio:only-child, menu menuitem radio { margin: 0; } scale { min-height: 15px; min-width: 15px; padding: 3px; } scale.horizontal trough { padding: 0 4px; } scale.horizontal highlight, scale.horizontal fill { margin: 0 -4px; } scale.vertical trough { padding: 4px 0; } scale.vertical highlight, scale.vertical fill { margin: -4px 0; } scale slider { min-height: 15px; min-width: 15px; margin: -7px; } scale.fine-tune slider { margin: -4px; } scale.fine-tune fill, scale.fine-tune highlight, scale.fine-tune trough { border-radius: 5px; -gtk-outline-radius: 7px; } scale trough { outline-offset: 2px; -gtk-outline-radius: 6px; border-radius: 5px; background-color: rgba(0, 0, 0, 0.2); } scale trough:disabled { background-color: rgba(0, 0, 0, 0.12); } .osd scale trough { background-color: rgba(0, 0, 0, 0.2); } .osd scale trough highlight { background-color: #498dff; } menuitem:hover scale trough, row:selected scale trough, infobar scale trough { background-color: rgba(0, 0, 0, 0.2); } menuitem:hover scale trough highlight, row:selected scale trough highlight, infobar scale trough highlight { background-color: #ffffff; } menuitem:hover scale trough highlight:disabled, row:selected scale trough highlight:disabled, infobar scale trough highlight:disabled { background-color: #adccff; } menuitem:hover scale trough:disabled, row:selected scale trough:disabled, infobar scale trough:disabled { background-color: rgba(0, 0, 0, 0.1); } scale highlight { border-radius: 5px; background-color: #498dff; } scale highlight:disabled { background-color: rgba(73, 141, 255, 0.55); } scale fill { border-radius: 5px; background-color: rgba(73, 141, 255, 0.5); } scale fill:disabled { background-color: transparent; } scale slider { background-color: #ffffff; border: 1px solid rgba(255, 255, 255, 0.12); border-radius: 100%; box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.1), 0px 1px 2px 0px rgba(16, 16, 16, 0.05); transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); transition-property: background, border; } scale slider:hover { background-color: white; border-color: rgba(255, 255, 255, 0.12); box-shadow: 0px 1px 2px 0px rgba(16, 16, 16, 0.1), 0px 2px 2px 0px rgba(16, 16, 16, 0.05); } scale slider:active { background-clip: border-box; background-color: #ffffff; border-color: rgba(255, 255, 255, 0.12); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } scale slider:disabled { background-color: #f2f2f2; border-color: rgba(242, 242, 242, 0.12); } menuitem:hover scale slider, row:selected scale slider, infobar scale slider { background-clip: border-box; background-color: #ffffff; border-color: #ffffff; } menuitem:hover scale slider:hover, row:selected scale slider:hover, infobar scale slider:hover { background-color: #e4eeff; border-color: #e4eeff; } menuitem:hover scale slider:active, row:selected scale slider:active, infobar scale slider:active { background-color: #a4c6ff; border-color: #a4c6ff; } menuitem:hover scale slider:disabled, row:selected scale slider:disabled, infobar scale slider:disabled { background-color: #adccff; border-color: #adccff; } .osd scale slider { background-clip: border-box; background-color: #ffffff; border-color: rgba(255, 255, 255, 0.12); } .osd scale slider:hover { background-color: white; border-color: rgba(255, 255, 255, 0.12); box-shadow: 0px 1px 2px 0px rgba(16, 16, 16, 0.1), 0px 2px 2px 0px rgba(16, 16, 16, 0.05); } .osd scale slider:active { background-color: #f7f7f7; border-color: rgba(255, 255, 255, 0.12); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } scale value { color: alpha(currentColor,0.4); } scale marks { color: alpha(currentColor,0.4); } scale marks.top { margin-bottom: 1px; margin-top: -4px; } scale marks.bottom { margin-top: 1px; margin-bottom: -4px; } scale marks.top { margin-right: 1px; margin-left: -4px; } scale marks.bottom { margin-left: 1px; margin-right: -4px; } scale.fine-tune marks.top { margin-bottom: 0px; margin-top: -2px; } scale.fine-tune marks.bottom { margin-top: 0px; margin-bottom: -2px; } scale.fine-tune marks.top { margin-right: 0px; margin-left: -2px; } scale.fine-tune marks.bottom { margin-left: 0px; margin-right: -2px; } scale.horizontal indicator { min-height: 3px; min-width: 1px; } scale.horizontal.fine-tune indicator { min-height: 2px; } scale.vertical indicator { min-height: 1px; min-width: 3px; } scale.vertical.fine-tune indicator { min-width: 2px; } scale.horizontal.marks-before:not(.marks-after) slider { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-horz-scale-has-marks-above.png"), url("assets/slider-horz-scale-has-marks-above@2.png")); min-height: 26px; min-width: 24px; margin-top: -14px; background-position: top; background-repeat: no-repeat; box-shadow: none; } scale.horizontal.marks-before:not(.marks-after).fine-tune slider { margin: -7px; margin-top: -11px; } scale.horizontal.marks-before:not(.marks-after) slider:hover { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-horz-scale-has-marks-above-hover.png"), url("assets/slider-horz-scale-has-marks-above-hover@2.png")); min-height: 26px; min-width: 24px; margin-top: -14px; background-position: top; background-repeat: no-repeat; box-shadow: none; } scale.horizontal.marks-before:not(.marks-after).fine-tune slider { margin: -7px; margin-top: -11px; } scale.horizontal.marks-before:not(.marks-after) slider:active { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-horz-scale-has-marks-above-active.png"), url("assets/slider-horz-scale-has-marks-above-active@2.png")); min-height: 26px; min-width: 24px; margin-top: -14px; background-position: top; background-repeat: no-repeat; box-shadow: none; } scale.horizontal.marks-before:not(.marks-after).fine-tune slider { margin: -7px; margin-top: -11px; } scale.horizontal.marks-before:not(.marks-after) slider:disabled { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-horz-scale-has-marks-above-insensitive.png"), url("assets/slider-horz-scale-has-marks-above-insensitive@2.png")); min-height: 26px; min-width: 24px; margin-top: -14px; background-position: top; background-repeat: no-repeat; box-shadow: none; } scale.horizontal.marks-before:not(.marks-after).fine-tune slider { margin: -7px; margin-top: -11px; } scale.horizontal.marks-after:not(.marks-before) slider { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-horz-scale-has-marks-below.png"), url("assets/slider-horz-scale-has-marks-below@2.png")); min-height: 26px; min-width: 24px; margin-bottom: -14px; background-position: bottom; background-repeat: no-repeat; box-shadow: none; } scale.horizontal.marks-after:not(.marks-before).fine-tune slider { margin: -7px; margin-bottom: -11px; } scale.horizontal.marks-after:not(.marks-before) slider:hover { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-horz-scale-has-marks-below-hover.png"), url("assets/slider-horz-scale-has-marks-below-hover@2.png")); min-height: 26px; min-width: 24px; margin-bottom: -14px; background-position: bottom; background-repeat: no-repeat; box-shadow: none; } scale.horizontal.marks-after:not(.marks-before).fine-tune slider { margin: -7px; margin-bottom: -11px; } scale.horizontal.marks-after:not(.marks-before) slider:active { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-horz-scale-has-marks-below-active.png"), url("assets/slider-horz-scale-has-marks-below-active@2.png")); min-height: 26px; min-width: 24px; margin-bottom: -14px; background-position: bottom; background-repeat: no-repeat; box-shadow: none; } scale.horizontal.marks-after:not(.marks-before).fine-tune slider { margin: -7px; margin-bottom: -11px; } scale.horizontal.marks-after:not(.marks-before) slider:disabled { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-horz-scale-has-marks-below-insensitive.png"), url("assets/slider-horz-scale-has-marks-below-insensitive@2.png")); min-height: 26px; min-width: 24px; margin-bottom: -14px; background-position: bottom; background-repeat: no-repeat; box-shadow: none; } scale.horizontal.marks-after:not(.marks-before).fine-tune slider { margin: -7px; margin-bottom: -11px; } scale.vertical.marks-before:not(.marks-after) slider { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-vert-scale-has-marks-above.png"), url("assets/slider-vert-scale-has-marks-above@2.png")); min-height: 24px; min-width: 26px; margin-left: -14px; background-position: left bottom; background-repeat: no-repeat; box-shadow: none; } scale.vertical.marks-before:not(.marks-after).fine-tune slider { margin: -7px; margin-left: -11px; } scale.vertical.marks-before:not(.marks-after) slider:hover { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-vert-scale-has-marks-above-hover.png"), url("assets/slider-vert-scale-has-marks-above-hover@2.png")); min-height: 24px; min-width: 26px; margin-left: -14px; background-position: left bottom; background-repeat: no-repeat; box-shadow: none; } scale.vertical.marks-before:not(.marks-after).fine-tune slider { margin: -7px; margin-left: -11px; } scale.vertical.marks-before:not(.marks-after) slider:active { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-vert-scale-has-marks-above-active.png"), url("assets/slider-vert-scale-has-marks-above-active@2.png")); min-height: 24px; min-width: 26px; margin-left: -14px; background-position: left bottom; background-repeat: no-repeat; box-shadow: none; } scale.vertical.marks-before:not(.marks-after).fine-tune slider { margin: -7px; margin-left: -11px; } scale.vertical.marks-before:not(.marks-after) slider:disabled { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-vert-scale-has-marks-above-insensitive.png"), url("assets/slider-vert-scale-has-marks-above-insensitive@2.png")); min-height: 24px; min-width: 26px; margin-left: -14px; background-position: left bottom; background-repeat: no-repeat; box-shadow: none; } scale.vertical.marks-before:not(.marks-after).fine-tune slider { margin: -7px; margin-left: -11px; } scale.vertical.marks-after:not(.marks-before) slider { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-vert-scale-has-marks-below.png"), url("assets/slider-vert-scale-has-marks-below@2.png")); min-height: 24px; min-width: 26px; margin-right: -14px; background-position: right bottom; background-repeat: no-repeat; box-shadow: none; } scale.vertical.marks-after:not(.marks-before).fine-tune slider { margin: -7px; margin-right: -11px; } scale.vertical.marks-after:not(.marks-before) slider:hover { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-vert-scale-has-marks-below-hover.png"), url("assets/slider-vert-scale-has-marks-below-hover@2.png")); min-height: 24px; min-width: 26px; margin-right: -14px; background-position: right bottom; background-repeat: no-repeat; box-shadow: none; } scale.vertical.marks-after:not(.marks-before).fine-tune slider { margin: -7px; margin-right: -11px; } scale.vertical.marks-after:not(.marks-before) slider:active { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-vert-scale-has-marks-below-active.png"), url("assets/slider-vert-scale-has-marks-below-active@2.png")); min-height: 24px; min-width: 26px; margin-right: -14px; background-position: right bottom; background-repeat: no-repeat; box-shadow: none; } scale.vertical.marks-after:not(.marks-before).fine-tune slider { margin: -7px; margin-right: -11px; } scale.vertical.marks-after:not(.marks-before) slider:disabled { margin: -10px; border-style: none; border-radius: 0; background-color: transparent; background-image: -gtk-scaled(url("assets/slider-vert-scale-has-marks-below-insensitive.png"), url("assets/slider-vert-scale-has-marks-below-insensitive@2.png")); min-height: 24px; min-width: 26px; margin-right: -14px; background-position: right bottom; background-repeat: no-repeat; box-shadow: none; } scale.vertical.marks-after:not(.marks-before).fine-tune slider { margin: -7px; margin-right: -11px; } progressbar { padding: 0; font-size: smaller; color: rgba(222, 222, 222, 0.7); } progressbar.osd { min-width: 3px; min-height: 3px; background-color: transparent; } progressbar.osd trough { border-style: none; background-color: transparent; box-shadow: none; } progressbar progress { min-height: 4px; min-width: 4px; background-color: #498dff; border: none; border-radius: 5px; box-shadow: none; } row:selected progressbar progress, infobar progressbar progress { background-color: #ffffff; } progressbar trough { min-height: 4px; min-width: 4px; border: none; border-radius: 5px; background-color: #262626; } row:selected progressbar trough, infobar progressbar trough { background-color: rgba(0, 0, 0, 0.2); } levelbar block { min-width: 32px; min-height: 1px; } levelbar.vertical block { min-width: 1px; min-height: 32px; } levelbar trough { border: none; padding: 3px; border-radius: 5px; background-color: #262626; } levelbar.horizontal.discrete block { margin: 0 1px; } levelbar.vertical.discrete block { margin: 1px 0; } levelbar block:not(.empty) { border: 1px solid #498dff; background-color: #498dff; border-radius: 5px; } levelbar block.low { border-color: #F27835; background-color: #F27835; } levelbar block.high { border-color: #498dff; background-color: #498dff; } levelbar block.full { border-color: #71c837; background-color: #71c837; } levelbar block.empty { background-color: #242424; border-color: #242424; } printdialog paper { border: 1px solid rgba(255, 255, 255, 0.12); background: #242424; padding: 0; } printdialog .dialog-action-box { margin: 12px; } frame > border, .frame { margin: 0; padding: 0; border-radius: 0; border: 1px solid rgba(255, 255, 255, 0.12); } frame.flat > border, frame > border.flat, .frame.flat { border-style: none; } scrolledwindow viewport.frame { border-style: none; } scrolledwindow overshoot.top { background-image: -gtk-gradient(radial, center top, 0, center top, 0.6, from(rgba(73, 141, 255, 0.2)), to(rgba(73, 141, 255, 0))); background-size: 100% 60%; background-repeat: no-repeat; background-position: center top; background-color: transparent; border: none; box-shadow: none; } scrolledwindow overshoot.bottom { background-image: -gtk-gradient(radial, center bottom, 0, center bottom, 0.6, from(rgba(73, 141, 255, 0.2)), to(rgba(73, 141, 255, 0))); background-size: 100% 60%; background-repeat: no-repeat; background-position: center bottom; background-color: transparent; border: none; box-shadow: none; } scrolledwindow overshoot.left { background-image: -gtk-gradient(radial, left center, 0, left center, 0.6, from(rgba(73, 141, 255, 0.2)), to(rgba(73, 141, 255, 0))); background-size: 60% 100%; background-repeat: no-repeat; background-position: left center; background-color: transparent; border: none; box-shadow: none; } scrolledwindow overshoot.right { background-image: -gtk-gradient(radial, right center, 0, right center, 0.6, from(rgba(73, 141, 255, 0.2)), to(rgba(73, 141, 255, 0))); background-size: 60% 100%; background-repeat: no-repeat; background-position: right center; background-color: transparent; border: none; box-shadow: none; } scrolledwindow undershoot.top { background-color: transparent; background-image: linear-gradient(to left, rgba(255, 255, 255, 0.2) 50%, rgba(0, 0, 0, 0.2) 50%); padding-top: 1px; background-size: 10px 1px; background-repeat: repeat-x; background-origin: content-box; background-position: center top; border: none; } scrolledwindow undershoot.bottom { background-color: transparent; background-image: linear-gradient(to left, rgba(255, 255, 255, 0.2) 50%, rgba(0, 0, 0, 0.2) 50%); padding-bottom: 1px; background-size: 10px 1px; background-repeat: repeat-x; background-origin: content-box; background-position: center bottom; border: none; } scrolledwindow undershoot.left { background-color: transparent; background-image: linear-gradient(to top, rgba(255, 255, 255, 0.2) 50%, rgba(0, 0, 0, 0.2) 50%); padding-left: 1px; background-size: 1px 10px; background-repeat: repeat-y; background-origin: content-box; background-position: left center; border: none; } scrolledwindow undershoot.right { background-color: transparent; background-image: linear-gradient(to top, rgba(255, 255, 255, 0.2) 50%, rgba(0, 0, 0, 0.2) 50%); padding-right: 1px; background-size: 1px 10px; background-repeat: repeat-y; background-origin: content-box; background-position: right center; border: none; } scrolledwindow junction { border-color: transparent; border-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.12) 1px, transparent 1px) 0 0 0 0/0 0 stretch; background-color: #272727; } scrolledwindow junction:dir(rtl) { border-image-slice: 0 1 0 0; } separator { width: 0; } list { background-color: #242424; border-color: rgba(255, 255, 255, 0.12); } list row { padding: 2px; } row:not(:hover) { transition: all 300ms cubic-bezier(0.25, 0.46, 0.45, 0.94); } row.activatable.has-open-popup, .budgie-menu button.has-open-popup, row.activatable:hover, .budgie-menu button:hover { background-color: rgba(255, 255, 255, 0.03); } row.activatable:active, .budgie-menu button:active { color: #dedede; } row.activatable:disabled, .budgie-menu button:disabled { color: rgba(222, 222, 222, 0.45); } row.activatable:disabled image, .budgie-menu button:disabled image { color: inherit; } row.activatable:selected:active, .budgie-menu button:selected:active { color: #ffffff; } row.activatable:selected.has-open-popup, .budgie-menu button:selected.has-open-popup, row.activatable:selected:hover, .budgie-menu button:selected:hover { background-color: #427fe6; } .app-notification { padding: 16px; margin: 0 8px 8px 8px; color: #dedede; background-color: #333333; background-image: linear-gradient(0deg, #333333 0%, #333333 85%, #262626 95%, #0d0d0d 100%); border-radius: 0; border: none; box-shadow: 0px 1px 2px 0px rgba(16, 16, 16, 0.15), 0px 2px 3px 0px rgba(16, 16, 16, 0.1), 0 0 0 1px rgba(255, 255, 255, 0.12); } .app-notification border { border: none; } .app-notification button { padding: 0; margin: 0 0 0 0; min-height: 24px; min-width: 24px; border-radius: 100px; -gtk-outline-radius: 100px; } .app-notification button:hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); } .app-notification button:active, .app-notification button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } .app-notification button:disabled { background-color: transparent; } .app-notification button:disabled label, .app-notification button:disabled { color: rgba(222, 222, 222, 0.45); } expander arrow { min-width: 16px; min-height: 16px; -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); } expander arrow:dir(rtl) { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic-rtl"); } expander arrow:hover { color: white; } expander arrow:checked { -gtk-icon-source: -gtk-icontheme("pan-down-symbolic"); } calendar { color: #dedede; border: 1px solid rgba(255, 255, 255, 0.12); border-radius: 5px; padding: 2px 6px; margin: 0; } calendar:selected { border-radius: 50px; } calendar:disabled { color: rgba(222, 222, 222, 0.45); } calendar.header { color: #dedede; border: none; } calendar.button { color: rgba(222, 222, 222, 0.45); } calendar.button:hover { color: #dedede; } calendar.button:disabled { color: rgba(222, 222, 222, 0.45); } calendar:indeterminate { color: rgba(222, 222, 222, 0.55); } calendar.highlight { color: rgba(222, 222, 222, 0.65); font-weight: 500; } messagedialog .titlebar { min-height: 20px; background-color: rgba(55, 55, 55, 0.98); border-bottom: 1px solid #484848; } messagedialog .dialog-action-area button { padding: 5px 8px 6px 8px; min-height: 0; } messagedialog.csd.background { border-bottom-left-radius: 6px; border-bottom-right-radius: 6px; border: none; } messagedialog.csd .dialog-action-area button { border-bottom-style: none; background-image: none; } messagedialog.csd .dialog-action-area button:not(.suggested-action):not(.destructive-action):hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); } messagedialog.csd .dialog-action-area button:not(.suggested-action):not(.destructive-action):active, messagedialog.csd .dialog-action-area button:not(.suggested-action):not(.destructive-action):checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); text-shadow: 0 -1px rgba(255, 255, 255, 0.04), -1px 0px rgba(32, 32, 32, 0.05), 1px 0px rgba(32, 32, 32, 0.05), 0px 1px rgba(32, 32, 32, 0.3), 0px 2px rgba(32, 32, 32, 0.05); } messagedialog.csd .dialog-action-area button { border-radius: 0; border-right-style: none; } messagedialog.csd .dialog-action-area button:last-child { border-radius: 0 0 6px 0; border-right-style: none; } messagedialog.csd .dialog-action-area button:first-child { border-radius: 0 0 0 6px; border-left-style: none; } messagedialog.csd .dialog-action-area button:only-child { border-radius: 0 0 6px 6px; border-left-style: none; border-right-style: none; } filechooser #pathbarbox { border-bottom: 1px solid rgba(255, 255, 255, 0); } filechooserbutton:drop(active) { box-shadow: none; border-color: transparent; } .sidebar { border-style: none; background-color: #333333; } stacksidebar.sidebar:dir(ltr) list, stacksidebar.sidebar.left list, stacksidebar.sidebar.left:dir(rtl) list, .sidebar:dir(ltr), .sidebar.left, .sidebar.left:dir(rtl) { border-right: 1px solid rgba(255, 255, 255, 0.12); border-left-style: none; } stacksidebar.sidebar:dir(rtl) list, stacksidebar.sidebar.right list, .sidebar:dir(rtl), .sidebar.right { border-left: 1px solid rgba(255, 255, 255, 0.12); border-right-style: none; } .sidebar list { background-color: transparent; } paned .sidebar.left, paned .sidebar.right, paned .sidebar.left:dir(rtl), paned .sidebar:dir(rtl), paned .sidebar:dir(ltr), paned .sidebar { border-style: none; } stacksidebar row { padding: 4px 4px; } stacksidebar row > label { padding-left: 6px; padding-right: 6px; } stacksidebar row.needs-attention > label { background-size: 6px 6px, 0 0; } placessidebar > viewport.frame { border-style: none; } placessidebar row { min-height: 24px; padding: 2px 2px 2px 10px; } placessidebar row > revealer { padding: 0 10px; } placessidebar row image.sidebar-icon:dir(ltr) { padding-right: 8px; } placessidebar row image.sidebar-icon:dir(rtl) { padding-left: 8px; } placessidebar row label.sidebar-label:dir(ltr) { padding-right: 2px; } placessidebar row label.sidebar-label:dir(rtl) { padding-left: 2px; } button.sidebar-button { min-width: 22px; min-height: 22px; margin-top: 2px; margin-bottom: 2px; padding: 0; border-radius: 100px; -gtk-outline-radius: 100px; } button.sidebar-button:active, button.sidebar-button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.35); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.35); } button.sidebar-button:not(:hover):not(:active) > image { opacity: 0.5; } placessidebar row.sidebar-placeholder-row { padding: 0 8px; min-height: 2px; background-image: linear-gradient(to bottom, #F08437, #F08437); background-clip: content-box; } placessidebar row.sidebar-new-bookmark-row { color: #498dff; } placessidebar row:drop(active):not(:disabled) { box-shadow: inset 0 1px #F08437, inset 0 -1px #F08437; } placessidebar row:drop(active):not(:disabled), placessidebar row:drop(active):not(:disabled) label, placessidebar row:drop(active):not(:disabled) image { color: #F08437; } placessidebar row:drop(active):not(:disabled):selected { background-color: #F08437; } placessidebar row:drop(active):not(:disabled):selected, placessidebar row:drop(active):not(:disabled):selected label, placessidebar row:drop(active):not(:disabled):selected image { color: #dedede; } placesview .server-list-button > image { -gtk-icon-transform: rotate(0turn); } placesview .server-list-button:checked > image { transition: 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); -gtk-icon-transform: rotate(-0.5turn); } placesview > actionbar > revealer > box > label { padding-left: 8px; padding-right: 8px; } paned > separator { min-width: 1px; min-height: 1px; -gtk-icon-source: none; border-style: none; background-color: transparent; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.12), rgba(255, 255, 255, 0.12)); background-size: 1px 1px; } paned > separator:selected { background-image: linear-gradient(to bottom, #498dff, #498dff); } paned > separator.wide { min-width: 5px; min-height: 5px; background-color: #333333; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.12), rgba(255, 255, 255, 0.12)), linear-gradient(to bottom, rgba(255, 255, 255, 0.12), rgba(255, 255, 255, 0.12)); background-size: 1px 1px, 1px 1px; } paned.horizontal > separator { background-repeat: repeat-y; } paned.horizontal > separator:dir(ltr) { margin: 0 -8px 0 0; padding: 0 8px 0 0; background-position: left; } paned.horizontal > separator:dir(rtl) { margin: 0 0 0 -8px; padding: 0 0 0 8px; background-position: right; } paned.horizontal > separator.wide { margin: 0; padding: 0; background-repeat: repeat-y, repeat-y; background-position: left, right; } paned.vertical > separator { margin: 0 0 -8px 0; padding: 0 0 8px 0; background-repeat: repeat-x; background-position: top; } paned.vertical > separator.wide { margin: 0; padding: 0; background-repeat: repeat-x, repeat-x; background-position: bottom, top; } infobar { border-style: none; } infobar.info, infobar.question, infobar.warning, infobar.error { background-color: #498dff; color: #ffffff; caret-color: currentColor; } infobar.info selection, infobar.question selection, infobar.warning selection, infobar.error selection { color: #498dff; background-color: #ffffff; } row:selected button, infobar.info button, infobar.question button, infobar.warning button, infobar.error button, .nautilus-window .floating-bar button { color: #ffffff; background-color: rgba(255, 255, 255, 0); border-color: rgba(255, 255, 255, 0.5); background-image: none; } row:selected button.flat, row:selected button.budgie-menu-launcher, row:selected .budgie-panel #tasklist-button, .budgie-panel row:selected #tasklist-button, row:selected .budgie-panel button.flat.launcher, .budgie-panel row:selected button.flat.launcher, infobar.info button.flat, infobar.info button.budgie-menu-launcher, infobar.info .budgie-panel #tasklist-button, .budgie-panel infobar.info #tasklist-button, infobar.info .budgie-panel button.flat.launcher, .budgie-panel infobar.info button.flat.launcher, infobar.question button.flat, infobar.question button.budgie-menu-launcher, infobar.question .budgie-panel #tasklist-button, .budgie-panel infobar.question #tasklist-button, infobar.question .budgie-panel button.flat.launcher, .budgie-panel infobar.question button.flat.launcher, infobar.warning button.flat, infobar.warning button.budgie-menu-launcher, infobar.warning .budgie-panel #tasklist-button, .budgie-panel infobar.warning #tasklist-button, infobar.warning .budgie-panel button.flat.launcher, .budgie-panel infobar.warning button.flat.launcher, infobar.error button.flat, infobar.error button.budgie-menu-launcher, infobar.error .budgie-panel #tasklist-button, .budgie-panel infobar.error #tasklist-button, infobar.error .budgie-panel button.flat.launcher, .budgie-panel infobar.error button.flat.launcher, .nautilus-window .floating-bar button.flat, .nautilus-window .floating-bar button.budgie-menu-launcher, .nautilus-window .floating-bar .budgie-panel #tasklist-button, .budgie-panel .nautilus-window .floating-bar #tasklist-button { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; color: #ffffff; background-color: rgba(255, 255, 255, 0); background-image: none; } headerbar.selection-mode button:disabled, .nemo-window .selection-mode.primary-toolbar button:disabled, row:selected button.flat:disabled, row:selected button.budgie-menu-launcher:disabled, row:selected .budgie-panel #tasklist-button:disabled, .budgie-panel row:selected #tasklist-button:disabled, infobar.info button.flat:disabled, infobar.info button.budgie-menu-launcher:disabled, infobar.info .budgie-panel #tasklist-button:disabled, .budgie-panel infobar.info #tasklist-button:disabled, infobar.question button.flat:disabled, infobar.question button.budgie-menu-launcher:disabled, infobar.question .budgie-panel #tasklist-button:disabled, .budgie-panel infobar.question #tasklist-button:disabled, infobar.warning button.flat:disabled, infobar.warning button.budgie-menu-launcher:disabled, infobar.warning .budgie-panel #tasklist-button:disabled, .budgie-panel infobar.warning #tasklist-button:disabled, infobar.error button.flat:disabled, infobar.error button.budgie-menu-launcher:disabled, infobar.error .budgie-panel #tasklist-button:disabled, .budgie-panel infobar.error #tasklist-button:disabled, .nautilus-window .floating-bar button.flat:disabled, .nautilus-window .floating-bar button.budgie-menu-launcher:disabled, .nautilus-window .floating-bar .budgie-panel #tasklist-button:disabled, .budgie-panel .nautilus-window .floating-bar #tasklist-button:disabled, headerbar.selection-mode button:disabled label, .nemo-window .selection-mode.primary-toolbar button:disabled label, row:selected button.flat:disabled label, row:selected button.budgie-menu-launcher:disabled label, row:selected .budgie-panel #tasklist-button:disabled label, .budgie-panel row:selected #tasklist-button:disabled label, infobar.info button.flat:disabled label, infobar.info button.budgie-menu-launcher:disabled label, infobar.info .budgie-panel #tasklist-button:disabled label, .budgie-panel infobar.info #tasklist-button:disabled label, infobar.question button.flat:disabled label, infobar.question button.budgie-menu-launcher:disabled label, infobar.question .budgie-panel #tasklist-button:disabled label, .budgie-panel infobar.question #tasklist-button:disabled label, infobar.warning button.flat:disabled label, infobar.warning button.budgie-menu-launcher:disabled label, infobar.warning .budgie-panel #tasklist-button:disabled label, .budgie-panel infobar.warning #tasklist-button:disabled label, infobar.error button.flat:disabled label, infobar.error button.budgie-menu-launcher:disabled label, infobar.error .budgie-panel #tasklist-button:disabled label, .budgie-panel infobar.error #tasklist-button:disabled label, .nautilus-window .floating-bar button.flat:disabled label, .nautilus-window .floating-bar button.budgie-menu-launcher:disabled label, .nautilus-window .floating-bar .budgie-panel #tasklist-button:disabled label, .budgie-panel .nautilus-window .floating-bar #tasklist-button:disabled label { color: rgba(255, 255, 255, 0.4); } row:selected button:hover, infobar.info button:hover, infobar.question button:hover, infobar.warning button:hover, infobar.error button:hover, .nautilus-window .floating-bar button:hover { color: #ffffff; background-color: rgba(255, 255, 255, 0.2); border-color: rgba(255, 255, 255, 0.5); } headerbar.selection-mode button:active, .nemo-window .selection-mode.primary-toolbar button:active, headerbar.selection-mode button:checked, .nemo-window .selection-mode.primary-toolbar button:checked, row:selected button:active, infobar.info button:active, infobar.question button:active, infobar.warning button:active, infobar.error button:active, .nautilus-window .floating-bar button:active, headerbar.selection-mode button:hover:active, .nemo-window .selection-mode.primary-toolbar button:hover:active, headerbar.selection-mode button:hover:checked, .nemo-window .selection-mode.primary-toolbar button:hover:checked, row:selected button:active:hover, infobar.info button:active:hover, infobar.question button:active:hover, infobar.warning button:active:hover, infobar.error button:active:hover, .nautilus-window .floating-bar button:active:hover, row:selected button:checked, infobar.info button:checked, infobar.question button:checked, infobar.warning button:checked, infobar.error button:checked, .nautilus-window .floating-bar button:checked { color: #ffffff; background-color: rgba(255, 255, 255, 0.4); border-color: rgba(255, 255, 255, 0.5); } row:selected button:disabled, infobar.info button:disabled, infobar.question button:disabled, infobar.warning button:disabled, infobar.error button:disabled, .nautilus-window .floating-bar button:disabled { background-color: rgba(255, 255, 255, 0); border-color: rgba(255, 255, 255, 0.4); } row:selected button:disabled, infobar.info button:disabled, infobar.question button:disabled, infobar.warning button:disabled, infobar.error button:disabled, .nautilus-window .floating-bar button:disabled, row:selected button:disabled label, infobar.info button:disabled label, infobar.question button:disabled label, infobar.warning button:disabled label, infobar.error button:disabled label, .nautilus-window .floating-bar button:disabled label { color: rgba(255, 255, 255, 0.5); } headerbar.selection-mode button:disabled:active, .nemo-window .selection-mode.primary-toolbar button:disabled:active, headerbar.selection-mode button:disabled:checked, .nemo-window .selection-mode.primary-toolbar button:disabled:checked, row:selected button:disabled:active, infobar.info button:disabled:active, infobar.question button:disabled:active, infobar.warning button:disabled:active, infobar.error button:disabled:active, .nautilus-window .floating-bar button:disabled:active, headerbar.selection-mode button:disabled:checked, .nemo-window .selection-mode.primary-toolbar button:disabled:checked, headerbar.selection-mode button:disabled:active, .nemo-window .selection-mode.primary-toolbar button:disabled:active, row:selected button:disabled:checked, infobar.info button:disabled:checked, infobar.question button:disabled:checked, infobar.warning button:disabled:checked, infobar.error button:disabled:checked, .nautilus-window .floating-bar button:disabled:checked { color: #498dff; background-color: rgba(255, 255, 255, 0.5); border-color: rgba(255, 255, 255, 0.4); } tooltip { border-radius: 5px; box-shadow: none; } tooltip.background, tooltip.background.csd { background-color: rgba(62, 62, 62, 0.95); background-clip: padding-box; border-radius: 5px; } tooltip.background label, tooltip.background.csd label { padding: 4px; } tooltip decoration { background-color: transparent; } tooltip * { background-color: transparent; color: #dedede; } colorswatch, colorswatch:drop(active) { border-style: none; } colorswatch.top { border-top-left-radius: 2.5px; border-top-right-radius: 2.5px; } colorswatch.top overlay { border-top-left-radius: 2px; border-top-right-radius: 2px; } colorswatch.bottom { border-bottom-left-radius: 2.5px; border-bottom-right-radius: 2.5px; } colorswatch.bottom overlay { border-bottom-left-radius: 2px; border-bottom-right-radius: 2px; } colorswatch.left, colorswatch:first-child:not(.top) { border-top-left-radius: 2.5px; border-bottom-left-radius: 2.5px; } colorswatch.left overlay, colorswatch:first-child:not(.top) overlay { border-top-left-radius: 2px; border-bottom-left-radius: 2px; } colorswatch.right, colorswatch:last-child:not(.bottom) { border-top-right-radius: 2.5px; border-bottom-right-radius: 2.5px; } colorswatch.right overlay, colorswatch:last-child:not(.bottom) overlay { border-top-right-radius: 2px; border-bottom-right-radius: 2px; } colorswatch.dark overlay { color: rgba(255, 255, 255, 0.7); } colorswatch.dark overlay:hover { border-color: rgba(255, 255, 255, 0.12); } colorswatch.light overlay { color: rgba(0, 0, 0, 0.7); } colorswatch.light overlay:hover { border-color: rgba(255, 255, 255, 0.12); } colorswatch overlay { border: 1px solid rgba(255, 255, 255, 0.12); } colorswatch overlay:hover { background-color: rgba(255, 255, 255, 0.2); } colorswatch:disabled { opacity: 0.5; } colorswatch:disabled overlay { border-color: rgba(0, 0, 0, 0.6); box-shadow: none; } colorswatch#add-color-button { border-style: solid; border-width: 1px; color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: #484848; } colorswatch#add-color-button:hover { color: #c5c5c5; border-color: rgba(255, 255, 255, 0.12); background-color: #5c5c5c; box-shadow: none; } colorswatch#add-color-button overlay { border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; } button.color { padding: 0; } button.color colorswatch:first-child:last-child, button.color colorswatch:first-child:last-child overlay { margin: 4px; border-radius: 0; } colorchooser .popover.osd { border-radius: 5px; } .content-view { background-color: #242424; } .content-view:hover { -gtk-icon-effect: highlight; } .scale-popup button:hover { color: #c5c5c5; border-color: rgba(255, 255, 255, 0.12); background-color: #5c5c5c; box-shadow: none; } .context-menu, popover.touch-selection, .csd popover.touch-selection, popover.background.touch-selection, .csd popover.background.touch-selection { font: initial; } .monospace { font-family: Monospace; } button.circular, paned.titlebar.horizontal headerbar button.circular-button.flat.toggle.popup:not(.image-button), paned.titlebar.horizontal headerbar button.circular-button.toggle.popup.budgie-menu-launcher:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .circular-button.toggle.popup#tasklist-button:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .circular-button.toggle.popup#tasklist-button:not(.image-button), headerbar button.circular-button, .nemo-window .primary-toolbar button.circular-button, row button.circular-button, button.nautilus-circular-button.image-button, button.circular-button { padding: 0; margin: 0 2px; min-width: 28px; min-height: 28px; border-radius: 100px; -gtk-outline-radius: 100px; border: none; } button.circular:active, paned.titlebar.horizontal headerbar button.circular-button.flat.toggle.popup:active:not(.image-button), paned.titlebar.horizontal headerbar button.circular-button.toggle.popup.budgie-menu-launcher:active:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .circular-button.toggle.popup#tasklist-button:active:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .circular-button.toggle.popup#tasklist-button:active:not(.image-button), headerbar button.circular-button:active, .nemo-window .primary-toolbar button.circular-button:active, row button.circular-button:active, button.nautilus-circular-button.image-button:active, button.circular-button:active { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; border: none; } button.circular:checked, paned.titlebar.horizontal headerbar button.circular-button.flat.toggle.popup:checked:not(.image-button), paned.titlebar.horizontal headerbar button.circular-button.toggle.popup.budgie-menu-launcher:checked:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel .circular-button.toggle.popup#tasklist-button:checked:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar .circular-button.toggle.popup#tasklist-button:checked:not(.image-button), headerbar button.circular-button:checked, .nemo-window .primary-toolbar button.circular-button:checked, row button.circular-button:checked, button.nautilus-circular-button.image-button:checked, button.circular-button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.35); text-shadow: none; -gtk-icon-shadow: none; border: none; } button.circular label, paned.titlebar.horizontal headerbar button.circular-button.flat.toggle.popup:not(.image-button) label, paned.titlebar.horizontal headerbar button.circular-button.toggle.popup.budgie-menu-launcher:not(.image-button) label, paned.titlebar.horizontal headerbar .budgie-panel .circular-button.toggle.popup#tasklist-button:not(.image-button) label, .budgie-panel paned.titlebar.horizontal headerbar .circular-button.toggle.popup#tasklist-button:not(.image-button) label, headerbar button.circular-button label, .nemo-window .primary-toolbar button.circular-button label, row button.circular-button label, button.nautilus-circular-button.image-button label, button.circular-button label { padding: 0; } .keycap { min-width: 16px; min-height: 20px; padding: 3px 6px 4px 6px; color: #dedede; background-color: #242424; border: 1px solid rgba(255, 255, 255, 0.12); border-radius: 5px; box-shadow: inset 0px -2px 0px rgba(0, 0, 0, 0.15); } stackswitcher button.text-button { min-width: 80px; } stackswitcher button.circular, stackswitcher paned.titlebar.horizontal headerbar button.circular-button.flat.toggle.popup:not(.image-button), paned.titlebar.horizontal headerbar stackswitcher button.circular-button.flat.toggle.popup:not(.image-button), stackswitcher paned.titlebar.horizontal headerbar button.circular-button.toggle.popup.budgie-menu-launcher:not(.image-button), paned.titlebar.horizontal headerbar stackswitcher button.circular-button.toggle.popup.budgie-menu-launcher:not(.image-button), stackswitcher paned.titlebar.horizontal headerbar .budgie-panel .circular-button.toggle.popup#tasklist-button:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel stackswitcher .circular-button.toggle.popup#tasklist-button:not(.image-button), stackswitcher .budgie-panel paned.titlebar.horizontal headerbar .circular-button.toggle.popup#tasklist-button:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar stackswitcher .circular-button.toggle.popup#tasklist-button:not(.image-button), stackswitcher headerbar button.circular-button, headerbar stackswitcher button.circular-button, stackswitcher .nemo-window .primary-toolbar button.circular-button, .nemo-window .primary-toolbar stackswitcher button.circular-button, stackswitcher row button.circular-button, row stackswitcher button.circular-button, stackswitcher button.nautilus-circular-button.image-button, stackswitcher button.text-button.circular, stackswitcher paned.titlebar.horizontal headerbar button.text-button.circular-button.flat.toggle.popup:not(.image-button), paned.titlebar.horizontal headerbar stackswitcher button.text-button.circular-button.flat.toggle.popup:not(.image-button), stackswitcher paned.titlebar.horizontal headerbar button.text-button.circular-button.toggle.popup.budgie-menu-launcher:not(.image-button), paned.titlebar.horizontal headerbar stackswitcher button.text-button.circular-button.toggle.popup.budgie-menu-launcher:not(.image-button), stackswitcher paned.titlebar.horizontal headerbar .budgie-panel .text-button.circular-button.toggle.popup#tasklist-button:not(.image-button), paned.titlebar.horizontal headerbar .budgie-panel stackswitcher .text-button.circular-button.toggle.popup#tasklist-button:not(.image-button), stackswitcher .budgie-panel paned.titlebar.horizontal headerbar .text-button.circular-button.toggle.popup#tasklist-button:not(.image-button), .budgie-panel paned.titlebar.horizontal headerbar stackswitcher .text-button.circular-button.toggle.popup#tasklist-button:not(.image-button), stackswitcher headerbar button.text-button.circular-button, headerbar stackswitcher button.text-button.circular-button, stackswitcher .nemo-window .primary-toolbar button.text-button.circular-button, .nemo-window .primary-toolbar stackswitcher button.text-button.circular-button, stackswitcher row button.text-button.circular-button, row stackswitcher button.text-button.circular-button, stackswitcher button.text-button.nautilus-circular-button.image-button { min-width: 28px; min-height: 28px; border-radius: 100px; -gtk-outline-radius: 100px; padding: 0; } *:drop(active):focus, *:drop(active) { box-shadow: inset 0 0 0 1px #F08437; } decoration { transition: box-shadow 0.2s cubic-bezier(0, 0, 0.2, 1); border-radius: 6px; border-width: 0; box-shadow: 0 0 8px 5px rgba(0, 0, 0, 0.4); margin: 4px; } decoration:backdrop { box-shadow: 0 0 8px 5px rgba(0, 0, 0, 0.3); } .fullscreen decoration, .tiled decoration { border-radius: 0; box-shadow: 0 0 8px 5px rgba(0, 0, 0, 0.3); } .popup decoration { border-radius: 6px; } .ssd decoration { margin: -5px; border-radius: 6px 6px 0 0; box-shadow: 0 0 8px 5px rgba(0, 0, 0, 0.3); } .ssd decoration.maximized { border-radius: 0; } .csd.popup decoration { border-radius: 6px; box-shadow: 0 0 8px 5px rgba(0, 0, 0, 0.3); } tooltip.csd decoration { border-radius: 6px; box-shadow: 0 0 8px 5px rgba(0, 0, 0, 0.3); } messagedialog.csd decoration { border-radius: 6px; } .solid-csd decoration { border: 1px solid #4B4B4B; border-radius: 0; margin: 0; background-color: rgba(55, 55, 55, 0.98); box-shadow: none; } headerbar button.titlebutton, .titlebar button.titlebutton { min-width: 24px; min-height: 24px; margin: 0; padding: 0; border-color: transparent; background-color: transparent; background-image: none; box-shadow: none; background-color: rgba(55, 55, 55, 0); } headerbar button.titlebutton:hover, .titlebar button.titlebutton:hover { border-color: rgba(255, 255, 255, 0.12); color: rgba(221, 213, 213, 0.8); background-color: rgba(119, 119, 119, 0.88); background-image: none; box-shadow: none; } headerbar button.titlebutton:active, headerbar button.titlebutton:checked, .titlebar button.titlebutton:active, .titlebar button.titlebutton:checked { color: #ffffff; background-color: rgba(119, 119, 119, 0.98); background-image: none; border-color: rgba(255, 255, 255, 0.12); text-shadow: none; -gtk-icon-shadow: none; box-shadow: none; } headerbar button.titlebutton.close, headerbar button.titlebutton.maximize, headerbar button.titlebutton.minimize, headerbar button.titlebutton.restore, .titlebar button.titlebutton.close, .titlebar button.titlebutton.maximize, .titlebar button.titlebutton.minimize, .titlebar button.titlebutton.restore { min-width: 16px; min-height: 16px; margin: 0; color: transparent; background-color: transparent; background-position: center; background-repeat: no-repeat; background-size: auto; border-width: 0; box-shadow: none; } headerbar button.titlebutton.close:backdrop, headerbar button.titlebutton.maximize:backdrop, headerbar button.titlebutton.minimize:backdrop, headerbar button.titlebutton.restore:backdrop, .titlebar button.titlebutton.close:backdrop, .titlebar button.titlebutton.maximize:backdrop, .titlebar button.titlebutton.minimize:backdrop, .titlebar button.titlebutton.restore:backdrop { opacity: 1; } headerbar button.titlebutton.close, .titlebar button.titlebutton.close { background-image: -gtk-scaled(url("assets/titlebutton-close.png"), url("assets/titlebutton-close@2.png")); } headerbar button.titlebutton.close:backdrop, .titlebar button.titlebutton.close:backdrop { background-image: -gtk-scaled(url("assets/titlebutton-close-backdrop.png"), url("assets/titlebutton-close-backdrop@2.png")); } headerbar button.titlebutton.close:hover, .titlebar button.titlebutton.close:hover { background-image: -gtk-scaled(url("assets/titlebutton-close-hover.png"), url("assets/titlebutton-close-hover@2.png")); } headerbar button.titlebutton.close:active, .titlebar button.titlebutton.close:active { background-image: -gtk-scaled(url("assets/titlebutton-close-active.png"), url("assets/titlebutton-close-active@2.png")); } headerbar button.titlebutton.maximize, .titlebar button.titlebutton.maximize { background-image: -gtk-scaled(url("assets/titlebutton-maximize.png"), url("assets/titlebutton-maximize@2.png")); } headerbar button.titlebutton.maximize:backdrop, .titlebar button.titlebutton.maximize:backdrop { background-image: -gtk-scaled(url("assets/titlebutton-maximize-backdrop.png"), url("assets/titlebutton-maximize-backdrop@2.png")); } headerbar button.titlebutton.maximize:hover, .titlebar button.titlebutton.maximize:hover { background-image: -gtk-scaled(url("assets/titlebutton-maximize-hover.png"), url("assets/titlebutton-maximize-hover@2.png")); } headerbar button.titlebutton.maximize:active, .titlebar button.titlebutton.maximize:active { background-image: -gtk-scaled(url("assets/titlebutton-maximize-active.png"), url("assets/titlebutton-maximize-active@2.png")); } headerbar button.titlebutton.minimize, .titlebar button.titlebutton.minimize { background-image: -gtk-scaled(url("assets/titlebutton-minimize.png"), url("assets/titlebutton-minimize@2.png")); } headerbar button.titlebutton.minimize:backdrop, .titlebar button.titlebutton.minimize:backdrop { background-image: -gtk-scaled(url("assets/titlebutton-minimize-backdrop.png"), url("assets/titlebutton-minimize-backdrop@2.png")); } headerbar button.titlebutton.minimize:hover, .titlebar button.titlebutton.minimize:hover { background-image: -gtk-scaled(url("assets/titlebutton-minimize-hover.png"), url("assets/titlebutton-minimize-hover@2.png")); } headerbar button.titlebutton.minimize:active, .titlebar button.titlebutton.minimize:active { background-image: -gtk-scaled(url("assets/titlebutton-minimize-active.png"), url("assets/titlebutton-minimize-active@2.png")); } headerbar button.titlebutton.restore, .titlebar button.titlebutton.restore { background-image: -gtk-scaled(url("assets/titlebutton-restore.png"), url("assets/titlebutton-restore@2.png")); } headerbar button.titlebutton.restore:backdrop, .titlebar button.titlebutton.restore:backdrop { background-image: -gtk-scaled(url("assets/titlebutton-restore-backdrop.png"), url("assets/titlebutton-restore-backdrop@2.png")); } headerbar button.titlebutton.restore:hover, .titlebar button.titlebutton.restore:hover { background-image: -gtk-scaled(url("assets/titlebutton-restore-hover.png"), url("assets/titlebutton-restore-hover@2.png")); } headerbar button.titlebutton.restore:active, .titlebar button.titlebutton.restore:active { background-image: -gtk-scaled(url("assets/titlebutton-restore-active.png"), url("assets/titlebutton-restore-active@2.png")); } .fullscreen headerbar button.titlebutton.maximize, .maximized headerbar button.titlebutton.maximize, .fullscreen .titlebar button.titlebutton.maximize, .maximized .titlebar button.titlebutton.maximize { background-image: -gtk-scaled(url("assets/titlebutton-restore.png"), url("assets/titlebutton-restore@2.png")); } .fullscreen headerbar button.titlebutton.maximize:backdrop, .maximized headerbar button.titlebutton.maximize:backdrop, .fullscreen .titlebar button.titlebutton.maximize:backdrop, .maximized .titlebar button.titlebutton.maximize:backdrop { background-image: -gtk-scaled(url("assets/titlebutton-restore-backdrop.png"), url("assets/titlebutton-restore-backdrop@2.png")); } .fullscreen headerbar button.titlebutton.maximize:hover, .maximized headerbar button.titlebutton.maximize:hover, .fullscreen .titlebar button.titlebutton.maximize:hover, .maximized .titlebar button.titlebutton.maximize:hover { background-image: -gtk-scaled(url("assets/titlebutton-restore-hover.png"), url("assets/titlebutton-restore-hover@2.png")); } .fullscreen headerbar button.titlebutton.maximize:active, .maximized headerbar button.titlebutton.maximize:active, .fullscreen .titlebar button.titlebutton.maximize:active, .maximized .titlebar button.titlebutton.maximize:active { background-image: -gtk-scaled(url("assets/titlebutton-restore-active.png"), url("assets/titlebutton-restore-active@2.png")); } .view:selected, iconview:selected, .view:selected:focus, .view text:selected, iconview text:selected, textview text:selected, .view text selection:focus, iconview text selection:focus, .view text selection, iconview text selection, textview text selection:focus, textview text selection, flowbox flowboxchild:selected, entry selection:focus, entry selection, treeview.view:selected, treeview.view:selected:focus, row:selected, calendar:selected, .nemo-window .nemo-window-pane widget.entry:selected:focus, .nemo-window .nemo-window-pane widget.entry:selected, #MozillaGtkWidget.background > widget > scrolledwindow > textview text:selected, #MozillaGtkWidget.background > widget > scrolledwindow > textview text:selected:focus, #MozillaGtkWidget.background > widget > scrolledwindow > textview text selection, .budgie-menu button:checked { background-color: #498dff; } row:selected label, label:selected, .view:selected, iconview:selected, .view:selected:focus, .view text:selected, iconview text:selected, textview text:selected, .view text selection:focus, iconview text selection:focus, .view text selection, iconview text selection, textview text selection:focus, textview text selection, flowbox flowboxchild:selected, entry selection:focus, entry selection, treeview.view:selected, treeview.view:selected:focus, row:selected, calendar:selected, .nemo-window .nemo-window-pane widget.entry:selected:focus, .nemo-window .nemo-window-pane widget.entry:selected, #MozillaGtkWidget.background > widget > scrolledwindow > textview text:selected, #MozillaGtkWidget.background > widget > scrolledwindow > textview text:selected:focus, #MozillaGtkWidget.background > widget > scrolledwindow > textview text selection, .budgie-menu button:checked { color: #ffffff; } row:selected label:disabled, label:disabled:selected, .view:disabled:selected, iconview:disabled:selected, iconview:disabled:selected:focus, .view text:disabled:selected, iconview text:disabled:selected, textview text:disabled:selected, iconview text:disabled:selected:focus, textview text:disabled:selected:focus, iconview text selection:disabled:focus, .view text selection:disabled, iconview text selection:disabled, textview text selection:disabled, flowbox flowboxchild:disabled:selected, label:disabled selection, entry selection:disabled, treeview.view:disabled:selected:focus, row:disabled:selected, calendar:disabled:selected, .nemo-window .nemo-window-pane widget.entry:disabled:selected, #MozillaGtkWidget.background > widget > scrolledwindow > textview text:disabled:selected, #MozillaGtkWidget.background > widget > scrolledwindow > textview text selection:disabled, .budgie-menu button:disabled:checked { color: #a4c6ff; } /********* * Emoji * *********/ popover.emoji-picker { padding: 0; border-radius: 6px; } popover.emoji-picker entry { border-bottom: 1px solid rgba(255, 255, 255, 0.12); border-bottom-left-radius: 0; border-bottom-right-radius: 0; box-shadow: none; border-width: 0 0 1px 0; padding: 4px 12px; } popover.emoji-picker scrolledwindow { border-bottom: 1px solid rgba(255, 255, 255, 0.12); } button.emoji-section { margin: 2px 1px; padding: 1px 12px; border-radius: 6px; border: none; outline-offset: -2px; box-shadow: none; } .emoji { min-width: 3em; min-height: 3em; padding: 0; } .emoji widget { transition: all 0.2s cubic-bezier(0, 0, 0.2, 1); } .emoji widget:hover { font-size: larger; } terminal-window notebook > header.top tabs > tab, .mate-terminal notebook > header.top tabs > tab { border-top: 1px solid transparent; } terminal-window notebook > header.top button, .mate-terminal notebook > header.top button { padding: 0; min-width: 24px; min-height: 24px; } .nautilus-canvas-item { border-radius: 2px; } .nautilus-desktop.nautilus-canvas-item, .nemo-desktop.nemo-canvas-item, .caja-desktop { color: white; text-shadow: 1px 1px rgba(0, 0, 0, 0.6); } .nautilus-desktop.nautilus-canvas-item:active, .nemo-desktop.nemo-canvas-item:active, .caja-desktop:active { color: #dedede; } .nautilus-desktop.nautilus-canvas-item:selected, .nemo-desktop.nemo-canvas-item:selected, .caja-desktop:selected { color: #ffffff; text-shadow: none; } .nautilus-canvas-item.dim-label, label.nautilus-canvas-item.separator, popover.background label.nautilus-canvas-item.separator, headerbar .nautilus-canvas-item.subtitle, .titlebar:not(headerbar) .nautilus-canvas-item.subtitle, .budgie-notification .nautilus-canvas-item.notification-body, .budgie-switcher .nautilus-canvas-item.notification-body, .nautilus-list-dim-label { color: #898989; } .nautilus-canvas-item.dim-label:selected, label.nautilus-canvas-item.separator:selected, headerbar .nautilus-canvas-item.subtitle:selected, .titlebar:not(headerbar) .nautilus-canvas-item.subtitle:selected, .budgie-notification .nautilus-canvas-item.notification-body:selected, .budgie-switcher .nautilus-canvas-item.notification-body:selected, .nautilus-canvas-item.dim-label:selected:focus, label.nautilus-canvas-item.separator:selected:focus, headerbar .nautilus-canvas-item.subtitle:selected:focus, .titlebar:not(headerbar) .nautilus-canvas-item.subtitle:selected:focus, .budgie-notification .nautilus-canvas-item.notification-body:selected:focus, .budgie-switcher .nautilus-canvas-item.notification-body:selected:focus, .nautilus-list-dim-label:selected, .nautilus-list-dim-label:selected:focus { color: #dbe8ff; } .nautilus-window searchbar { border-top: 1px solid rgba(255, 255, 255, 0.12); } .nautilus-window .searchbar-container { margin-top: -1px; } .nautilus-window notebook, .nautilus-window notebook > stack { border-radius: 0 0 6px 6px; } .nautilus-window.maximized notebook, .nautilus-window.maximized notebook > stack { border-radius: 0 0 0 0; } .nautilus-window notebook, .nautilus-window notebook > stack:not(:only-child) searchbar { background-color: #242424; } .disk-space-display { border-style: solid; border-width: 1px; } .disk-space-display.unknown { background-color: rgba(222, 222, 222, 0.5); border-color: rgba(197, 197, 197, 0.5); } .disk-space-display.used { background-color: rgba(73, 141, 255, 0.8); border-color: rgba(22, 109, 255, 0.8); } .disk-space-display.free { background-color: #2b2b2b; border-color: #121212; } @keyframes needs_attention_keyframes { 0% { border-color: rgba(255, 255, 255, 0.12); color: rgba(221, 213, 213, 0.8); background-color: rgba(119, 119, 119, 0.88); background-image: none; box-shadow: none; } 100% { color: #ffffff; background-color: rgba(119, 119, 119, 0.98); background-image: none; border-color: rgba(255, 255, 255, 0.12); text-shadow: none; -gtk-icon-shadow: none; box-shadow: none; } } .nautilus-operations-button-needs-attention { animation: needs_attention_keyframes 2s ease-in-out; } .nautilus-operations-button-needs-attention-multiple { animation: needs_attention_keyframes 3s ease-in-out; animation-iteration-count: 3; } .conflict-row.activatable, .conflict-row.activatable:active { color: white; background-color: #FC4138; } .conflict-row.activatable:hover { background-color: #fd716a; } .conflict-row.activatable:selected { color: #ffffff; background-color: #498dff; } .nautilus-window .floating-bar { padding: 1px; background-color: #498dff; color: #ffffff; border-radius: 3px 0 4px 0; } .nautilus-window .floating-bar.bottom.left { border-top-left-radius: 0; } .nautilus-window .floating-bar.bottom.right { border-top-right-radius: 0; } .nautilus-window .floating-bar button { border: none; border-radius: 100px; min-height: 0; min-width: 0; padding: 0; margin-right: 6px; -gtk-icon-shadow: none; } .nautilus-window.maximized .floating-bar { border-radius: 3px 0 0 0; } .nemo-window .nemo-places-sidebar.frame { border-width: 0; } .nemo-window notebook { background-color: #242424; } .nemo-window .nemo-window-pane widget.entry { border: 1px solid; border-radius: 3px; color: #dedede; border-color: #8eb9ff; background-color: #242424; box-shadow: inset 0 0 0 2px #8eb9ff; } .nemo-window .primary-toolbar { border: none; color: rgba(225, 219, 219, 0.8); background-color: #373737; } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button { padding-bottom: 2px; margin: 0; color: rgba(225, 219, 219, 0.8); background-color: rgba(55, 55, 55, 0.98); } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:not(:last-child):not(:only-child) { margin: 0; } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:hover { color: rgba(225, 219, 219, 0.8); background-color: rgba(75, 75, 75, 0.98); } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:active, .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:checked { transition: background-color 0.00001s 0.3s; animation: header_ripple_effect 0.3s cubic-bezier(0, 0, 0.2, 1); color: rgba(225, 219, 219, 0.8); background-color: rgba(30, 30, 30, 0.98); box-shadow: inset 0 -2px #7cadff; } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button:disabled { color: rgba(225, 219, 219, 0.4); } .nemo-window .primary-toolbar widget.raised.linked:not(.vertical):not(.path-bar) > button + button { border-left-style: solid; } .caja-notebook { border-top: 1px solid rgba(255, 255, 255, 0.12); } .caja-side-pane .frame { border-width: 1px 0 0; } .caja-notebook .frame { border-width: 0 0 1px; } .open-document-selector-treeview.view, iconview.open-document-selector-treeview { padding: 3px 6px 3px 6px; border-color: #242424; } .open-document-selector-treeview.view:hover, iconview.open-document-selector-treeview:hover { background-color: #313131; } .open-document-selector-treeview.view:hover:selected, iconview.open-document-selector-treeview:hover:selected { color: #ffffff; background-color: #498dff; } .open-document-selector-name-label { color: #dedede; } .open-document-selector-path-label { color: #818181; font-size: smaller; } .open-document-selector-path-label:selected { color: rgba(255, 255, 255, 0.9); } .gedit-document-panel row.activatable, .gedit-document-panel .budgie-menu button, .budgie-menu .gedit-document-panel button { padding: 6px 0; } .gedit-document-panel row button { min-width: 22px; min-height: 22px; padding: 0; margin: 0 6px; border-radius: 100px; -gtk-outline-radius: 100px; } .gedit-document-panel row button image { color: inherit; } .gedit-document-panel row:hover:not(:selected) button { color: #a2a2a2; } .gedit-document-panel row:hover:not(:selected) button:hover { color: #ff4d4d; } .gedit-document-panel row:hover:not(:selected) button:active { color: #dedede; } .gedit-document-panel row:hover:selected button:hover { color: #ff6666; } .gedit-document-panel row:hover:selected button:hover:active { color: #ffffff; } .gedit-document-panel-dragged-row { border: 1px solid rgba(255, 255, 255, 0.12); background-color: #1a1a1a; color: #dedede; } .gedit-side-panel-paned statusbar { border-top: 1px solid rgba(255, 255, 255, 0.12); background-color: #333333; border-radius: 0 0 6px 6px; } .gedit-search-slider { background-color: #383838; padding: 6px; border-color: rgba(255, 255, 255, 0.12); border-radius: 0 0 5px 5px; border-width: 0 1px 1px 1px; border-style: solid; } .gedit-search-entry-occurrences-tag { color: rgba(222, 222, 222, 0.6); border: none; margin: 2px; padding: 2px; } .gedit-map-frame border { border-width: 0; } .gedit-map-frame border:dir(ltr) { border-left-width: 1px; } .gedit-map-frame border:dir(rtl) { border-right-width: 1px; } .gedit-side-panel-paned.horizontal > box.vertical > stack > grid.horizontal > box.horizontal { margin: 4px 0; } .gedit-side-panel-paned.horizontal > box.vertical > stack > grid.horizontal > scrolledwindow { margin: 0 6px 6px 6px; border-radius: 0; box-shadow: 0px 1px 2px 0px rgba(16, 16, 16, 0.15), 0px 2px 3px 0px rgba(16, 16, 16, 0.1); } paned.titlebar.horizontal headerbar button.flat.toggle.popup:not(.image-button) box > .title, paned.titlebar.horizontal headerbar button.toggle.popup.budgie-menu-launcher:not(.image-button) box > .title, paned.titlebar.horizontal headerbar .budgie-panel .toggle.popup#tasklist-button:not(.image-button) box > .title, .budgie-panel paned.titlebar.horizontal headerbar .toggle.popup#tasklist-button:not(.image-button) box > .title { padding: 0; margin: -2px 0; } .pluma-window statusbar frame > border { border: none; } .pluma-window notebook > stack scrolledwindow { border-width: 0 0 1px 0; } #pluma-status-combo-button { min-height: 0; padding: 0; border-top: none; border-bottom: none; border-radius: 0; } .gb-search-entry-occurrences-tag { background: none; } workbench.csd > stack.titlebar:not(headerbar) { padding: 0; background: none; border: none; box-shadow: none; } workbench.csd > stack.titlebar:not(headerbar) headerbar, workbench.csd > stack.titlebar:not(headerbar) headerbar:first-child, workbench.csd > stack.titlebar:not(headerbar) headerbar:last-child { border-radius: 6px 6px 0 0; } editortweak .linked > entry.search:focus + .gb-linked-scroller { border-top-color: #498dff; } layouttab { background-color: #242424; } layout { border: 1px solid rgba(255, 255, 255, 0.12); -PnlDockBin-handle-size: 1; } eggsearchbar box.search-bar { border-bottom: 1px solid rgba(255, 255, 255, 0.12); } pillbox { color: #ffffff; background-color: #498dff; border-radius: 3px; } pillbox:disabled label { color: rgba(255, 255, 255, 0.5); } docktabstrip { padding: 0 6px; background-color: #333333; border-bottom: 1px solid rgba(255, 255, 255, 0.12); } docktabstrip docktab { min-height: 28px; border: solid transparent; border-width: 0 1px; } docktabstrip docktab label { opacity: 0.5; } docktabstrip docktab:checked label, docktabstrip docktab:hover label { opacity: 1; } docktabstrip docktab:checked { border-color: rgba(255, 255, 255, 0.12); background-color: #242424; } dockbin { border: 1px solid rgba(255, 255, 255, 0.12); -PnlDockBin-handle-size: 1; } dockpaned { border: 1px solid rgba(255, 255, 255, 0.12); } dockoverlayedge { background-color: #333333; } dockoverlayedge docktabstrip { padding: 0; border: none; } dockoverlayedge.left-edge tab:checked, dockoverlayedge.right-edge tab:checked { border-width: 1px 0; } popover.messagepopover.background { padding: 0; } popover.messagepopover .popover-content-area { margin: 16px; } popover.messagepopover .popover-action-area { margin: 8px; } popover.messagepopover .popover-action-area button:not(:first-child):not(:last-child) { margin: 0 4px; } popover.popover-selector { padding: 0; } popover.popover-selector list row { padding: 5px 0; } popover.popover-selector list row image { margin-left: 3px; margin-right: 10px; } entry.search.preferences-search { border: none; border-right: 1px solid rgba(255, 255, 255, 0.12); border-bottom: 1px solid rgba(255, 255, 255, 0.12); border-radius: 0; } preferences stacksidebar.sidebar list { background-image: linear-gradient(to bottom, #242424, #242424); } preferences stacksidebar.sidebar list separator { background-color: transparent; } devhelppanel entry:focus, symboltreepanel entry:focus { border-color: rgba(255, 255, 255, 0.12); } button.run-arrow-button { min-width: 12px; } omnibar.linked > entry:not(:only-child) { border-style: solid; border-radius: 3px; margin-left: 1px; margin-right: 1px; } gstyleslidein #scale_box button.toggle:checked, gstyleslidein #strings_controls button.toggle:checked, gstyleslidein #palette_controls button.toggle:checked, gstyleslidein #components_controls button.toggle:checked { color: #dedede; } configurationview entry.flat, configurationview .raven .raven-background spinbutton:not(.vertical), .raven .raven-background configurationview spinbutton:not(.vertical) { background: none; } configurationview list { border-width: 0; } window.background > box.vertical box.horizontal list.categories { border-radius: 0 0 0 6px; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event { color: #dedede; transition-duration: 0.1s; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable:hover, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event:hover, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event:hover, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable:active, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event:active, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event:active { color: #dedede; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable label.compressed-entries-label, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event label.compressed-entries-label, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event label.compressed-entries-label { background-image: image(#3484e2); color: #ffffff; font-weight: 700; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row { background-image: image(#2b2b2b); color: #ababab; transition-property: opacity, border-image, background-image, box-shadow; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row:hover, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row:hover, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row:hover { background-image: image(#3c3c3c); color: #dedede; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row:active, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row:active, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row:active, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row:active:focus, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row:active:focus, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row:active:focus { background-image: image(#444444); color: #dedede; animation: none; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row.popover-activated-row, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row.popover-activated-row, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row.popover-activated-row { background-image: image(#498dff); color: #ffffff; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row-header, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row-header, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row-header { background-image: image(#242424); color: #498dff; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row-header:hover, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row-header:hover, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row-header:hover { background-image: image(#26292f); } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row-header:active, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row-header:active, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row-header:active, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row-header:active:focus, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row-header:active:focus, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row-header:active:focus { background-image: image(#282f3a); color: #498dff; animation: none; } window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list row.event.activatable.compressed-row-header label.compressed-entries-label, window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list .budgie-menu button.event.compressed-row-header label.compressed-entries-label, .budgie-menu window.background > box.vertical box.horizontal > box.vertical > scrolledwindow > viewport.frame > list button.event.compressed-row-header label.compressed-entries-label { background-image: image(#498dff); color: #ffffff; transition-duration: 0s; } .documents-scrolledwin.frame { border-width: 0; } button.documents-load-more { border-width: 1px 0 0; border-radius: 0; } .documents-icon-bg { background-color: #498dff; color: #ffffff; border-radius: 2px; } .documents-collection-icon, .photos-collection-icon { background-color: rgba(222, 222, 222, 0.3); border-radius: 2px; } button.documents-favorite:active, button.documents-favorite:active:hover { color: #afcdff; } .documents-entry-tag, .photos-entry-tag { color: #ffffff; background: #498dff; border-radius: 3px; border-width: 0; margin: 2px; padding: 4px; } .documents-entry-tag:hover, .photos-entry-tag:hover { color: #ffffff; background: #5d9aff; } .documents-entry-tag:active, .photos-entry-tag:active { color: #ffffff; background: #3580ff; } .documents-entry-tag.button, .button.photos-entry-tag { box-shadow: none; border: none; background-color: transparent; } .content-view.document-page { border-style: solid; border-width: 3px 3px 6px 4px; border-image: url("assets/thumbnail-frame.png") 3 3 6 4; } .photos-fade-in { opacity: 1.0; transition: opacity 0.2s ease-out; } .photos-fade-out { opacity: 0.0; transition: opacity 0.2s ease-out; } .tweak-categories, .tweak-category:not(:selected):not(:hover) { background-image: linear-gradient(to bottom, #242424, #242424); } .tweak-categories { border-radius: 0 0 0 6px; } .tweak-titlebar-right > switch, dialog.csd > headerbar.titlebar > switch { margin: 8px 0; } /************************ * Gnome Control Center * ************************/ box.horizontal.titlebar > headerbar > stack > box.vertical > .title { margin: 0; } box.horizontal.titlebar > headerbar > stack > box.vertical > .subtitle { margin: -3px 0; } dialog.background.csd > headerbar.titlebar > label:not(.title):not(.subtitle) { font-weight: 700; } .tr-workarea undershoot, .tr-workarea overshoot { border-color: transparent; } .atril-window .primary-toolbar toolbar, .atril-window .primary-toolbar .inline-toolbar { background: none; } #gf-bubble, #gf-bubble.solid, #gf-osd-window, #gf-osd-window.solid, #gf-input-source-popup, #gf-input-source-popup.solid, #gf-candidate-popup, #gf-candidate-popup.solid { color: #f0f0f0; background-color: rgba(36, 36, 36, 0.95); border: 1px solid rgba(16, 16, 16, 0.95); border-radius: 2px; } #gf-bubble levelbar block.low, #gf-bubble levelbar block.high, #gf-bubble levelbar block.full, #gf-osd-window levelbar block.low, #gf-osd-window levelbar block.high, #gf-osd-window levelbar block.full, #gf-input-source-popup levelbar block.low, #gf-input-source-popup levelbar block.high, #gf-input-source-popup levelbar block.full, #gf-candidate-popup levelbar block.low, #gf-candidate-popup levelbar block.high, #gf-candidate-popup levelbar block.full { background-color: #498dff; border-color: #498dff; } #gf-bubble levelbar block.empty, #gf-osd-window levelbar block.empty, #gf-input-source-popup levelbar block.empty, #gf-candidate-popup levelbar block.empty { background-color: rgba(23, 23, 23, 0.95); } #gf-bubble levelbar trough, #gf-osd-window levelbar trough, #gf-input-source-popup levelbar trough, #gf-candidate-popup levelbar trough { background: none; } #gf-input-source { min-height: 32px; min-width: 40px; } #gf-input-source:selected { color: #ffffff; background-color: #498dff; border-radius: 2px; } gf-candidate-box label { padding: 3px; } gf-candidate-box:hover, gf-candidate-box:selected { color: #ffffff; background-color: #498dff; border-radius: 2px; } /************* * rhythmbox * *************/ .sidebar-paned .inline-toolbar.horizontal.sidebar-toolbar { box-shadow: inset 0 1px rgba(255, 255, 255, 0.12); padding: 4px; background-color: #2b2b2b; } .sidebar-paned .inline-toolbar.horizontal.sidebar-toolbar button.image-button { border: none; } .sidebar-paned .inline-toolbar.horizontal.sidebar-toolbar button.image-button:active, .sidebar-paned .inline-toolbar.horizontal.sidebar-toolbar button.image-button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); } .sidebar-paned .inline-toolbar.horizontal.sidebar-toolbar button.image-button > widget > box > image { padding: 0; } .sidebar-paned scrolledwindow { border: none; } window.csd > box.vertical > box.vertical > toolbar.horizontal, window.csd > box.vertical > box.vertical > .horizontal.inline-toolbar, window.solid-csd > box.vertical > box.vertical > toolbar.horizontal, window.solid-csd > box.vertical > box.vertical > .horizontal.inline-toolbar { margin: -1px 0; border-top: 1px solid rgba(255, 255, 255, 0.12); box-shadow: none; background-color: transparent; } window.csd > box.vertical > box.vertical > toolbar.horizontal button, window.csd > box.vertical > box.vertical > .horizontal.inline-toolbar button, window.solid-csd > box.vertical > box.vertical > toolbar.horizontal button, window.solid-csd > box.vertical > box.vertical > .horizontal.inline-toolbar button { min-height: 36px; min-width: 36px; padding: 0; margin-top: 8px; margin-bottom: 8px; border: none; } window.csd > box.vertical > box.vertical > toolbar.horizontal button:active, window.csd > box.vertical > box.vertical > .horizontal.inline-toolbar button:active, window.csd > box.vertical > box.vertical > toolbar.horizontal button:checked, window.csd > box.vertical > box.vertical > .horizontal.inline-toolbar button:checked, window.solid-csd > box.vertical > box.vertical > toolbar.horizontal button:active, window.solid-csd > box.vertical > box.vertical > .horizontal.inline-toolbar button:active, window.solid-csd > box.vertical > box.vertical > toolbar.horizontal button:checked, window.solid-csd > box.vertical > box.vertical > .horizontal.inline-toolbar button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); } window.csd > box.vertical > box.vertical > frame, window.solid-csd > box.vertical > box.vertical > frame { margin: -1px 0; padding: 0; } window.csd > box.vertical > box.vertical > frame > border, window.solid-csd > box.vertical > box.vertical > frame > border { border: none; } window.background > box.vertical > toolbar.primary-toolbar toolitem .linked > button.image-button.raised, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem .linked > button.image-button.raised { min-height: 36px; min-width: 36px; padding: 0; margin: 0; border: none; } window.background > box.vertical > toolbar.primary-toolbar toolitem .linked > button.image-button.raised:active, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem .linked > button.image-button.raised:active, window.background > box.vertical > toolbar.primary-toolbar toolitem .linked > button.image-button.raised:checked, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem .linked > button.image-button.raised:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); } window.background > box.vertical > toolbar.primary-toolbar toolitem .linked > button.image-button.raised > widget > box > image, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem .linked > button.image-button.raised > widget > box > image { padding: 0; } window.background > box.vertical > toolbar.primary-toolbar toolitem button.flat.scale, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem button.flat.scale, window.background > box.vertical > toolbar.primary-toolbar toolitem button.scale.budgie-menu-launcher, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem button.scale.budgie-menu-launcher, window.background > box.vertical > toolbar.primary-toolbar toolitem .budgie-panel .scale#tasklist-button, .budgie-panel window.background > box.vertical > toolbar.primary-toolbar toolitem .scale#tasklist-button, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem .budgie-panel .scale#tasklist-button, .budgie-panel window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem .scale#tasklist-button, .budgie-panel window.background > box.vertical > toolbar.primary-toolbar toolitem button.scale.flat.launcher, .budgie-panel window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem button.scale.flat.launcher { min-height: 24px; min-width: 36px; padding: 0; margin-top: 8px; margin-bottom: 8px; } window.background > box.vertical > toolbar.primary-toolbar toolitem > box.horizontal:not(.linked) > button.toggle, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem > box.horizontal:not(.linked) > button.toggle, window.background > box.vertical > toolbar.primary-toolbar toolitem > .linked > button:not(.toggle):not(.raised):not(.flat), window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem > .linked > button:not(.toggle):not(.raised):not(.flat) { min-height: 28px; min-width: 28px; padding: 0; margin: 0; border: none; } window.background > box.vertical > toolbar.primary-toolbar toolitem > box.horizontal:not(.linked) > button.toggle:active, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem > box.horizontal:not(.linked) > button.toggle:active, window.background > box.vertical > toolbar.primary-toolbar toolitem > box.horizontal:not(.linked) > button.toggle:checked, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem > box.horizontal:not(.linked) > button.toggle:checked, window.background > box.vertical > toolbar.primary-toolbar toolitem > .linked > button:not(.toggle):not(.raised):not(.flat):active, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem > .linked > button:not(.toggle):not(.raised):not(.flat):active, window.background > box.vertical > toolbar.primary-toolbar toolitem > .linked > button:not(.toggle):not(.raised):not(.flat):checked, window.background > box.vertical > .primary-toolbar.inline-toolbar toolitem > .linked > button:not(.toggle):not(.raised):not(.flat):checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); } /******************** * Gnome Calculator * ********************/ window.background > headerbar.titlebar > button.flat.popup.toggle.text-button.title, window.background > headerbar.titlebar > button.popup.toggle.text-button.title.budgie-menu-launcher, .budgie-panel window.background > headerbar.titlebar > .popup.toggle.text-button.title#tasklist-button, .budgie-panel window.background > headerbar.titlebar > button.popup.toggle.text-button.title.flat.launcher { margin: 6px 0; } window.background > headerbar.titlebar > button.flat.popup.toggle.text-button.title > grid > widget, window.background > headerbar.titlebar > button.popup.toggle.text-button.title.budgie-menu-launcher > grid > widget, .budgie-panel window.background > headerbar.titlebar > .popup.toggle.text-button.title#tasklist-button > grid > widget, .budgie-panel window.background > headerbar.titlebar > button.popup.toggle.text-button.title.flat.launcher > grid > widget { padding-top: 3px; } window.background > headerbar.titlebar > button.flat.popup.toggle.text-button.title > grid > widget:dir(ltr), window.background > headerbar.titlebar > button.popup.toggle.text-button.title.budgie-menu-launcher > grid > widget:dir(ltr), .budgie-panel window.background > headerbar.titlebar > .popup.toggle.text-button.title#tasklist-button > grid > widget:dir(ltr), .budgie-panel window.background > headerbar.titlebar > button.popup.toggle.text-button.title.flat.launcher > grid > widget:dir(ltr) { padding-left: 4px; } window.background > headerbar.titlebar > button.flat.popup.toggle.text-button.title > grid > widget:dir(rtl), window.background > headerbar.titlebar > button.popup.toggle.text-button.title.budgie-menu-launcher > grid > widget:dir(rtl), .budgie-panel window.background > headerbar.titlebar > .popup.toggle.text-button.title#tasklist-button > grid > widget:dir(rtl), .budgie-panel window.background > headerbar.titlebar > button.popup.toggle.text-button.title.flat.launcher > grid > widget:dir(rtl) { padding-right: 4px; } window.background > grid.vertical > box.vertical > widget button, window.background > grid.vertical > box.vertical > box.vertical > widget button, window.background > grid.vertical > box.vertical grid.math-buttons button { font-weight: 700; } window.background > grid.vertical > box.vertical > widget button:not(.suggested-action):active, window.background > grid.vertical > box.vertical > box.vertical > widget button:not(.suggested-action):active, window.background > grid.vertical > box.vertical grid.math-buttons button:not(.suggested-action):active { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); } window.background > grid.vertical > box.vertical > widget button:not(.suggested-action):checked, window.background > grid.vertical > box.vertical > box.vertical > widget button:not(.suggested-action):checked, window.background > grid.vertical > box.vertical grid.math-buttons button:not(.suggested-action):checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.35); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); } /************ * Epiphany * ************/ headerbar.titlebar.incognito-mode entry { border: none; color: rgba(225, 219, 219, 0.8); background-color: rgba(119, 119, 119, 0.58); background-image: none; } headerbar.titlebar.incognito-mode entry image, headerbar.titlebar.incognito-mode entry image:hover { color: inherit; } headerbar.titlebar.incognito-mode entry:focus { border: none; box-shadow: 0 0 0 2px #8eb9ff, inset 0 0 0 1px #8eb9ff; border-color: #8eb9ff; background-image: none; } headerbar.titlebar.incognito-mode entry:disabled { color: rgba(225, 219, 219, 0.35); background-color: rgba(111, 111, 111, 0.23); } notebook > box > stack > box.vertical > paned.vertical > overlay > .floating-bar { color: rgba(222, 222, 222, 0.75); } .background headerbar entry.starred, .background headerbar entry.non-starred { border: none; color: rgba(225, 219, 219, 0.8); background-color: rgba(119, 119, 119, 0.58); background-image: none; } .background headerbar entry.starred image, .background headerbar entry.starred image:hover, .background headerbar entry.non-starred image, .background headerbar entry.non-starred image:hover { color: inherit; } .background headerbar entry.starred:focus, .background headerbar entry.non-starred:focus { border: none; box-shadow: 0 0 0 2px #8eb9ff, inset 0 0 0 1px #8eb9ff; border-color: #8eb9ff; background-image: none; } .background headerbar entry.starred:disabled, .background headerbar entry.non-starred:disabled { color: rgba(225, 219, 219, 0.35); background-color: rgba(111, 111, 111, 0.23); } .background headerbar entry.starred > image.right { color: #ccbb00; } .background headerbar entry.starred > image.right:hover, .background headerbar entry.starred > image.right:active, .background headerbar entry.starred > image.right:checked { color: #FFEA00; } popover.background:not(.emoji-picker) > box.vertical button:not(.destructive-action):not(.suggested-action):only-child:active, popover.background:not(.emoji-picker) > box.vertical button:not(.destructive-action):not(.suggested-action):only-child:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background { background-color: transparent; } popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background > row.activatable, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background > button { background-color: #4d4d4d; color: rgba(222, 222, 222, 0.85); border-radius: 5px; border: 1px solid rgba(255, 255, 255, 0.12); margin: 2px; } popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background > row.activatable:hover, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background > button:hover { color: #c5c5c5; border-color: rgba(255, 255, 255, 0.12); background-color: #5c5c5c; box-shadow: none; } popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background > row.activatable:active, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background > button:active, popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background > row.activatable:checked, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > scrolledwindow > viewport.frame > list.background > button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame { border: 1px solid rgba(255, 255, 255, 0.12); } popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > button.bookmarks-row { background-color: rgba(36, 36, 36, 0.35); color: rgba(222, 222, 222, 0.85); border-bottom: 1px dashed rgba(255, 255, 255, 0.05); padding: 6px; } popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row:hover, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row:hover, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > button.bookmarks-row:hover, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row:active, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row:active, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > button.bookmarks-row:active, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row:checked, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row:checked, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > button.bookmarks-row:checked { color: #dedede; background-color: rgba(222, 222, 222, 0.05); } popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row button.flat, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row button.flat, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > button.bookmarks-row button.flat, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row button.budgie-menu-launcher, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row button.budgie-menu-launcher, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > button.bookmarks-row button.budgie-menu-launcher, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row .budgie-panel #tasklist-button, .budgie-panel popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row #tasklist-button, popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row .budgie-panel #tasklist-button, .budgie-panel popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row #tasklist-button, .budgie-menu popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > button.bookmarks-row .budgie-panel #tasklist-button, .budgie-panel .budgie-menu popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > button.bookmarks-row #tasklist-button, .budgie-panel popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical scrolledwindow > viewport.frame > list.background > row.activatable.bookmarks-row button.flat.launcher, .budgie-panel popover.background:not(.emoji-picker) > box.vertical > stack > box.vertical .budgie-menu scrolledwindow > viewport.frame > list.background > button.bookmarks-row button.flat.launcher { min-width: 16px; min-height: 16px; padding: 4px; border-radius: 100px; -gtk-outline-radius: 100px; } flowboxchild.bookmark-tag-widget { color: #333333; font-weight: 500; } flowboxchild.bookmark-tag-widget label { margin-bottom: 2px; } flowboxchild.bookmark-tag-widget-selected { color: #ffffff; } MsdOsdWindow.background.osd { border-radius: 2px; border: 1px solid rgba(16, 16, 16, 0.95); } MsdOsdWindow.background.osd .progressbar { background-color: #498dff; border: none; border-color: red; border-radius: 5px; } MsdOsdWindow.background.osd .trough { background-color: rgba(23, 23, 23, 0.95); border: none; border-radius: 5px; } .mate-panel-menu-bar, .mate-panel-menu-bar menubar, panel-toplevel.background, panel-toplevel.background menubar { background-color: #2f2f2f; } .mate-panel-menu-bar menubar, .mate-panel-menu-bar #PanelApplet label, .mate-panel-menu-bar #PanelApplet image, panel-toplevel.background menubar, panel-toplevel.background #PanelApplet label, panel-toplevel.background #PanelApplet image { color: #dedede; } .mate-panel-menu-bar button label, .mate-panel-menu-bar button image, .mate-panel-menu-bar #tasklist-button label, .mate-panel-menu-bar #tasklist-button image, panel-toplevel.background button label, panel-toplevel.background button image, panel-toplevel.background #tasklist-button label, panel-toplevel.background #tasklist-button image { color: inherit; } .mate-panel-menu-bar .wnck-pager, panel-toplevel.background .wnck-pager { color: #6f6f6f; background-color: rgba(22, 22, 22, 0.94); } .mate-panel-menu-bar .wnck-pager:hover, panel-toplevel.background .wnck-pager:hover { background-color: rgba(60, 60, 60, 0.94); } .mate-panel-menu-bar .wnck-pager:selected, panel-toplevel.background .wnck-pager:selected { color: #afcdff; background-color: #498dff; } .mate-panel-menu-bar na-tray-applet, panel-toplevel.background na-tray-applet { -NaTrayApplet-icon-padding: 0; -NaTrayApplet-icon-size: 16px; } .xfce4-panel.panel { background-color: rgba(47, 47, 47, 0.94); text-shadow: none; -gtk-icon-shadow: none; } #tasklist-button { color: rgba(222, 222, 222, 0.8); border-radius: 0; border: none; background-color: rgba(47, 47, 47, 0); } #tasklist-button:hover { color: #f8f8f8; background-color: rgba(0, 0, 0, 0.17); } #tasklist-button:checked { color: white; background-color: rgba(0, 0, 0, 0.25); box-shadow: inset 0 -2px #498dff; } .mate-panel-menu-bar button:not(#tasklist-button), panel-toplevel.background button:not(#tasklist-button), .xfce4-panel.panel button.flat, .xfce4-panel.panel button.budgie-menu-launcher, .xfce4-panel.panel .budgie-panel #tasklist-button, .budgie-panel .xfce4-panel.panel #tasklist-button { color: #dedede; border-radius: 0; border: none; background-color: rgba(47, 47, 47, 0); } .mate-panel-menu-bar button:hover:not(#tasklist-button), panel-toplevel.background button:hover:not(#tasklist-button), .xfce4-panel.panel button.flat:hover, .xfce4-panel.panel button.budgie-menu-launcher:hover, .xfce4-panel.panel .budgie-panel #tasklist-button:hover, .budgie-panel .xfce4-panel.panel #tasklist-button:hover { border: none; background-color: rgba(73, 73, 73, 0.94); } .mate-panel-menu-bar button:active:not(#tasklist-button), panel-toplevel.background button:active:not(#tasklist-button), .xfce4-panel.panel button.flat:active, .xfce4-panel.panel button.budgie-menu-launcher:active, .xfce4-panel.panel .budgie-panel #tasklist-button:active, .budgie-panel .xfce4-panel.panel #tasklist-button:active, .mate-panel-menu-bar button:checked:not(#tasklist-button), panel-toplevel.background button:checked:not(#tasklist-button), .xfce4-panel.panel button.flat:checked, .xfce4-panel.panel button.budgie-menu-launcher:checked, .xfce4-panel.panel .budgie-panel #tasklist-button:checked, .budgie-panel .xfce4-panel.panel #tasklist-button:checked { color: #ffffff; border: none; background-color: #498dff; } .mate-panel-menu-bar button:active:not(#tasklist-button) label, panel-toplevel.background button:active:not(#tasklist-button) label, .xfce4-panel.panel button.flat:active label, .xfce4-panel.panel button.budgie-menu-launcher:active label, .xfce4-panel.panel .budgie-panel #tasklist-button:active label, .budgie-panel .xfce4-panel.panel #tasklist-button:active label, .mate-panel-menu-bar button:active:not(#tasklist-button) image, panel-toplevel.background button:active:not(#tasklist-button) image, .xfce4-panel.panel button.flat:active image, .xfce4-panel.panel button.budgie-menu-launcher:active image, .xfce4-panel.panel .budgie-panel #tasklist-button:active image, .budgie-panel .xfce4-panel.panel #tasklist-button:active image, .mate-panel-menu-bar button:checked:not(#tasklist-button) label, panel-toplevel.background button:checked:not(#tasklist-button) label, .xfce4-panel.panel button.flat:checked label, .xfce4-panel.panel button.budgie-menu-launcher:checked label, .xfce4-panel.panel .budgie-panel #tasklist-button:checked label, .budgie-panel .xfce4-panel.panel #tasklist-button:checked label, .mate-panel-menu-bar button:checked:not(#tasklist-button) image, panel-toplevel.background button:checked:not(#tasklist-button) image, .xfce4-panel.panel button.flat:checked image, .xfce4-panel.panel button.budgie-menu-launcher:checked image, .xfce4-panel.panel .budgie-panel #tasklist-button:checked image, .budgie-panel .xfce4-panel.panel #tasklist-button:checked image { color: inherit; } /********* * Geary * *********/ .geary-titlebar-left separator { opacity: 0; } .geary-titlebar-left > button { min-width: 22px; } .geary-titlebar-right { box-shadow: none; } .geary-titlebar-right separator { opacity: 0; } .geary-titlebar-right > button { min-width: 22px; } window.background:not(.csd) > widget > separator { padding-top: 1px; margin-top: 1px; min-height: 2px; background-color: rgba(255, 255, 255, 0.07); } window.background:not(.csd) > widget > scrollbar { background-clip: border-box; } window.background:not(.csd) > widget > scrollbar, window.background:not(.csd) > widget > frame > border { border-color: rgba(255, 255, 255, 0.12); } window.background:not(.csd) > widget > entry, window.background:not(.csd) > widget > button > button { border: 1px solid rgba(255, 255, 255, 0.12); border-radius: 5px; box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.02); } window.background:not(.csd) > widget > entry, window.background:not(.csd) > widget .entry { border-radius: 5px; background-image: image(#242424); border: 1px solid rgba(255, 255, 255, 0.12); } window.background:not(.csd) > widget > entry:focus, window.background:not(.csd) > widget .entry:focus { border-color: #8eb9ff; box-shadow: inset 0 0 0 2px #8eb9ff; } window.background:not(.csd) > widget > spinbutton { background-image: image(#484848); border: 1px solid rgba(255, 255, 255, 0.12); } window.background:not(.csd) > widget > spinbutton:active { background-image: image(rgba(119, 119, 119, 0.98)); } window.background:not(.csd) > widget > spinbutton .entry { border-top-right-radius: 0; border-bottom-right-radius: 0; } window.background:not(.csd) > widget > button { padding-top: 3px; padding-bottom: 3px; } window.background:not(.csd) > widget > button > button { outline-style: none; } window.background:not(.csd) > widget > button > button:active { background-image: image(rgba(119, 119, 119, 0.98)); border: none; box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.12); } window.background:not(.csd) > widget > button > button label { padding: 4px 6px; } window.background:not(.csd) > menu, window.background:not(.csd) .menu { background-color: #404040; border-radius: 0; border: none; } window.background:not(.csd) > menu .separator:not(label), .csd window.background:not(.csd) > menu .separator:not(label), window.background:not(.csd) .menu .separator:not(label), .csd window.background:not(.csd) .menu .separator:not(label) { color: rgba(255, 255, 255, 0.12); } window.background:not(.csd) > menu > menuitem { padding: 4px 6px; } window.background:not(.csd) > menu > menuitem > label:disabled { color: rgba(222, 222, 222, 0.45); } window.background:not(.csd) > menu > menuitem > radio, window.background:not(.csd) > menu > menuitem > check { padding: 0 2px 0 4px; } #MozillaGtkWidget.background { background-color: #333333; } #MozillaGtkWidget.background .background, #MozillaGtkWidget.background frame, #MozillaGtkWidget.background separator, #MozillaGtkWidget.background scrolledwindow { background-color: #333333; } #MozillaGtkWidget.background scrollbar { background-color: transparent; } #MozillaGtkWidget.background scrollbar slider { background-color: gray; } #MozillaGtkWidget.background scrollbar slider:hover { background-color: #9a9a9a; } #MozillaGtkWidget.background scrollbar slider:hover:active { background-color: #b3b3b3; } #MozillaGtkWidget.background scrollbar slider:disabled { background-color: transparent; } #MozillaGtkWidget.background *:not(menuitem):hover, #MozillaGtkWidget.background *:not(menuitem):hover button, #MozillaGtkWidget.background *:focus, #MozillaGtkWidget.background *:focus button, #MozillaGtkWidget.background *:active, #MozillaGtkWidget.background *:active button, #MozillaGtkWidget.background *:checked, #MozillaGtkWidget.background *:checked button { color: #dedede; } #MozillaGtkWidget.background > window.background > menu { background-color: #404040; border-radius: 0; border-color: rgba(255, 255, 255, 0.12); } #MozillaGtkWidget.background > window.background > menu > separator { margin-top: 2px; margin-bottom: 2px; background-color: rgba(255, 255, 255, 0.12); } #MozillaGtkWidget.background > widget border { border-color: rgba(255, 255, 255, 0.12); } #MozillaGtkWidget.background > widget separator { background-color: rgba(255, 255, 255, 0.12); } #MozillaGtkWidget.background > widget > scrolledwindow > textview { background-color: #404040; } #MozillaGtkWidget.background > widget > scrolledwindow > textview text { background-color: transparent; color: #aaaaaa; } /*************** * Chrome(ium) * ***************/ window.background.chromium headerbar.titlebar button.toggle { border: none; background-color: transparent; background-image: none; } window.background.chromium headerbar.titlebar button.toggle:hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); } window.background.chromium headerbar.titlebar button.toggle:checked, window.background.chromium headerbar.titlebar button.toggle:active { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } window.background.chromium headerbar.titlebar button.titlebutton { min-width: 16px; min-height: 16px; margin: 0; padding: 0 0; background-size: auto; color: transparent; } window.background.chromium button { border: none; } window.background.chromium entry.chromium, window.background.chromium entry.chromium:focus { border-image: none; border: 1px solid rgba(255, 255, 255, 0.12); } window.background.chromium > textview.view { background-color: #242424; } /**************** * Libre-Office * ****************/ window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal { background-image: none; background-color: transparent; box-shadow: inset 0 -1px rgba(255, 255, 255, 0.12); } window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.flat.small-button, window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.budgie-menu-launcher, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > .small-button#tasklist-button, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.flat.launcher { color: rgba(225, 219, 219, 0.8); border: none; border-radius: 50px; background-image: none; } window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.flat.small-button:hover, window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.budgie-menu-launcher:hover, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > .small-button#tasklist-button:hover, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.flat.launcher:hover { background-color: rgba(93, 93, 93, 0.98); color: rgba(237, 233, 233, 0.8); } window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.flat.small-button:active, window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.budgie-menu-launcher:active, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > .small-button#tasklist-button:active, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.flat.launcher:active, window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.flat.small-button:checked, window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.budgie-menu-launcher:checked, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > .small-button#tasklist-button:checked, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.flat.launcher:checked { background-color: rgba(255, 0, 0, 0.65); color: white; } window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.flat.small-button:disabled, window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.budgie-menu-launcher:disabled, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > .small-button#tasklist-button:disabled, .budgie-panel window.background:not(.csd):not(.solid-csd) > grid.horizontal > grid.horizontal > button.small-button.flat.launcher:disabled { color: alpha(rgba(225, 219, 219, 0.8),0.6); } window.background:not(.solid-csd) > notebook:not(.frame) { border: 0 none transparent; background-color: #242424; } window.background:not(.solid-csd) > notebook:not(.frame) > stack { border: none; box-shadow: none; } window > box.vertical > box.horizontal > toolbar, window > box.vertical > box.horizontal > .inline-toolbar { background-color: transparent; box-shadow: none; } window > box.vertical > box.horizontal > toolbar toolitem > box label, window > box.vertical > box.horizontal > .inline-toolbar toolitem > box label, window > box.vertical > box.horizontal > toolbar toolitem > box entry, window > box.vertical > box.horizontal > .inline-toolbar toolitem > box entry { min-height: 20px; padding-top: 2px; padding-bottom: 2px; font-size: 90%; } window > box.vertical > box.horizontal > toolbar toolitem > box > label, window > box.vertical > box.horizontal > .inline-toolbar toolitem > box > label { color: #dedede; } window > box.vertical > box.horizontal > widget { background-color: transparent; } .panel { background-color: transparent; transition: all 100ms ease-in-out; color: white; } .panel.maximized { background-color: black; } .panel.translucent { background-color: rgba(0, 0, 0, 0.5); box-shadow: 0 1px 3px rgba(0, 0, 0, 0.24), 0 1px 1px rgba(0, 0, 0, 0.52); } .panel.color-light .translucent { background-color: rgba(255, 255, 255, 0.85); box-shadow: inset 0 -1px 1px rgba(255, 255, 255, 0.2), 0 1px 3px rgba(0, 0, 0, 0.24), 0 1px 1px rgba(0, 0, 0, 0.12); } .panel.color-light .composited-indicator > revealer label, .panel.color-light .composited-indicator > revealer image, .panel.color-light .composited-indicator > revealer spinner { background-color: rgba(255, 255, 255, 0.85); box-shadow: inset 0 -1px 1px rgba(255, 255, 255, 0.2), 0 1px 3px rgba(0, 0, 0, 0.24), 0 1px 1px rgba(0, 0, 0, 0.12); } .panel.color-light .composited-indicator .keyboard { background-color: rgba(0, 0, 0, 0.65); box-shadow: 0 0 2px rgba(255, 255, 255, 0.3), 0 1px 0 rgba(255, 255, 255, 0.25); color: #fff; text-shadow: none; } menubar .panel, .panel menubar { box-shadow: none; border: none; background: none; color: white; } .panel popover { padding: 2px 4px; } .panel popover button { border-color: transparent; background-color: transparent; box-shadow: none; } .panel popover button:hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); } .panel popover button:active { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } .panel popover button:active label { color: white; } .panel popover button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.35); text-shadow: none; -gtk-icon-shadow: none; } .panel popover button:checked label { color: white; } .panel popover button:disabled { background-color: transparent; } .panel popover button:disabled label, .panel popover button:disabled { color: rgba(222, 222, 222, 0.45); } .panel popover button, .panel popover button:hover, .panel popover button:active, .panel popover button:checked, .panel popover button:disabled { border-color: transparent; } .panel popover .linked > button { color: #dedede; background-color: #484848; border-color: rgba(255, 255, 255, 0.12); } .panel popover .linked > button:hover { color: #c5c5c5; border-color: rgba(255, 255, 255, 0.12); background-color: #5c5c5c; box-shadow: none; } .panel popover .linked > button:active, .panel popover .linked > button:checked { color: #ffffff; background-color: #0e6bff; border-color: #0e6bff; background-image: linear-gradient(180deg, #4c97fe 0%, #0564e3 100%); box-shadow: none; } .panel popover separator.horizontal { margin: 0 -4px; } .panel popover separator.vertical { background: none; } .panel popover .sidebar { border-style: none; background: none; } .panel popover .sidebar .view:hover, .panel popover .sidebar iconview:hover { border-radius: 5px; background-color: rgba(255, 255, 255, 0.1); } .panel popover .sidebar .view:selected, .panel popover .sidebar iconview:selected, .panel popover .sidebar .view:selected:focus, .panel popover .sidebar iconview:selected:focus { text-shadow: none; transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); background-color: rgba(255, 255, 255, 0.35); border-radius: 5px; } .composited-indicator { padding: 0 6px; } .composited-indicator > revealer label, .composited-indicator > revealer image, .composited-indicator > revealer spinner { color: #fff; font-weight: bold; text-shadow: 0 0 2px alpha #000, 0.3, 0 1px 2px alpha #000, 0.6; transition: all 200ms ease-in-out; -gtk-icon-shadow: 0 0 2px alpha #000, 0.3, 0 1px 2px alpha #000, 0.6; } .composited-indicator .keyboard { background-color: #fff; border-radius: 2px; box-shadow: 0 0 2px alpha #000, 0.3, 0 1px 2px alpha #000, 0.6; color: #333; font-weight: 600; padding: 0 3px; text-shadow: none; } UnityDecoration { -UnityDecoration-extents: 28px 1px 1px 1px; -UnityDecoration-input-extents: 10px; -UnityDecoration-shadow-offset-x: 0px; -UnityDecoration-shadow-offset-y: 6px; -UnityDecoration-active-shadow-color: rgba(0, 0, 0, 0.35); -UnityDecoration-active-shadow-radius: 12px; -UnityDecoration-inactive-shadow-color: rgba(0, 0, 0, 0.15); -UnityDecoration-inactive-shadow-radius: 7px; -UnityDecoration-glow-size: 10px; -UnityDecoration-glow-color: #498dff; -UnityDecoration-title-indent: 10px; -UnityDecoration-title-fade: 35px; -UnityDecoration-title-alignment: 0.0; } UnityDecoration.background { border-radius: 6px; background-color: transparent; } UnityDecoration .top { border: 1px solid rgba(255, 255, 255, 0.12); border-bottom-width: 0; border-radius: 6px 6px 0 0; padding: 1px 6px 0 6px; background-color: rgba(55, 55, 55, 0.98); background-image: none; color: rgba(225, 219, 219, 0.8); box-shadow: inset 0 1px rgba(63, 63, 63, 0.98); } UnityDecoration .top:backdrop { border-bottom-width: 0; color: rgba(225, 219, 219, 0.5); } UnityDecoration .left, UnityDecoration .right, UnityDecoration .bottom, UnityDecoration .left:backdrop, UnityDecoration .right:backdrop, UnityDecoration .bottom:backdrop { background-color: rgba(255, 255, 255, 0.12); } UnityPanelWidget, .unity-panel { background-color: rgba(47, 47, 47, 0.95); color: white; box-shadow: none; } UnityPanelWidget:backdrop, .unity-panel:backdrop { color: #e1e1e1; } .unity-panel.menubar.menuitem:hover, .unity-panel.menubar .menuitem *:hover { border-radius: 0; color: #ffffff; background-image: linear-gradient(to bottom, #498dff, #498dff); border-bottom: none; } .lightdm.menu { background-image: none; background-color: rgba(0, 0, 0, 0.4); border-color: rgba(255, 255, 255, 0.8); border-radius: 4px; padding: 1px; color: white; } .lightdm-combo .menu { background-color: rgba(75, 75, 75, 0.98); border-radius: 0px; padding: 0px; color: white; } .lightdm.menu .menuitem *, .lightdm.menu .menuitem.check:active, .lightdm.menu .menuitem.radio:active { color: white; } .lightdm.menubar { color: rgba(255, 255, 255, 0.8); background-image: none; background-color: rgba(0, 0, 0, 0.5); } .lightdm.menubar > .menuitem { padding: 2px 6px; } .lightdm-combo.combobox-entry .button, .lightdm-combo .cell, .lightdm-combo .button, .lightdm-combo .entry, .lightdm.button, .lightdm.entry { background-image: none; background-color: rgba(0, 0, 0, 0.3); border-color: rgba(255, 255, 255, 0.4); border-radius: 10px; padding: 7px; color: white; text-shadow: none; } .lightdm.button, .lightdm.button:hover, .lightdm.button:active, .lightdm.button:active:focus, .lightdm.entry, .lightdm.entry:hover, .lightdm.entry:active, .lightdm.entry:active:focus { background-image: none; border-image: none; } .lightdm.button:focus, .lightdm.entry:focus { border-color: rgba(255, 255, 255, 0.1); border-width: 1px; border-style: solid; color: white; } .lightdm.entry:selected { background-color: rgba(255, 255, 255, 0.8); } .lightdm.entry:active { -gtk-icon-source: -gtk-icontheme("process-working-symbolic"); animation: dashentry_spinner 1s infinite linear; } .lightdm.option-button { padding: 2px; background: none; border: 0; } .lightdm.toggle-button { background: none; border-width: 0; } .lightdm.toggle-button.selected { background-color: rgba(0, 0, 0, 0.7); border-width: 1px; } @keyframes dashentry_spinner { to { -gtk-icon-transform: rotate(1turn); } } .overlay-bar { background-color: #498dff; border-color: #498dff; border-radius: 2px; padding: 3px 6px; margin: 3px; } .overlay-bar label { color: #ffffff; } GraniteWidgetsThinPaned { background-color: transparent; background-image: none; margin: 0; border-left: 1px solid rgba(255, 255, 255, 0.12); border-right: 1px solid rgba(255, 255, 255, 0.12); } GraniteWidgetsPopOver .frame, GraniteWidgetsStaticNotebook .frame { border: none; } .help_button { border-radius: 100px; padding: 3px 9px; } toolbar.secondary-toolbar, .secondary-toolbar.inline-toolbar { padding: 3px; border-bottom: 1px solid rgba(255, 255, 255, 0.12); } toolbar.secondary-toolbar button, .secondary-toolbar.inline-toolbar button { padding: 0 3px 0 3px; } toolbar.bottom-toolbar, .bottom-toolbar.inline-toolbar { padding: 5px; border-width: 1px 0 0 0; border-style: solid; border-color: rgba(255, 255, 255, 0.12); background-color: #333333; } toolbar.bottom-toolbar button, .bottom-toolbar.inline-toolbar button { padding: 2px 3px 2px 3px; } .source-list { -GtkTreeView-horizontal-separator: 1px; -GtkTreeView-vertical-separator: 6px; } .source-list, .source-list.view, iconview.source-list { background-color: #333333; color: #dedede; -gtk-icon-style: regular; } .source-list.category-expander { color: transparent; } .source-list.view:hover, iconview.source-list:hover { background-color: #404040; } .source-list.view:selected, iconview.source-list:selected, .source-list.view:hover:selected, iconview.source-list:hover:selected, .source-list.view:selected:focus, iconview.source-list:selected:focus, .source-list.category-expander:hover { color: #ffffff; background-color: #498dff; } .source-list scrollbar, .source-list junction { border-image: none; border-color: transparent; background-color: #333333; background-image: none; } .source-list.badge, .source-list.badge:hover, .source-list.badge:selected, .source-list.badge:selected:focus, .source-list.badge:hover:selected { background-image: none; background-color: #498dff; color: #ffffff; border-radius: 10px; padding: 0 6px; margin: 0 3px; border-width: 0; } .source-list.badge:selected, .source-list.badge:selected:focus, .source-list.badge:hover:selected { background-color: #ffffff; color: #498dff; } .source-list.category-expander { color: #dedede; -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); -GtkTreeView-expander-size: 16; } .source-list.category-expander, .source-list.category-expander:backdrop { color: transparent; border: none; } .source-list.category-expander:checked { -gtk-icon-source: -gtk-icontheme("pan-down-symbolic"); } GraniteWidgetsWelcome { background-color: #242424; } GraniteWidgetsWelcome label { color: #898989; font-size: 11px; text-shadow: none; } GraniteWidgetsWelcome .h1, GraniteWidgetsWelcome .h3 { color: rgba(222, 222, 222, 0.8); } .help_button { border-radius: 0; } GraniteWidgetsPopOver { -GraniteWidgetsPopOver-arrow-width: 21; -GraniteWidgetsPopOver-arrow-height: 10; -GraniteWidgetsPopOver-border-radius: 2px; -GraniteWidgetsPopOver-border-width: 1; -GraniteWidgetsPopOver-shadow-size: 12; border: 1px solid rgba(0, 0, 0, 0.3); margin: 0; } .popover_bg { background-image: linear-gradient(to bottom, #242424, #242424); border: 1px solid rgba(0, 0, 0, 0.3); } GraniteWidgetsPopOver .sidebar.view, GraniteWidgetsPopOver iconview.sidebar, GraniteWidgetsPopOver * { background-color: transparent; } GraniteWidgetsXsEntry entry { padding: 4px; } .h1 { font-size: 24px; } .h2 { font-size: 18px; } .h3 { font-size: 11px; } .h4, .category-label { color: #ababab; font-weight: 600; } .h4 { padding-bottom: 6px; padding-top: 6px; } GtkListBox .h4 { padding-left: 6px; } #panel_window { background-color: rgba(47, 47, 47, 0.94); color: #dedede; font-weight: bold; box-shadow: inset 0 -1px rgba(29, 29, 29, 0.94); } #panel_window menubar { padding-left: 5px; } #panel_window menubar, #panel_window menubar > menuitem { background-color: transparent; color: #dedede; font-weight: bold; } #panel_window menubar menuitem:disabled { color: rgba(222, 222, 222, 0.5); } #panel_window menubar menuitem:disabled label { color: inherit; } #panel_window menubar menu > menuitem { font-weight: normal; } #login_window, #shutdown_dialog, #restart_dialog { font-weight: normal; border-style: none; background-color: transparent; color: #dedede; } #content_frame { padding-bottom: 14px; background-color: #333333; border-top-left-radius: 2px; border-top-right-radius: 2px; border: solid rgba(0, 0, 0, 0.1); border-width: 1px 1px 0 1px; } #content_frame button { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: #484848; } #content_frame button:hover { color: #c5c5c5; border-color: rgba(255, 255, 255, 0.12); background-color: #5c5c5c; box-shadow: none; } #content_frame button:active, #content_frame button:checked { color: #ffffff; background-color: #0e6bff; border-color: #0e6bff; background-image: linear-gradient(180deg, #4c97fe 0%, #0564e3 100%); box-shadow: none; } #content_frame button:disabled { border-color: rgba(255, 255, 255, 0.12); background-color: rgba(72, 72, 72, 0.55); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } #content_frame button:disabled label, #content_frame button:disabled { color: rgba(222, 222, 222, 0.45); } #buttonbox_frame { padding-top: 20px; padding-bottom: 0px; border-style: none; background-color: rgba(55, 55, 55, 0.98); border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border: solid rgba(0, 0, 0, 0.1); border-width: 0 1px 1px 1px; box-shadow: inset 0 1px #484848; } #buttonbox_frame button { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(92, 92, 92, 0.35); } #buttonbox_frame button:hover { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(110, 110, 110, 0.45); } #buttonbox_frame button:active, #buttonbox_frame button:checked { color: #ffffff; border-color: rgba(255, 255, 255, 0.12); background-color: #498dff; } #buttonbox_frame button:disabled { color: #5c5c5c; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(92, 92, 92, 0.2); } #login_window #user_combobox { color: #dedede; font-size: 13px; } #login_window #user_combobox menu { font-weight: normal; } #user_image { padding: 3px; border-radius: 2px; } #shutdown_button.button { background-clip: border-box; color: green; background-color: #f8464c; border-color: #f6151c; background-image: none; } #shutdown_button.button:hover { background-clip: border-box; color: green; background-color: #fa777c; border-color: #f8464c; background-image: none; } #shutdown_button.button:active, #shutdown_button.button:checked { background-clip: border-box; color: green; background-color: #f6151c; border-color: #d0080f; background-image: none; } #restart_button.button { background-clip: border-box; color: green; background-color: #3484e2; border-color: #1c6bc7; background-image: none; } #restart_button.button:hover { background-clip: border-box; color: green; background-color: #619fe8; border-color: #3484e2; background-image: none; } #restart_button.button:active, #restart_button.button:checked { background-clip: border-box; color: green; background-color: #1c6bc7; border-color: #16539a; background-image: none; } #greeter_infobar { border-bottom-width: 0; font-weight: bold; } .nautilus-window paned > separator { background-image: linear-gradient(to bottom, #484848, #484848); } filechooser paned > separator { background-image: linear-gradient(to bottom, #484848, #484848); } filechooser.csd.background, filechooser placessidebar list, .nautilus-window.csd.background, .nautilus-window placessidebar list { background-color: transparent; } filechooser.csd.background, filechooser placessidebar, .nautilus-window.csd.background, .nautilus-window placessidebar { background-color: rgba(59, 59, 59, 0.94); border-radius: 0 0 6px 6px; } filechooser placessidebar.sidebar, .nautilus-window placessidebar.sidebar { border-right: none; background-color: transparent; } filechooser placessidebar.sidebar row.sidebar-row, .nautilus-window placessidebar.sidebar row.sidebar-row { color: #dedede; } filechooser placessidebar.sidebar row.sidebar-row .sidebar-icon, .nautilus-window placessidebar.sidebar row.sidebar-row .sidebar-icon { color: rgba(222, 222, 222, 0.85); } filechooser placessidebar.sidebar row.sidebar-row.has-open-popup, filechooser placessidebar.sidebar row.sidebar-row.has-open-popup label, filechooser placessidebar.sidebar row.sidebar-row.has-open-popup image, filechooser placessidebar.sidebar row.sidebar-row:disabled, filechooser placessidebar.sidebar row.sidebar-row:disabled label, filechooser placessidebar.sidebar row.sidebar-row:disabled image, .nautilus-window placessidebar.sidebar row.sidebar-row.has-open-popup, .nautilus-window placessidebar.sidebar row.sidebar-row.has-open-popup label, .nautilus-window placessidebar.sidebar row.sidebar-row.has-open-popup image, .nautilus-window placessidebar.sidebar row.sidebar-row:disabled, .nautilus-window placessidebar.sidebar row.sidebar-row:disabled label, .nautilus-window placessidebar.sidebar row.sidebar-row:disabled image { color: rgba(222, 222, 222, 0.4); } filechooser placessidebar.sidebar row.sidebar-row:backdrop, .nautilus-window placessidebar.sidebar row.sidebar-row:backdrop { opacity: 0.85; } filechooser placessidebar.sidebar row.sidebar-row:selected.has-open-popup, filechooser placessidebar.sidebar row.sidebar-row:selected, filechooser placessidebar.sidebar row.sidebar-row:selected:hover, filechooser placessidebar.sidebar row.sidebar-row:active:hover, .nautilus-window placessidebar.sidebar row.sidebar-row:selected.has-open-popup, .nautilus-window placessidebar.sidebar row.sidebar-row:selected, .nautilus-window placessidebar.sidebar row.sidebar-row:selected:hover, .nautilus-window placessidebar.sidebar row.sidebar-row:active:hover { color: #dedede; background-color: rgba(199, 199, 199, 0.25); } filechooser placessidebar.sidebar row.sidebar-row:selected.has-open-popup, filechooser placessidebar.sidebar row.sidebar-row:selected.has-open-popup label, filechooser placessidebar.sidebar row.sidebar-row:selected.has-open-popup image, filechooser placessidebar.sidebar row.sidebar-row:selected, filechooser placessidebar.sidebar row.sidebar-row:selected label, filechooser placessidebar.sidebar row.sidebar-row:selected image, filechooser placessidebar.sidebar row.sidebar-row:selected:hover, filechooser placessidebar.sidebar row.sidebar-row:selected:hover label, filechooser placessidebar.sidebar row.sidebar-row:selected:hover image, filechooser placessidebar.sidebar row.sidebar-row:active:hover, filechooser placessidebar.sidebar row.sidebar-row:active:hover label, filechooser placessidebar.sidebar row.sidebar-row:active:hover image, .nautilus-window placessidebar.sidebar row.sidebar-row:selected.has-open-popup, .nautilus-window placessidebar.sidebar row.sidebar-row:selected.has-open-popup label, .nautilus-window placessidebar.sidebar row.sidebar-row:selected.has-open-popup image, .nautilus-window placessidebar.sidebar row.sidebar-row:selected, .nautilus-window placessidebar.sidebar row.sidebar-row:selected label, .nautilus-window placessidebar.sidebar row.sidebar-row:selected image, .nautilus-window placessidebar.sidebar row.sidebar-row:selected:hover, .nautilus-window placessidebar.sidebar row.sidebar-row:selected:hover label, .nautilus-window placessidebar.sidebar row.sidebar-row:selected:hover image, .nautilus-window placessidebar.sidebar row.sidebar-row:active:hover, .nautilus-window placessidebar.sidebar row.sidebar-row:active:hover label, .nautilus-window placessidebar.sidebar row.sidebar-row:active:hover image { color: #dedede; } filechooser placessidebar.sidebar row.sidebar-row:not(:selected) button.sidebar-button, .nautilus-window placessidebar.sidebar row.sidebar-row:not(:selected) button.sidebar-button { color: #dedede; } filechooser placessidebar.sidebar row.sidebar-row:not(:selected) button.sidebar-button:hover, .nautilus-window placessidebar.sidebar row.sidebar-row:not(:selected) button.sidebar-button:hover { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: rgba(110, 110, 110, 0.45); } filechooser placessidebar.sidebar row.sidebar-row:not(:selected) button.sidebar-button:active, .nautilus-window placessidebar.sidebar row.sidebar-row:not(:selected) button.sidebar-button:active { color: #ffffff; background-color: #0e6bff; border-color: #0e6bff; background-image: linear-gradient(180deg, #4c97fe 0%, #0564e3 100%); box-shadow: none; } filechooser placessidebar.sidebar row.sidebar-row:not(:selected) button.sidebar-button:not(:hover):not(:active) > image, .nautilus-window placessidebar.sidebar row.sidebar-row:not(:selected) button.sidebar-button:not(:hover):not(:active) > image { opacity: 0.5; } filechooser placessidebar.sidebar row.sidebar-row.sidebar-new-bookmark-row, .nautilus-window placessidebar.sidebar row.sidebar-row.sidebar-new-bookmark-row { color: #498dff; } filechooser placessidebar.sidebar row.sidebar-row.sidebar-new-bookmark-row .sidebar-icon, .nautilus-window placessidebar.sidebar row.sidebar-row.sidebar-new-bookmark-row .sidebar-icon { color: inherit; } filechooser placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled), filechooser placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled) label, filechooser placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled) .sidebar-icon, .nautilus-window placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled), .nautilus-window placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled) label, .nautilus-window placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled) .sidebar-icon { color: #dedede; } filechooser placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled):selected, .nautilus-window placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled):selected { background-color: #F08437; } filechooser placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled):selected, filechooser placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled):selected label, filechooser placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled):selected .sidebar-icon, .nautilus-window placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled):selected, .nautilus-window placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled):selected label, .nautilus-window placessidebar.sidebar row.sidebar-row:drop(active):not(:disabled):selected .sidebar-icon { color: #dedede; } filechooser placessidebar.sidebar separator, .nautilus-window placessidebar.sidebar separator { background-color: transparent; } filechooser.maximized placessidebar, .nautilus-window.maximized placessidebar { border-radius: 0; } filechooser.maximized placessidebar.sidebar, .nautilus-window.maximized placessidebar.sidebar { background-color: #3b3b3b; } .nemo-window .sidebar { color: #dedede; background-color: rgba(59, 59, 59, 0.94); } .nemo-window .sidebar .view, .nemo-window .sidebar iconview, .nemo-window .sidebar row { background-color: transparent; color: #dedede; } .nemo-window .sidebar .view.cell:selected, .nemo-window .sidebar iconview.cell:selected, .nemo-window .sidebar row.cell:selected { background-color: #498dff; color: #ffffff; } .nemo-window .sidebar .view.expander, .nemo-window .sidebar iconview.expander, .nemo-window .sidebar row.expander { color: rgba(145, 145, 145, 0.97); } .nemo-window .sidebar .view.expander:hover, .nemo-window .sidebar iconview.expander:hover, .nemo-window .sidebar row.expander:hover { color: #dedede; } .nemo-window .sidebar separator { background-color: transparent; } .caja-side-pane, .caja-side-pane > notebook > stack > widget > box, .caja-side-pane text, .caja-side-pane treeview { color: #dedede; caret-color: #dedede; background-color: #3b3b3b; } .caja-side-pane > box button:not(:active):not(:checked) { color: #dedede; } .caja-side-pane .frame { border-color: rgba(255, 255, 255, 0.12); } .caja-side-pane junction { background-color: rgba(46, 46, 46, 0.94); } filechooser actionbar { color: #dedede; background-color: rgba(59, 59, 59, 0.94); border-color: rgba(255, 255, 255, 0.12); } filechooser actionbar label, filechooser actionbar combobox { color: #dedede; } .gedit-bottom-panel-paned { background-color: #242424; } .gedit-side-panel-paned > separator { background-image: linear-gradient(to bottom, #484848, #484848); } .gedit-bottom-panel-paned > separator { background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.12), rgba(255, 255, 255, 0.12)); } .gedit-document-panel { background-color: rgba(59, 59, 59, 0.94); } .maximized .gedit-document-panel { background-color: #3b3b3b; } .gedit-document-panel row { color: #dedede; background-color: rgba(222, 222, 222, 0); } .gedit-document-panel row:hover { background-color: rgba(222, 222, 222, 0.15); } .gedit-document-panel row:active { color: #ffffff; background-color: #498dff; } .gedit-document-panel row:active button { color: #ffffff; } .gedit-document-panel row:selected, .gedit-document-panel row:selected:hover { color: #ffffff; background-color: #498dff; } .gedit-document-panel row:hover:not(:selected) button:active { color: #dedede; } filechooser actionbar button { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: #484848; } .caja-side-pane > box button:hover:not(:active), filechooser actionbar button:hover { color: #c5c5c5; border-color: rgba(255, 255, 255, 0.12); background-color: #5c5c5c; box-shadow: none; } filechooser actionbar button:active, filechooser actionbar button:checked { color: #ffffff; background-color: #0e6bff; border-color: #0e6bff; background-image: linear-gradient(180deg, #4c97fe 0%, #0564e3 100%); box-shadow: none; } filechooser actionbar button:disabled { border-color: rgba(255, 255, 255, 0.12); background-color: rgba(72, 72, 72, 0.55); box-shadow: 0px 1px 1px 0px rgba(16, 16, 16, 0.04), 0px 1px 2px 0px rgba(16, 16, 16, 0.01); } filechooser actionbar button:disabled label, filechooser actionbar button:disabled { color: rgba(222, 222, 222, 0.45); } filechooser actionbar entry { color: #dedede; border-color: rgba(255, 255, 255, 0.12); background-color: #242424; } filechooser actionbar entry:focus { color: #dedede; border-color: #8eb9ff; background-color: #242424; box-shadow: inset 0 0 0 2px #8eb9ff; } filechooser actionbar entry:disabled { color: rgba(222, 222, 222, 0.45); border-color: rgba(255, 255, 255, 0.12); background-color: rgba(36, 36, 36, 0.55); } filechooser placessidebar.sidebar scrollbar, .nautilus-window placessidebar.sidebar scrollbar, .nemo-window .sidebar scrollbar, .caja-side-pane scrollbar { border-color: transparent; } filechooser placessidebar.sidebar scrollbar.overlay-indicator:not(.dragging):not(.hovering) slider, .nautilus-window placessidebar.sidebar scrollbar.overlay-indicator:not(.dragging):not(.hovering) slider, .nemo-window .sidebar scrollbar.overlay-indicator:not(.dragging):not(.hovering) slider, .caja-side-pane scrollbar.overlay-indicator:not(.dragging):not(.hovering) slider { background-color: rgba(255, 255, 255, 0.35); border: none; } filechooser placessidebar.sidebar scrollbar slider, .nautilus-window placessidebar.sidebar scrollbar slider, .nemo-window .sidebar scrollbar slider, .caja-side-pane scrollbar slider { min-width: 4px; background-color: rgba(255, 255, 255, 0.7); } filechooser placessidebar.sidebar scrollbar slider:hover, .nautilus-window placessidebar.sidebar scrollbar slider:hover, .nemo-window .sidebar scrollbar slider:hover, .caja-side-pane scrollbar slider:hover { background-color: white; } filechooser placessidebar.sidebar scrollbar slider:hover:active, .nautilus-window placessidebar.sidebar scrollbar slider:hover:active, .nemo-window .sidebar scrollbar slider:hover:active, .caja-side-pane scrollbar slider:hover:active { background-color: rgba(132, 132, 132, 0.98); } filechooser placessidebar.sidebar scrollbar slider:disabled, .nautilus-window placessidebar.sidebar scrollbar slider:disabled, .nemo-window .sidebar scrollbar slider:disabled, .caja-side-pane scrollbar slider:disabled { background-color: transparent; } filechooser placessidebar.sidebar scrollbar trough, .nautilus-window placessidebar.sidebar scrollbar trough, .nemo-window .sidebar scrollbar trough, .caja-side-pane scrollbar trough { background-color: transparent; } @define-color theme_fg_color #dedede; @define-color theme_text_color #dedede; @define-color theme_bg_color #333333; @define-color theme_base_color #242424; @define-color theme_selected_bg_color #498dff; @define-color theme_selected_fg_color #ffffff; @define-color fg_color #dedede; @define-color text_color #dedede; @define-color bg_color #333333; @define-color base_color #242424; @define-color selected_bg_color #498dff; @define-color selected_fg_color #ffffff; @define-color insensitive_bg_color #383838; @define-color insensitive_fg_color alpha(#dedede, 0.5); @define-color insensitive_base_color #242424; @define-color theme_unfocused_fg_color #dedede; @define-color theme_unfocused_text_color #dedede; @define-color theme_unfocused_bg_color #333333; @define-color theme_unfocused_base_color #242424; @define-color borders rgba(255, 255, 255, 0.12); @define-color unfocused_borders rgba(255, 255, 255, 0.12); @define-color warning_color #F27835; @define-color error_color #FC4138; @define-color success_color #71c837; @define-color placeholder_text_color #A8A8A8; @define-color link_color #3484e2; @define-color content_view_bg #242424; /****************** * Budgie Desktop * ******************/ .budgie-settings-window buttonbox.inline-toolbar button, .budgie-popover:not(.budgie-menu) button.flat:not(.image-button), .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:not(.image-button), .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:not(.image-button), .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:not(.image-button), .workspace-switcher .workspace-add-button, .raven-mpris button.image-button, .drop-shadow button, window.budgie-switcher-window .drop-shadow button { border: none; background-color: transparent; box-shadow: none; } .budgie-settings-window buttonbox.inline-toolbar button:hover, .budgie-popover:not(.budgie-menu) button.flat:hover:not(.image-button), .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:hover:not(.image-button), .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:hover:not(.image-button), .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:hover:not(.image-button), .workspace-switcher .workspace-add-button:hover, .raven-mpris button.image-button:hover, .drop-shadow button:hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); } .budgie-settings-window buttonbox.inline-toolbar button:checked, .budgie-popover:not(.budgie-menu) button.flat:checked:not(.image-button), .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:checked:not(.image-button), .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:checked:not(.image-button), .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:checked:not(.image-button), .workspace-switcher .workspace-add-button:checked, .raven-mpris button.image-button:checked, .drop-shadow button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.35); text-shadow: none; -gtk-icon-shadow: none; } .budgie-settings-window buttonbox.inline-toolbar button:active, .budgie-popover:not(.budgie-menu) button.flat:active:not(.image-button), .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:active:not(.image-button), .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:active:not(.image-button), .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:active:not(.image-button), .workspace-switcher .workspace-add-button:active, .raven-mpris button.image-button:active, .drop-shadow button:active { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } .budgie-settings-window buttonbox.inline-toolbar button:disabled, .budgie-popover:not(.budgie-menu) button.flat:disabled:not(.image-button), .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:disabled:not(.image-button), .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:disabled:not(.image-button), .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:disabled:not(.image-button), .workspace-switcher .workspace-add-button:disabled, .raven-mpris button.image-button:disabled, .drop-shadow button:disabled { background-color: transparent; } .budgie-settings-window buttonbox.inline-toolbar button:disabled label, .budgie-popover:not(.budgie-menu) button.flat:disabled:not(.image-button) label, .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:disabled:not(.image-button) label, .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:disabled:not(.image-button) label, .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:disabled:not(.image-button) label, .workspace-switcher .workspace-add-button:disabled label, .raven-mpris button.image-button:disabled label, .drop-shadow button:disabled label, .budgie-settings-window buttonbox.inline-toolbar button:disabled, .budgie-popover:not(.budgie-menu) button.flat:disabled:not(.image-button), .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:disabled:not(.image-button), .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:disabled:not(.image-button), .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:disabled:not(.image-button), .workspace-switcher .workspace-add-button:disabled, .raven-mpris button.image-button:disabled, .drop-shadow button:disabled { color: rgba(222, 222, 222, 0.45); } .raven .raven-header:not(.top) button { border: none; background-color: transparent; color: #dedede; box-shadow: none; } .raven .raven-header:not(.top) button:hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); } .raven .raven-header:not(.top) button:checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.35); text-shadow: none; -gtk-icon-shadow: none; } .raven .raven-header:not(.top) button:active { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; } .raven .raven-header:not(.top) button:disabled { background-color: transparent; } .raven .raven-header:not(.top) button:disabled label, .raven .raven-header:not(.top) button:disabled { color: rgba(222, 222, 222, 0.45); } .budgie-container { background-color: transparent; } .budgie-settings-window buttonbox.inline-toolbar { border-style: none none solid; } .budgie-settings-window buttonbox.inline-toolbar button { border-radius: 5px; -gtk-outline-radius: 5px; } .budgie-popover { margin: 0; padding: 0; border: 1px solid rgba(255, 255, 255, 0.12); border-radius: 6px; box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.3), 0 2px 3px 0 rgba(0, 0, 0, 0.3); background-color: rgba(51, 51, 51, 0.95); } .budgie-popover .container { padding: 2px; } .budgie-popover border { border: none; } .budgie-popover list { background-color: transparent; } .budgie-popover row { padding: 0; background-color: transparent; } .budgie-popover row:hover { box-shadow: none; background-color: transparent; } .budgie-popover:not(.budgie-menu) button.flat:not(.image-button), .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:not(.image-button), .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:not(.image-button), .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:not(.image-button) { min-height: 28px; padding: 0 8px; color: #dedede; font-weight: normal; } .budgie-popover:not(.budgie-menu) button.flat:not(.image-button):disabled, .budgie-popover:not(.budgie-menu) button.budgie-menu-launcher:not(.image-button):disabled, .budgie-popover:not(.budgie-menu) .budgie-panel #tasklist-button:not(.image-button):disabled, .budgie-panel .budgie-popover:not(.budgie-menu) #tasklist-button:not(.image-button):disabled { color: rgba(222, 222, 222, 0.45); } .budgie-popover.budgie-menu .container { padding: 0; } .budgie-popover.user-menu .container { padding: 8px; } .budgie-popover.user-menu separator { margin: 4px 0; } .budgie-popover.sound-popover separator { margin: 3px 0; } .budgie-popover.night-light-indicator .container { padding: 8px; } .budgie-popover.places-menu .container { padding: 8px; } .budgie-popover.places-menu .places-list:not(.always-expand) { margin-top: 4px; padding-top: 4px; border-top: 1px solid rgba(255, 255, 255, 0.12); } .budgie-popover.places-menu .alternative-label { padding: 3px; font-size: 15px; } .budgie-popover.workspace-popover .container { padding: 2px 8px 8px; } .budgie-popover.workspace-popover separator { margin: 4px 0; } .budgie-popover.workspace-popover flowboxchild { padding: 0; } .workspace-switcher .workspace-layout { border: 0 solid rgba(255, 255, 255, 0.12); } .top .workspace-switcher .workspace-layout:dir(ltr), .bottom .workspace-switcher .workspace-layout:dir(ltr) { border-left-width: 1px; } .top .workspace-switcher .workspace-layout:dir(rtl), .bottom .workspace-switcher .workspace-layout:dir(rtl) { border-right-width: 1px; } .left .workspace-switcher .workspace-layout, .right .workspace-switcher .workspace-layout { border-top-width: 1px; } .workspace-switcher .workspace-item, .workspace-switcher .workspace-add-button { border: 0 solid rgba(255, 255, 255, 0.12); } .top .workspace-switcher .workspace-item:dir(ltr), .bottom .workspace-switcher .workspace-item:dir(ltr), .top .workspace-switcher .workspace-add-button:dir(ltr), .bottom .workspace-switcher .workspace-add-button:dir(ltr) { border-right-width: 1px; } .top .workspace-switcher .workspace-item:dir(rtl), .bottom .workspace-switcher .workspace-item:dir(rtl), .top .workspace-switcher .workspace-add-button:dir(rtl), .bottom .workspace-switcher .workspace-add-button:dir(rtl) { border-left-width: 1px; } .left .workspace-switcher .workspace-item, .right .workspace-switcher .workspace-item, .left .workspace-switcher .workspace-add-button, .right .workspace-switcher .workspace-add-button { border-bottom-width: 1px; } .workspace-switcher .workspace-item { transition: all 0.2s cubic-bezier(0, 0, 0.2, 1); } .workspace-switcher .workspace-item.current-workspace { background-color: rgba(255, 255, 255, 0.12); } .workspace-switcher .workspace-add-button { background-color: transparent; background-image: none; } .workspace-switcher .workspace-add-button:hover { box-shadow: none; } .workspace-switcher .workspace-add-button:active { background-image: none; } .workspace-switcher .workspace-add-button:active image { margin: 1px 0 -1px; } .budgie-panel .workspace-switcher .workspace-icon-button { min-height: 24px; min-width: 24px; padding: 0; border-radius: 5px; } .budgie-menu.background { padding: 0; background-color: #242424; } .budgie-menu scrollbar, .budgie-menu entry.search { background-color: transparent; } .budgie-menu entry.search { border: none; border-bottom: 1px solid rgba(255, 255, 255, 0.12); border-radius: 0; box-shadow: none; font-size: 120%; } .budgie-menu .categories:dir(ltr) { border-bottom-left-radius: 5px; } .budgie-menu .categories:dir(rtl) { border-bottom-right-radius: 5px; } .budgie-menu button { min-height: 32px; padding: 0 8px; border-radius: 0; color: #dedede; font-weight: normal; border: none; } .budgie-menu button:disabled { color: rgba(222, 222, 222, 0.45); } .budgie-menu button:checked:disabled { background-color: #498dff; } .budgie-menu row { padding: 0; } .budgie-menu row:hover { box-shadow: none; } popover.background.user-menu { padding: 8px; } popover.background.user-menu .content-box { background-color: transparent; } popover.background.user-menu separator { margin: 4px 0; } popover.background.user-menu row { padding: 0; box-shadow: none; background-image: none; } popover.background.places-menu { padding: 8px; } popover.background.places-menu .name-button.text-button { padding-left: 8px; padding-right: 8px; } popover.background.places-menu .name-button.text-button image:dir(ltr) { margin-right: 3px; } popover.background.places-menu .name-button.text-button image:dir(rtl) { margin-left: 3px; } popover.background.places-menu .places-section-header > image:dir(ltr) { margin: 0 -2px 0 5px; } popover.background.places-menu .places-section-header > image:dir(rtl) { margin: 0 5px 0 -2px; } popover.background.places-menu .places-list { margin-top: 4px; padding-top: 4px; border-top: 1px solid rgba(255, 255, 255, 0.12); background-color: transparent; } popover.background.places-menu row { padding: 0; box-shadow: none; background-image: none; } .budgie-panel { transition: background-color 0.2s cubic-bezier(0, 0, 0.2, 1); background-color: rgba(55, 55, 55, 0.98); color: rgba(225, 219, 219, 0.8); font-weight: 500; } .budgie-panel.transparent { background-color: rgba(55, 55, 55, 0.65); } .budgie-panel button { min-height: 16px; min-width: 16px; padding: 0; border-radius: 0; border-top-width: 0; border-bottom-width: 0; border: none; color: rgba(225, 219, 219, 0.8); } .budgie-panel button:active { background-color: rgba(225, 219, 219, 0.15); color: rgba(225, 219, 219, 0.75); } .budgie-panel button:checked { background-color: rgba(225, 219, 219, 0.12); color: rgba(225, 219, 219, 0.8); } .budgie-panel.horizontal button { padding: 0 4px; } .budgie-panel.vertical button { padding: 4px 0; } .budgie-panel separator { background-color: rgba(255, 255, 255, 0.12); } .budgie-panel menubar, .budgie-panel .menubar { box-shadow: none; color: rgba(225, 219, 219, 0.8); background-image: none; background-color: transparent; } .budgie-panel menubar > menuitem, .budgie-panel .menubar > menuitem { border: none; background-image: none; } .budgie-panel menubar > menuitem menu, .budgie-panel .menubar > menuitem menu { border-radius: 0 0 6px 6px; } .budgie-panel menubar > menuitem menu menu, .budgie-panel .menubar > menuitem menu menu { border-radius: 6px; } .budgie-panel menubar > menuitem:hover, .budgie-panel .menubar > menuitem:hover { background-color: #498dff; } .budgie-panel menubar > menuitem:disabled, .budgie-panel .menubar > menuitem:disabled { color: rgba(225, 219, 219, 0.2); } .budgie-panel .alert { color: #f8464c; } .budgie-panel #tasklist-button { padding: 0 4px; } .budgie-panel.vertical #tasklist-button { min-height: 32px; } .budgie-panel button.launcher.budgie-menu-launcher, .budgie-panel .launcher#tasklist-button, .budgie-panel button.launcher.flat { padding: 0; } .budgie-panel button.launcher.budgie-menu-launcher:not(:checked), .budgie-panel .launcher#tasklist-button:not(:checked), .budgie-panel button.launcher.flat:not(:checked) { color: #dedede; } .budgie-panel button.launcher.budgie-menu-launcher:not(:checked):hover, .budgie-panel .launcher#tasklist-button:not(:checked):hover, .budgie-panel button.launcher.flat:not(:checked):hover, .budgie-panel button.launcher.budgie-menu-launcher:not(:checked):active, .budgie-panel .launcher#tasklist-button:not(:checked):active, .budgie-panel button.launcher.flat:not(:checked):active { color: rgba(222, 222, 222, 0.8); } .budgie-panel button.launcher.budgie-menu-launcher:not(:checked):disabled, .budgie-panel .launcher#tasklist-button:not(:checked):disabled, .budgie-panel button.launcher.flat:not(:checked):disabled { color: rgba(222, 222, 222, 0.5); } .budgie-panel button.launcher.budgie-menu-launcher:active, .budgie-panel .launcher#tasklist-button:active, .budgie-panel button.launcher.flat:active { background-color: rgba(222, 222, 222, 0.2); } .budgie-panel button.launcher.budgie-menu-launcher:checked, .budgie-panel .launcher#tasklist-button:checked, .budgie-panel button.launcher.flat:checked { background-color: rgba(222, 222, 222, 0.15); } .top .budgie-panel #tasklist-button, .budgie-panel .top #tasklist-button, .top .budgie-panel button.flat.launcher, .budgie-panel .top button.flat.launcher { border-image: radial-gradient(circle closest-corner at center calc(1px), #0e6bff 0%, transparent 0%) 0 0 0 0/0 0 0 0; } .top .budgie-panel #tasklist-button:checked, .budgie-panel .top #tasklist-button:checked, .top .budgie-panel button.flat.launcher:checked, .budgie-panel .top button.flat.launcher:checked, .top .budgie-panel .unpinned button.launcher.budgie-menu-launcher, .budgie-panel .unpinned .top button.launcher.budgie-menu-launcher, .top .budgie-panel .unpinned .launcher#tasklist-button, .budgie-panel .unpinned .top .launcher#tasklist-button, .top .budgie-panel .unpinned button.launcher.flat, .budgie-panel .unpinned .top button.launcher.flat, .top .budgie-panel .pinned button.launcher.running.budgie-menu-launcher, .budgie-panel .pinned .top button.launcher.running.budgie-menu-launcher, .top .budgie-panel .pinned .launcher.running#tasklist-button, .budgie-panel .pinned .top .launcher.running#tasklist-button, .top .budgie-panel .pinned button.launcher.running.flat, .budgie-panel .pinned .top button.launcher.running.flat { border-image: radial-gradient(circle closest-corner at center calc(1px), #0e6bff 100%, transparent 0%) 2 0 0 0/2px 0 0 0; } .bottom .budgie-panel #tasklist-button, .budgie-panel .bottom #tasklist-button, .bottom .budgie-panel button.flat.launcher, .budgie-panel .bottom button.flat.launcher { border-image: radial-gradient(circle closest-corner at center calc(100% - 1px), #0e6bff 0%, transparent 0%) 0 0 0 0/0 0 0 0; } .bottom .budgie-panel #tasklist-button:checked, .budgie-panel .bottom #tasklist-button:checked, .bottom .budgie-panel button.flat.launcher:checked, .budgie-panel .bottom button.flat.launcher:checked, .bottom .budgie-panel .unpinned button.launcher.budgie-menu-launcher, .budgie-panel .unpinned .bottom button.launcher.budgie-menu-launcher, .bottom .budgie-panel .unpinned .launcher#tasklist-button, .budgie-panel .unpinned .bottom .launcher#tasklist-button, .bottom .budgie-panel .unpinned button.launcher.flat, .budgie-panel .unpinned .bottom button.launcher.flat, .bottom .budgie-panel .pinned button.launcher.running.budgie-menu-launcher, .budgie-panel .pinned .bottom button.launcher.running.budgie-menu-launcher, .bottom .budgie-panel .pinned .launcher.running#tasklist-button, .budgie-panel .pinned .bottom .launcher.running#tasklist-button, .bottom .budgie-panel .pinned button.launcher.running.flat, .budgie-panel .pinned .bottom button.launcher.running.flat { border-image: radial-gradient(circle closest-corner at center calc(100% - 1px), #0e6bff 100%, transparent 0%) 0 0 2 0/0 0 2px 0; } .left .budgie-panel #tasklist-button, .budgie-panel .left #tasklist-button, .left .budgie-panel button.flat.launcher, .budgie-panel .left button.flat.launcher { border-image: radial-gradient(circle closest-corner at calc(1px) center, #0e6bff 0%, transparent 0%) 0 0 0 0/0 0 0 0; } .left .budgie-panel #tasklist-button:checked, .budgie-panel .left #tasklist-button:checked, .left .budgie-panel button.flat.launcher:checked, .budgie-panel .left button.flat.launcher:checked, .left .budgie-panel .unpinned button.launcher.budgie-menu-launcher, .budgie-panel .unpinned .left button.launcher.budgie-menu-launcher, .left .budgie-panel .unpinned .launcher#tasklist-button, .budgie-panel .unpinned .left .launcher#tasklist-button, .left .budgie-panel .unpinned button.launcher.flat, .budgie-panel .unpinned .left button.launcher.flat, .left .budgie-panel .pinned button.launcher.running.budgie-menu-launcher, .budgie-panel .pinned .left button.launcher.running.budgie-menu-launcher, .left .budgie-panel .pinned .launcher.running#tasklist-button, .budgie-panel .pinned .left .launcher.running#tasklist-button, .left .budgie-panel .pinned button.launcher.running.flat, .budgie-panel .pinned .left button.launcher.running.flat { border-image: radial-gradient(circle closest-corner at calc(1px) center, #0e6bff 100%, transparent 0%) 0 0 0 2/0 0 0 2px; } .right .budgie-panel #tasklist-button, .budgie-panel .right #tasklist-button, .right .budgie-panel button.flat.launcher, .budgie-panel .right button.flat.launcher { border-image: radial-gradient(circle closest-corner at calc(100% - 1px) center, #0e6bff 0%, transparent 0%) 0 0 0 0/0 0 0 0; } .right .budgie-panel #tasklist-button:checked, .budgie-panel .right #tasklist-button:checked, .right .budgie-panel button.flat.launcher:checked, .budgie-panel .right button.flat.launcher:checked, .right .budgie-panel .unpinned button.launcher.budgie-menu-launcher, .budgie-panel .unpinned .right button.launcher.budgie-menu-launcher, .right .budgie-panel .unpinned .launcher#tasklist-button, .budgie-panel .unpinned .right .launcher#tasklist-button, .right .budgie-panel .unpinned button.launcher.flat, .budgie-panel .unpinned .right button.launcher.flat, .right .budgie-panel .pinned button.launcher.running.budgie-menu-launcher, .budgie-panel .pinned .right button.launcher.running.budgie-menu-launcher, .right .budgie-panel .pinned .launcher.running#tasklist-button, .budgie-panel .pinned .right .launcher.running#tasklist-button, .right .budgie-panel .pinned button.launcher.running.flat, .budgie-panel .pinned .right button.launcher.running.flat { border-image: radial-gradient(circle closest-corner at calc(100% - 1px) center, #0e6bff 100%, transparent 0%) 0 2 0 0/0 2px 0 0; } frame.raven-frame > border { border-style: none; box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.3), 0 0 8px 0 rgba(0, 0, 0, 0.3); } .top frame.raven-frame > border { margin-bottom: 32px; } .bottom frame.raven-frame > border { margin-top: 32px; } .left frame.raven-frame > border { margin-right: 32px; } .right frame.raven-frame > border { margin-left: 32px; } .raven { background-color: rgba(42, 42, 42, 0.95); color: #dedede; } .raven > box { margin-bottom: -10px; } .raven > stack { margin-bottom: -10px; } .raven stackswitcher.linked > button { background-color: #616161; color: #dedede; border: none; } .raven stackswitcher.linked > button:hover { background-color: #6e6e6e; } .raven stackswitcher.linked > button:active { background-color: #bcbcbc; background-image: none; color: #242424; } .raven stackswitcher.linked > button:checked { background-color: #AFAFAF; background-image: none; color: #2A2A2A; } .raven .raven-header { min-height: 36px; padding: 2px; } .raven .raven-header:not(.top) { margin-top: -6px; } .raven .raven-header:not(.top) button { min-height: 32px; min-width: 32px; margin: 0; padding: 0; } .raven .raven-header:not(.top) button.image-button { border-radius: 100px; -gtk-outline-radius: 100px; } .raven .raven-header.top { padding: 2px 12px; color: #dedede; } .raven .raven-header.top stackswitcher button { margin: 0; padding: 0 20px; min-height: 20px; } .raven .raven-header.top button.image-button:dir(ltr) { margin-right: 2px; } .raven .raven-header.top button.image-button:dir(rtl) { margin-left: 2px; } .raven .raven-header.top > image { margin: 0 8px; } .raven .raven-header.top > label { margin: 0 -8px; font-weight: bold; } .raven .raven-header.bottom { border-top: 1px solid rgba(255, 255, 255, 0.12); } .raven viewport.frame .raven-header { margin-top: -8px; } .raven .expander-button { border-radius: 100px; -gtk-outline-radius: 100px; } .raven .raven-background { border-style: solid none; border-width: 1px; border-color: rgba(255, 255, 255, 0.12); background-color: #242424; color: #dedede; } .raven .raven-background.middle { border-bottom-style: none; } .raven .raven-background checkbutton.text-button:hover, .raven .raven-background radiobutton.text-button:hover { color: #b8b8b8; } .raven .raven-background checkbutton.text-button:disabled, .raven .raven-background radiobutton.text-button:disabled { color: rgba(222, 222, 222, 0.45); } .raven .raven-background list { color: #dedede; background-color: #242424; } .raven .raven-background.frame { border-style: solid none; border-color: rgba(255, 255, 255, 0.12); } .raven .raven-background > overlay > widget > image { color: alpha(#dedede,0.12); } .raven .raven-background grid > label:first-child { min-height: 26px; } .raven scrolledwindow.raven-background { border-bottom-style: none; } .raven .raven-header.top + .raven-background { border-style: none; background-color: #498dff; color: #ffffff; } .raven .raven-header.top + .raven-background stackswitcher button { margin: -4px 0; } .raven .powerstrip button.image-button { min-height: 28px; min-width: 28px; margin: 0 4px; padding: 6px; } .raven .option-subtitle { font-size: smaller; } calendar.raven-calendar { margin: 2px 0; padding: 2px; border-style: none; background-color: transparent; color: #dedede; } calendar.raven-calendar:selected { border-radius: 3px; background-color: #498dff; } calendar.raven-calendar.button { color: rgba(222, 222, 222, 0.45); } calendar.raven-calendar.button:hover { color: #dedede; } calendar.raven-calendar.button:disabled { color: rgba(222, 222, 222, 0.25); } calendar.raven-calendar:indeterminate { color: alpha(#dedede,0.35); } calendar.raven-calendar.highlight { color: #dedede; } .raven-mpris { background-color: rgba(0, 0, 0, 0.5); color: #ffffff; } .raven-mpris label { min-height: 24px; } .raven-mpris button.image-button { padding: 8px; } .budgie-notification-window, .budgie-osd-window, .budgie-switcher-window { background-color: transparent; background-image: none; border-radius: 6px; } .budgie-notification, .budgie-switcher { background-color: transparent; background-image: none; } .budgie-notification .notification-title, .budgie-switcher .notification-title { font-size: 120%; } .budgie-osd { background-color: transparent; background-image: none; } .budgie-osd .budgie-osd-text { font-size: 120%; } window.budgie-switcher-window { border-radius: 6px; background-color: transparent; background-image: none; } window.budgie-switcher-window flowboxchild { margin: 2px; border-radius: 6px; -gtk-outline-radius: 6px; background-image: none; } .drop-shadow, window.budgie-switcher-window .drop-shadow { margin: 5px 9px; padding: 8px; border-radius: 6px; box-shadow: 0 5px 5px 0 transparent, 0 8px 15px 0 transparent, 0 3px 3px 0 rgba(0, 0, 0, 0.3); background-color: rgba(36, 36, 36, 0.95); background-image: none; } .drop-shadow .linked > button { border-radius: 5px; } .budgie-session-dialog, .budgie-polkit-dialog, .budgie-run-dialog { border-radius: 6px; background-color: #333333; } .background.budgie-session-dialog, .background.budgie-polkit-dialog, .background.budgie-run-dialog { border-radius: 6px; } .budgie-session-dialog decoration, .budgie-polkit-dialog decoration, .budgie-run-dialog decoration { border-radius: 6px; } .budgie-session-dialog label:not(:last-child), .budgie-session-dialog .dialog-title { font-size: 120%; } .budgie-session-dialog .linked.horizontal > button { padding: 8px 16px; border: none; border-top: 1px solid rgba(255, 255, 255, 0.12); border-radius: 0; } .budgie-session-dialog .linked.horizontal > button:first-child { border-bottom-left-radius: 6px; } .budgie-session-dialog .linked.horizontal > button:last-child { border-bottom-right-radius: 6px; } .budgie-session-dialog .linked.horizontal > button:not(.suggested-action):not(.destructive-action):hover { color: #c5c5c5; background-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.15); border-color: rgba(255, 255, 255, 0.12); transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94); } .budgie-session-dialog .linked.horizontal > button:not(.suggested-action):not(.destructive-action):active, .budgie-session-dialog .linked.horizontal > button:not(.suggested-action):not(.destructive-action):checked { background-image: none; color: #ffffff; background-color: rgba(255, 255, 255, 0.25); text-shadow: none; -gtk-icon-shadow: none; border-color: rgba(255, 255, 255, 0.12); text-shadow: 0 -1px rgba(255, 255, 255, 0.04), -1px 0px rgba(32, 32, 32, 0.05), 1px 0px rgba(32, 32, 32, 0.05), 0px 1px rgba(32, 32, 32, 0.3), 0px 2px rgba(32, 32, 32, 0.05); } .budgie-polkit-dialog .message { color: alpha(currentColor,0.6); } .budgie-polkit-dialog .failure { color: #f8464c; } .budgie-run-dialog { background-color: #242424; } .budgie-run-dialog entry.search { font-size: 120%; padding: 6px 12px; box-shadow: inset 0 1px transparent; background-color: transparent; } .budgie-run-dialog list .dim-label, .budgie-run-dialog list label.separator, .budgie-run-dialog list headerbar .subtitle, headerbar .budgie-run-dialog list .subtitle, .budgie-run-dialog list .titlebar:not(headerbar) .subtitle, .titlebar:not(headerbar) .budgie-run-dialog list .subtitle, .budgie-run-dialog list .budgie-notification .notification-body, .budgie-notification .budgie-run-dialog list .notification-body, .budgie-run-dialog list .budgie-switcher .notification-body, .budgie-switcher .budgie-run-dialog list .notification-body { opacity: 1; } .budgie-run-dialog scrolledwindow { border-top: 1px solid rgba(255, 255, 255, 0.12); }]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E5%85%AC%E4%BC%97%E5%8F%B7%2FLeetCode%2F%E7%AC%AC%E4%BA%8C%E5%A4%A9%2F7.%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0%2F</url>
    <content type="text"><![CDATA[题目描述题目：7.整数反转 解题思路代码实现123456789101112public int reverse(int x) &#123; int result = 0; while (x != 0) &#123; int tail = x % 10; int newResult = result * 10 + tail; // 防止翻转后数字超过Interge.MAX_VALUE； if((newResult-tail)/10!=result) return 0; result = newResult; x = x / 10; &#125; return result;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2F%E5%85%AC%E4%BC%97%E5%8F%B7%2FLeetCode%2F%E7%AC%AC%E4%BA%8C%E5%A4%A9%2F4.%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E9%97%B4%E6%95%B0%2F</url>
    <content type="text"><![CDATA[题目描述题目：4.两个有序数组的中间数 给你两个int数组，数组里面的元素都是有序的，找出两个数组之间的中间数。 解题思路参考归并排序里面的归并 代码实现123456789101112131415161718192021222324public double findMedianSortedArrays(int[] nums1, int[] nums2) &#123; int len = nums1.length + nums2.length; int m = 0, n = 0; int before = 0; while (m + n &lt;= (len / 2) - 1) &#123; if (m &gt;= nums1.length) before = nums2[n++]; else if (n &gt;= nums2.length) before = nums1[m++]; else if (nums1[m] &lt; nums2[n]) before = nums1[m++]; else before = nums2[n++]; &#125; int mid; if (m &gt;= nums1.length) mid = nums2[n++]; else if (n &gt;= nums2.length) mid = nums1[m++]; else if (nums1[m] &lt; nums2[n]) mid = nums1[m++]; else mid = nums2[n++]; if ((len &amp; 1) == 0) &#123; // return (before + mid) / 2.0; &#125; else &#123; return mid; &#125;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FLinux%2FMacterial%2Fgnome-shell%2Fgnome-shell%2F</url>
    <content type="text"><![CDATA[* { transition-duration: 200ms; } stage { font-family: Sans-Serif; font-size: 9pt; font-weight: 400; color: rgba(255, 255, 255, 0.9); } /* WIDGETS */ /* Buttons */ .button { min-height: 32px; padding: 0 16px; border-width: 0; border-radius: 16px; font-size: 9pt; font-weight: 400; color: rgba(255, 255, 255, 0.7); background-color: transparent; border-color: transparent; box-shadow: 0 0 transparent; text-shadow: none; icon-shadow: none; } .button:hover { color: rgba(255, 255, 255, 0.9); background-color: rgba(255, 255, 255, 0.02); border-color: transparent; box-shadow: 0 0 transparent; text-shadow: none; icon-shadow: none; } .button:active { color: rgba(255, 255, 255, 0.9); background-color: rgba(255, 255, 255, 0.03); border-color: transparent; box-shadow: 0 0 transparent; text-shadow: none; icon-shadow: none; } .button:insensitive { color: rgba(255, 255, 255, 0.03); background-color: transparent; border-color: transparent; box-shadow: 0 0 transparent; text-shadow: none; icon-shadow: none; } .button:focus { color: rgba(255, 255, 255, 0.9); text-shadow: none; icon-shadow: none; box-shadow: 0 0 transparent; } .modal-dialog-linked-button { min-height: 40px; padding: 0 16px; border-right-width: 0; font-size: 9.75pt; font-weight: 500; color: rgba(255, 255, 255, 0.7); background-color: transparent; border-color: transparent; box-shadow: 0 0 transparent; text-shadow: none; icon-shadow: none; } .modal-dialog-linked-button:hover { color: rgba(255, 255, 255, 0.9); background-color: rgba(255, 255, 255, 0.03); border-color: transparent; box-shadow: 0 0 transparent; text-shadow: none; icon-shadow: none; } .modal-dialog-linked-button:active { color: rgba(255, 255, 255, 0.9); background-color: rgba(255, 255, 255, 0.03); border-color: transparent; box-shadow: 0 0 transparent; text-shadow: none; icon-shadow: none; } .modal-dialog-linked-button:insensitive { color: rgba(255, 255, 255, 0.3); background-color: transparent; border-color: transparent; box-shadow: 0 0 transparent; text-shadow: none; icon-shadow: none; } .modal-dialog-linked-button:focus { color: rgba(255, 255, 255, 0.9); text-shadow: none; icon-shadow: none; box-shadow: 0 0 transparent; } .modal-dialog-linked-button:first-child { border-radius: 0px 0px 0px 16px; } .modal-dialog-linked-button:last-child { border-right-width: 0px; border-radius: 0px 0px 16px 0px; } .modal-dialog-linked-button:first-child:last-child { border-right-width: 0px; border-radius: 0px 0px 16px 16px; } /* Entries */ StEntry { min-height: 32px; padding: 0 8px; border-radius: 100px; border-width: 0; color: rgba(255, 255, 255, 0.9); selection-background-color: #0046DB; selected-color: rgba(255, 255, 255, 0.85); font-size: 9pt; font-weight: 400; background-color: rgba(255, 255, 255, 0.03); box-shadow: none; } StEntry:focus { } StEntry:insensitive { color: rgba(255, 255, 255, 0.5); } StEntry StIcon.capslock-warning { icon-size: 16px; warning-color: #FF6D00; padding: 0 0; } /* Scrollbars */ StScrollView.vfade { -st-vfade-offset: 32px; } StScrollView.hfade { -st-hfade-offset: 32px; } StScrollBar { padding: 0; } StScrollView StScrollBar { min-width: 16px; min-height: 6px; } StScrollBar StBin#trough { margin: 6px; border-radius: 100px; background-color: rgba(255, 255, 255, 0.06); } StScrollBar StButton#vhandle, StScrollBar StButton#hhandle { border-radius: 100px; background-color: rgba(255, 255, 255, 0.5); margin: 6px; } StScrollBar StButton#vhandle:hover, StScrollBar StButton#hhandle:hover { background-color: rgba(255, 255, 255, 0.7); } StScrollBar StButton#vhandle:active, StScrollBar StButton#hhandle:active { background-color: rgba(255, 255, 255, 0.9); } #overview StScrollBar StBin#trough, #screenShieldNotifications StScrollBar StBin#trough { background-color: rgba(255, 255, 255, 0.15); } #overview StScrollBar StButton#vhandle, #screenShieldNotifications StScrollBar StButton#vhandle, #overview StScrollBar StButton#hhandle, #screenShieldNotifications StScrollBar StButton#hhandle { background-color: rgba(255, 255, 255, 0.5); } #overview StScrollBar StButton#vhandle:hover, #screenShieldNotifications StScrollBar StButton#vhandle:hover, #overview StScrollBar StButton#hhandle:hover, #screenShieldNotifications StScrollBar StButton#hhandle:hover { background-color: rgba(255, 255, 255, 0.7); } #overview StScrollBar StButton#vhandle:active, #screenShieldNotifications StScrollBar StButton#vhandle:active, #overview StScrollBar StButton#hhandle:active, #screenShieldNotifications StScrollBar StButton#hhandle:active { background-color: rgba(255, 255, 255, 0.85); } /* Slider */ .slider { height: 20px; color: white; -slider-height: 2px; -slider-background-color: rgba(255, 255, 255, 0.1); -slider-border-color: transparent; -slider-active-background-color: #0062FF; -slider-active-border-color: transparent; -slider-border-width: 0; -slider-handle-radius: 7px; -barlevel-height: 4px; -barlevel-background-color: rgba(255, 255, 255, 0.1); -barlevel-border-color: transparent; -barlevel-active-background-color: #0062FF; -barlevel-active-border-color: transparent; -barlevel-overdrive-color: #FF5252; -barlevel-overdrive-border-color: transparent; -barlevel-overdrive-separator-width: 2px; -barlevel-border-width: 0; } /* Check Boxes */ .check-box * { min-height: 16px; padding: 8px 0; } .check-box StBoxLayout { spacing: 8px; } .check-box StBin { width: 24px; height: 24px; padding: 4px; border-radius: 100px; background-image: url("assets/checkbox-off.svg"); } .check-box:focus StBin { background-image: url("assets/checkbox-off.svg"); } .check-box:hover StBin { background-color: rgba(255, 255, 255, 0.06); } .check-box:active StBin { background-color: rgba(255, 255, 255, 0.1); } .check-box:checked StBin { background-image: url("assets/checkbox.svg"); } .check-box:focus:checked StBin { background-image: url("assets/checkbox.svg"); } .check-box:hover:checked StBin { background-color: rgba(0, 98, 255, 0.15); } .check-box:active:checked StBin { background-color: rgba(0, 98, 255, 0.3); } /* Switches */ .toggle-switch { width: 50px; height: 20px; background-size: contain; } .toggle-switch-us { background-image: url("assets/toggle-off.svg"); } .toggle-switch-us:checked { background-image: url("assets/toggle-on.svg"); } .toggle-switch-intl { background-image: url("assets/toggle-off.svg"); } .toggle-switch-intl:checked { background-image: url("assets/toggle-on.svg"); } /* links */ .shell-link { border-radius: 8px; color: #0046DB; } .shell-link:hover { color: #0046DB; background-color: rgba(0, 70, 219, 0.15); } .shell-link:active { color: #0046DB; background-color: rgba(0, 70, 219, 0.3); } /* Modal Dialogs */ .headline { font-size: 15pt; font-weight: 500; } .lightbox { background-color: black; } .flashspot { background-color: white; } .modal-dialog { border-radius: 16px; color: rgba(255, 255, 255, 0.9); background-color: rgba(10, 10, 10, 0.8); border: none; box-shadow: 0 0 24px rgba(0, 0, 0, 0.6); } .modal-dialog .modal-dialog-content-box { padding: 24px; } .modal-dialog .run-dialog-entry { width: 20em; margin-bottom: 6px; } .modal-dialog .run-dialog-error-box { padding-top: 16px; spacing: 6px; } .modal-dialog .run-dialog-button-box { padding-top: 1em; } .modal-dialog .run-dialog-label { font-size: 1em; font-weight: normal; color: rgba(255, 255, 255, 0.5); padding-bottom: .4em; } .mount-dialog-subject, .end-session-dialog-subject { font-size: 15pt; font-weight: 500; } /* Message Dialog */ .message-dialog-main-layout { padding: 12px 20px 0; spacing: 12px; } .message-dialog-content { max-width: 28em; spacing: 20px; } .message-dialog-icon { min-width: 48px; icon-size: 48px; } .message-dialog-title { font-weight: bold; } .message-dialog-subtitle { color: rgba(255, 255, 255, 0.7); font-weight: bold; } /* End Session Dialog */ .end-session-dialog { spacing: 42px; border: none; } .end-session-dialog-list { padding-top: 20px; } .end-session-dialog-layout { padding-left: 17px; } .end-session-dialog-layout:rtl { padding-right: 17px; } .end-session-dialog-description { width: 28em; padding-bottom: 10px; } .end-session-dialog-description:rtl { text-align: right; } .end-session-dialog-warning { width: 28em; color: #FF6D00; padding-top: 6px; } .end-session-dialog-warning:rtl { text-align: right; } .end-session-dialog-logout-icon { border-radius: 5px; width: 48px; height: 48px; background-size: contain; } .end-session-dialog-shutdown-icon { color: rgba(255, 255, 255, 0.5); width: 48px; height: 48px; } .end-session-dialog-inhibitor-layout { spacing: 16px; max-height: 200px; padding-right: 65px; padding-left: 65px; } .end-session-dialog-session-list, .end-session-dialog-app-list { spacing: 1em; } .end-session-dialog-list-header { font-weight: bold; } .end-session-dialog-list-header:rtl { text-align: right; } .end-session-dialog-app-list-item, .end-session-dialog-session-list-item { spacing: 1em; } .end-session-dialog-app-list-item-name, .end-session-dialog-session-list-item-name { font-weight: bold; } .end-session-dialog-app-list-item-description { color: rgba(255, 255, 255, 0.5); font-size: 1em; } /* ShellMountOperation Dialogs */ .shell-mount-operation-icon { icon-size: 48px; } .mount-dialog { spacing: 24px; } .mount-dialog .message-dialog-title { padding-top: 10px; padding-left: 17px; padding-bottom: 6px; max-width: 34em; } .mount-dialog .message-dialog-title:rtl { padding-left: 0px; padding-right: 17px; } .mount-dialog .message-dialog-body { padding-left: 17px; width: 28em; } .mount-dialog .message-dialog-body:rtl { padding-left: 0px; padding-right: 17px; } .mount-dialog-app-list { max-height: 200px; padding-top: 24px; padding-left: 49px; padding-right: 32px; } .mount-dialog-app-list:rtl { padding-right: 49px; padding-left: 32px; } .mount-dialog-app-list-item { color: rgba(255, 255, 255, 0.9); } .mount-dialog-app-list-item:hover { color: rgba(255, 255, 255, 0.9); } .mount-dialog-app-list-item:ltr { padding-right: 1em; } .mount-dialog-app-list-item:rtl { padding-left: 1em; } .mount-dialog-app-list-item-icon:ltr { padding-right: 17px; } .mount-dialog-app-list-item-icon:rtl { padding-left: 17px; } .mount-dialog-app-list-item-name { font-size: 1em; } /* Password or Authentication Dialog */ .prompt-dialog { width: 34em; border: none; } .prompt-dialog .message-dialog-main-layout { spacing: 24px; padding: 10px; } .prompt-dialog .message-dialog-content { spacing: 16px; } .prompt-dialog .message-dialog-title { font-size: 15pt; font-weight: 400; color: rgba(255, 255, 255, 0.9); } .prompt-dialog-description:rtl { text-align: right; } .prompt-dialog-password-box { spacing: 1em; padding-bottom: 1em; } .prompt-dialog-error-label { font-size: 1em; color: #DD2C00; padding-bottom: 8px; } .prompt-dialog-info-label { font-size: 1em; padding-bottom: 8px; } .hidden { color: rgba(0, 0, 0, 0); } .prompt-dialog-null-label { font-size: 1em; padding-bottom: 8px; } /* Polkit Dialog */ .polkit-dialog-user-layout { padding-left: 10px; spacing: 10px; } .polkit-dialog-user-layout:rtl { padding-left: 0px; padding-right: 10px; } .polkit-dialog-user-root-label { color: #FF6D00; } .polkit-dialog-user-icon { border-radius: 5px; background-size: contain; width: 48px; height: 48px; } /* Audio selection dialog */ .audio-device-selection-dialog { spacing: 30px; } .audio-selection-content { spacing: 20px; padding: 24px; } .audio-selection-title { font-weight: bold; text-align: center; } .audio-selection-box { spacing: 20px; } .audio-selection-device { border: 1px solid rgba(255, 255, 255, 0.12); border-radius: 8px; } .audio-selection-device:active, .audio-selection-device:hover, .audio-selection-device:focus { background-color: #0046DB; } .audio-selection-device-box { padding: 20px; spacing: 20px; } .audio-selection-device-icon { icon-size: 64px; } /* Access Dialog */ .access-dialog { spacing: 30px; } /* Geolocation Dialog */ .geolocation-dialog { spacing: 30px; } /* Extension Dialog */ .extension-dialog .message-dialog-main-layout { spacing: 24px; padding: 10px; } .extension-dialog .message-dialog-title { color: rgba(255, 255, 255, 0.7); } /* Inhibit-Shortcuts Dialog */ .inhibit-shortcuts-dialog { spacing: 30px; } /* Network Agent Dialog */ .network-dialog-secret-table { spacing-rows: 15px; spacing-columns: 1em; } .keyring-dialog-control-table { spacing-rows: 15px; spacing-columns: 1em; } /* Popovers/Menus */ .popup-menu { min-width: 12em; background-color: transparent; } .popup-menu .popup-menu-arrow { width: 16px; height: 16px; } .popup-menu .popup-sub-menu { background-color: rgba(100, 100, 100, 0.35); border-radius: 0 0 5px 5px; border: none; box-shadow: none; } .popup-menu .popup-menu-content { padding: 6px 0; margin: 0 4px; } .popup-menu .popup-menu-item { spacing: 8px; transition-duration: 100ms; border-radius: 5px; } .popup-menu .popup-menu-item:ltr { padding: 0.4em 24px 0.4em 0; } .popup-menu .popup-menu-item:rtl { padding: 0.4em 0 0.4em 24px; } .popup-menu .popup-menu-item:checked { background-color: #0046DB; color: rgba(255, 255, 255, 0.85); box-shadow: inset 0 -1px rgba(0, 0, 0, 0.15); font-weight: normal; border-radius: 5px 5px 0 0; text-shadow: 0 1px rgba(0, 0, 0, 0.45); } .popup-menu .popup-menu-item:checked .popup-menu-icon, .popup-menu .popup-menu-item:checked .app-menu-icon > StIcon, .popup-menu .popup-menu-item:checked .popup-menu-arrow { icon-shadow: 0 1px rgba(0, 0, 0, 0.45); } .popup-menu .popup-menu-item:checked.selected { background-color: rgba(29, 91, 223, 0.9775); color: rgba(255, 255, 255, 0.85); } .popup-menu .popup-menu-item:checked:active { background-color: rgba(61, 115, 228, 0.955); color: rgba(255, 255, 255, 0.85) !important; } .popup-menu .popup-menu-item:checked:insensitive { color: rgba(255, 255, 255, 0.5); } .popup-menu .popup-menu-item.selected { background-color: rgba(255, 255, 255, 0.06); color: rgba(255, 255, 255, 0.9); transition-duration: 0ms; } .popup-menu .popup-menu-item:active { background-color: rgba(255, 255, 255, 0.1); color: rgba(255, 255, 255, 0.9); transition-duration: 150ms; } .popup-menu .popup-menu-item.selected:active { color: rgba(255, 255, 255, 0.9); } .popup-menu .popup-menu-item:insensitive { color: rgba(255, 255, 255, 0.5); } .popup-menu .popup-inactive-menu-item { color: rgba(255, 255, 255, 0.9); } .popup-menu .popup-inactive-menu-item:insensitive { color: rgba(255, 255, 255, 0.5); } .popup-menu.panel-menu { -boxpointer-gap: 4px; margin-bottom: 1.75em; } .popup-menu-ornament { text-align: right; width: 16px; height: 16px; } .popup-menu-boxpointer, .candidate-popup-boxpointer { -arrow-border-radius: 0; -arrow-background-color: transparent; -arrow-border-width: 0; -arrow-border-color: transparent; -arrow-base: 0; -arrow-rise: 0; -arrow-box-shadow: none; margin: 2px 6px 6px; background-color: rgba(36, 36, 36, 0.95); border-radius: 5px; box-shadow: 0 3px 3px rgba(0, 0, 0, 0.24), 0 3px 3px rgba(0, 0, 0, 0.345); } .popup-separator-menu-item { height: 1px; margin: 0 0; background-color: rgba(255, 255, 255, 0.12); border-color: transparent; border-bottom-width: 0; border-bottom-style: solid; } .system-switch-user-submenu-icon.user-icon { icon-size: 20px; padding: 0 2px; } .system-switch-user-submenu-icon.default-icon { icon-size: 16px; padding: 0 4px; } #appMenu { spinner-image: url("process-working.svg"); spacing: 4px; } #appMenu .label-shadow { color: transparent; } .aggregate-menu { min-width: 240px; } .aggregate-menu .popup-menu-icon { padding: 0 4px; } .system-menu-action { color: rgba(255, 255, 255, 0.7); border-radius: 100px; /* wish we could do 50% */ padding: 12px; border: none; -st-icon-style: symbolic; } .system-menu-action:hover, .system-menu-action:focus { background-color: rgba(255, 255, 255, 0.06); color: rgba(255, 255, 255, 0.9); border: none; padding: 12px; } .system-menu-action:active { background-color: rgba(255, 255, 255, 0.1); color: rgba(255, 255, 255, 0.9); } .system-menu-action > StIcon { icon-size: 16px; } .background-menu { -boxpointer-gap: 8px; -arrow-rise: 0; } /* fallback menu - odd thing for styling App menu when apparently not running under shell. Light Adwaita styled app menu inside the main app window itself rather than the top bar */ /* OSD */ .osd-window { text-align: center; font-weight: 400; border-radius: spacing: 1em; margin: 32px; min-width: 64px; min-height: 64px; } .osd-window .osd-monitor-label { font-size: 45px; font-weight: 400; } .osd-window .level { height: 4px; border-radius: 2px; background-color: rgba(0, 70, 219, 0.3); color: rgba(255, 255, 255, 0.9); -barlevel-height: 3px; -barlevel-background-color: transparent; -barlevel-active-background-color: #00C853; -barlevel-overdrive-color: #FF5252; -barlevel-overdrive-separator-width: 3px; -barlevel-border-width: 0; } .osd-window .level-bar { background-color: #0046DB; border-radius: 100px; } /* Pad OSD */ .pad-osd-window { padding: 32px; background-color: rgba(0, 0, 0, 0.6); } .pad-osd-window .pad-osd-title-box { spacing: 12px; } .pad-osd-window .pad-osd-title-menu-box { spacing: 6px; } .combo-box-label { width: 15em; } /* App Switcher */ .switcher-popup { padding: 8px; spacing: 16px; } .switcher-list-item-container { spacing: 8px; } .switcher-list .item-box { padding: 8px; border-radius: 8px; } .switcher-list .item-box:outlined { padding: 8px; border: none; background-color: rgba(255, 255, 255, 0.06); color: rgba(255, 255, 255, 0.9); } .switcher-list .item-box:selected { background-color: #0046DB; color: rgba(255, 255, 255, 0.85); } .switcher-list .thumbnail-box { padding: 2px; spacing: 4px; } .switcher-list .thumbnail { width: 256px; } .switcher-list .separator { width: 1px; background: rgba(255, 255, 255, 0.12); } .switcher-arrow { border-color: rgba(0, 0, 0, 0); color: rgba(255, 255, 255, 0.5); } .switcher-arrow:highlighted { color: rgba(255, 255, 255, 0.9); } .input-source-switcher-symbol { font-size: 45px; font-weight: 400; width: 96px; height: 96px; } /* Window Cycler */ .cycler-highlight { border: 4px solid #0046DB; } /* Workspace Switcher */ .workspace-switcher-group { padding: 8px; } .workspace-switcher { background: transparent; border: 0px; border-radius: 0px; padding: 0px; spacing: 8px; } .ws-switcher-active-up, .ws-switcher-active-down { height: 48px; background-color: #0046DB; color: rgba(255, 255, 255, 0.85); background-size: 32px; border-radius: 8px; } .ws-switcher-box { height: 48px; border: none; background: rgba(255, 255, 255, 0.06); border-radius: 8px; } .osd-window, .resize-popup, .switcher-list, .workspace-switcher-container { color: rgba(255, 255, 255, 0.9); background-color: rgba(10, 10, 10, 0.9); border: none; border-radius: 16px; padding: 12px; } /* Tiled window previews */ .tile-preview { background-color: rgba(0, 98, 255, 0.3); border: 1px solid #0062FF; } .tile-preview-left.on-primary { border-radius: 0; } .tile-preview-right.on-primary { border-radius: 0; } .tile-preview-left.tile-preview-right.on-primary { border-radius: 0; } /* TOP BAR */ #panel { background-color: rgba(36, 36, 36, 0.65); /* transition from solid to transparent */ transition-duration: 250ms; font-weight: 400; height: 28px; box-shadow: 0 0 8px rgba(0, 0, 0, 0.2), 0 0 4px rgba(0, 0, 0, 0.3); } #panel:overview, #panel.unlock-screen, #panel.login-screen, #panel.lock-screen { background-color: transparent; } #panel #panelLeft, #panel #panelCenter { spacing: 0; } #panel .panel-corner { -panel-corner-radius: 0; -panel-corner-background-color: rgba(36, 36, 36, 0.65); -panel-corner-border-width: 2px; -panel-corner-border-color: transparent; } #panel .panel-corner:active, #panel .panel-corner:overview, #panel .panel-corner:focus { -panel-corner-border-color: rgba(255, 255, 255, 0.85); } #panel .panel-corner.lock-screen, #panel .panel-corner.login-screen, #panel .panel-corner.unlock-screen { -panel-corner-radius: 0; -panel-corner-background-color: transparent; -panel-corner-border-color: transparent; } #panel .panel-corner StLabel { padding: 0 4px; } #panel .panel-button { -natural-hpadding: 4px; -minimum-hpadding: 4px; font-weight: bold; color: #dedede; text-shadow: none; transition-duration: 150ms; } #panel .panel-button StLabel { padding: 0 2px; } #panel .panel-button .app-menu-icon { -st-icon-style: symbolic; height: 0; width: 0; margin-left: 0; margin-right: 0; } #panel .panel-button .popup-menu-arrow { width: 0; height: 0; } #panel .panel-button .system-status-icon, #panel .panel-button .app-menu-icon > StIcon, #panel .panel-button .popup-menu-arrow { icon-shadow: none; } #panel .panel-button:hover { color: #dedede; background-color: rgba(255, 255, 255, 0.15); text-shadow: none; } #panel .panel-button:active, #panel .panel-button:overview, #panel .panel-button:focus, #panel .panel-button:checked { background-color: #0046DB; color: rgba(255, 255, 255, 0.85); text-shadow: 0 1px rgba(0, 0, 0, 0.45); box-shadow: none; } #panel .panel-button:active .system-status-icon, #panel .panel-button:active .app-menu-icon > StIcon, #panel .panel-button:active .popup-menu-arrow, #panel .panel-button:overview .system-status-icon, #panel .panel-button:overview .app-menu-icon > StIcon, #panel .panel-button:overview .popup-menu-arrow, #panel .panel-button:focus .system-status-icon, #panel .panel-button:focus .app-menu-icon > StIcon, #panel .panel-button:focus .popup-menu-arrow, #panel .panel-button:checked .system-status-icon, #panel .panel-button:checked .app-menu-icon > StIcon, #panel .panel-button:checked .popup-menu-arrow { icon-shadow: 0 1px rgba(0, 0, 0, 0.45); } #panel .panel-button .system-status-icon { icon-size: 1.23077em; padding: 0 3px; } .unlock-screen #panel .panel-button, .login-screen #panel .panel-button, .lock-screen #panel .panel-button { color: rgba(255, 255, 255, 0.7); } .unlock-screen #panel .panel-button:focus, .unlock-screen #panel .panel-button:hover, .unlock-screen #panel .panel-button:active, .login-screen #panel .panel-button:focus, .login-screen #panel .panel-button:hover, .login-screen #panel .panel-button:active, .lock-screen #panel .panel-button:focus, .lock-screen #panel .panel-button:hover, .lock-screen #panel .panel-button:active { color: rgba(255, 255, 255, 0.85); } #panel .panel-status-indicators-box, #panel .panel-status-menu-box { spacing: 2px; } #panel .power-status.panel-status-indicators-box { spacing: 0; } #panel .screencast-indicator { color: #DD2C00; } #panel .remote-access-indicator { color: #FF6D00; } #panel.solid { background-color: rgba(36, 36, 36, 0.65); /* transition from transparent to solid */ transition-duration: 250ms; background-gradient-direction: none; text-shadow: none; } #panel.solid:overview { background-color: transparent; } #panel.solid .panel-corner { -panel-corner-background-color: rgba(36, 36, 36, 0.65); } #panel.solid .panel-button { color: #dedede; text-shadow: none; } #panel.solid .panel-button:active, #panel.solid .panel-button:overview, #panel.solid .panel-button:focus, #panel.solid .panel-button:checked { color: rgba(255, 255, 255, 0.85); text-shadow: 0 1px rgba(0, 0, 0, 0.45); } #panel.solid .system-status-icon, #panel.solid .app-menu-icon > StIcon, #panel.solid .popup-menu-arrow { icon-shadow: none; } #panel.solid .system-status-icon:active, #panel.solid .system-status-icon:overview, #panel.solid .system-status-icon:focus, #panel.solid .system-status-icon:checked, #panel.solid .app-menu-icon > StIcon:active, #panel.solid .app-menu-icon > StIcon:overview, #panel.solid .app-menu-icon > StIcon:focus, #panel.solid .app-menu-icon > StIcon:checked, #panel.solid .popup-menu-arrow:active, #panel.solid .popup-menu-arrow:overview, #panel.solid .popup-menu-arrow:focus, #panel.solid .popup-menu-arrow:checked { icon-shadow: 0 1px rgba(0, 0, 0, 0.45); } #panel #panelActivities.panel-button > * { background-image: url("assets/activities.svg"); background-position: center top; width: 24px; height: 24px; background-color: transparent !important; background-gradient-direction: none !important; border: none; color: transparent; } #panel #panelActivities.panel-button:active, #panel #panelActivities.panel-button:overview, #panel #panelActivities.panel-button:focus, #panel #panelActivities.panel-button:checked { background-color: transparent; border: none; } #calendarArea { padding: 8px 16px; } .calendar { margin-bottom: 0; } .calendar, .datemenu-today-button, .datemenu-displays-box, .message-list-sections { margin: 0 8px; } .datemenu-calendar-column { spacing: 8px; } .datemenu-displays-section { padding-bottom: 0; } .datemenu-displays-box { spacing: 8px; } .datemenu-calendar-column { border: 0 solid rgba(255, 255, 255, 0.12); } .datemenu-calendar-column:ltr { border-left-width: 0; } .datemenu-calendar-column:rtl { border-right-width: 0; } .datemenu-today-button, .world-clocks-button, .weather-button, .events-section-title { min-height: 20px; padding: 4px 8px; border-radius: 8px; } .datemenu-today-button { min-height: 48px; } .message-list-section-list:ltr { padding-left: 0; } .message-list-section-list:rtl { padding-right: 0; } .datemenu-today-button:hover, .datemenu-today-button:focus, .world-clocks-button:hover, .world-clocks-button:focus, .weather-button:hover, .weather-button:focus, .events-section-title:hover, .events-section-title:focus { color: rgba(255, 255, 255, 0.9); background-color: rgba(255, 255, 255, 0.06); } .datemenu-today-button:active, .world-clocks-button:active, .weather-button:active, .events-section-title:active { color: rgba(255, 255, 255, 0.9); background-color: rgba(255, 255, 255, 0.1); } .datemenu-today-button .date-label { font-size: 18pt; font-weight: 400; } .world-clocks-header, .weather-header, .events-section-title { color: rgba(255, 255, 255, 0.7); font-weight: bold; } .world-clocks-grid { spacing-rows: 0.4em; } .weather-box { spacing: 0.4em; } .calendar-month-label { height: 20px; margin: 2px; padding: 6px 16px; border-radius: 100px; color: rgba(255, 255, 255, 0.9); font-weight: 500; } .calendar-month-label:focus { background-color: rgba(255, 255, 255, 0.06); } .pager-button { width: 28px; height: 28px; margin: 2px; border-radius: 100px; background-color: transparent; color: rgba(255, 255, 255, 0.9); } .pager-button:hover, .pager-button:focus { background-color: rgba(255, 255, 255, 0.06); } .pager-button:active { background-color: rgba(255, 255, 255, 0.1); } .calendar-change-month-back { padding: 0 2px; background-image: url("assets/calendar-arrow-left.svg"); } .calendar-change-month-back:rtl { background-image: url("assets/calendar-arrow-right.svg"); } .calendar-change-month-forward { padding: 0 2px; background-image: url("assets/calendar-arrow-right.svg"); } .calendar-change-month-forward:rtl { background-image: url("assets/calendar-arrow-left.svg"); } .calendar-day-base { font-size: 9pt; font-weight: 400; text-align: center; width: 28px; height: 28px; padding: 0; margin: 2px; border-radius: 100px; } .calendar-day-base:hover, .calendar-day-base:focus { background-color: rgba(255, 255, 255, 0.06); } .calendar-day-base:active { color: inherit; background-color: rgba(255, 255, 255, 0.1); border-color: transparent; } .calendar-day-base:selected { color: rgba(255, 255, 255, 0.85); background-color: #0046DB; border-color: transparent; } .calendar-day-base.calendar-day-heading { width: 28px; height: 21px; margin-top: 2px; padding: 7px 0 0; border-radius: 100px; background-color: transparent; color: rgba(255, 255, 255, 0.5); font-size: 9pt; font-weight: 400; font-weight: bold; text-align: center; } .calendar-day { border-width: 0; } .calendar-day-top { border-top-width: 0; } .calendar-day-left { border-left-width: 0; } .calendar-nonwork-day { color: rgba(255, 255, 255, 0.9); } .calendar-today { font-weight: bold !important; border: none; } .calendar-day-with-events { color: #0046DB; font-weight: normal; text-decoration: underline; background-image: none; } .calendar-other-month-day { color: rgba(255, 255, 255, 0.3); opacity: 0.5; } .calendar-week-number { width: 28px; height: 21px; margin: 2px; padding: 7px 0 0; border-radius: 100px; background-color: transparent; color: rgba(255, 255, 255, 0.5); font-size: inherit; font-weight: bold; text-align: center; } /* Message list */ .message-list { width: 420px; } .message-list-clear-button.button { background-color: transparent; margin: 8px 8px 0; } .message-list-clear-button.button:hover, .message-list-clear-button.button:focus { background-color: rgba(255, 255, 255, 0.06); } .message-list-clear-button.button:active { background-color: rgba(255, 255, 255, 0.1); } .message-list-sections { spacing: 8px; } .message-list-section, .message-list-section-list { spacing: 8px; } .message { min-height: 56px; background-color: transparent; border-radius: 8px; } .message:hover, .message:focus { background-color: rgba(255, 255, 255, 0.06); } .message:active { background-color: rgba(255, 255, 255, 0.1); } .message-icon-bin { padding: 8px 0px 8px 8px; } .message-icon-bin:rtl { padding: 8px 8px 8px 0px; } .message-icon-bin > StIcon { color: rgba(255, 255, 255, 0.9); icon-size: 1.23077em; -st-icon-style: requested; margin: 4px 0px 4px 4px; } .message-icon-bin > StIcon:rtl { margin: 4px 4px 4px 0px; } .message-secondary-bin { padding: 0 8px; } .message-secondary-bin > .event-time { min-height: 18px; padding-top: 2px; color: rgba(255, 255, 255, 0.7); font-size: 1em; /* HACK: the label should be baseline-aligned with a 1em label, fake this with some bottom padding */ padding-bottom: 0; } .message-secondary-bin > StIcon { icon-size: 1.23077em; } .message-title { min-height: 18px; padding-top: 2px; color: rgba(255, 255, 255, 0.9); font-weight: bold; font-size: 1em; } .message-content { min-height: 40px; padding: 8px; color: rgba(255, 255, 255, 0.7); font-size: 1em; } .message-content * > StIcon { icon-size: 16px; border-radius: 16px; padding: 2px; color: rgba(255, 255, 255, 0.7); } /* FIXME: how do you do this in sass? */ .message-content *:hover > StIcon, .message-content *:focus > StIcon { color: rgba(255, 255, 255, 0.9); background-color: rgba(255, 255, 255, 0.06); } .message-content *:active > StIcon { color: rgba(255, 255, 255, 0.9); background-color: rgba(255, 255, 255, 0.1); } .message-media-control { margin: 16px 0; padding: 8px; border-radius: 100px; color: rgba(255, 255, 255, 0.7); } .message-media-control:hover, .message-media-control:focus { color: rgba(255, 255, 255, 0.9); background-color: rgba(255, 255, 255, 0.06); } .message-media-control:active { color: rgba(255, 255, 255, 0.9); background-color: rgba(255, 255, 255, 0.1); } .message-media-control:insensitive { color: rgba(255, 255, 255, 0.3); } .message-media-control:last-child:ltr { margin-right: 16px; padding-right: 8px; } .message-media-control:last-child:rtl { margin-left: 16px; padding-left: 8px; } .media-message-cover-icon { icon-size: 32px !important; margin: 8px 0px 8px 4px !important; } .media-message-cover-icon:rtl { margin: 8px 4px 8px 0px !important; } .media-message-cover-icon.fallback { icon-size: 16px !important; padding: 8px; border: none; border-radius: 8px; background-color: rgba(255, 255, 255, 0.06); color: rgba(255, 255, 255, 0.5); } .ripple-box { width: 48px; height: 48px; border-radius: 0 0 48px 0; background-color: rgba(255, 255, 255, 0.3); background-image: none; background-size: auto; } .ripple-box:rtl { border-radius: 0 0 0 48px; background-image: none; } .popup-menu-arrow { width: 16px; height: 16px; } .popup-menu-icon { icon-size: 1.23077em; } .window-close { transition-duration: 0ms; height: 32px; width: 32px; -shell-close-overlap: 16px; -st-background-image-shadow: 0 1px 1.5px rgba(0, 0, 0, 0.12), 0 1px 1px rgba(0, 0, 0, 0.24); background-image: url("assets/window-close.svg"); background-size: 32px; } .window-close:hover { -st-background-image-shadow: 0 3px 3px rgba(0, 0, 0, 0.24), 0 3px 3px rgba(0, 0, 0, 0.345); background-image: url("assets/window-close.svg"); } .window-close:active { background-image: url("assets/window-close-active.svg"); } .window-close:rtl { -st-background-image-shadow: 0 1px 1.5px rgba(0, 0, 0, 0.12), 0 1px 1px rgba(0, 0, 0, 0.24); } .window-close:rtl:hover { -st-background-image-shadow: 0 3px 3px rgba(0, 0, 0, 0.24), 0 3px 3px rgba(0, 0, 0, 0.345); } /* NETWORK DIALOGS */ .nm-dialog { max-height: 34em; min-height: 31em; min-width: 32em; } .nm-dialog-content { spacing: 20px; padding: 24px; } .nm-dialog-header-hbox { spacing: 10px; } .nm-dialog-airplane-box { spacing: 12px; } .nm-dialog-airplane-headline { font-weight: bold; text-align: center; } .nm-dialog-airplane-text { color: rgba(255, 255, 255, 0.9); } .nm-dialog-header-icon { icon-size: 32px; } .nm-dialog-scroll-view { border: none; } .nm-dialog-header { font-size: 15pt; font-weight: 500; } .nm-dialog-item { font-size: 1em; border-bottom: none; border-radius: 8px; padding: 12px; spacing: 20px; } .nm-dialog-item:hover, .nm-dialog-item:focus { background-color: rgba(255, 255, 255, 0.06); } .nm-dialog-item:active { background-color: rgba(255, 255, 255, 0.1); } .nm-dialog-item:selected { background-color: #0046DB; color: rgba(255, 255, 255, 0.85); } .nm-dialog-icons { spacing: .5em; } .nm-dialog-icon { icon-size: 16px; } .no-networks-label { color: rgba(255, 255, 255, 0.5); } .no-networks-box { spacing: 12px; } /* OVERVIEW */ #overview { spacing: 24px; } .overview-controls { padding-bottom: 32px; } .window-picker { -horizontal-spacing: 16px; -vertical-spacing: 16px; padding: 0 16px 32px; } .window-picker.external-monitor { padding: 16px; } .window-clone-border { border: 4px solid rgba(255, 255, 255, 0.3); border-radius: 8px; box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.3); } .window-caption { spacing: 25px; color: rgba(255, 255, 255, 0.85); background-color: rgba(0, 0, 0, 0.6); border-radius: 8px; padding: 4px 8px; } .search-entry { width: 304px; padding: 0 8px; border: none; color: rgba(255, 255, 255, 0.5); selection-background-color: rgba(255, 255, 255, 0.3); selected-color: rgba(255, 255, 255, 0.85); background-color: rgba(255, 255, 255, 0.12); border-radius:100px; border-color: transparent; box-shadow: 0 1px 2px rgba(0, 0, 0, 0.35); } .search-entry:focus { border-color: transparent; background-color: rgba(255, 255, 255, 0.18); box-shadow: 2px 3px 5px rgba(0, 0, 0, 0.55); padding: 0 8px; border: none; color: rgba(255, 255, 255, 0.85); } .search-entry .search-entry-icon { icon-size: 16px; padding: 0 0; color: rgba(255, 255, 255, 0.5); } .search-entry:hover .search-entry-icon, .search-entry:focus .search-entry-icon { color: rgba(255, 255, 255, 0.85); } #searchResultsBin { max-width: 1000px; } #searchResultsContent { padding-left: 20px; padding-right: 20px; spacing: 16px; } .search-section { spacing: 16px; } .search-section-content { spacing: 32px; } .list-search-results { spacing: 3px; } .search-section-separator { height: 1px; background-color: rgba(255, 255, 255, 0.15); } .list-search-result-content { spacing: 30px; } .list-search-result-title { font-size: 11.25pt; font-weight: 400; color: rgba(255, 255, 255, 0.85); spacing: 12px; } .list-search-result-description { color: rgba(255, 255, 255, 0.7); } .list-search-provider-details { width: 150px; color: rgba(255, 255, 255, 0.7); margin-top: 0.24em; } .list-search-provider-content { spacing: 20px; } .search-provider-icon { padding: 15px; } /* DASHBOARD */ #dash { font-size: 1em; color: rgba(255, 255, 255, 0.85); background-color: rgba(255, 255, 255, 0.13); padding: 3px 0; border: none; border-left: 0px; border-radius: 0px 8px 8px 0px; } #dash:rtl { border-radius: 8px 0 0 8px; } #dash .placeholder { background-image: url("assets/dash-placeholder.svg"); background-size: contain; height: 24px; } #dash .empty-dash-drop-target { width: 24px; height: 24px; } .dash-item-container > StWidget { padding: 3px 6px; } .dash-label { border-radius: 8px; padding: 7px 8px; color: rgba(255, 255, 255, 0.9); background-color: #242424; box-shadow: 0 3px 3px rgba(0, 0, 0, 0.24), 0 3px 3px rgba(0, 0, 0, 0.345); text-align: center; -x-offset: 8px; } /* App Vault/Grid */ .icon-grid { spacing: 30px; -shell-grid-horizontal-item-size: 136px; -shell-grid-vertical-item-size: 136px; } .icon-grid .overview-icon { icon-size: 96px; } .system-action-icon { box-shadow: 0 4px 4px rgba(0, 0, 0, 0.2); background-color: #212121; color: #FFFFFF; border-radius: 99px; icon-size: 48px; } .app-view-controls { width: 320px; padding-bottom: 32px; } .app-view-control { padding: 0 16px; font-weight: bold; color: rgba(255, 255, 255, 0.7); background-color: rgba(255, 255, 255, 0.15); } .app-view-control:hover { color: rgba(255, 255, 255, 0.85); background-color: rgba(255, 255, 255, 0.22); } .app-view-control:active { color: rgba(255, 255, 255, 0.85); background-color: rgba(255, 255, 255, 0.3); } .app-view-control:checked { color: rgba(255, 255, 255, 0.85); background-color: rgba(255, 255, 255, 0.35); box-shadow: none; } .app-view-control:first-child { border-right-width: 0; border-radius: 8px 0 0 8px; } .app-view-control:last-child { border-radius: 0 8px 8px 0; } .search-provider-icon:focus, .search-provider-icon:selected, .search-provider-icon:hover, .list-search-result:focus, .list-search-result:selected, .list-search-result:hover { background-color: rgba(255, 255, 255, 0.15); transition-duration: 0ms; } .search-provider-icon:active, .search-provider-icon:checked, .list-search-result:active, .list-search-result:checked { background-color: rgba(255, 255, 255, 0.3); transition-duration: 150ms; } .show-apps:hover .overview-icon, .show-apps:focus .overview-icon, .show-apps:selected .overview-icon, .app-well-app:hover .overview-icon, .app-well-app:focus .overview-icon, .app-well-app:selected .overview-icon, .app-well-app.app-folder:hover .overview-icon, .app-well-app.app-folder:focus .overview-icon, .app-well-app.app-folder:selected .overview-icon, .grid-search-result:hover .overview-icon, .grid-search-result:focus .overview-icon, .grid-search-result:selected .overview-icon { background-color: rgba(255, 255, 255, 0.15); transition-duration: 0ms; border-image: none; background-image: none; } .show-apps:active .overview-icon, .show-apps:checked .overview-icon, .app-well-app:active .overview-icon, .app-well-app:checked .overview-icon, .app-well-app.app-folder:active .overview-icon, .app-well-app.app-folder:checked .overview-icon, .grid-search-result:active .overview-icon, .grid-search-result:checked .overview-icon { background-color: rgba(255, 255, 255, 0.3); box-shadow: none; transition-duration: 150ms; } .show-apps .overview-icon { background-image: url("assets/startup.png") !important; background-size: contain; } .app-well-app-running-dot { width: 5px; height: 5px; border-radius: 3px; background-color: #0046DB; margin-bottom: 0; } .search-provider-icon, .list-search-result, .show-apps .overview-icon, .app-well-app .overview-icon, .app-well-app.app-folder .overview-icon, .grid-search-result .overview-icon { color: rgba(255, 255, 255, 0.85); border-radius: 8px; padding: 6px; border: none; transition-duration: 150ms; text-align: center; } .app-well-app.app-folder > .overview-icon { background-color: rgba(255, 255, 255, 0.13); } .show-apps .show-apps-icon { color: transparent; } .show-apps:hover .show-apps-icon, .show-apps:active .show-apps-icon, .show-apps:checked .show-apps-icon, .show-apps:focus .show-apps-icon { color: transparent; transition-duration: 150ms; } .app-folder-popup { -arrow-border-radius: 8px; -arrow-background-color: rgba(255, 255, 255, 0.13); -arrow-base: 0; -arrow-rise: 12px; } .app-folder-popup-bin { padding: 5px; } .app-folder-icon { padding: 5px; spacing-rows: 5px; spacing-columns: 5px; } .page-indicator { padding: 15px 20px; } .page-indicator .page-indicator-icon { width: 12px; height: 12px; border-radius: 12px; background-image: none; background-color: rgba(255, 255, 255, 0.3); } .page-indicator:hover .page-indicator-icon { background-image: none; background-color: rgba(255, 255, 255, 0.5); } .page-indicator:active .page-indicator-icon { background-image: none; background-color: rgba(255, 255, 255, 0.7); } .page-indicator:checked .page-indicator-icon { background-image: none; background-color: rgba(255, 255, 255, 0.85); transition-duration: 0ms; } .page-indicator:checked:active { background-image: none; } .app-well-app > .overview-icon.overview-icon-with-label, .grid-search-result .overview-icon.overview-icon-with-label { padding: 10px 8px 5px 8px; spacing: 4px; } .workspace-thumbnails { visible-width: 32px; spacing: 12px; padding: 16px; border-radius: 5px; margin: 6px; } .workspace-thumbnail-indicator { border: 0 solid #0046DB; border-width: 2px; padding: 6px; border-radius: 2px; } .search-display > StBoxLayout, .all-apps, .frequent-apps > StBoxLayout { padding: 0px 88px 10px 88px; } .workspace-thumbnails { color: rgba(255, 255, 255, 0.85); background-color: rgba(255, 255, 255, 0.13); border: none; } .search-statustext, .no-frequent-applications-label { font-size: 45px; font-weight: 400; color: rgba(255, 255, 255, 0.5); } /* NOTIFICATIONS & MESSAGE TRAY */ .url-highlighter { link-color: #0046DB; } .notification-banner { font-size: 1em; width: 34em; min-height: 56px; margin: 5px; border-radius: 8px; color: rgba(255, 255, 255, 0.9); background-color: rgba(36, 36, 36, 0.92); border: none; box-shadow: 0 3px 3px rgba(0, 0, 0, 0.24), 0 3px 3px rgba(0, 0, 0, 0.345); } .notification-banner:hover { background-color: rgba(36, 36, 36, 0.95); } .notification-banner:focus { background-color: #242424; } .notification-banner .notification-icon { padding: 5px; } .notification-banner .notification-content { padding: 5px; spacing: 5px; } .notification-banner .secondary-icon { icon-size: 1.23077em; } .notification-banner .notification-actions { background-color: transparent; padding-top: 0; border-top: 1px solid rgba(255, 255, 255, 0.12); spacing: 1px; } .notification-banner .notification-button { min-height: 40px; padding: 0 16px; background-color: transparent; color: rgba(255, 255, 255, 0.7); font-weight: 500; } .notification-banner .notification-button:first-child { border-radius: 0 0 0 2px; } .notification-banner .notification-button:last-child { border-radius: 0 0 2px 0; } .notification-banner .notification-button:hover, .notification-banner .notification-buttonfocus { background-color: rgba(255, 255, 255, 0.06); color: rgba(255, 255, 255, 0.9); } .notification-banner .notification-button:active { background-color: rgba(255, 255, 255, 0.1); color: rgba(255, 255, 255, 0.9); } .summary-source-counter { font-size: 1em; font-weight: bold; height: 1.6em; width: 1.6em; -shell-counter-overlap-x: 3px; -shell-counter-overlap-y: 3px; background-color: #0046DB; color: rgba(255, 255, 255, 0.85); border: 2px solid #0046DB; box-shadow: 0 2px 2px rgba(0, 0, 0, 0.5); border-radius: 0.9em; } .secondary-icon { icon-size: 1.23077em; } .chat-body { spacing: 5px; } .chat-response { margin: 5px; } .chat-log-message { color: rgba(255, 255, 255, 0.9); } .chat-new-group { padding-top: 1em; } .chat-received { padding-left: 4px; } .chat-received:rtl { padding-left: 0px; padding-right: 4px; } .chat-sent { padding-left: 18pt; color: rgba(255, 255, 255, 0.7); } .chat-sent:rtl { padding-left: 0; padding-right: 18pt; } .chat-meta-message { padding-left: 4px; font-size: 9pt; font-weight: 400; color: rgba(255, 255, 255, 0.5); } .chat-meta-message:rtl { padding-left: 0; padding-right: 4px; } .hotplug-transient-box { spacing: 6px; padding: 2px 72px 2px 12px; } .hotplug-notification-item { padding: 2px 10px; } .hotplug-notification-item:focus { padding: 1px 71px 1px 11px; } .hotplug-notification-item-icon { icon-size: 24px; padding: 2px 5px; } .hotplug-resident-box { spacing: 8px; } .hotplug-resident-mount { spacing: 8px; border-radius: 8px; } .hotplug-resident-mount:hover { background-color: rgba(255, 255, 255, 0.06); } .hotplug-resident-mount:active { background-color: rgba(255, 255, 255, 0.1); } .hotplug-resident-mount-label { color: inherit; padding-left: 6px; } .hotplug-resident-mount-icon { icon-size: 24px; padding-left: 6px; } .hotplug-resident-eject-icon { icon-size: 16px; } .hotplug-resident-eject-button { padding: 7px; border-radius: 8px; color: rgba(255, 255, 255, 0.9); } /* Eeeky things */ .magnifier-zoom-region { border: 2px solid #0046DB; } .magnifier-zoom-region.full-screen { border-width: 0; } /* On-screen Keyboard */ .word-suggestions { font-size: 14pt; spacing: 12px; min-height: 20pt; } #keyboard { background-color: rgba(0, 0, 0, 0.25); } .keyboard-layout { padding: 4px; spacing: 4px; } .keyboard-key { min-height: 2em; min-width: 2em; font-size: 14pt; font-weight: bold; border-radius: 8px; border: none; color: inherit; background-color: #414141; box-shadow: 0 1px rgba(0, 0, 0, 0.2); } .keyboard-key:focus, .keyboard-key:hover { color: rgba(255, 255, 255, 0.85); background-color: #0062FF; } .keyboard-key:checked, .keyboard-key:active { color: rgba(255, 255, 255, 0.85); background-color: #0056e0; } .keyboard-key:grayed { background-color: rgba(0, 0, 0, 0.3); color: rgba(255, 255, 255, 0.85); border-color: rgba(0, 0, 0, 0.3); } .keyboard-key.default-key { background-size: 20px; } .keyboard-key.default-key, .keyboard-key.enter-key, .keyboard-key.shift-key-lowercase, .keyboard-key.shift-key-uppercase, .keyboard-key.hide-key, .keyboard-key.layout-key { background-color: #212121; box-shadow: 0 1px rgba(0, 0, 0, 0.2); } .keyboard-key.default-key:focus, .keyboard-key.default-key:hover, .keyboard-key.enter-key:focus, .keyboard-key.enter-key:hover, .keyboard-key.shift-key-lowercase:focus, .keyboard-key.shift-key-lowercase:hover, .keyboard-key.shift-key-uppercase:focus, .keyboard-key.shift-key-uppercase:hover, .keyboard-key.hide-key:focus, .keyboard-key.hide-key:hover, .keyboard-key.layout-key:focus, .keyboard-key.layout-key:hover { color: rgba(255, 255, 255, 0.8); background-color: #414141; } .keyboard-key.default-key:checked, .keyboard-key.default-key:active, .keyboard-key.enter-key:checked, .keyboard-key.enter-key:active, .keyboard-key.shift-key-lowercase:checked, .keyboard-key.shift-key-lowercase:active, .keyboard-key.shift-key-uppercase:checked, .keyboard-key.shift-key-uppercase:active, .keyboard-key.hide-key:checked, .keyboard-key.hide-key:active, .keyboard-key.layout-key:checked, .keyboard-key.layout-key:active { color: rgba(255, 255, 255, 0.8); background-color: #323232; } .keyboard-key.enter-key { background-color: #0046DB; background-image: url("assets/key-enter.svg"); } .keyboard-key.enter-key:focus, .keyboard-key.enter-key:hover { color: rgba(255, 255, 255, 0.85); background-color: #004ef5; } .keyboard-key.enter-key:checked, .keyboard-key.enter-key:active { color: rgba(255, 255, 255, 0.85); background-color: #0036a8; } .keyboard-key.shift-key-lowercase { background-image: url("assets/key-shift.svg"); } .keyboard-key.shift-key-uppercase { background-image: url("assets/key-shift-uppercase.svg"); } .keyboard-key.shift-key-uppercase:latched { background-image: url("assets/key-shift-latched-uppercase.svg"); } .keyboard-key.hide-key { background-image: url("assets/key-hide.svg"); } .keyboard-key.layout-key { background-image: url("assets/key-layout.svg"); } .keyboard-subkeys { color: inherit; -arrow-border-radius: 8px; -arrow-background-color: rgba(0, 0, 0, 0.45); -arrow-border-width: 0; -arrow-border-color: transparent; -arrow-base: 20px; -arrow-rise: 10px; -boxpointer-gap: 5px; box-shadow: 0 3px 3px rgba(0, 0, 0, 0.24), 0 3px 3px rgba(0, 0, 0, 0.345); } .candidate-popup-content { padding: 8px; spacing: 0; } .candidate-index { padding: 0 4px 0 0; color: rgba(255, 255, 255, 0.5); } .candidate-box:selected .candidate-index { color: rgba(255, 255, 255, 0.5); } .candidate-box { transition-duration: 0ms; min-height: 28px; padding: 0 8px; border-radius: 8px; } .candidate-box:hover { background-color: rgba(255, 255, 255, 0.06); color: rgba(255, 255, 255, 0.9); } .candidate-box:active { background-color: rgba(255, 255, 255, 0.1); color: rgba(255, 255, 255, 0.9); } .candidate-box:selected { background-color: #0046DB; color: rgba(255, 255, 255, 0.85); } .candidate-page-button-box { height: 28px; } .vertical .candidate-page-button-box { padding-top: 0; } .horizontal .candidate-page-button-box { padding-left: 0; } .candidate-page-button { min-width: 28px; min-height: 28px; padding: 0; } .candidate-page-button-previous { border-radius: 8px; border-right-width: 0; } .candidate-page-button-next { border-radius: 8px; } .candidate-page-button-icon { icon-size: 1.23077em; } /* Auth Dialogs & Screen Shield */ .framed-user-icon { background-size: contain; border: none; color: rgba(255, 255, 255, 0.85); border-radius: 8px; } .framed-user-icon:hover { border-color: rgba(255, 255, 255, 0.85); color: rgba(255, 255, 255, 0.85); } .login-dialog-banner-view { padding-top: 24px; max-width: 23em; } .login-dialog { border: none; background-color: transparent; } .login-dialog StEntry { color: rgba(255, 255, 255, 0.85); selection-background-color: rgba(255, 255, 255, 0.3); selected-color: rgba(255, 255, 255, 0.85); background-color: #212121; border-radius: 5px; border: 1px solid rgba(255, 255, 255, 0.12); box-shadow: none; } .login-dialog StEntry:focus { border: 1px solid #296dff; box-shadow: 0 0 0 2px #296dff; } .login-dialog StEntry:insensitive { color: rgba(255, 255, 255, 0.5); border: 1px solid rgba(255, 255, 255, 0.5); color: rgba(255, 255, 255, 0.5); } .login-dialog .modal-dialog-button-box { spacing: 3px; } .login-dialog .modal-dialog-button { padding: 0 16px; color: rgba(255, 255, 255, 0.7); background-color: transparent; border-color: transparent; box-shadow: 0 0 transparent; text-shadow: none; icon-shadow: none; } .login-dialog .modal-dialog-button:hover, .login-dialog .modal-dialog-button:focus { color: rgba(255, 255, 255, 0.85); background-color: rgba(255, 255, 255, 0.15); border-color: transparent; box-shadow: 0 0 transparent; text-shadow: none; icon-shadow: none; } .login-dialog .modal-dialog-button:active { color: rgba(255, 255, 255, 0.85); background-color: rgba(255, 255, 255, 0.3); border-color: transparent; box-shadow: 0 0 transparent; text-shadow: none; icon-shadow: none; } .login-dialog .modal-dialog-button:insensitive { color: rgba(255, 255, 255, 0.3); background-color: transparent; border-color: transparent; box-shadow: 0 0 transparent; text-shadow: none; icon-shadow: none; } .login-dialog .modal-dialog-button:default { color: rgba(255, 255, 255, 0.85); background-color: #0062FF; border-color: transparent; box-shadow: 0 1px 1.5px rgba(0, 0, 0, 0.12), 0 1px 1px rgba(0, 0, 0, 0.24); text-shadow: none; icon-shadow: none; } .login-dialog .modal-dialog-button:default:hover, .login-dialog .modal-dialog-button:default:focus { color: rgba(255, 255, 255, 0.85); background-color: #0062FF; border-color: transparent; box-shadow: 0 3px 3px rgba(0, 0, 0, 0.24), 0 3px 3px rgba(0, 0, 0, 0.345); text-shadow: none; icon-shadow: none; } .login-dialog .modal-dialog-button:default:active { color: rgba(255, 255, 255, 0.85); background-color: rgba(61, 136, 255, 0.955); border-color: transparent; box-shadow: 0 3px 3px rgba(0, 0, 0, 0.24), 0 3px 3px rgba(0, 0, 0, 0.345); text-shadow: none; icon-shadow: none; } .login-dialog .modal-dialog-button:default:insensitive { color: rgba(255, 255, 255, 0.5); background-color: rgba(255, 255, 255, 0.15); border-color: transparent; box-shadow: 0 0 transparent; text-shadow: none; icon-shadow: none; } .login-dialog-logo-bin { padding: 24px 0px; } .login-dialog-banner { color: rgba(255, 255, 255, 0.7); } .login-dialog-button-box { spacing: 5px; } .login-dialog-message-warning { color: #FF6D00; } .login-dialog-message-hint { padding-top: 0; padding-bottom: 20px; } .login-dialog-user-selection-box { padding: 100px 0px; } .login-dialog-not-listed-label { padding-left: 2px; } .login-dialog-not-listed-button:focus .login-dialog-not-listed-label, .login-dialog-not-listed-button:hover .login-dialog-not-listed-label { color: rgba(255, 255, 255, 0.85); } .login-dialog-not-listed-label { font-size: 1em; font-weight: bold; color: rgba(255, 255, 255, 0.7); padding-top: 1em; } .login-dialog-not-listed-label:hover { color: rgba(255, 255, 255, 0.85); } .login-dialog-not-listed-label:focus { background-color: rgba(255, 255, 255, 0.15); } .login-dialog-user-list-view { -st-vfade-offset: 1em; } .login-dialog-user-list { spacing: 12px; padding: .2em; width: 23em; } .login-dialog-user-list:expanded .login-dialog-user-list-item:selected { background-color: rgba(255, 255, 255, 0.15); color: rgba(255, 255, 255, 0.85); } .login-dialog-user-list:expanded .login-dialog-user-list-item:hover { background-color: rgba(255, 255, 255, 0.15); color: rgba(255, 255, 255, 0.85); } .login-dialog-user-list:expanded .login-dialog-user-list-item:active { background-color: rgba(255, 255, 255, 0.3); color: rgba(255, 255, 255, 0.85); } .login-dialog-user-list:expanded .login-dialog-user-list-item:logged-in { border-right: 2px solid rgba(255, 255, 255, 0.85); } .login-dialog-user-list-item { border-radius: 8px; padding: 4px 4px 0; color: rgba(255, 255, 255, 0.7); } .login-dialog-user-list-item:ltr { padding-right: 1em; } .login-dialog-user-list-item:rtl { padding-left: 1em; } .login-dialog-user-list-item:hover { background-color: rgba(255, 255, 255, 0.15); color: rgba(255, 255, 255, 0.85); } .login-dialog-user-list-item:active { background-color: rgba(255, 255, 255, 0.3); color: rgba(255, 255, 255, 0.85); } .login-dialog-user-list-item .login-dialog-timed-login-indicator { height: 2px; margin: 2px 0 0 0; background-color: rgba(255, 255, 255, 0.85); } .login-dialog-user-list-item:focus .login-dialog-timed-login-indicator { background-color: rgba(255, 255, 255, 0.85); } .login-dialog-username, .user-widget-label { color: rgba(255, 255, 255, 0.85); font-size: 15pt; font-weight: 500; text-align: left; padding-left: 15px; } .user-widget-label:ltr { padding-left: 18px; } .user-widget-label:rtl { padding-right: 18px; } .login-dialog-prompt-layout { padding-top: 24px; padding-bottom: 12px; spacing: 8px; width: 23em; } .login-dialog-prompt-label { color: rgba(255, 255, 255, 0.5); font-size: 1em; padding-top: 1em; } .login-dialog-session-list-button StIcon { icon-size: 1.25em; } .login-dialog-session-list-button { color: rgba(255, 255, 255, 0.7); } .login-dialog-session-list-button:hover, .login-dialog-session-list-button:focus { color: rgba(255, 255, 255, 0.85); } .login-dialog-session-list-button:active { color: rgba(255, 255, 255, 0.85); } .screen-shield-arrows { padding-bottom: 3em; } .screen-shield-arrows Gjs_Arrow { color: white; width: 80px; height: 48px; -arrow-thickness: 12px; -arrow-shadow: 0 1px 1.5px rgba(0, 0, 0, 0.12), 0 1px 1px rgba(0, 0, 0, 0.24); } .screen-shield-clock { color: white; text-shadow: 0 1px 1.5px rgba(0, 0, 0, 0.12), 0 1px 1px rgba(0, 0, 0, 0.24); font-weight: normal; text-align: center; padding-bottom: 1.5em; } .screen-shield-clock-time { font-size: 112px; font-weight: 300; text-shadow: 0 1px 1.5px rgba(0, 0, 0, 0.12), 0 1px 1px rgba(0, 0, 0, 0.24); } .screen-shield-clock-date { font-size: 45px; font-weight: 400; } .screen-shield-notifications-container { spacing: 6px; width: 30em; background-color: transparent; max-height: 500px; } .screen-shield-notifications-container .summary-notification-stack-scrollview { padding-top: 0; padding-bottom: 0; } .screen-shield-notifications-container .notification, .screen-shield-notifications-container .screen-shield-notification-source { padding: 8px; border: none; background-color: rgba(0, 0, 0, 0.3); color: rgba(255, 255, 255, 0.85); border-radius: 8px; } .screen-shield-notifications-container .notification { margin-right: 16px; } .screen-shield-notification-label { min-height: 18px; padding: 2px 0px 0px 16px; font-weight: bold; } .screen-shield-notification-count-text { min-height: 18px; padding: 2px 0px 0px 16px; color: rgba(255, 255, 255, 0.7); } #panel.lock-screen { background-color: rgba(0, 0, 0, 0.3); } .screen-shield-background { background: black; box-shadow: 0 19px 19px rgba(0, 0, 0, 0.6), 0 15px 6px rgba(0, 0, 0, 0.44); } #lockDialogGroup { background: #555555 url("assets/noise-texture.svg"); background-size: cover; } #LookingGlassDialog { background-color: #242424; spacing: 4px; padding: 0; border: none; border-radius: 8px; box-shadow: 0 14px 14px rgba(0, 0, 0, 0.5), 0 10px 5px rgba(0, 0, 0, 0.44); } #LookingGlassDialog > #Toolbar { padding: 0 8px; border: none; border-radius: 0; background-color: rgba(36, 36, 36, 0.01); box-shadow: inset 0 -1px 0 rgba(255, 255, 255, 0.12); } #LookingGlassDialog .labels { spacing: 0; } #LookingGlassDialog .notebook-tab { -natural-hpadding: 12px; -minimum-hpadding: 6px; font-weight: bold; color: rgba(255, 255, 255, 0.5); transition-duration: 150ms; padding-left: 16px; padding-right: 16px; min-height: 32px; padding: 0 32px; } #LookingGlassDialog .notebook-tab:hover { box-shadow: inset 0 -2px 0px rgba(255, 255, 255, 0.1); color: rgba(255, 255, 255, 0.9); text-shadow: none; } #LookingGlassDialog .notebook-tab:selected { border-bottom-width: 0; border-color: transparent; background-color: rgba(36, 36, 36, 0.01); box-shadow: inset 0 -2px 0px rgba(255, 255, 255, 0.85); color: rgba(255, 255, 255, 0.9); text-shadow: none; } #LookingGlassDialog StBoxLayout#EvalBox { padding: 4px; spacing: 4px; } #LookingGlassDialog StBoxLayout#ResultsArea { spacing: 4px; } .lg-dialog StEntry { selection-background-color: #0046DB; selected-color: rgba(255, 255, 255, 0.85); } .lg-dialog .shell-link { color: #0046DB; } .lg-dialog .shell-link:hover { color: #0046DB; } .lg-completions-text { font-size: 1em; font-style: italic; } .lg-obj-inspector-title { spacing: 4px; } .lg-obj-inspector-button { min-height: 32px; padding: 0 16px; border: none; border-radius: 8px; font-size: 9.75pt; font-weight: 500; color: rgba(255, 255, 255, 0.7); background-color: transparent; border-color: transparent; box-shadow: 0 0 transparent; text-shadow: none; icon-shadow: none; } .lg-obj-inspector-button:hover { color: rgba(255, 255, 255, 0.9); background-color: rgba(255, 255, 255, 0.06); border-color: transparent; box-shadow: 0 0 transparent; text-shadow: none; icon-shadow: none; } .lg-obj-inspector-button:active { color: rgba(255, 255, 255, 0.9); background-color: rgba(255, 255, 255, 0.1); border-color: transparent; box-shadow: 0 0 transparent; text-shadow: none; icon-shadow: none; } .lg-obj-inspector-button:insensitive { color: rgba(255, 255, 255, 0.3); background-color: transparent; border-color: transparent; box-shadow: 0 0 transparent; text-shadow: none; icon-shadow: none; } .lg-obj-inspector-button:focus { color: rgba(255, 255, 255, 0.9); text-shadow: none; icon-shadow: none; box-shadow: 0 0 transparent; } .lg-obj-inspector-button:hover { border: none; } #lookingGlassExtensions { padding: 4px; } .lg-extensions-list { padding: 4px; spacing: 6px; } .lg-extension { border: none; border-radius: 8px; padding: 4px; } .lg-extension-name { font-size: 18pt; font-weight: 400; } .lg-extension-meta { spacing: 6px; } #LookingGlassPropertyInspector { background: #242424; border: none; border-radius: 8px; padding: 6px; box-shadow: 0 14px 14px rgba(0, 0, 0, 0.5), 0 10px 5px rgba(0, 0, 0, 0.44); } /* Dash to Dock */ #dashtodockContainer #dash { background-color: rgba(0, 0, 0, 0.6); } #dashtodockContainer:overview #dash { background-color: rgba(255, 255, 255, 0.13); } #dashtodockContainer.extended:overview #dash { background-color: transparent; } #dashtodockContainer.left #dash, #dashtodockContainer.right #dash { padding: 3px 0; } #dashtodockContainer.top #dash, #dashtodockContainer.bottom #dash { padding: 0 3px; } #dashtodockContainer.extended #dash { padding: 0; border-radius: 0; } #dashtodockContainer.left .dash-item-container > StWidget, #dashtodockContainer.right .dash-item-container > StWidget, #dashtodockContainer.extended.left .dash-item-container > StWidget, #dashtodockContainer.extended.right .dash-item-container > StWidget { padding: 3px 6px; } #dashtodockContainer.extended.left .dash-item-container:first-child > StWidget, #dashtodockContainer.extended.right .dash-item-container:first-child > StWidget { padding: 6px 6px 3px 6px; } #dashtodockContainer.extended.left .dash-item-container:last-child > StWidget, #dashtodockContainer.extended.right .dash-item-container:last-child > StWidget { padding: 3px 6px 6px 6px; } #dashtodockContainer.top .dash-item-container > StWidget, #dashtodockContainer.bottom .dash-item-container > StWidget, #dashtodockContainer.extended.top .dash-item-container > StWidget, #dashtodockContainer.extended.bottom .dash-item-container > StWidget { padding: 6px 3px; } #dashtodockContainer.extended.top .dash-item-container:first-child > StWidget, #dashtodockContainer.extended.bottom .dash-item-container:first-child > StWidget { padding: 6px 3px 6px 6px; } #dashtodockContainer.extended.top .dash-item-container:last-child > StWidget, #dashtodockContainer.extended.bottom .dash-item-container:last-child > StWidget { padding: 6px 6px 6px 3px; } #dashtodockContainer .app-well-app-running-dot { background-color: transparent; } #dashtodockContainer .dash-item-container > StWidget { background-size: cover; } #dashtodockContainer.left .dash-item-container > StWidget.running1 { background-image: url("assets/dash/left-running1.svg"); } #dashtodockContainer.left .dash-item-container > StWidget.running1.focused { background-image: url("assets/dash/left-running1-focused.svg"); } #dashtodockContainer.left .dash-item-container > StWidget.running2 { background-image: url("assets/dash/left-running2.svg"); } #dashtodockContainer.left .dash-item-container > StWidget.running2.focused { background-image: url("assets/dash/left-running2-focused.svg"); } #dashtodockContainer.left .dash-item-container > StWidget.running3 { background-image: url("assets/dash/left-running3.svg"); } #dashtodockContainer.left .dash-item-container > StWidget.running3.focused { background-image: url("assets/dash/left-running3-focused.svg"); } #dashtodockContainer.left .dash-item-container > StWidget.running4 { background-image: url("assets/dash/left-running4.svg"); } #dashtodockContainer.left .dash-item-container > StWidget.running4.focused { background-image: url("assets/dash/left-running4-focused.svg"); } #dashtodockContainer.right .dash-item-container > StWidget.running1 { background-image: url("assets/dash/right-running1.svg"); } #dashtodockContainer.right .dash-item-container > StWidget.running1.focused { background-image: url("assets/dash/right-running1-focused.svg"); } #dashtodockContainer.right .dash-item-container > StWidget.running2 { background-image: url("assets/dash/right-running2.svg"); } #dashtodockContainer.right .dash-item-container > StWidget.running2.focused { background-image: url("assets/dash/right-running2-focused.svg"); } #dashtodockContainer.right .dash-item-container > StWidget.running3 { background-image: url("assets/dash/right-running3.svg"); } #dashtodockContainer.right .dash-item-container > StWidget.running3.focused { background-image: url("assets/dash/right-running3-focused.svg"); } #dashtodockContainer.right .dash-item-container > StWidget.running4 { background-image: url("assets/dash/right-running4.svg"); } #dashtodockContainer.right .dash-item-container > StWidget.running4.focused { background-image: url("assets/dash/right-running4-focused.svg"); } #dashtodockContainer.top .dash-item-container > StWidget.running1 { background-image: url("assets/dash/top-running1.svg"); } #dashtodockContainer.top .dash-item-container > StWidget.running1.focused { background-image: url("assets/dash/top-running1-focused.svg"); } #dashtodockContainer.top .dash-item-container > StWidget.running2 { background-image: url("assets/dash/top-running2.svg"); } #dashtodockContainer.top .dash-item-container > StWidget.running2.focused { background-image: url("assets/dash/top-running2-focused.svg"); } #dashtodockContainer.top .dash-item-container > StWidget.running3 { background-image: url("assets/dash/top-running3.svg"); } #dashtodockContainer.top .dash-item-container > StWidget.running3.focused { background-image: url("assets/dash/top-running3-focused.svg"); } #dashtodockContainer.top .dash-item-container > StWidget.running4 { background-image: url("assets/dash/top-running4.svg"); } #dashtodockContainer.top .dash-item-container > StWidget.running4.focused { background-image: url("assets/dash/top-running4-focused.svg"); } #dashtodockContainer.bottom .dash-item-container > StWidget.running1 { background-image: url("assets/dash/bottom-running1.svg"); } #dashtodockContainer.bottom .dash-item-container > StWidget.running1.focused { background-image: url("assets/dash/bottom-running1-focused.svg"); } #dashtodockContainer.bottom .dash-item-container > StWidget.running2 { background-image: url("assets/dash/bottom-running2.svg"); } #dashtodockContainer.bottom .dash-item-container > StWidget.running2.focused { background-image: url("assets/dash/bottom-running2-focused.svg"); } #dashtodockContainer.bottom .dash-item-container > StWidget.running3 { background-image: url("assets/dash/bottom-running3.svg"); } #dashtodockContainer.bottom .dash-item-container > StWidget.running3.focused { background-image: url("assets/dash/bottom-running3-focused.svg"); } #dashtodockContainer.bottom .dash-item-container > StWidget.running4 { background-image: url("assets/dash/bottom-running4.svg"); } #dashtodockContainer.bottom .dash-item-container > StWidget.running4.focused { background-image: url("assets/dash/bottom-running4-focused.svg"); } /* Simple Dock */ #dash:desktop { background-color: rgba(0, 0, 0, 0.6); } /* GPaste */ .popup-menu .search-entry { color: rgba(255, 255, 255, 0.9); selection-background-color: #0046DB; selected-color: rgba(255, 255, 255, 0.85); background-color: #212121; border-radius: 5px; border: 1px solid rgba(255, 255, 255, 0.12); box-shadow: none; } .popup-menu .search-entry:focus { border: 1px solid #296dff; box-shadow: 0 0 0 2px #296dff; color: rgba(255, 255, 255, 0.9); } .popup-menu .search-entry .search-entry-icon { color: rgba(255, 255, 255, 0.5); } .popup-menu .search-entry:hover .search-entry-icon, .popup-menu .search-entry:focus .search-entry-icon { color: rgba(255, 255, 255, 0.9); }]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FLinux%2FMacterial%2Fgnome-shell%2Fpad-osd%2F</url>
    <content type="text"><![CDATA[.Leader { stroke-width: .5 !important; stroke: #535353; fill: none !important; } .Button { stroke-width: .25; stroke: #ededed; fill: #ededed; } .Ring { stroke-width: .5 !important; stroke: #535353 !important; fill: none !important; } .Label { stroke: none !important; stroke-width: .1 !important; font-size: .1 !important; fill: transparent !important; } .TouchStrip, .TouchRing { stroke-width: .1 !important; stroke: #ededed !important; fill: #535353 !important; }]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FLinux%2FMacterial%2FREADME%2F</url>
    <content type="text"><![CDATA[macterialA mac inspired Gtk+ theme based on Material design Visit to download!https://gnome-look.org/p/1248255/]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%2F4.JSP%2F2.JSP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE%2F2.%E6%96%B0%E7%89%B9%E6%80%A7%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%2F10.ThymeLeaf%2FThymeLeaf%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[基本表达式 ${...} ：变量表达式。 *{...} ：选择表达式。 #{...} ：消息（i18n）表达式。 消息表达式允许我们从外部源（.properties文件）检索特定于语言环境的消息，通过键引用它们应用一组参数。 @{...} ：链接（URL）表达式。 ~{...} ：片段表达式。 12345678&lt;!--变量表达式--&gt;&lt;span th:text="$&#123;book.author.name&#125;"&gt;&lt;!--选择表达式 将在先前选择的对象上执行--&gt;&lt;div th:object="$&#123;book&#125;"&gt; ... &lt;span th:text="*&#123;title&#125;"&gt;...&lt;/span&gt; ...&lt;/div&gt; 基本属性12345&lt;p th:text="#&#123;msg.welcome&#125;"&gt;Welcome everyone!&lt;/p&gt;&lt;li th:each="book : $&#123;books&#125;" th:text="$&#123;book.title&#125;"&gt;En las Orillas del Sar&lt;/li&gt;&lt;form th:action="@&#123;/createOrder&#125;"&gt;&lt;input type="button" th:value="#&#123;form.submit&#125;" /&gt;&lt;a th:href="@&#123;/admin/users&#125;"&gt; Thymeleaf读取SpringMVC数据Model设置数据12345@RequestMapping(value = "message", method = RequestMethod.GET)public String messages(Model model) &#123; model.addAttribute("messages", messageRepository.findAll()); return "message/list";&#125; 123456@RequestMapping(value = "message", method = RequestMethod.GET)public ModelAndView messages() &#123; ModelAndView mav = new ModelAndView("message/list"); mav.addObject("messages", messageRepository.findAll()); return mav;&#125; 1234@ModelAttribute("messages")public List&lt;Message&gt; messages() &#123; return messageRepository.findAll();&#125; 读取数据12345&lt;tr th:each="message : $&#123;messages&#125;"&gt; &lt;td th:text="$&#123;message.id&#125;"&gt;1&lt;/td&gt; &lt;td&gt;&lt;a href="#" th:text="$&#123;message.title&#125;"&gt;Title ...&lt;/a&gt;&lt;/td&gt; &lt;td th:text="$&#123;message.text&#125;"&gt;Text ...&lt;/td&gt;&lt;/tr&gt; 请求参数1234567@Controllerpublic class SomeController &#123; @RequestMapping("/") public String redirect() &#123; return "redirect:/query?q=Thymeleaf+Is+Great!"; &#125;&#125; 123&lt;!--需要用param修饰--&gt; &lt;p th:text="$&#123;param.q&#125;"&gt;Test&lt;/p&gt;&lt;!--如果参数q不存在，空字符串将显示在上面的段落中，否则q将显示值--&gt; 由于参数可以是多值的（例如https://example.com/query?q=Thymeleaf%20Is%20Great !&amp;q=Really%3F），您可以使用括号语法访问它们： 1&lt;p th:text="$&#123;param.q[0] + ' ' + param.q[1]&#125;" th:unless="$&#123;param.q == null&#125;"&gt;Test&lt;/p&gt; session12345@RequestMapping(&#123;"/"&#125;)String index(HttpSession session) &#123; session.setAttribute("mySessionAttribute", "someValue"); return "index";&#125; 1&lt;p th:text="$&#123;session.mySessionAttribute&#125;" th:unless="$&#123;session == null&#125;"&gt;[...]&lt;/p&gt; ServletContext属性ServletContext属性在请求和会话之间共享。 要在Thymeleaf中访问ServletContext属性，您可以使用#servletContext.前缀： 1234567891011&lt;table&gt; &lt;tr&gt; &lt;td&gt;My context attribute&lt;/td&gt; &lt;!-- Retrieves the ServletContext attribute 'myContextAttribute' --&gt; &lt;td th:text="$&#123;#servletContext.getAttribute('myContextAttribute')&#125;"&gt;42&lt;/td&gt; &lt;/tr&gt; &lt;tr th:each="attr : $&#123;#servletContext.getAttributeNames()&#125;"&gt; &lt;td th:text="$&#123;attr&#125;"&gt;javax.servlet.context.tempdir&lt;/td&gt; &lt;td th:text="$&#123;#servletContext.getAttribute(attr)&#125;"&gt;/tmp&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; SpringBeanThymeleaf允许使用@beanName语法访问在Spring Application Context中注册的bean ，例如： 1234567891011@Configurationpublic class MyConfiguration &#123; @Bean(name = "urlService") public UrlService urlService() &#123; return () -&gt; "domain.com/myapp"; &#125;&#125;public interface UrlService &#123; String getApplicationUrl();&#125; 1&lt;div th:text="$&#123;@urlService.getApplicationUrl()&#125;"&gt;...&lt;/div&gt;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%BA%93%2F%E5%B8%B8%E7%94%A8%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[什么是加密算法？ 哈希算法 MD5 什么是MD5算法？ SHA MAC 对称加密算法 DES 3DES AES(目前流行) 非对称加密算法 RSA Base64Java实现Base641234567891011import org.apache.commons.codec.digest.DigestUtils;public static void main(String[] args) &#123; String msg = "hello world ! my name is hdr!"; // 加密 byte[] encodeBytes = Base64.encodeBase64(msg.getBytes()); System.out.println("加密后：" + new String(encodeBytes)); // 解密 byte[] decodeBytes = Base64.decodeBase64(encodeBytes); System.out.println("解密后：" + new String(decodeBytes));&#125; 哈希算法慕课网教程 Java实现MD5MD：MessageDigest 123456789import org.apache.commons.codec.digest.DigestUtils;public class MD5 &#123; public static void main(String[] args)&#123; String msg = "hello world ! my name is hdr!"; String digest = DigestUtils.md5Hex(msg); System.out.println(digest); &#125;&#125; MD5应用对密码进行MD5处理后再存储到数据库上。 Java实现SHASHA：security hash algorithm SHA-1（SHA-160）、SHA-2（SHA-224、SHA-256、SHA-384、SHA-512） 12345public static void main(String[] args)&#123; String msg = "hello world ! my name is hdr!"; String shaDigest = DigestUtils.sha1Hex(msg); System.out.println(shaDigest.length());&#125; 关键是 apache commons codec包 SHA应用发送方：发布信息摘要算法、对内容进行摘要处理、发布摘要信息及内容。 接收方：根据摘要算法进行信息鉴别 JAVA实现MACMAC融合MD、SHA 对称加密算法慕课网教程 Java实现DES现在很少用了 Java实现3DESJava实现AES目前使用最多 Java实现PBE]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F%E7%BB%93%E6%9E%84%E5%9E%8B%2F1.%E9%80%82%E9%85%8D%E5%99%A8%2F</url>
    <content type="text"><![CDATA[适配器模式问题：客户端只能调用系统A，然后系统A需要用系统B的功能，但是系统A又无法直接调用系统B的功能。 结局：定义一个适配器，它继承系统A，然后实现系统B的接口，最后客户端调用适配器就能使用系统B的功能了。 适配器模式包含以下三个角色： 1：Target(目标抽象类)：目标抽象类定义客户所需的接口，可以是一个抽象类或接口，也可以是具体类。在类适配器中，由于语言不支持多重继承，所以它只能是接口。 2：Adapter(适配器类)：它可以调用另一个接口，作为一个转换器，对Adaptee和Target进行适配。它是适配器模式的核心。 3：Adaptee(适配者类)：适配者即被适配的角色，它定义了一个已经存在的接口，这个接口需要适配，适配者类包好了客户希望的业务方法。 适配器模式分类类适配器模式原理：通过继承来实现适配器功能。 当我们要访问的接口A中没有我们想要的方法 ，却在另一个接口B中发现了合适的方法，我们又不能改变访问接口A，在这种情况下，我们可以定义一个适配器p来进行中转，这个适配器p要实现我们访问的接口A，这样我们就能继续访问当前接口A中的方法（虽然它目前不是我们的菜），然后再继承接口B的实现类BB，这样我们可以在适配器P中访问接口B的方法了，这时我们在适配器P中的接口A方法中直接引用BB中的合适方法，这样就完成了一个简单的类适配器。 123public interface Ps2 &#123; void isPs2();&#125; 123public interface Usb &#123; void isUsb();&#125; 123456public class Usber implements Usb &#123; @Override public void isUsb() &#123; System.out.println("USB口"); &#125;&#125; 123456public class Adapter extends Usber implements Ps2 &#123; @Override public void isPs2() &#123; isUsb(); &#125;&#125; 对象适配器模式原理：通过组合来实现适配器功能 接口适配器模式当存在这样一个接口，其中定义了N多的方法，而我们现在却只想使用其中的一个到几个方法，如果我们直接实现接口，那么我们要对所有的方法进行实现，哪怕我们仅仅是对不需要的方法进行置空（只写一对大括号，不做具体方法实现）也会导致这个类变得臃肿，调用也不方便，这时我们可以使用一个抽象类作为中间件，即适配器，用这个抽象类实现接口，而在抽象类中所有的方法都进行置空，那么我们在创建抽象类的继承类，而且重写我们需要使用的那几个方法即可。 12345678public interface A &#123; void a(); void b(); void c(); void d(); void e(); void f();&#125; 12345678public abstract class Adapter implements A &#123; public void a()&#123;&#125; public void b()&#123;&#125; public void c()&#123;&#125; public void d()&#123;&#125; public void e()&#123;&#125; public void f()&#123;&#125;&#125; 12345678public class Ashili extends Adapter &#123; public void a()&#123; System.out.println("实现A方法被调用"); &#125; public void d()&#123; System.out.println("实现d方法被调用"); &#125;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F%E6%9E%84%E9%80%A0%E5%9E%8B%2F6.%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[创建者模式创建者模式通常包括如下几种角色： 1.建造者角色（Builder） 对复杂对象的创建过程加以抽象，给出一个抽象接口，以规范产品对象的各个组成部分的建造。这个接口规定了要实现复杂对象的哪个部分的创建，但并不涉及具体对象不见的创建。 2.具体创建者角色（ConcreateBuilder） 实现Builder接口，针对不同的业务逻辑，具体化复杂对象的各个部分的创建。在建造过程完成后，提供产品的实例。 3.指导者（Director） 调用具体建造者来创建复杂对象的各个部分，在指导者中不设计具体产品的信息，只负责保证对象各部分完整创建或者按某种顺序创建。 4.产品（Product） 要创建的复杂对象，一般来说包含多个部分。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F%E6%9E%84%E9%80%A0%E5%9E%8B%2F4.%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[抽象工厂模式有些零件需要委派特定的厂商生产，然而有些零件其实是通用的，我们可以直接在同一个工厂里生成，这种类型的问题，我们就可以用抽象工厂模式来解决。 客户工厂（个人自创。。。。）：与客户交互的工厂。 简单工厂模式，客户工厂根据订单直接生成产品。 工厂方法模式，客户工厂根据订单，委派特定的工厂生成产品。 抽象工厂模式，客户工厂可以生产产品的某部分，另一些部分需要特定的工厂生产。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F%E7%BB%93%E6%9E%84%E5%9E%8B%2F2.%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[门面模式到蛋糕店买蛋糕，不需要知道蛋糕是怎么制作的，蛋糕房就是蛋糕的门面，屏蔽了制作蛋糕的细节。 门面模式实现了子模块与客户端之间的松耦合关系，客户端只需要调用系统提供的接口，而无需了解系统内部的运行。 例子没有使用门面模式12345public class Salary &#123; public double getSalary(String emp)&#123; return 200; &#125;&#125; 12345public class Holiday &#123; public double getHoliday(String emp)&#123; return 2; &#125;&#125; 12345public class Tax &#123; public double getTax(String emp)&#123; return 0; &#125;&#125; 12345678910public class Client &#123; public static void main(String[] args) &#123; Salary salary = new Salary(); Holiday holiday = new Holiday(); Tax tax = new Tax(); String emp = "张三"; double money = salary.getSalary(emp)*holiday.getHoliday(emp)/30-tax.getTax(emp); System.out.println(emp+"本月工资是："+money); &#125;&#125; 使用门面模式123public interface Computer &#123; double doSalary(String emp);&#125; 12345678910public class SalaryComputer implements Computer &#123; @Override public double doSalary(String emp) &#123; Salary salary = new Salary(); Holiday holiday = new Holiday(); Tax tax = new Tax(); return salary.getSalary(emp)*holiday.getHoliday(emp)/30-tax.getTax(emp); &#125;&#125; ##]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F6.%E4%B8%9A%E5%8A%A1%E5%B1%82%2FSpringBoot%2F%E5%85%A5%E9%97%A8%2FSpring%20Boot%2F</url>
    <content type="text"><![CDATA[四、Web开发1、简介使用SpringBoot； 1）、创建SpringBoot应用，选中我们需要的模块； 2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来 3）、自己编写业务代码； 自动配置原理？ 这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx 12xxxxAutoConfiguration：帮我们给容器中自动配置组件；xxxxProperties:配置类来封装配置文件的内容； 2、SpringBoot对静态资源的映射规则；123@ConfigurationProperties(prefix = "spring.resources", ignoreUnknownFields = false)public class ResourceProperties implements ResourceLoaderAware &#123; //可以设置和静态资源有关的参数，缓存时间等 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364WebMvcAuotConfiguration： @Override public void addResourceHandlers(ResourceHandlerRegistry registry) &#123; if (!this.resourceProperties.isAddMappings()) &#123; logger.debug("Default resource handling disabled"); return; &#125; Integer cachePeriod = this.resourceProperties.getCachePeriod(); if (!registry.hasMappingForPattern("/webjars/**")) &#123; customizeResourceHandlerRegistration( registry.addResourceHandler("/webjars/**") .addResourceLocations( "classpath:/META-INF/resources/webjars/") .setCachePeriod(cachePeriod)); &#125; String staticPathPattern = this.mvcProperties.getStaticPathPattern(); //静态资源文件夹映射 if (!registry.hasMappingForPattern(staticPathPattern)) &#123; customizeResourceHandlerRegistration( registry.addResourceHandler(staticPathPattern) .addResourceLocations( this.resourceProperties.getStaticLocations()) .setCachePeriod(cachePeriod)); &#125; &#125; //配置欢迎页映射 @Bean public WelcomePageHandlerMapping welcomePageHandlerMapping( ResourceProperties resourceProperties) &#123; return new WelcomePageHandlerMapping(resourceProperties.getWelcomePage(), this.mvcProperties.getStaticPathPattern()); &#125; //配置喜欢的图标 @Configuration @ConditionalOnProperty(value = "spring.mvc.favicon.enabled", matchIfMissing = true) public static class FaviconConfiguration &#123; private final ResourceProperties resourceProperties; public FaviconConfiguration(ResourceProperties resourceProperties) &#123; this.resourceProperties = resourceProperties; &#125; @Bean public SimpleUrlHandlerMapping faviconHandlerMapping() &#123; SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping(); mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + 1); //所有 **/favicon.ico mapping.setUrlMap(Collections.singletonMap("**/favicon.ico", faviconRequestHandler())); return mapping; &#125; @Bean public ResourceHttpRequestHandler faviconRequestHandler() &#123; ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler(); requestHandler .setLocations(this.resourceProperties.getFaviconLocations()); return requestHandler; &#125; &#125; ==1）、所有 /webjars/** ，都去 classpath:/META-INF/resources/webjars/ 找资源；== webjars：以jar包的方式引入静态资源； http://www.webjars.org/ localhost:8080/webjars/jquery/3.3.1/jquery.js 123456&lt;!--引入jquery-webjar--&gt;在访问的时候只需要写webjars下面资源的名称即可 &lt;dependency&gt; &lt;groupId&gt;org.webjars&lt;/groupId&gt; &lt;artifactId&gt;jquery&lt;/artifactId&gt; &lt;version&gt;3.3.1&lt;/version&gt; &lt;/dependency&gt; ==2）、”/**” 访问当前项目的任何资源，都去（静态资源的文件夹）找映射== 12345&quot;classpath:/META-INF/resources/&quot;, &quot;classpath:/resources/&quot;,&quot;classpath:/static/&quot;, &quot;classpath:/public/&quot; &quot;/&quot;：当前项目的根路径 localhost:8080/abc === 去静态资源文件夹里面找abc ==3）、欢迎页； 静态资源文件夹下的所有index.html页面；被”/**”映射；== localhost:8080/ 找index页面 ==4）、所有的 **/favicon.ico 都是在静态资源文件下找；== 3、模板引擎JSP、Velocity、Freemarker、Thymeleaf SpringBoot推荐的Thymeleaf； 语法更简单，功能更强大； 1、引入thymeleaf；123456789101112 &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt; 2.1.6 &lt;/dependency&gt;切换thymeleaf版本&lt;properties&gt; &lt;thymeleaf.version&gt;3.0.9.RELEASE&lt;/thymeleaf.version&gt; &lt;!-- 布局功能的支持程序 thymeleaf3主程序 layout2以上版本 --&gt; &lt;!-- thymeleaf2 layout1--&gt; &lt;thymeleaf-layout-dialect.version&gt;2.2.2&lt;/thymeleaf-layout-dialect.version&gt; &lt;/properties&gt; 2、Thymeleaf使用1234567891011@ConfigurationProperties(prefix = "spring.thymeleaf")public class ThymeleafProperties &#123; private static final Charset DEFAULT_ENCODING = Charset.forName("UTF-8"); private static final MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf("text/html"); public static final String DEFAULT_PREFIX = "classpath:/templates/"; public static final String DEFAULT_SUFFIX = ".html"; // 只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染； 使用： 1、导入thymeleaf的名称空间 1&lt;html lang="en" xmlns:th="http://www.thymeleaf.org"&gt; 2、使用thymeleaf语法； 123456789101112&lt;!DOCTYPE html&gt;&lt;html lang="en" xmlns:th="http://www.thymeleaf.org"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;成功！&lt;/h1&gt; &lt;!--th:text 将div里面的文本内容设置为 --&gt; &lt;div th:text="$&#123;hello&#125;"&gt;这是显示欢迎信息&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 3、语法规则1）、th:text；改变当前元素里面的文本内容； th：任意html属性；来替换原生属性的值 2）、表达式？ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869Simple expressions:（表达式语法） Variable Expressions: $&#123;...&#125;：获取变量值；OGNL； 1）、获取对象的属性、调用方法 2）、使用内置的基本对象： #ctx : the context object. #vars: the context variables. #locale : the context locale. #request : (only in Web Contexts) the HttpServletRequest object. #response : (only in Web Contexts) the HttpServletResponse object. #session : (only in Web Contexts) the HttpSession object. #servletContext : (only in Web Contexts) the ServletContext object. $&#123;session.foo&#125; 3）、内置的一些工具对象：#execInfo : information about the template being processed.#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #&#123;…&#125; syntax.#uris : methods for escaping parts of URLs/URIs#conversions : methods for executing the configured conversion service (if any).#dates : methods for java.util.Date objects: formatting, component extraction, etc.#calendars : analogous to #dates , but for java.util.Calendar objects.#numbers : methods for formatting numeric objects.#strings : methods for String objects: contains, startsWith, prepending/appending, etc.#objects : methods for objects in general.#bools : methods for boolean evaluation.#arrays : methods for arrays.#lists : methods for lists.#sets : methods for sets.#maps : methods for maps.#aggregates : methods for creating aggregates on arrays or collections.#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration). Selection Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样； 补充：配合 th:object=&quot;$&#123;session.user&#125;： &lt;div th:object=&quot;$&#123;session.user&#125;&quot;&gt; &lt;p&gt;Name: &lt;span th:text=&quot;*&#123;firstName&#125;&quot;&gt;Sebastian&lt;/span&gt;.&lt;/p&gt; &lt;p&gt;Surname: &lt;span th:text=&quot;*&#123;lastName&#125;&quot;&gt;Pepper&lt;/span&gt;.&lt;/p&gt; &lt;p&gt;Nationality: &lt;span th:text=&quot;*&#123;nationality&#125;&quot;&gt;Saturn&lt;/span&gt;.&lt;/p&gt; &lt;/div&gt; Message Expressions: #&#123;...&#125;：获取国际化内容 Link URL Expressions: @&#123;...&#125;：定义URL； @&#123;/order/process(execId=$&#123;execId&#125;,execType=&apos;FAST&apos;)&#125; Fragment Expressions: ~&#123;...&#125;：片段引用表达式 &lt;div th:insert=&quot;~&#123;commons :: main&#125;&quot;&gt;...&lt;/div&gt; Literals（字面量） Text literals: &apos;one text&apos; , &apos;Another one!&apos; ,… Number literals: 0 , 34 , 3.0 , 12.3 ,… Boolean literals: true , false Null literal: null Literal tokens: one , sometext , main ,…Text operations:（文本操作） String concatenation: + Literal substitutions: |The name is $&#123;name&#125;|Arithmetic operations:（数学运算） Binary operators: + , - , * , / , % Minus sign (unary operator): -Boolean operations:（布尔运算） Binary operators: and , or Boolean negation (unary operator): ! , notComparisons and equality:（比较运算） Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le ) Equality operators: == , != ( eq , ne )Conditional operators:条件运算（三元运算符） If-then: (if) ? (then) If-then-else: (if) ? (then) : (else) Default: (value) ?: (defaultvalue)Special tokens: No-Operation: _ 4、SpringMVC自动配置https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications 1. Spring MVC auto-configurationSpring Boot 自动配置好了SpringMVC 以下是SpringBoot对SpringMVC的默认配置:==（WebMvcAutoConfiguration）== Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans. 自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？）） ContentNegotiatingViewResolver：组合所有的视图解析器的； ==如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；== Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars Static index.html support. 静态首页访问 Custom Favicon support (see below). favicon.ico ​ 自动注册了 of Converter, GenericConverter, Formatter beans. Converter：转换器； public String hello(User user)：类型转换使用Converter Formatter 格式化器； 2017.12.17===Date； 12345@Bean@ConditionalOnProperty(prefix = "spring.mvc", name = "date-format")//在文件中配置日期格式化的规则public Formatter&lt;Date&gt; dateFormatter() &#123; return new DateFormatter(this.mvcProperties.getDateFormat());//日期格式化组件&#125; ==自己添加的格式化器转换器，我们只需要放在容器中即可== Support for HttpMessageConverters (see below). HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User—Json； HttpMessageConverters 是从容器中确定；获取所有的HttpMessageConverter； ==自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）== ​ Automatic registration of MessageCodesResolver (see below).定义错误代码生成规则 Automatic use of a ConfigurableWebBindingInitializer bean (see below). ==我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）== 12初始化WebDataBinder；请求数据=====JavaBean； org.springframework.boot.autoconfigure.web：web的所有自动场景； If you want to keep Spring Boot MVC features, and you just want to add additional MVC configuration (interceptors, formatters, view controllers etc.) you can add your own @Configuration class of type WebMvcConfigurerAdapter, but without @EnableWebMvc. If you wish to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter or ExceptionHandlerExceptionResolver you can declare a WebMvcRegistrationsAdapter instance providing such components. If you want to take complete control of Spring MVC, you can add your own @Configuration annotated with @EnableWebMvc. 2、扩展SpringMVC1234567&lt;mvc:view-controller path="/hello" view-name="success"/&gt;&lt;mvc:interceptors&gt; &lt;mvc:interceptor&gt; &lt;mvc:mapping path="/hello"/&gt; &lt;bean&gt;&lt;/bean&gt; &lt;/mvc:interceptor&gt;&lt;/mvc:interceptors&gt; ==编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc==; 既保留了所有的自动配置，也能用我们扩展的配置； 1234567891011//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能@Configurationpublic class MyMvcConfig extends WebMvcConfigurerAdapter &#123; @Override public void addViewControllers(ViewControllerRegistry registry) &#123; // super.addViewControllers(registry); //浏览器发送 /atguigu 请求来到 success registry.addViewController("/atguigu").setViewName("success"); &#125;&#125; 原理： 1）、WebMvcAutoConfiguration是SpringMVC的自动配置类 2）、在做其他自动配置时会导入；@Import(**EnableWebMvcConfiguration**.class) 123456789101112131415161718 @Configurationpublic static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration &#123; private final WebMvcConfigurerComposite configurers = new WebMvcConfigurerComposite(); //从容器中获取所有的WebMvcConfigurer @Autowired(required = false) public void setConfigurers(List&lt;WebMvcConfigurer&gt; configurers) &#123; if (!CollectionUtils.isEmpty(configurers)) &#123; this.configurers.addWebMvcConfigurers(configurers); //一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用； @Override // public void addViewControllers(ViewControllerRegistry registry) &#123; // for (WebMvcConfigurer delegate : this.delegates) &#123; // delegate.addViewControllers(registry); // &#125; &#125; &#125;&#125; 3）、容器中所有的WebMvcConfigurer都会一起起作用； 4）、我们的配置类也会被调用； 效果：SpringMVC的自动配置和我们的扩展配置都会起作用； 3、全面接管SpringMVC；SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了 我们需要在配置类中添加@EnableWebMvc即可； 123456789101112//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能@EnableWebMvc@Configurationpublic class MyMvcConfig extends WebMvcConfigurerAdapter &#123; @Override public void addViewControllers(ViewControllerRegistry registry) &#123; // super.addViewControllers(registry); //浏览器发送 /atguigu 请求来到 success registry.addViewController("/atguigu").setViewName("success"); &#125;&#125; 原理： 为什么@EnableWebMvc自动配置就失效了； 1）@EnableWebMvc的核心 12@Import(DelegatingWebMvcConfiguration.class)public @interface EnableWebMvc &#123; 2）、 12@Configurationpublic class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport &#123; 3）、 12345678910@Configuration@ConditionalOnWebApplication@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurerAdapter.class &#125;)//容器中没有这个组件的时候，这个自动配置类才生效@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, ValidationAutoConfiguration.class &#125;)public class WebMvcAutoConfiguration &#123; 4）、@EnableWebMvc将WebMvcConfigurationSupport组件导入进来； 5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能； 5、如何修改SpringBoot的默认配置模式： 1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来； 2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置 3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置 6、RestfulCRUD1）、默认访问首页1234567891011121314151617181920212223242526//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能//@EnableWebMvc 不要接管SpringMVC@Configurationpublic class MyMvcConfig extends WebMvcConfigurerAdapter &#123; @Override public void addViewControllers(ViewControllerRegistry registry) &#123; // super.addViewControllers(registry); //浏览器发送 /atguigu 请求来到 success registry.addViewController("/atguigu").setViewName("success"); &#125; //所有的WebMvcConfigurerAdapter组件都会一起起作用 @Bean //将组件注册在容器 public WebMvcConfigurerAdapter webMvcConfigurerAdapter()&#123; WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() &#123; @Override public void addViewControllers(ViewControllerRegistry registry) &#123; registry.addViewController("/").setViewName("login"); registry.addViewController("/index.html").setViewName("login"); &#125; &#125;; return adapter; &#125;&#125; 2）、国际化1）、编写国际化配置文件； 2）、使用ResourceBundleMessageSource管理国际化资源文件 3）、在页面使用fmt:message取出国际化内容 步骤： 1）、编写国际化配置文件，抽取页面需要显示的国际化消息 2）、SpringBoot自动配置好了管理国际化资源文件的组件； 12345678910111213141516171819202122232425262728@ConfigurationProperties(prefix = "spring.messages")public class MessageSourceAutoConfiguration &#123; /** * Comma-separated list of basenames (essentially a fully-qualified classpath * location), each following the ResourceBundle convention with relaxed support for * slash based locations. If it doesn't contain a package qualifier (such as * "org.mypackage"), it will be resolved from the classpath root. */ private String basename = "messages"; //我们的配置文件可以直接放在类路径下叫messages.properties； @Bean public MessageSource messageSource() &#123; ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource(); if (StringUtils.hasText(this.basename)) &#123; //设置国际化资源文件的基础名（去掉语言国家代码的） messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray( StringUtils.trimAllWhitespace(this.basename))); &#125; if (this.encoding != null) &#123; messageSource.setDefaultEncoding(this.encoding.name()); &#125; messageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale); messageSource.setCacheSeconds(this.cacheSeconds); messageSource.setAlwaysUseMessageFormat(this.alwaysUseMessageFormat); return messageSource; &#125; 3）、去页面获取国际化的值； 123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html lang="en" xmlns:th="http://www.thymeleaf.org"&gt; &lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"&gt; &lt;meta name="description" content=""&gt; &lt;meta name="author" content=""&gt; &lt;title&gt;Signin Template for Bootstrap&lt;/title&gt; &lt;!-- Bootstrap core CSS --&gt; &lt;link href="asserts/css/bootstrap.min.css" th:href="@&#123;/webjars/bootstrap/4.0.0/css/bootstrap.css&#125;" rel="stylesheet"&gt; &lt;!-- Custom styles for this template --&gt; &lt;link href="asserts/css/signin.css" th:href="@&#123;/asserts/css/signin.css&#125;" rel="stylesheet"&gt; &lt;/head&gt; &lt;body class="text-center"&gt; &lt;form class="form-signin" action="dashboard.html"&gt; &lt;img class="mb-4" th:src="@&#123;/asserts/img/bootstrap-solid.svg&#125;" src="asserts/img/bootstrap-solid.svg" alt="" width="72" height="72"&gt; &lt;h1 class="h3 mb-3 font-weight-normal" th:text="#&#123;login.tip&#125;"&gt;Please sign in&lt;/h1&gt; &lt;label class="sr-only" th:text="#&#123;login.username&#125;"&gt;Username&lt;/label&gt; &lt;input type="text" class="form-control" placeholder="Username" th:placeholder="#&#123;login.username&#125;" required="" autofocus=""&gt; &lt;label class="sr-only" th:text="#&#123;login.password&#125;"&gt;Password&lt;/label&gt; &lt;input type="password" class="form-control" placeholder="Password" th:placeholder="#&#123;login.password&#125;" required=""&gt; &lt;div class="checkbox mb-3"&gt; &lt;label&gt; &lt;input type="checkbox" value="remember-me"/&gt; [[#&#123;login.remember&#125;]] &lt;/label&gt; &lt;/div&gt; &lt;button class="btn btn-lg btn-primary btn-block" type="submit" th:text="#&#123;login.btn&#125;"&gt;Sign in&lt;/button&gt; &lt;p class="mt-5 mb-3 text-muted"&gt;© 2017-2018&lt;/p&gt; &lt;a class="btn btn-sm"&gt;中文&lt;/a&gt; &lt;a class="btn btn-sm"&gt;English&lt;/a&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 效果：根据浏览器语言设置的信息切换了国际化； 原理： 国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）； 12345678910111213 @Bean @ConditionalOnMissingBean @ConditionalOnProperty(prefix = "spring.mvc", name = "locale") public LocaleResolver localeResolver() &#123; if (this.mvcProperties .getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123; return new FixedLocaleResolver(this.mvcProperties.getLocale()); &#125; AcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver(); localeResolver.setDefaultLocale(this.mvcProperties.getLocale()); return localeResolver; &#125;默认的就是根据请求头带来的区域信息获取Locale进行国际化 4）、点击链接切换国际化 12345678910111213141516171819202122232425262728/** * 可以在连接上携带区域信息 */public class MyLocaleResolver implements LocaleResolver &#123; @Override public Locale resolveLocale(HttpServletRequest request) &#123; String l = request.getParameter("l"); Locale locale = Locale.getDefault(); if(!StringUtils.isEmpty(l))&#123; String[] split = l.split("_"); locale = new Locale(split[0],split[1]); &#125; return locale; &#125; @Override public void setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale) &#123; &#125;&#125; @Bean public LocaleResolver localeResolver()&#123; return new MyLocaleResolver(); &#125;&#125; 3）、登陆开发期间模板引擎页面修改以后，要实时生效 1）、禁用模板引擎的缓存 12# 禁用缓存spring.thymeleaf.cache=false 2）、页面修改完成以后ctrl+f9：重新编译； 登陆错误消息的显示 1&lt;p style="color: red" th:text="$&#123;msg&#125;" th:if="$&#123;not #strings.isEmpty(msg)&#125;"&gt;&lt;/p&gt; 4）、拦截器进行登陆检查拦截器 12345678910111213141516171819202122232425262728293031/** * 登陆检查， */public class LoginHandlerInterceptor implements HandlerInterceptor &#123; //目标方法执行之前 @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123; Object user = request.getSession().getAttribute("loginUser"); if(user == null)&#123; //未登陆，返回登陆页面 request.setAttribute("msg","没有权限请先登陆"); request.getRequestDispatcher("/index.html").forward(request,response); return false; &#125;else&#123; //已登陆，放行请求 return true; &#125; &#125; @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123; &#125; @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123; &#125;&#125; 注册拦截器 1234567891011121314151617181920212223//所有的WebMvcConfigurerAdapter组件都会一起起作用 @Bean //将组件注册在容器 public WebMvcConfigurerAdapter webMvcConfigurerAdapter()&#123; WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() &#123; @Override public void addViewControllers(ViewControllerRegistry registry) &#123; registry.addViewController("/").setViewName("login"); registry.addViewController("/index.html").setViewName("login"); registry.addViewController("/main.html").setViewName("dashboard"); &#125; //注册拦截器 @Override public void addInterceptors(InterceptorRegistry registry) &#123; //super.addInterceptors(registry); //静态资源； *.css , *.js //SpringBoot已经做好了静态资源映射 registry.addInterceptor(new LoginHandlerInterceptor()).addPathPatterns("/**") .excludePathPatterns("/index.html","/","/user/login"); &#125; &#125;; return adapter; &#125; 5）、CRUD-员工列表实验要求： 1）、RestfulCRUD：CRUD满足Rest风格； URI： /资源名称/资源标识 HTTP请求方式区分对资源CRUD操作 普通CRUD（uri来区分操作） RestfulCRUD 查询 getEmp emp—GET 添加 addEmp?xxx emp—POST 修改 updateEmp?id=xxx&amp;xxx=xx emp/{id}—PUT 删除 deleteEmp?id=1 emp/{id}—DELETE 2）、实验的请求架构; 实验功能 请求URI 请求方式 查询所有员工 emps GET 查询某个员工(来到修改页面) emp/1 GET 来到添加页面 emp GET 添加员工 emp POST 来到修改页面（查出员工进行信息回显） emp/1 GET 修改员工 emp PUT 删除员工 emp/1 DELETE 3）、员工列表： thymeleaf公共页面元素抽取12345678910111213141、抽取公共片段&lt;div th:fragment="copy"&gt;&amp;copy; 2011 The Good Thymes Virtual Grocery&lt;/div&gt;2、引入公共片段&lt;div th:insert="~&#123;footer :: copy&#125;"&gt;&lt;/div&gt;~&#123;templatename::selector&#125;：模板名::选择器~&#123;templatename::fragmentname&#125;:模板名::片段名3、默认效果：insert的公共片段在div标签中如果使用th:insert等属性进行引入，可以不用写~&#123;&#125;：行内写法可以加上：[[~&#123;&#125;]];[(~&#123;&#125;)]； 三种引入公共片段的th属性： th:insert：将公共片段整个插入到声明引入的元素中 th:replace：将声明引入的元素替换为公共片段 th:include：将被引入的片段的内容包含进这个标签中 1234567891011121314151617181920212223&lt;footer th:fragment="copy"&gt;&amp;copy; 2011 The Good Thymes Virtual Grocery&lt;/footer&gt;引入方式&lt;div th:insert="footer :: copy"&gt;&lt;/div&gt;&lt;div th:replace="footer :: copy"&gt;&lt;/div&gt;&lt;div th:include="footer :: copy"&gt;&lt;/div&gt;效果&lt;div&gt; &lt;footer&gt; &amp;copy; 2011 The Good Thymes Virtual Grocery &lt;/footer&gt;&lt;/div&gt;&lt;footer&gt;&amp;copy; 2011 The Good Thymes Virtual Grocery&lt;/footer&gt;&lt;div&gt;&amp;copy; 2011 The Good Thymes Virtual Grocery&lt;/div&gt; 引入片段的时候传入参数： 123456789101112131415161718&lt;nav class="col-md-2 d-none d-md-block bg-light sidebar" id="sidebar"&gt; &lt;div class="sidebar-sticky"&gt; &lt;ul class="nav flex-column"&gt; &lt;li class="nav-item"&gt; &lt;a class="nav-link active" th:class="$&#123;activeUri=='main.html'?'nav-link active':'nav-link'&#125;" href="#" th:href="@&#123;/main.html&#125;"&gt; &lt;svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-home"&gt; &lt;path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"&gt;&lt;/path&gt; &lt;polyline points="9 22 9 12 15 12 15 22"&gt;&lt;/polyline&gt; &lt;/svg&gt; Dashboard &lt;span class="sr-only"&gt;(current)&lt;/span&gt; &lt;/a&gt; &lt;/li&gt;&lt;!--引入侧边栏;传入参数--&gt;&lt;div th:replace="commons/bar::#sidebar(activeUri='emps')"&gt;&lt;/div&gt; 6）、CRUD-员工添加添加页面 123456789101112131415161718192021222324252627282930313233343536&lt;form&gt; &lt;div class="form-group"&gt; &lt;label&gt;LastName&lt;/label&gt; &lt;input type="text" class="form-control" placeholder="zhangsan"&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label&gt;Email&lt;/label&gt; &lt;input type="email" class="form-control" placeholder="zhangsan@atguigu.com"&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label&gt;Gender&lt;/label&gt;&lt;br/&gt; &lt;div class="form-check form-check-inline"&gt; &lt;input class="form-check-input" type="radio" name="gender" value="1"&gt; &lt;label class="form-check-label"&gt;男&lt;/label&gt; &lt;/div&gt; &lt;div class="form-check form-check-inline"&gt; &lt;input class="form-check-input" type="radio" name="gender" value="0"&gt; &lt;label class="form-check-label"&gt;女&lt;/label&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label&gt;department&lt;/label&gt; &lt;select class="form-control"&gt; &lt;option&gt;1&lt;/option&gt; &lt;option&gt;2&lt;/option&gt; &lt;option&gt;3&lt;/option&gt; &lt;option&gt;4&lt;/option&gt; &lt;option&gt;5&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label&gt;Birth&lt;/label&gt; &lt;input type="text" class="form-control" placeholder="zhangsan"&gt; &lt;/div&gt; &lt;button type="submit" class="btn btn-primary"&gt;添加&lt;/button&gt;&lt;/form&gt; 提交的数据格式不对：生日：日期； 2017-12-12；2017/12/12；2017.12.12； 日期的格式化；SpringMVC将页面提交的值需要转换为指定的类型; 2017-12-12—Date； 类型转换，格式化; 默认日期是按照/的方式； 7）、CRUD-员工修改修改添加二合一表单 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;!--需要区分是员工修改还是添加；--&gt;&lt;form th:action="@&#123;/emp&#125;" method="post"&gt; &lt;!--发送put请求修改员工数据--&gt; &lt;!--1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）2、页面创建一个post表单3、创建一个input项，name="_method";值就是我们指定的请求方式--&gt; &lt;input type="hidden" name="_method" value="put" th:if="$&#123;emp!=null&#125;"/&gt; &lt;input type="hidden" name="id" th:if="$&#123;emp!=null&#125;" th:value="$&#123;emp.id&#125;"&gt; &lt;div class="form-group"&gt; &lt;label&gt;LastName&lt;/label&gt; &lt;input name="lastName" type="text" class="form-control" placeholder="zhangsan" th:value="$&#123;emp!=null&#125;?$&#123;emp.lastName&#125;"&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label&gt;Email&lt;/label&gt; &lt;input name="email" type="email" class="form-control" placeholder="zhangsan@atguigu.com" th:value="$&#123;emp!=null&#125;?$&#123;emp.email&#125;"&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label&gt;Gender&lt;/label&gt;&lt;br/&gt; &lt;div class="form-check form-check-inline"&gt; &lt;input class="form-check-input" type="radio" name="gender" value="1" th:checked="$&#123;emp!=null&#125;?$&#123;emp.gender==1&#125;"&gt; &lt;label class="form-check-label"&gt;男&lt;/label&gt; &lt;/div&gt; &lt;div class="form-check form-check-inline"&gt; &lt;input class="form-check-input" type="radio" name="gender" value="0" th:checked="$&#123;emp!=null&#125;?$&#123;emp.gender==0&#125;"&gt; &lt;label class="form-check-label"&gt;女&lt;/label&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label&gt;department&lt;/label&gt; &lt;!--提交的是部门的id--&gt; &lt;select class="form-control" name="department.id"&gt; &lt;option th:selected="$&#123;emp!=null&#125;?$&#123;dept.id == emp.department.id&#125;" th:value="$&#123;dept.id&#125;" th:each="dept:$&#123;depts&#125;" th:text="$&#123;dept.departmentName&#125;"&gt;1&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label&gt;Birth&lt;/label&gt; &lt;input name="birth" type="text" class="form-control" placeholder="zhangsan" th:value="$&#123;emp!=null&#125;?$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;"&gt; &lt;/div&gt; &lt;button type="submit" class="btn btn-primary" th:text="$&#123;emp!=null&#125;?'修改':'添加'"&gt;添加&lt;/button&gt;&lt;/form&gt; 8）、CRUD-员工删除123456789101112131415161718192021&lt;tr th:each="emp:$&#123;emps&#125;"&gt; &lt;td th:text="$&#123;emp.id&#125;"&gt;&lt;/td&gt; &lt;td&gt;[[$&#123;emp.lastName&#125;]]&lt;/td&gt; &lt;td th:text="$&#123;emp.email&#125;"&gt;&lt;/td&gt; &lt;td th:text="$&#123;emp.gender&#125;==0?'女':'男'"&gt;&lt;/td&gt; &lt;td th:text="$&#123;emp.department.departmentName&#125;"&gt;&lt;/td&gt; &lt;td th:text="$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;"&gt;&lt;/td&gt; &lt;td&gt; &lt;a class="btn btn-sm btn-primary" th:href="@&#123;/emp/&#125;+$&#123;emp.id&#125;"&gt;编辑&lt;/a&gt; &lt;button th:attr="del_uri=@&#123;/emp/&#125;+$&#123;emp.id&#125;" class="btn btn-sm btn-danger deleteBtn"&gt;删除&lt;/button&gt; &lt;/td&gt;&lt;/tr&gt;&lt;script&gt; $(".deleteBtn").click(function()&#123; //删除当前员工的 $("#deleteEmpForm").attr("action",$(this).attr("del_uri")).submit(); return false; &#125;);&lt;/script&gt; 7、错误处理机制1）、SpringBoot默认的错误处理机制默认效果： 1）、浏览器，返回一个默认的错误页面 浏览器发送请求的请求头： 2）、如果是其他客户端，默认响应一个json数据 ![](images/搜狗截图20180226180504.png) 原理： 可以参照ErrorMvcAutoConfiguration；错误处理的自动配置； 给容器中添加了以下组件 1、DefaultErrorAttributes： 1234567891011帮我们在页面共享信息；@Override public Map&lt;String, Object&gt; getErrorAttributes(RequestAttributes requestAttributes, boolean includeStackTrace) &#123; Map&lt;String, Object&gt; errorAttributes = new LinkedHashMap&lt;String, Object&gt;(); errorAttributes.put("timestamp", new Date()); addStatus(errorAttributes, requestAttributes); addErrorDetails(errorAttributes, requestAttributes, includeStackTrace); addPath(errorAttributes, requestAttributes); return errorAttributes; &#125; 2、BasicErrorController：处理默认/error请求 12345678910111213141516171819202122232425@Controller@RequestMapping("$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;")public class BasicErrorController extends AbstractErrorController &#123; @RequestMapping(produces = "text/html")//产生html类型的数据；浏览器发送的请求来到这个方法处理 public ModelAndView errorHtml(HttpServletRequest request, HttpServletResponse response) &#123; HttpStatus status = getStatus(request); Map&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes( request, isIncludeStackTrace(request, MediaType.TEXT_HTML))); response.setStatus(status.value()); //去哪个页面作为错误页面；包含页面地址和页面内容 ModelAndView modelAndView = resolveErrorView(request, response, status, model); return (modelAndView == null ? new ModelAndView("error", model) : modelAndView); &#125; @RequestMapping @ResponseBody //产生json数据，其他客户端来到这个方法处理； public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123; Map&lt;String, Object&gt; body = getErrorAttributes(request, isIncludeStackTrace(request, MediaType.ALL)); HttpStatus status = getStatus(request); return new ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status); &#125; 3、ErrorPageCustomizer： 12@Value("$&#123;error.path:/error&#125;")private String path = "/error"; 系统出现错误以后来到error请求进行处理；（web.xml注册的错误页面规则） 4、DefaultErrorViewResolver： 123456789101112131415161718192021222324@Override public ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model) &#123; ModelAndView modelAndView = resolve(String.valueOf(status), model); if (modelAndView == null &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123; modelAndView = resolve(SERIES_VIEWS.get(status.series()), model); &#125; return modelAndView; &#125; private ModelAndView resolve(String viewName, Map&lt;String, Object&gt; model) &#123; //默认SpringBoot可以去找到一个页面？ error/404 String errorViewName = "error/" + viewName; //模板引擎可以解析这个页面地址就用模板引擎解析 TemplateAvailabilityProvider provider = this.templateAvailabilityProviders .getProvider(errorViewName, this.applicationContext); if (provider != null) &#123; //模板引擎可用的情况下返回到errorViewName指定的视图地址 return new ModelAndView(errorViewName, model); &#125; //模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面 error/404.html return resolveResource(errorViewName, model); &#125; 步骤： 一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/error请求；就会被**BasicErrorController**处理； 1）响应页面；去哪个页面是由**DefaultErrorViewResolver**解析得到的； 1234567891011protected ModelAndView resolveErrorView(HttpServletRequest request, HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model) &#123; //所有的ErrorViewResolver得到ModelAndView for (ErrorViewResolver resolver : this.errorViewResolvers) &#123; ModelAndView modelAndView = resolver.resolveErrorView(request, status, model); if (modelAndView != null) &#123; return modelAndView; &#125; &#125; return null;&#125; 2）、如果定制错误响应：1）、如何定制错误的页面；**1）、有模板引擎的情况下；error/状态码;** 【将错误页面命名为 错误状态码.html 放在模板引擎文件夹里面的 error文件夹下】，发生此状态码的错误就会来到 对应的页面； 我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）； 页面能获取的信息； timestamp：时间戳 status：状态码 error：错误提示 exception：异常对象 message：异常消息 errors：JSR303数据校验的错误都在这里 2）、没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找； 3）、以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面； 2）、如何定制错误的json数据；1）、自定义异常处理&amp;返回定制json数据； 12345678910111213@ControllerAdvicepublic class MyExceptionHandler &#123; @ResponseBody @ExceptionHandler(UserNotExistException.class) public Map&lt;String,Object&gt; handleException(Exception e)&#123; Map&lt;String,Object&gt; map = new HashMap&lt;&gt;(); map.put("code","user.notexist"); map.put("message",e.getMessage()); return map; &#125;&#125;//没有自适应效果... 2）、转发到/error进行自适应响应效果处理 1234567891011121314@ExceptionHandler(UserNotExistException.class) public String handleException(Exception e, HttpServletRequest request)&#123; Map&lt;String,Object&gt; map = new HashMap&lt;&gt;(); //传入我们自己的错误状态码 4xx 5xx，否则就不会进入定制错误页面的解析流程 /** * Integer statusCode = (Integer) request .getAttribute("javax.servlet.error.status_code"); */ request.setAttribute("javax.servlet.error.status_code",500); map.put("code","user.notexist"); map.put("message",e.getMessage()); //转发到/error return "forward:/error"; &#125; 3）、将我们的定制数据携带出去；出现错误以后，会来到/error请求，会被BasicErrorController处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController（ErrorController）规定的方法）； 1、完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中； 2、页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到； 容器中DefaultErrorAttributes.getErrorAttributes()；默认进行数据处理的； 自定义ErrorAttributes 1234567891011//给容器中加入我们自己定义的ErrorAttributes@Componentpublic class MyErrorAttributes extends DefaultErrorAttributes &#123; @Override public Map&lt;String, Object&gt; getErrorAttributes(RequestAttributes requestAttributes, boolean includeStackTrace) &#123; Map&lt;String, Object&gt; map = super.getErrorAttributes(requestAttributes, includeStackTrace); map.put("company","atguigu"); return map; &#125;&#125; 最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容， 8、配置嵌入式Servlet容器SpringBoot默认使用Tomcat作为嵌入式的Servlet容器； 问题？ 1）、如何定制和修改Servlet容器的相关配置；1、修改和server有关的配置（ServerProperties【也是EmbeddedServletContainerCustomizer】）； 123456789server.port=8081server.context-path=/crudserver.tomcat.uri-encoding=UTF-8//通用的Servlet容器设置server.xxx//Tomcat的设置server.tomcat.xxx 2、编写一个EmbeddedServletContainerCustomizer：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置 1234567891011@Bean //一定要将这个定制器加入到容器中public EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer()&#123; return new EmbeddedServletContainerCustomizer() &#123; //定制嵌入式的Servlet容器相关的规则 @Override public void customize(ConfigurableEmbeddedServletContainer container) &#123; container.setPort(8083); &#125; &#125;;&#125; 2）、注册Servlet三大组件【Servlet、Filter、Listener】由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。 注册三大组件用以下方式 ServletRegistrationBean 123456//注册三大组件@Beanpublic ServletRegistrationBean myServlet()&#123; ServletRegistrationBean registrationBean = new ServletRegistrationBean(new MyServlet(),"/myServlet"); return registrationBean;&#125; FilterRegistrationBean 1234567@Beanpublic FilterRegistrationBean myFilter()&#123; FilterRegistrationBean registrationBean = new FilterRegistrationBean(); registrationBean.setFilter(new MyFilter()); registrationBean.setUrlPatterns(Arrays.asList("/hello","/myServlet")); return registrationBean;&#125; ServletListenerRegistrationBean 12345@Beanpublic ServletListenerRegistrationBean myListener()&#123; ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = new ServletListenerRegistrationBean&lt;&gt;(new MyListener()); return registrationBean;&#125; SpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet； DispatcherServletAutoConfiguration中： 1234567891011121314151617@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)public ServletRegistrationBean dispatcherServletRegistration( DispatcherServlet dispatcherServlet) &#123; ServletRegistrationBean registration = new ServletRegistrationBean( dispatcherServlet, this.serverProperties.getServletMapping()); //默认拦截： / 所有请求；包静态资源，但是不拦截jsp请求； /*会拦截jsp //可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径 registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME); registration.setLoadOnStartup( this.webMvcProperties.getServlet().getLoadOnStartup()); if (this.multipartConfig != null) &#123; registration.setMultipartConfig(this.multipartConfig); &#125; return registration;&#125; 2）、SpringBoot能不能支持其他的Servlet容器； 3）、替换为其他嵌入式Servlet容器 默认支持： Tomcat（默认使用） 12345&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; 引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器；&lt;/dependency&gt; Jetty 1234567891011121314151617&lt;!-- 引入web模块 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt;&lt;!--引入其他的Servlet容器--&gt;&lt;dependency&gt; &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;/dependency&gt; Undertow 1234567891011121314151617&lt;!-- 引入web模块 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt;&lt;!--引入其他的Servlet容器--&gt;&lt;dependency&gt; &lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;/dependency&gt; 4）、嵌入式Servlet容器自动配置原理；EmbeddedServletContainerAutoConfiguration：嵌入式的Servlet容器自动配置？ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)@Configuration@ConditionalOnWebApplication@Import(BeanPostProcessorsRegistrar.class)//导入BeanPostProcessorsRegistrar：Spring注解版；给容器中导入一些组件//导入了EmbeddedServletContainerCustomizerBeanPostProcessor：//后置处理器：bean初始化前后（创建完对象，还没赋值赋值）执行初始化工作public class EmbeddedServletContainerAutoConfiguration &#123; @Configuration @ConditionalOnClass(&#123; Servlet.class, Tomcat.class &#125;)//判断当前是否引入了Tomcat依赖； @ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)//判断当前容器没有用户自己定义EmbeddedServletContainerFactory：嵌入式的Servlet容器工厂；作用：创建嵌入式的Servlet容器 public static class EmbeddedTomcat &#123; @Bean public TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() &#123; return new TomcatEmbeddedServletContainerFactory(); &#125; &#125; /** * Nested configuration if Jetty is being used. */ @Configuration @ConditionalOnClass(&#123; Servlet.class, Server.class, Loader.class, WebAppContext.class &#125;) @ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT) public static class EmbeddedJetty &#123; @Bean public JettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory() &#123; return new JettyEmbeddedServletContainerFactory(); &#125; &#125; /** * Nested configuration if Undertow is being used. */ @Configuration @ConditionalOnClass(&#123; Servlet.class, Undertow.class, SslClientAuthMode.class &#125;) @ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT) public static class EmbeddedUndertow &#123; @Bean public UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory() &#123; return new UndertowEmbeddedServletContainerFactory(); &#125; &#125; 1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂） 1234567public interface EmbeddedServletContainerFactory &#123; //获取嵌入式的Servlet容器 EmbeddedServletContainer getEmbeddedServletContainer( ServletContextInitializer... initializers);&#125; 2）、EmbeddedServletContainer：（嵌入式的Servlet容器） 3）、以TomcatEmbeddedServletContainerFactory为例 123456789101112131415161718192021222324@Overridepublic EmbeddedServletContainer getEmbeddedServletContainer( ServletContextInitializer... initializers) &#123; //创建一个Tomcat Tomcat tomcat = new Tomcat(); //配置Tomcat的基本环节 File baseDir = (this.baseDirectory != null ? this.baseDirectory : createTempDir("tomcat")); tomcat.setBaseDir(baseDir.getAbsolutePath()); Connector connector = new Connector(this.protocol); tomcat.getService().addConnector(connector); customizeConnector(connector); tomcat.setConnector(connector); tomcat.getHost().setAutoDeploy(false); configureEngine(tomcat.getEngine()); for (Connector additionalConnector : this.additionalTomcatConnectors) &#123; tomcat.getService().addConnector(additionalConnector); &#125; prepareContext(tomcat.getHost(), initializers); //将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器 return getTomcatEmbeddedServletContainer(tomcat);&#125; 4）、我们对嵌入式容器的配置修改是怎么生效？ 1ServerProperties、EmbeddedServletContainerCustomizer EmbeddedServletContainerCustomizer：定制器帮我们修改了Servlet容器的配置？ 怎么修改的原理？ 5）、容器中导入了EmbeddedServletContainerCustomizerBeanPostProcessor 12345678910111213141516171819202122232425262728293031323334353637//初始化之前@Overridepublic Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123; //如果当前初始化的是一个ConfigurableEmbeddedServletContainer类型的组件 if (bean instanceof ConfigurableEmbeddedServletContainer) &#123; // postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean); &#125; return bean;&#125;private void postProcessBeforeInitialization( ConfigurableEmbeddedServletContainer bean) &#123; //获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值； for (EmbeddedServletContainerCustomizer customizer : getCustomizers()) &#123; customizer.customize(bean); &#125;&#125;private Collection&lt;EmbeddedServletContainerCustomizer&gt; getCustomizers() &#123; if (this.customizers == null) &#123; // Look up does not include the parent context this.customizers = new ArrayList&lt;EmbeddedServletContainerCustomizer&gt;( this.beanFactory //从容器中获取所有这葛类型的组件：EmbeddedServletContainerCustomizer //定制Servlet容器，给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件 .getBeansOfType(EmbeddedServletContainerCustomizer.class, false, false) .values()); Collections.sort(this.customizers, AnnotationAwareOrderComparator.INSTANCE); this.customizers = Collections.unmodifiableList(this.customizers); &#125; return this.customizers;&#125;ServerProperties也是定制器 步骤： 1）、SpringBoot根据导入的依赖情况，给容器中添加相应的EmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】 2）、容器中某个组件要创建对象就会惊动后置处理器；EmbeddedServletContainerCustomizerBeanPostProcessor； 只要是嵌入式的Servlet容器工厂，后置处理器就工作； 3）、后置处理器，从容器中获取所有的EmbeddedServletContainerCustomizer，调用定制器的定制方法 ###5）、嵌入式Servlet容器启动原理； 什么时候创建嵌入式的Servlet容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat； 获取嵌入式的Servlet容器工厂： 1）、SpringBoot应用启动运行run方法 2）、refreshContext(context);SpringBoot刷新IOC容器【创建IOC容器对象，并初始化容器，创建容器中的每一个组件】；如果是web应用创建AnnotationConfigEmbeddedWebApplicationContext，否则：AnnotationConfigApplicationContext 3）、refresh(context);刷新刚才创建好的ioc容器； 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263public void refresh() throws BeansException, IllegalStateException &#123; synchronized (this.startupShutdownMonitor) &#123; // Prepare this context for refreshing. prepareRefresh(); // Tell the subclass to refresh the internal bean factory. ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory(); // Prepare the bean factory for use in this context. prepareBeanFactory(beanFactory); try &#123; // Allows post-processing of the bean factory in context subclasses. postProcessBeanFactory(beanFactory); // Invoke factory processors registered as beans in the context. invokeBeanFactoryPostProcessors(beanFactory); // Register bean processors that intercept bean creation. registerBeanPostProcessors(beanFactory); // Initialize message source for this context. initMessageSource(); // Initialize event multicaster for this context. initApplicationEventMulticaster(); // Initialize other special beans in specific context subclasses. onRefresh(); // Check for listener beans and register them. registerListeners(); // Instantiate all remaining (non-lazy-init) singletons. finishBeanFactoryInitialization(beanFactory); // Last step: publish corresponding event. finishRefresh(); &#125; catch (BeansException ex) &#123; if (logger.isWarnEnabled()) &#123; logger.warn("Exception encountered during context initialization - " + "cancelling refresh attempt: " + ex); &#125; // Destroy already created singletons to avoid dangling resources. destroyBeans(); // Reset 'active' flag. cancelRefresh(ex); // Propagate exception to caller. throw ex; &#125; finally &#123; // Reset common introspection caches in Spring's core, since we // might not ever need metadata for singleton beans anymore... resetCommonCaches(); &#125; &#125;&#125; 4）、 onRefresh(); web的ioc容器重写了onRefresh方法 5）、webioc容器会创建嵌入式的Servlet容器；createEmbeddedServletContainer(); 6）、获取嵌入式的Servlet容器工厂： EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory(); 从ioc容器中获取EmbeddedServletContainerFactory 组件；**TomcatEmbeddedServletContainerFactory**创建对象，后置处理器一看是这个对象，就获取所有的定制器来先定制Servlet容器的相关配置； 7）、使用容器工厂获取嵌入式的Servlet容器：this.embeddedServletContainer = containerFactory .getEmbeddedServletContainer(getSelfInitializer()); 8）、嵌入式的Servlet容器创建对象并启动Servlet容器； 先启动嵌入式的Servlet容器，再将ioc容器中剩下没有创建出的对象获取出来； ==IOC容器启动创建嵌入式的Servlet容器== 9、使用外置的Servlet容器嵌入式Servlet容器：应用打成可执行的jar 优点：简单、便携； 缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义EmbeddedServletContainerCustomizer】，自己编写嵌入式Servlet容器的创建工厂【EmbeddedServletContainerFactory】）； 外置的Servlet容器：外面安装Tomcat—应用war包的方式打包； 步骤1）、必须创建一个war项目；（利用idea创建好目录结构） 2）、将嵌入式的Tomcat指定为provided； 12345&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt; 3）、必须编写一个SpringBootServletInitializer的子类，并调用configure方法 123456789public class ServletInitializer extends SpringBootServletInitializer &#123; @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder application) &#123; //传入SpringBoot应用的主程序 return application.sources(SpringBoot04WebJspApplication.class); &#125;&#125; 4）、启动服务器就可以使用； 原理jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet容器； war包：启动服务器，服务器启动SpringBoot应用【SpringBootServletInitializer】，启动ioc容器； servlet3.0（Spring注解版）： 8.2.4 Shared libraries / runtimes pluggability： 规则： 1）、服务器启动（web应用启动）会创建当前web应用里面每一个jar包里面ServletContainerInitializer实例： 2）、ServletContainerInitializer的实现放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainerInitializer的文件，内容就是ServletContainerInitializer的实现类的全类名 3）、还可以使用@HandlesTypes，在应用启动的时候加载我们感兴趣的类； 流程： 1）、启动Tomcat 2）、org\springframework\spring-web\4.3.14.RELEASE\spring-web-4.3.14.RELEASE.jar!\META-INF\services\javax.servlet.ServletContainerInitializer： Spring的web模块里面有这个文件：org.springframework.web.SpringServletContainerInitializer 3）、SpringServletContainerInitializer将@HandlesTypes(WebApplicationInitializer.class)标注的所有这个类型的类都传入到onStartup方法的Set&lt;Class&lt;?&gt;&gt;；为这些WebApplicationInitializer类型的类创建实例； 4）、每一个WebApplicationInitializer都调用自己的onStartup； 5）、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法 6）、SpringBootServletInitializer实例执行onStartup的时候会createRootApplicationContext；创建容器 1234567891011121314151617181920212223242526272829303132333435363738protected WebApplicationContext createRootApplicationContext( ServletContext servletContext) &#123; //1、创建SpringApplicationBuilder SpringApplicationBuilder builder = createSpringApplicationBuilder(); StandardServletEnvironment environment = new StandardServletEnvironment(); environment.initPropertySources(servletContext, null); builder.environment(environment); builder.main(getClass()); ApplicationContext parent = getExistingRootWebApplicationContext(servletContext); if (parent != null) &#123; this.logger.info("Root context already created (using as parent)."); servletContext.setAttribute( WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, null); builder.initializers(new ParentContextApplicationContextInitializer(parent)); &#125; builder.initializers( new ServletContextApplicationContextInitializer(servletContext)); builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class); //调用configure方法，子类重写了这个方法，将SpringBoot的主程序类传入了进来 builder = configure(builder); //使用builder创建一个Spring应用 SpringApplication application = builder.build(); if (application.getSources().isEmpty() &amp;&amp; AnnotationUtils .findAnnotation(getClass(), Configuration.class) != null) &#123; application.getSources().add(getClass()); &#125; Assert.state(!application.getSources().isEmpty(), "No SpringApplication sources have been defined. Either override the " + "configure method or add an @Configuration annotation"); // Ensure error pages are registered if (this.registerErrorPageFilter) &#123; application.getSources().add(ErrorPageFilterConfiguration.class); &#125; //启动Spring应用 return run(application);&#125; 7）、Spring的应用就启动并且创建IOC容器 1234567891011121314151617181920212223242526272829303132333435public ConfigurableApplicationContext run(String... args) &#123; StopWatch stopWatch = new StopWatch(); stopWatch.start(); ConfigurableApplicationContext context = null; FailureAnalyzers analyzers = null; configureHeadlessProperty(); SpringApplicationRunListeners listeners = getRunListeners(args); listeners.starting(); try &#123; ApplicationArguments applicationArguments = new DefaultApplicationArguments( args); ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments); Banner printedBanner = printBanner(environment); context = createApplicationContext(); analyzers = new FailureAnalyzers(context); prepareContext(context, environment, listeners, applicationArguments, printedBanner); //刷新IOC容器 refreshContext(context); afterRefresh(context, applicationArguments); listeners.finished(context, null); stopWatch.stop(); if (this.logStartupInfo) &#123; new StartupInfoLogger(this.mainApplicationClass) .logStarted(getApplicationLog(), stopWatch); &#125; return context; &#125; catch (Throwable ex) &#123; handleRunFailure(context, listeners, analyzers, ex); throw new IllegalStateException(ex); &#125;&#125; ==启动Servlet容器，再启动SpringBoot应用== 五、Docker1、简介Docker是一个开源的应用容器引擎；是一个轻量级容器技术； Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像； 运行中的这个镜像称为容器，容器启动是非常快速的。 2、核心概念docker主机(Host)：安装了Docker程序的机器（Docker直接安装在操作系统之上）； docker客户端(Client)：连接docker主机进行操作； docker仓库(Registry)：用来保存各种打包好的软件镜像； docker镜像(Images)：软件打包好的镜像；放在docker仓库中； docker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用 使用Docker的步骤： 1）、安装Docker 2）、去Docker仓库找到这个软件对应的镜像； 3）、使用Docker运行这个镜像，这个镜像就会生成一个Docker容器； 4）、对容器的启动停止就是对软件的启动停止； 3、安装Docker1）、安装linux虚拟机1）、VMWare、VirtualBox（安装）； 2）、导入虚拟机文件centos7-atguigu.ova； 3）、双击启动linux虚拟机;使用 root/ 123456登陆 4）、使用客户端连接linux服务器进行命令操作； 5）、设置虚拟机网络； 桥接网络===选好网卡====接入网线； 6）、设置好网络以后使用命令重启虚拟机的网络 1service network restart 7）、查看linux的ip地址 1ip addr 8）、使用客户端连接linux； 2）、在linux虚拟机上安装docker步骤： 12345678910111213141、检查内核版本，必须是3.10及以上uname -r2、安装dockeryum install docker3、输入y确认安装4、启动docker[root@localhost ~]# systemctl start docker[root@localhost ~]# docker -vDocker version 1.12.6, build 3e8e77d/1.12.65、开机启动docker[root@localhost ~]# systemctl enable dockerCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.6、停止dockersystemctl stop docker 4、Docker常用命令&amp;操作1）、镜像操作 操作 命令 说明 检索 docker search 关键字 eg：docker search redis 我们经常去docker hub上检索镜像的详细信息，如镜像的TAG。 拉取 docker pull 镜像名:tag :tag是可选的，tag表示标签，多为软件的版本，默认是latest 列表 docker images 查看所有本地镜像 删除 docker rmi image-id 删除指定的本地镜像 https://hub.docker.com/ 2）、容器操作软件镜像（QQ安装程序）—-运行镜像—-产生一个容器（正在运行的软件，运行的QQ）； 步骤： 1234567891011121314151617181920212223242526272829301、搜索镜像[root@localhost ~]# docker search tomcat2、拉取镜像[root@localhost ~]# docker pull tomcat3、根据镜像启动容器docker run --name mytomcat -d tomcat:latest4、docker ps 查看运行中的容器5、 停止运行中的容器docker stop 容器的id6、查看所有的容器docker ps -a7、启动容器docker start 容器id8、删除一个容器 docker rm 容器id9、启动一个做了端口映射的tomcat[root@localhost ~]# docker run -d -p 8888:8080 tomcat-d：后台运行-p: 将主机的端口映射到容器的一个端口 主机端口:容器内部的端口10、为了演示简单关闭了linux的防火墙service firewalld status ；查看防火墙状态service firewalld stop：关闭防火墙11、查看容器的日志docker logs container-name/container-id更多命令参看https://docs.docker.com/engine/reference/commandline/docker/可以参考每一个镜像的文档 3）、安装MySQL示例1docker pull mysql 错误的启动 1234567891011121314151617[root@localhost ~]# docker run --name mysql01 -d mysql42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846mysql退出了[root@localhost ~]# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES42f09819908b mysql "docker-entrypoint.sh" 34 seconds ago Exited (1) 33 seconds ago mysql01538bde63e500 tomcat "catalina.sh run" About an hour ago Exited (143) About an hour ago compassionate_goldstinec4f1ac60b3fc tomcat "catalina.sh run" About an hour ago Exited (143) About an hour ago lonely_fermi81ec743a5271 tomcat "catalina.sh run" About an hour ago Exited (143) About an hour ago sick_ramanujan//错误日志[root@localhost ~]# docker logs 42f09819908berror: database is uninitialized and password option is not specified You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个 正确的启动 12345[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysqlb874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f[root@localhost ~]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESb874c56bec49 mysql "docker-entrypoint.sh" 4 seconds ago Up 3 seconds 3306/tcp mysql01 做了端口映射 12345[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysqlad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434[root@localhost ~]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESad10e4bc5c6a mysql "docker-entrypoint.sh" 4 seconds ago Up 2 seconds 0.0.0.0:3306-&gt;3306/tcp mysql02 几个其他的高级操作 123456docker run --name mysql03 -v /conf/mysql:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag把主机的/conf/mysql文件夹挂载到 mysqldocker容器的/etc/mysql/conf.d文件夹里面改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（/conf/mysql）docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci指定mysql的一些配置参数 六、SpringBoot与数据访问1、JDBC123456789&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; 123456spring: datasource: username: root password: 123456 url: jdbc:mysql://192.168.15.22:3306/jdbc driver-class-name: com.mysql.jdbc.Driver 效果： 默认是用org.apache.tomcat.jdbc.pool.DataSource作为数据源； 数据源的相关配置都在DataSourceProperties里面； 自动配置原理： org.springframework.boot.autoconfigure.jdbc： 1、参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat连接池；可以使用spring.datasource.type指定自定义的数据源类型； 2、SpringBoot默认可以支持； 1org.apache.tomcat.jdbc.pool.DataSource、HikariDataSource、BasicDataSource、 3、自定义数据源类型 1234567891011121314/** * Generic DataSource configuration. */@ConditionalOnMissingBean(DataSource.class)@ConditionalOnProperty(name = "spring.datasource.type")static class Generic &#123; @Bean public DataSource dataSource(DataSourceProperties properties) &#123; //使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性 return properties.initializeDataSourceBuilder().build(); &#125;&#125; 4、DataSourceInitializer：ApplicationListener； 作用： 1）、runSchemaScripts();运行建表语句； 2）、runDataScripts();运行插入数据的sql语句； 默认只需要将文件命名为： 123456schema-*.sql、data-*.sql默认规则：schema.sql，schema-all.sql；可以使用 schema: - classpath:department.sql 指定位置 5、操作数据库：自动配置了JdbcTemplate操作数据库 2、整合Druid数据源12345678910111213141516171819202122232425262728293031323334353637383940414243导入druid数据源@Configurationpublic class DruidConfig &#123; @ConfigurationProperties(prefix = "spring.datasource") @Bean public DataSource druid()&#123; return new DruidDataSource(); &#125; //配置Druid的监控 //1、配置一个管理后台的Servlet @Bean public ServletRegistrationBean statViewServlet()&#123; ServletRegistrationBean bean = new ServletRegistrationBean(new StatViewServlet(), "/druid/*"); Map&lt;String,String&gt; initParams = new HashMap&lt;&gt;(); initParams.put("loginUsername","admin"); initParams.put("loginPassword","123456"); initParams.put("allow","");//默认就是允许所有访问 initParams.put("deny","192.168.15.21"); bean.setInitParameters(initParams); return bean; &#125; //2、配置一个web监控的filter @Bean public FilterRegistrationBean webStatFilter()&#123; FilterRegistrationBean bean = new FilterRegistrationBean(); bean.setFilter(new WebStatFilter()); Map&lt;String,String&gt; initParams = new HashMap&lt;&gt;(); initParams.put("exclusions","*.js,*.css,/druid/*"); bean.setInitParameters(initParams); bean.setUrlPatterns(Arrays.asList("/*")); return bean; &#125;&#125; 3、整合MyBatis12345&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.1&lt;/version&gt;&lt;/dependency&gt; 步骤： 1）、配置数据源相关属性（见上一节Druid） 2）、给数据库建表 3）、创建JavaBean 4）、注解版1234567891011121314151617//指定这是一个操作数据库的mapper@Mapperpublic interface DepartmentMapper &#123; @Select("select * from department where id=#&#123;id&#125;") public Department getDeptById(Integer id); @Delete("delete from department where id=#&#123;id&#125;") public int deleteDeptById(Integer id); @Options(useGeneratedKeys = true,keyProperty = "id") @Insert("insert into department(departmentName) values(#&#123;departmentName&#125;)") public int insertDept(Department department); @Update("update department set departmentName=#&#123;departmentName&#125; where id=#&#123;id&#125;") public int updateDept(Department department);&#125; 问题： 自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer； 1234567891011121314@org.springframework.context.annotation.Configurationpublic class MyBatisConfig &#123; @Bean public ConfigurationCustomizer configurationCustomizer()&#123; return new ConfigurationCustomizer()&#123; @Override public void customize(Configuration configuration) &#123; configuration.setMapUnderscoreToCamelCase(true); &#125; &#125;; &#125;&#125; 123456789使用MapperScan批量扫描所有的Mapper接口；@MapperScan(value = "com.atguigu.springboot.mapper")@SpringBootApplicationpublic class SpringBoot06DataMybatisApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(SpringBoot06DataMybatisApplication.class, args); &#125;&#125; 5）、配置文件版123mybatis: config-location: classpath:mybatis/mybatis-config.xml 指定全局配置文件的位置 mapper-locations: classpath:mybatis/mapper/*.xml 指定sql映射文件的位置 更多使用参照 http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/ 4、整合SpringData JPA1）、SpringData简介 2）、整合SpringData JPAJPA:ORM（Object Relational Mapping）； 1）、编写一个实体类（bean）和数据表进行映射，并且配置好映射关系； 12345678910111213//使用JPA注解配置映射关系@Entity //告诉JPA这是一个实体类（和数据表映射的类）@Table(name = "tbl_user") //@Table来指定和哪个数据表对应;如果省略默认表名就是user；public class User &#123; @Id //这是一个主键 @GeneratedValue(strategy = GenerationType.IDENTITY)//自增主键 private Integer id; @Column(name = "last_name",length = 50) //这是和数据表对应的一个列 private String lastName; @Column //省略默认列名就是属性名 private String email; 2）、编写一个Dao接口来操作实体类对应的数据表（Repository） 123//继承JpaRepository来完成对数据库的操作public interface UserRepository extends JpaRepository&lt;User,Integer&gt; &#123;&#125; 3）、基本的配置JpaProperties 1234567spring: jpa: hibernate:# 更新或者创建数据表结构 ddl-auto: update# 控制台显示SQL show-sql: true 七、启动配置原理几个重要的事件回调机制 配置在META-INF/spring.factories ApplicationContextInitializer SpringApplicationRunListener 只需要放在ioc容器中 ApplicationRunner CommandLineRunner 启动流程： 1、创建SpringApplication对象12345678910111213141516initialize(sources);private void initialize(Object[] sources) &#123; //保存主配置类 if (sources != null &amp;&amp; sources.length &gt; 0) &#123; this.sources.addAll(Arrays.asList(sources)); &#125; //判断当前是否一个web应用 this.webEnvironment = deduceWebEnvironment(); //从类路径下找到META-INF/spring.factories配置的所有ApplicationContextInitializer；然后保存起来 setInitializers((Collection) getSpringFactoriesInstances( ApplicationContextInitializer.class)); //从类路径下找到ETA-INF/spring.factories配置的所有ApplicationListener setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class)); //从多个配置类中找到有main方法的主配置类 this.mainApplicationClass = deduceMainApplicationClass();&#125; 2、运行run方法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455public ConfigurableApplicationContext run(String... args) &#123; StopWatch stopWatch = new StopWatch(); stopWatch.start(); ConfigurableApplicationContext context = null; FailureAnalyzers analyzers = null; configureHeadlessProperty(); //获取SpringApplicationRunListeners；从类路径下META-INF/spring.factories SpringApplicationRunListeners listeners = getRunListeners(args); //回调所有的获取SpringApplicationRunListener.starting()方法 listeners.starting(); try &#123; //封装命令行参数 ApplicationArguments applicationArguments = new DefaultApplicationArguments( args); //准备环境 ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments); //创建环境完成后回调SpringApplicationRunListener.environmentPrepared()；表示环境准备完成 Banner printedBanner = printBanner(environment); //创建ApplicationContext；决定创建web的ioc还是普通的ioc context = createApplicationContext(); analyzers = new FailureAnalyzers(context); //准备上下文环境;将environment保存到ioc中；而且applyInitializers()； //applyInitializers()：回调之前保存的所有的ApplicationContextInitializer的initialize方法 //回调所有的SpringApplicationRunListener的contextPrepared()； // prepareContext(context, environment, listeners, applicationArguments, printedBanner); //prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded（）； //s刷新容器；ioc容器初始化（如果是web应用还会创建嵌入式的Tomcat）；Spring注解版 //扫描，创建，加载所有组件的地方；（配置类，组件，自动配置） refreshContext(context); //从ioc容器中获取所有的ApplicationRunner和CommandLineRunner进行回调 //ApplicationRunner先回调，CommandLineRunner再回调 afterRefresh(context, applicationArguments); //所有的SpringApplicationRunListener回调finished方法 listeners.finished(context, null); stopWatch.stop(); if (this.logStartupInfo) &#123; new StartupInfoLogger(this.mainApplicationClass) .logStarted(getApplicationLog(), stopWatch); &#125; //整个SpringBoot应用启动完成以后返回启动的ioc容器； return context; &#125; catch (Throwable ex) &#123; handleRunFailure(context, listeners, analyzers, ex); throw new IllegalStateException(ex); &#125;&#125; 3、事件监听机制配置在META-INF/spring.factories ApplicationContextInitializer 123456public class HelloApplicationContextInitializer implements ApplicationContextInitializer&lt;ConfigurableApplicationContext&gt; &#123; @Override public void initialize(ConfigurableApplicationContext applicationContext) &#123; System.out.println("ApplicationContextInitializer...initialize..."+applicationContext); &#125;&#125; SpringApplicationRunListener 123456789101112131415161718192021222324252627282930313233public class HelloSpringApplicationRunListener implements SpringApplicationRunListener &#123; //必须有的构造器 public HelloSpringApplicationRunListener(SpringApplication application, String[] args)&#123; &#125; @Override public void starting() &#123; System.out.println("SpringApplicationRunListener...starting..."); &#125; @Override public void environmentPrepared(ConfigurableEnvironment environment) &#123; Object o = environment.getSystemProperties().get("os.name"); System.out.println("SpringApplicationRunListener...environmentPrepared.."+o); &#125; @Override public void contextPrepared(ConfigurableApplicationContext context) &#123; System.out.println("SpringApplicationRunListener...contextPrepared..."); &#125; @Override public void contextLoaded(ConfigurableApplicationContext context) &#123; System.out.println("SpringApplicationRunListener...contextLoaded..."); &#125; @Override public void finished(ConfigurableApplicationContext context, Throwable exception) &#123; System.out.println("SpringApplicationRunListener...finished..."); &#125;&#125; 配置（META-INF/spring.factories） 12345org.springframework.context.ApplicationContextInitializer=\com.atguigu.springboot.listener.HelloApplicationContextInitializerorg.springframework.boot.SpringApplicationRunListener=\com.atguigu.springboot.listener.HelloSpringApplicationRunListener 只需要放在ioc容器中 ApplicationRunner 1234567@Componentpublic class HelloApplicationRunner implements ApplicationRunner &#123; @Override public void run(ApplicationArguments args) throws Exception &#123; System.out.println("ApplicationRunner...run...."); &#125;&#125; CommandLineRunner 1234567@Componentpublic class HelloCommandLineRunner implements CommandLineRunner &#123; @Override public void run(String... args) throws Exception &#123; System.out.println("CommandLineRunner...run..."+ Arrays.asList(args)); &#125;&#125; 八、自定义starterstarter： 1、这个场景需要使用到的依赖是什么？ 2、如何编写自动配置 12345678910111213@Configuration //指定这个类是一个配置类@ConditionalOnXXX //在指定条件成立的情况下自动配置类生效@AutoConfigureAfter //指定自动配置类的顺序@Bean //给容器中添加组件@ConfigurationPropertie结合相关xxxProperties类来绑定相关的配置@EnableConfigurationProperties //让xxxProperties生效加入到容器中自动配置类要能加载将需要启动就加载的自动配置类，配置在META-INF/spring.factoriesorg.springframework.boot.autoconfigure.EnableAutoConfiguration=\org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\ 3、模式： 启动器只用来做依赖导入； 专门来写一个自动配置模块； 启动器依赖自动配置；别人只需要引入启动器（starter） mybatis-spring-boot-starter；自定义启动器名-spring-boot-starter 步骤： 1）、启动器模块 12345678910111213141516171819202122&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.atguigu.starter&lt;/groupId&gt; &lt;artifactId&gt;atguigu-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;!--启动器--&gt; &lt;dependencies&gt; &lt;!--引入自动配置模块--&gt; &lt;dependency&gt; &lt;groupId&gt;com.atguigu.starter&lt;/groupId&gt; &lt;artifactId&gt;atguigu-spring-boot-starter-autoconfigurer&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 2）、自动配置模块 123456789101112131415161718192021222324252627282930313233343536373839&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.atguigu.starter&lt;/groupId&gt; &lt;artifactId&gt;atguigu-spring-boot-starter-autoconfigurer&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;atguigu-spring-boot-starter-autoconfigurer&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.10.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;!--引入spring-boot-starter；所有starter的基本配置--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 1234567891011121314151617181920212223242526package com.atguigu.starter;import org.springframework.boot.context.properties.ConfigurationProperties;@ConfigurationProperties(prefix = "atguigu.hello")public class HelloProperties &#123; private String prefix; private String suffix; public String getPrefix() &#123; return prefix; &#125; public void setPrefix(String prefix) &#123; this.prefix = prefix; &#125; public String getSuffix() &#123; return suffix; &#125; public void setSuffix(String suffix) &#123; this.suffix = suffix; &#125;&#125; 123456789101112131415161718package com.atguigu.starter;public class HelloService &#123; HelloProperties helloProperties; public HelloProperties getHelloProperties() &#123; return helloProperties; &#125; public void setHelloProperties(HelloProperties helloProperties) &#123; this.helloProperties = helloProperties; &#125; public String sayHellAtguigu(String name)&#123; return helloProperties.getPrefix()+"-" +name + helloProperties.getSuffix(); &#125;&#125; 12345678910111213141516171819202122package com.atguigu.starter;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configuration@ConditionalOnWebApplication //web应用才生效@EnableConfigurationProperties(HelloProperties.class)public class HelloServiceAutoConfiguration &#123; @Autowired HelloProperties helloProperties; @Bean public HelloService helloService()&#123; HelloService service = new HelloService(); service.setHelloProperties(helloProperties); return service; &#125;&#125; 更多SpringBoot整合示例https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F%E6%9E%84%E9%80%A0%E5%9E%8B%2F5.%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[原型模式通过一个原型，可以不断生成产品。 原理创建一个Prototype接口，继承Cloneable接口，然后定义clone方法； 需要实现克隆的类，只需要实现Prototype接口即可； 123public interface Prototype extends Cloneable &#123; Object clone();&#125; 12345678910111213public class Product implements Prototype&#123; // ................ @Override public Object clone() &#123; Object obj = null; try&#123; obj = super.clone(); &#125; catch (CloneNotSupportedException e) &#123; e.printStackTrace(); &#125; return obj; &#125;&#125; 总结前面介绍了单例模式、简单工厂模式、工厂方法模式、抽象工厂模式和原型模式，这些模式都是为了使对象的使用和创建分离开，而且这些模式虽然创建很复杂，但是使用都很简单，对于一些使用比较复杂的情况，就是需要采用创建者模式了。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F7.%E6%8C%81%E4%B9%85%E5%B1%82%2FMyBatis%2F6.%E4%B8%8ESpring%E4%B8%80%E8%B5%B7%E9%A3%9F%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Spring整合MyBatismybatis-spring模块在Spring应用中配置MyBatis在这里我们会讲述,如何在基于Spring框架的应用中安装和配置MyBatis. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;1.2.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework&lt;/groupId&gt;&lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;&lt;version&gt;3.1.3.RELEASE&lt;/version&gt;&lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;commons-logging&lt;/groupId&gt; &lt;artifactId&gt;commons-logging&lt;/artifactId&gt; &lt;/exclusion&gt;&lt;/exclusions&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;3.1.3.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;3.1.3.RELEASE&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.aspectj&lt;/groupId&gt; &lt;artifactId&gt;aspectjrt&lt;/artifactId&gt; &lt;version&gt;1.6.8&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.aspectj&lt;/groupId&gt; &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt; &lt;version&gt;1.6.8&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;cglib&lt;/groupId&gt; &lt;artifactId&gt;cglib-nodep&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;commons-dbcp&lt;/groupId&gt; &lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt; &lt;version&gt;1.4&lt;/version&gt;&lt;/dependency&gt; 使用MyBatis-Spring模块,我们只需要在SpringApplicationContext中配置MyBatis Bean即可,然后Spring会实例化SqlSessionFactory,创建SqlSession对象,并注入到DAO或者Service类. 配置MyBatis Beans为了让Spring实例化MyBatis组件,例如SqlSessionFactory,SqlSession,以及Mapper对象,我们需要在Spring的bean定义文件applicationContext.xml中配置它们. 123456789101112131415161718192021222324252627&lt;beans&gt; &lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt; &lt;property name="driverClassName" value="com.mysql.jdbc.Driver"/&gt; &lt;property name="url"value="jdbc:mysql://localhost:3306/elearning"/&gt; &lt;property name="username" value="root"/&gt; &lt;property name="password" value="admin"/&gt; &lt;/bean&gt; &lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"&gt; &lt;property name="dataSource" ref="dataSource" /&gt; &lt;property name="typeAliases" value="com.mybatis3.domain.Student, com.mybatis3.domain.Tutor"/&gt; &lt;property name="typeAliasesPackage" value="com.mybatis3.domain"/&gt; &lt;property name="typeHandlers" value="com.mybatis3.typehandlers.PhoneTypeHandler"/&gt; &lt;property name="typeHandlersPackage" value="com.mybatis3.typehandlers"/&gt; &lt;property name="mapperLocations" value="classpath*:com/mybatis3/**/*.xml" /&gt; &lt;property name="configLocation" value="WEB-INF/mybatisconfig.xml"/&gt; &lt;/bean&gt; &lt;/beans&gt; 使用SqlSession一旦我们配置了SqlSessionFactory Bean,我们就需要配置SqlSessionTemplate Bean. SqlSessionTemplate Bean是一个线程安全的Spring bean, 通过它我们可以获取线程安全的SqlSession对象. 理论上来讲,SqlSessionTemplate 与Spirng DAO模式相似. 123&lt;bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"&gt; &lt;constructor-arg index="0" ref="sqlSessionFactory" /&gt;&lt;/bean&gt; 现在,我们可以把SqlSession bean 注入到Spring bean,以及使用SqlSession对象调用被映射的SQL语句. 12345678910111213public class StudentDaoImpl implements StudentDao&#123; private SqlSession sqlSession; public void setSqlSession(SqlSession session)&#123; this.sqlSession = session; &#125; public void createStudent(Student student)&#123; StudentMapper mapper =this.sqlSession.getMapper(StudentMapper.class); mapper.insertStudent(student); &#125;&#125; 如果你使用基于XML的配置方法来配置Spring beans,你可以使用下面的方法把SqlSession Bean 注入到 DaoImpl bean中. 123&lt;bean id="studentDao" class="com.mybatis3.dao.StudentDaoImpl"&gt; &lt;property name="sqlSession" ref="sqlSession" /&gt;&lt;/bean&gt; 如果你使用基于注解的配置方法来配置Spring beans,你可以使用下面的方法把SqlSession Bean 注入到 DaoImpl bean中. 123456789101112131415@Repositorypublic class StudentDaoImpl implements StudentDao&#123; private SqlSession sqlSession; @Autowired public void setSqlSession(SqlSession session)&#123; this.sqlSession = session; &#125; public void createStudent(Student student)&#123; StudentMapper mapper =this.sqlSession.getMapper(StudentMapper.class); mapper.insertStudent(student); &#125;&#125; 这里还有一种注入SqlSession对象的方法,那就是继承SqlSessionDaoSupport.通过这种方式我们除了可以映射语句,还能执行所有自定义的逻辑操作. 1234567891011public class StudentMapperImpl extends SqlSessionDaoSupport implementsStudentMapper&#123; public void createStudent(Student student) &#123; StudentMapper mapper = getSqlSession().getMapper(StudentMapper.class); mapper.insertAddress(student.getAddress()); //Custom logic mapper.insertStudent(student); &#125;&#125; 123&lt;bean id="studentMapper" class="com.mybatis3.dao.StudentMapperImpl"&gt; &lt;property name="sqlSessionFactory" ref="sqlSessionFactory" /&gt;&lt;/bean&gt; 通过这种方式,我们注入SqlSession对象,获取Mapper实例,然后执行映射语句.Spring会提供线程安全SqlSession对象,以及在方法执行完毕后关闭SqlSession. MyBatis-Spring模块为我们提供了更好的方式,我们可以直接注入Sql Mapper bean. 使用mappers通过使用MapperFactoryBean我们做可以把mapper接口作为Spring bean来进行配置. 123456public interface StudentMapper&#123; @Select("select stud_id as studId, name, email, phone from students where stud_id=#&#123;id&#125;") Student findStudentById(Integer id);&#125; 1234&lt;bean id="studentMapper" class="org.mybatis.spring.mapper.MapperFactoryBean"&gt; &lt;property name="mapperInterface" value="com.mybatis3.mappers.StudentMapper" /&gt; &lt;property name="sqlSessionFactory" ref="sqlSessionFactory" /&gt;&lt;/bean&gt; 现在sutdentMapper可以被注入到任何Spring bean 然后调用映射语句. 123456789public class StudentService&#123; private StudentMapper studentMapper; public void setStudentMapper (StudentMapperstudentMapper)&#123; this. studentMapper = studentMapper; &#125; public void createStudent(Student student)&#123; this.studentMapper.insertStudent(student); &#125;&#125; 123&lt;bean id="studentService" class="com.mybatis3.services.StudentService"&gt; &lt;property name="studentMapper" ref="studentMapper" /&gt;&lt;/bean&gt; MapperScannerConfigurerMapperScannerConfigurer会注册指定包中的所有Mapper 123&lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt; &lt;property name="basePackage" value="com.mybatis3.mappers" /&gt;&lt;/bean&gt; MyBatis-Spring-1.2.0 新增了两种扫描Mapper 接口的方法 • 使用 mybatis:scan/ 元素• 使用 @MapperScan 注解(requires Spring 3.1+) mybatis:scan/mybatis:scan元素会搜索指定包中的Mapper接口. 123456789&lt;beans xmlns="http://www.springframework.org/schema/beans"xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"xsi:schemaLocation="http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://mybatis.org/schema/mybatis-springhttp://mybatis.org/schema/mybatis-spring.xsd"&gt; &lt;mybatis:scan base-package="com.mybatis3.mappers" /&gt;&lt;/beans&gt; mybatis:scan元素提供了以下属性,我们可以自定义扫描过程. • annotation: 扫描器会注册指定包中所有的接口,并把指定接口作为父类. • factory-ref: 指定使用哪一个SqlSessionFactory.通常在你需要用到多个datasource时才用到. • marker-interface: 扫描器会注册指定包中所有具有特定注解的接口 • template-ref: 指定使用哪一个SqlSessionTemplate.通常在你需要用到多个datasource时才用到. • name-generator: 用于命名与检测组件. @MapperScan你可以使用@MapperScan注解来扫描Mapper接口,@MapperScan的工作方式与mybatis:scan/相类似. 123456789101112131415@Configuration@MapperScan("com.mybatis3.mappers")public class AppConfig&#123; @Bean public DataSource dataSource() &#123; return new PooledDataSource("com.mysql.jdbc.Driver", "jdbc:mysql://localhost:3306/elearning", "root", "admin"); &#125; @Bean public SqlSessionFactory sqlSessionFactory() throws Exception &#123; SqlSessionFactoryBeansessionFactory = new SqlSessionFactoryBean(); sessionFactory.setDataSource(dataSource()); return sessionFactory.getObject(); &#125;&#125; @MapperScan注解提供了以下属性,我们可以自定义扫描过程. • annotationClass: 扫描器会注册指定包中所有具有指定注解的接口,. • markerInterface: 扫描器会注册指定包中所有含有指定接口作为父类的接口. • sqlSessionFactoryRef: 指定使用哪一个SqlSessionFactory. • sqlSessionTemplateRef: 指定使用哪一个SqlSessionTemplate. • nameGenerator: 用于命名和检测位于Spring容器中的组件. • basePackageClasses: A type-safe alternative to basePackages() forspecifying the packages to scan for annotated components. The packageof each class specified will be scanned. • basePackages: Base packages to scan for MyBatis interfaces. Note that only interfaces with at least one method will be registered; concrete classes will be ignored. 使用Spring进行事务管理为了使用Spring的事务管理,我们需要在Spring application context配置TransactionManger Bean. 12345&lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; &lt;property name="dataSource" ref="dataSource" /&gt; &lt;!--dataSource必须与SqlSessionFactory bean的相同.--&gt;&lt;/bean&gt; 开启Spring基于注解的事务管理功能 1&lt;tx:annotation-driven transaction-manager="transactionManager"/&gt; 现在你可以在Spring service beans中使用@Transactional注解,该注解说明service中每个方法都在事务中运行. 方法执行完毕则会提交事务,如果出现任何运行时异常则会业务回滚.另外Spring会把MyBatis Exception转化成DataAccessExceptions,从而额外为错误情况提供细节. 123456789101112131415@Service@Transactionalpublic class StudentService&#123; @Autowired private StudentMapper studentMapper; public Student createStudent(Student student)&#123; studentMapper.insertAddress(student.getAddress()); if(student.getName().equalsIgnoreCase(""))&#123; throw new RuntimeException("Student name should not beempty."); &#125; studentMapper.insertStudent(student); return student; &#125;&#125; 下面是完整的Spring applicationContext.xml 文件 123456789101112131415161718192021222324252627282930313233343536373839&lt;beans&gt; &lt;context:annotation-config /&gt; &lt;context:component-scan base-package="com.mybatis3" /&gt; &lt;context:property-placeholder location="classpath:application.properties" /&gt; &lt;tx:annotation-driven transaction-manager="transactionManager"/&gt; &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; &lt;property name="dataSource" ref="dataSource" /&gt; &lt;/bean&gt; &lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt; &lt;property name="basePackage" value="com.mybatis3.mappers" /&gt; &lt;/bean&gt; &lt;bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"&gt; &lt;constructor-arg index="0" ref="sqlSessionFactory" /&gt; &lt;/bean&gt; &lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"&gt; &lt;property name="dataSource" ref="dataSource" /&gt; &lt;property name="typeAliases" value="com.mybatis3.domain.Student,com.mybatis3.domain.Tutor"/&gt; &lt;property name="typeAliasesPackage" value="com.mybatis3.domain"/&gt; &lt;property name="typeHandlers" value="com.mybatis3.typehandlers.PhoneTypeHandler"/&gt; &lt;property name="typeHandlersPackage" value="com.mybatis3.typehandlers"/&gt; &lt;property name="mapperLocations" value="classpath*:com/mybatis3/**/*.xml" /&gt; &lt;/bean&gt; &lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt; &lt;property name="driverClassName" value="$&#123;jdbc.driverClassName&#125;"/&gt; &lt;property name="url" value="$&#123;jdbc.url&#125;"/&gt; &lt;property name="username" value="$&#123;jdbc.username&#125;"/&gt; &lt;property name="password" value="$&#123;jdbc.password&#125;"/&gt; &lt;/bean&gt; &lt;/beans&gt; 动手实践1234567891011121314151617181920212223242526272829303132333435@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(locations="classpath:applicationContext.xml")public class StudentServiceTest&#123; @Autowired private StudentService studentService; @Test public void testCreateStudent() &#123; Address address = new Address(0, "Quaker RidgeRd.","Bethel","Brooklyn","06801","USA"); Student stud = new Student(); long ts = System.currentTimeMillis(); stud.setName("stud_"+ts); stud.setEmail("stud_"+ts+"@gmail.com"); stud.setAddress(address); Student student = studentService.createStudent(stud); assertNotNull(student); assertEquals("stud_"+ts, student.getName()); assertEquals("stud_"+ts+"@gmail.com", student.getEmail()); System.err.println("CreatedStudent: "+student); &#125; @Test(expected=DataAccessException.class) public void testCreateStudentForException() &#123; Address address = new Address(0, "Quaker RidgeRd.","Bethel","Brooklyn","06801","USA"); Student stud = new Student(); long ts = System.currentTimeMillis(); stud.setName("Timothy"); stud.setEmail("stud_"+ts+"@gmail.com"); stud.setAddress(address); studentService.createStudent(stud); fail("You should not reach here"); &#125;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F%E6%9E%84%E9%80%A0%E5%9E%8B%2F3.%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[简单工厂模式定义:简单工厂模式：实质是由一个Factory类根据传入的参数，动态决定应该创建哪一个产品类实例，被创建的实例通常有共同的父类。 结构模型 Product：抽象产品类，将具体产品类公共的代码进行抽象和提取后封装在一个抽象产品类中。 ConcreteProduct：具体产品类，将需要创建的各种不同产品对象的相关代码封装到具体产品类中。 Factory：工厂类，提供一个工厂类用于创建各种产品，在工厂类中提供一个创建产品的工厂方法，该方法可以根据所传入参数的不同创建不同的具体产品对象。 Client：客户端类，只需调用工厂类的工厂方法并传入相应的参数即可得到一个产品对象。 优缺点优点 创建和使用分离 Client无需知道所创建的ConcreteProduct类名，只需要知道ConcreteProduct所对应的参数。 缺点 Factory类集中所有ConcreteProduct的创建逻辑，职责过重。一旦需要添加新的ConcreteProduct，则需要修改Factory逻辑。违背开闭原则。 由于使用了static方法，造成Factory无法形成基于继承的结构。 例子产品接口 1234public interface Translate &#123; public String translate(String txt);&#125; 具体产品 12345678public class TranslateChinese implements Translate&#123; @Override public String translate(String txt) &#123; return "你好"+txt; &#125;&#125; 具体产品 1234567public class TranslateEnglish implements Translate &#123; @Override public String translate(String txt) &#123; return "Hello "+txt; &#125;&#125; 工厂 123456789101112public class SimpleFactory &#123; public static Translate getTranslate(String type)&#123; switch (type)&#123; case "chinese": return new TranslateChinese(); case "english": return new TranslateEnglish(); default: return null; &#125; &#125;&#125; 客户端 1234567public class Client &#123; public static void main(String[] args) &#123; Translate chinese = SimpleFactory.getTranslate("chinese"); System.out.println(chinese.translate("txt")); &#125;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F%E6%9E%84%E9%80%A0%E5%9E%8B%2F3.%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[工厂方法模式在简单工厂模式中，通过一个工厂类来判断需要创建哪个具体的实现类，隔离了客户端和具体实现类之间的关系，从而降低了系统间的耦合，但是这样带来了一个问题，如果实现类很多，那么这个工厂会变得非常庞大，仍然不利于后期的代码维护。 使用工厂方法模式实现翻译产品接口 1234public interface Translate &#123; public String translate(String txt);&#125; 具体产品 12345678public class TranslateChinese implements Translate&#123; @Override public String translate(String txt) &#123; return "你好"+txt; &#125;&#125; 具体产品 1234567public class TranslateEnglish implements Translate &#123; @Override public String translate(String txt) &#123; return "Hello "+txt; &#125;&#125; 注意这里 工厂接口（也可以是抽象类） 123public interface FactoryMethod &#123; Translate factoryMethod();&#125; 工厂实现类 123456public class ChineseFactoryMethod implements FactoryMethod&#123; @Override public Translate factoryMethod() &#123; return new TranslateChinese(); &#125;&#125; 12345678public class EnglishFactoryMethod implements FactoryMethod &#123; @Override public Translate factoryMethod() &#123; return new TranslateEnglish(); &#125;&#125; 工厂方法模式的实现原理工厂方法模式相对于简单工厂模式来说，就是把一个单一的工厂类，分成了具体的小工厂，并抽象出一个工厂类，这个工厂类只是定义创建的方式，至于创建的具体内容则由它的继承类决定。 简单工厂模式还是工厂方法模式如果对象的创建和初始化工作没什么大的不同，建议直接使用简单工厂模式 如果对象的初始化工作很繁琐，建议用工厂方法模式，另外如果一个类在创建某个对象的时候，还不知道这个对象的具体实现，只是定义了简单的借口，此时采用工厂方法模式比较好。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F%E6%9E%84%E9%80%A0%E5%9E%8B%2F2.%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[简单工厂模式定义:简单工厂模式：实质是由一个Factory类根据传入的参数，动态决定应该创建哪一个产品类实例，被创建的实例通常有共同的父类。 结构模型 Product：抽象产品类，将具体产品类公共的代码进行抽象和提取后封装在一个抽象产品类中。 ConcreteProduct：具体产品类，将需要创建的各种不同产品对象的相关代码封装到具体产品类中。 Factory：工厂类，提供一个工厂类用于创建各种产品，在工厂类中提供一个创建产品的工厂方法，该方法可以根据所传入参数的不同创建不同的具体产品对象。 Client：客户端类，只需调用工厂类的工厂方法并传入相应的参数即可得到一个产品对象。 优缺点优点 创建和使用分离 Client无需知道所创建的ConcreteProduct类名，只需要知道ConcreteProduct所对应的参数。 缺点 Factory类集中所有ConcreteProduct的创建逻辑，职责过重。一旦需要添加新的ConcreteProduct，则需要修改Factory逻辑。违背开闭原则。 由于使用了static方法，造成Factory无法形成基于继承的结构。 例子产品接口 1234public interface Translate &#123; public String translate(String txt);&#125; 具体产品 12345678public class TranslateChinese implements Translate&#123; @Override public String translate(String txt) &#123; return "你好"+txt; &#125;&#125; 具体产品 1234567public class TranslateEnglish implements Translate &#123; @Override public String translate(String txt) &#123; return "Hello "+txt; &#125;&#125; 工厂 123456789101112public class SimpleFactory &#123; public static Translate getTranslate(String type)&#123; switch (type)&#123; case "chinese": return new TranslateChinese(); case "english": return new TranslateEnglish(); default: return null; &#125; &#125;&#125; 客户端 1234567public class Client &#123; public static void main(String[] args) &#123; Translate chinese = SimpleFactory.getTranslate("chinese"); System.out.println(chinese.translate("txt")); &#125;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F7.%E6%8C%81%E4%B9%85%E5%B1%82%2FSpring%20Data%20Access%2FSpring_JDBC_Support%2F1.%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[JDBC基础结构JDBC提供了统一的API来对数据库进行操作。JDBC的核心是驱动类（Driver），驱动类由具体的数据库供应商所提供。当驱动被载入后，它会通过java.sql.DriverManager进行注册，DriverManager负责管理驱动以及提供静态方法建立与数据库的连接。它的getConnection方法会返回java.sql.Connection接口的实现类，该实现类也是由数据库供应商实现，通过该实现类对数据库运行SQL语句。 SpringJDBC基础结构数据库连接和数据源通过注册一个实现了javax.sql.DataSource接口的Bean，Spring可以为我们管理数据库连接（database connection）。数据源（DataSource）和连接（Connection）的区别在于，前者提供以及管理后者。 org.springframework.jdbc.datasource.DriverManagerDataSource是最简单的实现类，通过类名你就可以猜出，它是利用DriverManager来获取Connection。事实上，DriverManagerDataSource并不支持数据库连接池，所以它只能用来做测试使用。 1234567891011121314151617181920212223@Configuration@PropertySource("classpath:db/jdbc2.properties")public class DbConfig &#123; @Value("$&#123;driverClassName&#125;") private String driverClassName; @Value("$&#123;url&#125;") private String url; @Value("$&#123;username&#125;") private String username; @Value("$&#123;password&#125;") private String password; @Lazy @Bean public DataSource dataSource() &#123; DriverManagerDataSource dataSource = new DriverManagerDataSource(); dataSource.setDriverClassName(driver); dataSource.setUrl(url); dataSource.setUsername(username); dataSource.setPassword(password); return dataSource; &#125;&#125; 在实际生产中，你可以使用Apache Commons BasicDataSource 或者其它。 另一种配置DataSource Bean的方法是使用JNDI。未完待续 内置数据库支持从Spring3.0开始，Spring提供内置数据库支持，下面是配置内置数据库的一些代码 12345678910111213141516171819@Configurationpublic class EmbeddedJdbcConfig &#123; private static Logger logger = LoggerFactory.getLogger(EmbeddedJdbcConfig.class); @Bean public DataSource dataSource() &#123; try &#123; EmbeddedDatabaseBuilder dbBuilder = new EmbeddedDatabaseBuilder(); return dbBuilder.setType(EmbeddedDatabaseType.H2) .addScripts("classpath:db/h2/schema.sql", "classpath:db/h2/test-data.sql") .build(); &#125; catch (Exception e) &#123; logger.error("Embedded DataSource bean cannot be created!", e); return null; &#125; &#125; // ...&#125; DAO模式Data Access Object 模式由以下几个组件组成： DAO接口 DAO接口实现类 模型对象（Model Object）也叫作（data object、entities）]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F7.%E6%8C%81%E4%B9%85%E5%B1%82%2F%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAMyBatis%2FMyBatis%E7%94%9F%E6%88%90%E5%99%A8%2F</url>
    <content type="text"><![CDATA[MyBatis生成器快速入门 创建和填写MyBatis生成器的配置文件（下面是你必须填写） &lt;jdbcConnection&gt;：指定如何连接数据库 &lt;javaModelGenerator&gt;：指定在哪个项目哪个目录下生成模型对象 &lt;sqlMapGenerator&gt;：指定在哪个项目哪个目录下生成Mapper文件 &lt;table&gt;：（至少指定一个）根据表生成模型对象和Mapper文件 命令行运行 java -jar mybatis-generator-core-x.x.x.jar -configfile generatorConfig.xml -overwrite 运行MyBatis生成器我们可以通过以下方式运行MyBatis生成器: From the command prompt with an XML configuration As an Ant task with an XML configuration As a Maven Plugin From another Java program with an XML configuration From another Java program with a Java based configuration As an Eclipse Feature 配置文件详解MyBaits生成器MyBatis Generator (MBG)的配置文件主要有以下功能： 指定连接哪个服务器 生成什么对象以及如何生成 根据哪些数据库表来生成对象 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;&lt;generatorConfiguration&gt; &lt;!--指定用于连接数据库的驱动的所在位置--&gt; &lt;classPathEntry location="/Program Files/IBM/SQLLIB/java/db2java.zip" /&gt; &lt;context id="DB2Tables" targetRuntime="MyBatis3"&gt; &lt;jdbcConnection driverClass="COM.ibm.db2.jdbc.app.DB2Driver" connectionURL="jdbc:db2:TEST" userId="db2admin" password="db2admin"&gt; &lt;/jdbcConnection&gt; &lt;javaTypeResolver &gt; &lt;!--关闭强制转换BigDecimals--&gt; &lt;property name="forceBigDecimals" value="false" /&gt; &lt;/javaTypeResolver&gt; &lt;javaModelGenerator targetPackage="test.model" targetProject="\MBGTestProject\src"&gt; &lt;!--启动子包后模型对象会被放置在test.model.db2admin（数据库名）目录下--&gt; &lt;!--不启动子包后模型对象会被放置在test.model目录下--&gt; &lt;property name="enableSubPackages" value="true" /&gt; &lt;property name="trimStrings" value="true" /&gt; &lt;/javaModelGenerator&gt; &lt;sqlMapGenerator targetPackage="test.xml" targetProject="\MBGTestProject\src"&gt; &lt;!--同上--&gt; &lt;property name="enableSubPackages" value="true" /&gt; &lt;/sqlMapGenerator&gt; &lt;javaClientGenerator type="XMLMAPPER" targetPackage="test.dao" targetProject="\MBGTestProject\src"&gt; &lt;!--同上--&gt; &lt;property name="enableSubPackages" value="true" /&gt; &lt;/javaClientGenerator&gt; &lt;table schema="DB2ADMIN" tableName="ALLTYPES" domainObjectName="Customer" &gt; &lt;property name="useActualColumnNames" value="true"/&gt; &lt;generatedKey column="ID" sqlStatement="DB2" identity="true" /&gt; &lt;columnOverride column="DATE_FIELD" property="startDate" /&gt; &lt;ignoreColumn column="FRED" /&gt; &lt;columnOverride column="LONG_VARCHAR_FIELD" jdbcType="VARCHAR" /&gt; &lt;/table&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt; 更多可选元素请看这里。 使用生成的对象MBG生成以下类型的对象 (unless you use the MyBatis3DynamicSql runtime): Java Model Objects (always) SQL Map Files (always for iBATIS, usually for MyBatis) Java Client Objects (optional) A class for use in the xxxByExample methods. See the following pages for information about that class: Example Class Usage Notes Extending the Example Classes]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F7.%E6%8C%81%E4%B9%85%E5%B1%82%2F%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAMyBatis%2F3.MyBatis-Spring%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F6.%E4%B8%9A%E5%8A%A1%E5%B1%82%2FSpringBoot%2F%E9%85%8D%E7%BD%AESpringBoot%2F</url>
    <content type="text"><![CDATA[配置Spring Boot有关配置的基础知识基于XML的配置方式基于注解的配置方式基于Java代码的配置方法# 构造你的代码推荐的包结构Spring Boot推荐使用传统的包结构，com.example.project. 找到你主应用程序类SpringBoot建议把主应用程序类放在包的跟目录，也就是com.example.project.MainApplication.java。 我们通常会用@SpringBootApplication来修饰主应用程序类，该注解会为某些框架提供基础扫搜路径。 例如，在我们写JPA应用的时候，@SpringBootApplicaiton注解修饰的类的包用于搜索@Entity。 使用根包（root package）还允许让组件扫描仅用于你的项目。 @SpringBootApplication注解内部使用了@EnableAutoConfiguration和@ComponentScan注解，如果你不想使用@SpringBootApplication，那么你可以用着两个注解代替。 一个主应用程序类的模板 1234567891011package com.example.myapplication;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class Application&#123; public static void main(String[] args)&#123; SpringApplication.run(Application.class); &#125; &#125; 基于Java的配置方式SpringBoot推荐使用基于Java的配置方式。 @Configuration12345@Target(value=TYPE)@Retention(value=RUNTIME)@Documented@Componentpublic @interface Configuration @Configuration表示一个类是配置类,它声明了一个或多个@Bean方法,告诉Spring,需要把什么组件添加到容器中。 (容器管理的组件叫做Bean) 往容器添加组件的三种方法 在配置类使用@Bean修饰方法. 包扫描+组件类型的注解 @Import注解 @Bean123456789@Configurationpublic class MyConfig &#123; @Bean public String hello()&#123; return "Hello World"; &#125;&#125; @包扫描+组件类型的注解1234567891011121314151617181920212223242526@Configuration@ComponentScan("com.hdr.spring_demo")/*** @ComponentScan 配置组件扫描,指定从哪个包下扫描组件* 需要与@Configuration一起使用* 相当于XML配置的 &lt;context:component-scan&gt;*/public class MyConfig &#123; @Bean public String hello()&#123; return "Hello World"; &#125;&#125;@Component/*** 组件类型的注解:@Controller @Service @Repository @Component等等*/public class MyComponent &#123; public void sayHello()&#123; System.out.println("Hello I am Component"); &#125;&#125; @Import注解@Import注解，它的作用其实就是引入一个或多个类，可以引入普通类，也可以引入配置类。 1234567@Target(&#123;ElementType.TYPE&#125;)@Retention(RetentionPolicy.RUNTIME)@Documentedpublic @interface Import &#123; Class&lt;?&gt;[] value();&#125;// value可以是Configuration, ImportSelector, ImportBeanDefinitionRegistrar 和普通组件类 ImportSelector接口12java.lang.String[] selectImports(AnnotationMetadata importingClassMetadata) //根据导入的@Configuration类的AnnotationMetadata选择并返回应导入哪个类的名称。 ImportBeanDefinitionRegistrar接口1234void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) //importingClassMetadata 导入类的注释元数据 //包含bean定义的注册表的接口 ## @Enable*注解的详解Enable 中文意思是启动。 现在我们通过@EnableWebMvc注解来了解了解。 123456@Retention(RetentionPolicy.RUNTIME)@Target(&#123;ElementType.TYPE&#125;)@Documented@Import(&#123;DelegatingWebMvcConfiguration.class&#125;)public @interface EnableWebMvc &#123;&#125; 很明显,这里导入了一个配置类DelegatingWebMvcConfiguration 12@Configurationpublic class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport 根据API的描述，它是WebMvcConfigurationSupport类的子类,它的功能是检测和调用所有WebConfigurer类型的Bean. 允许这些Bean自定义WebMvcConfigurationSupport提供的配置. @EnableAspectJAutoProxy 激活Aspect自动代理 对应的XML配置 &lt;aop:aspectj-autoproxy/&gt; @EnableAsync 开启异步方法的支持。 @EnableScheduling 开启计划任务的支持。 @EnableWebMVC 开启Web MVC的配置支持。 @EnableConfigurationProperties 开启对@ConfigurationProperties注解配置Bean的支持。 @EnableJpaRepositories 开启对Spring Data JPA Repostory的支持。 @EnableTransactionManagement 开启注解式事务的支持。 @EnableCaching 开启注解式的缓存支持 添加额外的配置类正如我们上面提到的，@Import可以帮我们引入额外配置类。另外，我们还可以使用@ComponentScan注解获取所有Spring组件（component）。 导入XML配置我们可以使用@ImportResource注解导入XML配置文件 自动配置（Auto-configuration）Spring Boot会尝试根据你所添加的jar依赖来自动对你的Spring应用进行配置。 例如，导入HSQLDB包后，你不需要配置任何的数据库连接的Bean，Spring Boot自动为你配置一个内存中的数据库。 你需要通过将@EnableAutoConfiguration或@SpringBootApplication注解添加到其中一个@Configuration类来进行自动配置。 替换部分默认配置禁用特定的自动配置类如果你想禁用某个自动配置类，有两种办法 @EnableAutoConfiguration注解 1234@Configuration@EnableAutoConfiguration(exclude=&#123;DataSourceAutoConfiguration.class&#125;)// 如果这个自动配置类不在类路径中，你可以使用excludeName属性，指定一个全限定名。public class MyConfiguration&#123;&#125; 在SpringBoot配置文件中修改spring.autoconfigure.exclude属性的值。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F7.%E6%8C%81%E4%B9%85%E5%B1%82%2FMyBatis%2F1.%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[简介什么是MyBatis？ MyBatis是一款优秀的持久层框架。它支持制定化SQL，存储过程以及高级映射。 简而言之嘛，就是用来从数据库中存取数据。 为什么要用MyBatis？ 我们知道MyBatis是个框架，框架存在的意义其实就是为了减轻我们的负担，用更少的代码做更多的事情。 在传统的Web开发中，我们是怎么实现数据的存取的呢？ 一般，使用JDBC API实现从数据库中存取数据。 这么做有什么问题呢？代码冗余,重用性也不高，不好维护。 那么MyBatis又是怎么做的呢？ 你只需要编写一个配置文件和映射文件就可以了。 简单来说，映射文件就是一个写Sql语句的地方。 配置文件顾名思义就是对MyBatis进行配置。 让我们通过一个例子来体验一下~ MyBatis的工作流程 例子该例子通过maven来构建项目 使用工具： jdk 1.8 mysql-connector-java 5.1.15 mybatis 引入依赖1234567891011&lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.15&lt;/version&gt;&lt;/dependency&gt; 前期工作创建User Bean123456public class User &#123; private int id; private String userName; private String password; // getter setter&#125; 创建UserRepository接口123456public interface UserRepository &#123; public int insert(User user); public int update(User user); public int deleteById(int id); public User selectById(int id);&#125; 创建数据库与表12345678create database mybatis_demo default character set = utf8;create table tb_user( id int(11) NOT NULL AUTO_INCREMENT, username varchar(40) default null, password varchar(50) default null, primary key (id))ENGINE=InnoDB DEFAULT CHARSET=utf8; MyBatis的配置与映射这里先看看就好了，后面我们会详细讲解 生成SqlSession的工具类SqlSession对象是用来执行sql语句以及获取结果的，它由SqlSessionFactory生成。 1234567891011121314151617public class SqlSessionProvider &#123; static SqlSessionFactory factory; static &#123; Reader reader = null; // 查找配置文件，SqlSessionFactory对象的创建需要用到配置文件中的信息 String resource = "MyBatis-Config.xml"; try &#123; reader = Resources.getResourceAsReader(resource); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; factory = new SqlSessionFactoryBuilder().build(reader); &#125; public static SqlSession getSqlSession()&#123; return factory.openSession(); &#125;&#125; MyBatis-Config.xml正如前面所说，我们需要两个文件，一个是配置文件，一个是映射文件，这个就是我们的配置文件。 123456789101112131415161718192021222324252627&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;configuration&gt; &lt;typeAliases&gt; &lt;typeAlias alias="User" type="com.hdr.mybatisDemo.domain.User"/&gt; &lt;/typeAliases&gt; &lt;environments default="development"&gt; &lt;environment id="development"&gt; &lt;transactionManager type="JDBC"/&gt; &lt;dataSource type="POOLED"&gt; &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt; &lt;property name="url" value="jdbc:mysql://127.0.0.1:3306/mybatis_demo?characterEncoding=utf8"/&gt; &lt;property name="username" value="root"/&gt; &lt;property name="password" value="admin"/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource="mappers/UserRepository.xml"/&gt; &lt;/mappers&gt;&lt;/configuration&gt; UserRepository.xml123456789101112131415161718192021222324&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;&lt;mapper namespace="com.hdr.mybatisDemo.domain.repository.UserRepository"&gt; &lt;insert id="insert" parameterType="User" useGeneratedKeys="true" keyProperty="id"&gt; insert into tb_user(username,password) values (#&#123;userName&#125;,#&#123;password&#125;) &lt;/insert&gt; &lt;select id="selectById" parameterType="int" resultType="User"&gt; select * from tb_user where id = #&#123;id&#125;; &lt;/select&gt; &lt;update id="update" parameterType="User"&gt; update tb_user set username=#&#123;username&#125;, password=#&#123;password&#125; where id= #&#123;id&#125;; &lt;/update&gt; &lt;delete id="deleteById" parameterType="int"&gt; delete * from tb_user where id=#&#123;id&#125;; &lt;/delete&gt; &lt;select id="selectAll" resultType="User"&gt; select * from tb_user order by id asc ; &lt;/select&gt;&lt;/mapper&gt; 初试MyBatis1234567891011121314151617181920212223public class Demo &#123; public static void main(String[] args) &#123; User user = new User(); user.setUserName("hdr"); user.setPassword("admin"); try(SqlSession sqlSession = SqlSessionProvider.getSqlSession())&#123; UserRepository userRepository = sqlSession.getMapper(UserRepository.class); // 插入用户 userRepository.insert(user); System.out.println(userRepository.selectById(user.getId())); //更新用户信息 user.setUserName("hyc"); userRepository.update(user); System.out.println(userRepository.selectById(user.getId())); //删除用户 userRepository.deleteById(user.getId()); System.out.println(userRepository.selectById(user.getId())); //提交事务 sqlSession.commit(); &#125; &#125;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F7.%E6%8C%81%E4%B9%85%E5%B1%82%2FMyBatis%2F3.%E4%BD%BF%E7%94%A8Java%20API%E9%85%8D%E7%BD%AEMyBatis%2F</url>
    <content type="text"><![CDATA[使用Java Api 配置MyBatisEnvironment1Environment environment = new Environment("development",transactionFactory, dataSource); TransactionFactoryMyBatis提供以下两种TransactionFactory接口的实现类 • JdbcTransactionFactory• ManagedTransactionFactory 如果应用程序在非管理环境下运行,你应该使用JdbcTransactionFactory. 1TransactionFactory transactionFactory = new JdbcTransactionFactory(); 如果应用程序运行在管理环境下,以及使用容器支持的事务管理服务,你就要用ManagedTransactionFactory. 1TransactionFactory txnFactory = new ManagedTransactionFactory(); DataSource12345String driver = "com.mysql.jdbc.Driver";String url = "jdbc:mysql://localhost:3306/mybatis_review";String username = "root";String password = "admin";DataSource dataSource = new PooledDataSource(driver,url,username,password); 在实际生产环境中,我们会在应用服务器中配置DataSource,然后通过JNDI获取DataSource. 123456789101112131415public class DataSourceFactory&#123; public static DataSource getDataSource() &#123; String jndiName = "java:comp/env/jdbc/MyBatisDemoDS"; try &#123; InitialContext ctx = new InitialContext(); DataSource dataSource = (DataSource) ctx.lookup(jndiName); return dataSource; &#125; catch (NamingException e) &#123; throw new RuntimeException(e); &#125; &#125;&#125; 网上有很多第三方库,实现了javax.sql.DataSource接口,我们可以使用这些库来创建DataSource. Configuration1Configuration configuration = new Configuration(environment); typeAliasesMyBatis提供多种方法来实现在Configuration对象上注册TypeAliases. 123456789101112// 使用首字母小写的类名作为别名configuration.getTypeAliasRegistry().registerAlias(Student.class);// 使用Student作为类型别名configuration.getTypeAliasRegistry().registerAlias("Student",Student.class);// configuration.getTypeAliasRegistry().registerAlias("Student", "com.mybatis3.domain.Student");// 为包中所有类注册别名configuration.getTypeAliasRegistry().registerAliases("com.mybatis3.domain");// 为包中所有继承Identifiable的类注册别名configuration.getTypeAliasRegistry().registerAliases("com.mybatis3.domain", Identifiable.class); 注册typeHandler12345configuration.getTypeHandlerRegistry().register(PhoneNumber.class,PhoneTypeHandler.class);configuration.getTypeHandlerRegistry().register(PhoneTypeHandler.class);configuration.getTypeHandlerRegistry().register("com.mybatis3.typehandlers"); Settings12345678910111213141516171819configuration.setCacheEnabled(true);configuration.setLazyLoadingEnabled(false);configuration.setMultipleResultSetsEnabled(true);configuration.setUseColumnLabel(true);configuration.setUseGeneratedKeys(false);configuration.setAutoMappingBehavior(AutoMappingBehavior.PARTIAL);configuration.setDefaultExecutorType(ExecutorType.SIMPLE);configuration.setDefaultStatementTimeout(25);configuration.setSafeRowBoundsEnabled(false);configuration.setMapUnderscoreToCamelCase(false);configuration.setLocalCacheScope(LocalCacheScope.SESSION);configuration.setAggressiveLazyLoading(true);configuration.setJdbcTypeForNull(JdbcType.OTHER);Set&lt;String&gt; lazyLoadTriggerMethods = new HashSet&lt;String&gt;();lazyLoadTriggerMethods.add("equals");lazyLoadTriggerMethods.add("clone");lazyLoadTriggerMethods.add("hashCode");lazyLoadTriggerMethods.add("toString");configuration.setLazyLoadTriggerMethods(lazyLoadTriggerMethods ); Mappers1234configuration.addMapper(StudentMapper.class);configuration.addMappers("com.mybatis3.mappers");// 注册在com.mybatis3.mappers中,实现了BaseMapper接口的映射文件configuration.addMappers("com.mybatis3.mappers", BaseMapper.class); SqlSessionFactory之前我们是根据xml文件来创建SqlSessionFactory,现在我们使用代码来创建SqlSessionFactory 12345678910public static SqlSessionFactory getSqlSessionFactory()&#123; SqlSessionFactory sqlSessionFactory = null; try&#123; sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration); &#125;catch (Exception e)&#123; throw new RuntimeException(e); &#125; return sqlSessionFactory;&#125; 自定义MyBatis日志MyBatis使用它内部的LoggerFactory作为门面,其内部则是把记录工作委派给下面这些记录实现类. • SLF4J• Apache Commons Logging• Log4j 2• Log4j• JDK logging 如果上面的实现类都不存在,则不会进行记录. 如果你程序的运行环境具有上述多个记录实现类,而你又想使用某个实现类,你可以使用下面的方法. • org.apache.ibatis.logging.LogFactory.useSlf4jLogging();• org.apache.ibatis.logging.LogFactory.useLog4JLogging();• org.apache.ibatis.logging.LogFactory.useLog4J2Logging();• org.apache.ibatis.logging.LogFactory.useJdkLogging();• org.apache.ibatis.logging.LogFactory.useCommonsLogging();• org.apache.ibatis.logging.LogFactory.useStdOutLogging();]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F7.%E6%8C%81%E4%B9%85%E5%B1%82%2FMyBatis%2F5.%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E8%BF%9B%E8%A1%8CSQL%E6%98%A0%E5%B0%84%2F</url>
    <content type="text"><![CDATA[使用注解进行SQL映射在上一篇文章中,我们知道了如果在XML文件中配置映射语句. 下面我们来看看如果使用注解进行SQL映射. 语句映射@Insert123456789101112public interface StudentMapper&#123; @Insert("INSERT INTO STUDENTS(STUD_ID,NAME,EMAIL,ADDR_ID, PHONE) VALUES(#&#123;studId&#125;,#&#123;name&#125;,#&#123;email&#125;,#&#123;address.addrId&#125;,#&#123;phone&#125;)") // 获取生成的键 // @Options(useGeneratedKeys=true, keyProperty="studId") // 不是所有的数据库都支持auto_increment 例如Oracle 这时候我们要 /* @SelectKey(statement="SELECT STUD_ID_SEQ.NEXTVAL FROM DUAL", keyProperty="studId", resultType=int.class, before=true) */ int insertStudent(Student student);&#125; @Update123@Update("UPDATE STUDENTS SET NAME=#&#123;name&#125;, EMAIL=#&#123;email&#125;,PHONE=#&#123;phone&#125; WHERE STUD_ID=#&#123;studId&#125;")int updateStudent(Student student);// 该方法会返回Update操作修改了多少行数据 @Delete123@Delete("DELETE FROM STUDENTS WHERE STUD_ID=#&#123;studId&#125;")int deleteStudent(int studId);// 返回删除了多少行 @Select1234567package com.mybatis3.mappers;public interface StudentMapper&#123; @Select("SELECT STUD_ID AS STUDID, NAME, EMAIL, PHONE FROM"+ "STUDENTS WHERE STUD_ID=#&#123;studId&#125;") Student findStudentById(Integer studId);&#125; Result maps1234567891011public interface StudentMapper&#123; @Select("SELECT * FROM STUDENTS") @Results(&#123; @Result(id=true, column="stud_id", property="studId"), @Result(column="name", property="name"), @Result(column="email", property="email"), @Result(column="addr_id", property="address.addrId") &#125;) List&lt;Student&gt; findAllStudents();&#125; 老司机可能马上就会发现,这样写不就意味着,需要不断的重复这段代码? 是的,但是MyBatis有个补救方法,我们可以使用定义在映射文件中编写的resultMap 123456789&lt;mapper namespace="com.mybatis3.mappers.StudentMapper"&gt; &lt;resultMap type="Student" id="StudentResult"&gt; &lt;id property="studId" column="stud_id"/&gt; &lt;result property="name" column="name"/&gt; &lt;result property="email" column="email"/&gt; &lt;result property="phone" column="phone"/&gt; &lt;/resultMap&gt; &lt;!--..............--&gt;&lt;/mapper&gt; 12345678910public interface StudentMapper&#123; @Select("SELECT * FROM STUDENTS WHERE STUD_ID=#&#123;studId&#125;") @ResultMap("com.mybatis3.mappers.StudentMapper.StudentResult") Student findStudentById(int studId); @Select("SELECT * FROM STUDENTS") @ResultMap("com.mybatis3.mappers.StudentMapper.StudentResult") List&lt;Student&gt; findAllStudents();&#125; 一对一映射MyBatis提供@One注解使用嵌套Select语句从而读取一对一关联. 12345678910111213141516public interface StudentMapper&#123; @Select("SELECT ADDR_ID AS ADDRID, STREET, CITY, STATE, ZIP, COUNTRY"+ "FROM ADDRESSES WHERE ADDR_ID=#&#123;id&#125;") Address findAddressById(int id); @Select("SELECT * FROM STUDENTS WHERE STUD_ID=#&#123;studId&#125; ") @Results(&#123; @Result(id=true, column="stud_id", property="studId"), @Result(column="name", property="name"), @Result(column="email", property="email"), @Result(property="address", column="addr_id", one=@One(select="com.mybatis3.mappers.StudentMapper.findAddressById")) &#125;) Student selectStudentWithAddress(int studId);&#125; 一对多映射MyBatis提供@Many注解使用嵌套Select语句从而读取一对多关联. 1234567891011121314151617181920212223242526272829public interface TutorMapper&#123; @Select("select addr_id as addrId, street, city, state, zip,"+ "country from addresses where addr_id=#&#123;id&#125;") Address findAddressById(int id); @Select("select * from courses where tutor_id=#&#123;tutorId&#125;") @Results(&#123; @Result(id=true, column="course_id", property="courseId"), @Result(column="name", property="name"), @Result(column="description", property="description"), @Result(column="start_date" property="startDate"), @Result(column="end_date" property="endDate") &#125;) List&lt;Course&gt; findCoursesByTutorId(int tutorId); @Select("SELECT tutor_id, name as tutor_name, email, addr_id"+ "FROM tutors where tutor_id=#&#123;tutorId&#125;") @Results(&#123; @Result(id=true, column="tutor_id", property="tutorId"), @Result(column="tutor_name", property="name"), @Result(column="email", property="email"), @Result(property="address", column="addr_id", one=@One(select=" com.mybatis3.mappers.TutorMapper.findAddressById")), @Result(property="courses", column="tutor_id", many=@Many(select="com.mybatis3.mappers.TutorMapper.findCoursesByTutorId")) &#125;) Tutor findTutorById(int tutorId);&#125; 动态SQL@SelectProvider123456789public class TutorDynaSqlProvider&#123; public String findTutorByIdSql(final int tutorId)&#123; return new SQL() &#123;&#123; SELECT("tutor_id as tutorId, name, email"); FROM("tutors"); WHERE("tutor_id="+tutorId); &#125;&#125;.toString(); &#125;&#125; 12@SelectProvider(type=TutorDynaSqlProvider.class,method="findTutorByIdSql")Tutor findTutorById(int tutorId); 如果不需要传递参数 12345678public String findTutorByIdSql()&#123; return new SQL() &#123;&#123; SELECT("tutor_id as tutorId, name, email"); FROM("tutors"); WHERE("tutor_id = #&#123;tutorId&#125;"); &#125;&#125;.toString();&#125; 注意:SqlProvider方法的参数有以下三种选项 没参数 只有一个与Mapper接口方法具有相同类型的参数 java.util.Map 12@SelectProvider(type=TutorDynaSqlProvider.class,method="findTutorByNameAndEmailSql")Tutor findTutorByNameAndEmail(String name, String email); 12345678910111213public String findTutorByNameAndEmailSql(Map&lt;String, Object&gt; map)&#123; String name = (String) map.get("param1"); String email = (String) map.get("param2"); //you can also get those values using 0,1 keys //String name = (String) map.get("0"); //String email = (String) map.get("1"); return new SQL() &#123;&#123; SELECT("tutor_id as tutorId, name, email"); FROM("tutors"); WHERE("name=#&#123;name&#125; AND email=#&#123;email&#125;"); &#125;&#125;.toString();&#125; @InsertProvider123456789101112131415public class TutorDynaSqlProvider&#123; public String insertTutor(final Tutor tutor) &#123; return new SQL() &#123;&#123; INSERT_INTO("TUTORS"); if (tutor.getName() != null) &#123; VALUES("NAME", "#&#123;name&#125;"); &#125; if (tutor.getEmail() != null) &#123; VALUES("EMAIL", "#&#123;email&#125;"); &#125; &#125;&#125;.toString(); &#125;&#125; 123456public interface TutorMapper&#123; @InsertProvider(type=TutorDynaSqlProvider.class,method="insertTutor") @Options(useGeneratedKeys=true, keyProperty="tutorId") int insertTutor(Tutor tutor);&#125; @UpdateProvider12345678910111213141516public class TutorDynaSqlProvider&#123; public String updateTutor(final Tutor tutor) &#123; return new SQL() &#123;&#123; UPDATE("TUTORS"); if (tutor.getName() != null) &#123; SET("NAME = #&#123;name&#125;"); &#125; if (tutor.getEmail() != null) &#123; SET("EMAIL = #&#123;email&#125;"); &#125; WHERE("TUTOR_ID = #&#123;tutorId&#125;"); &#125;&#125;.toString(); &#125;&#125; 12345public interface TutorMapper&#123; @UpdateProvider(type=TutorDynaSqlProvider.class,method="updateTutor") int updateTutor(Tutor tutor);&#125; @DeleteProvider12345678910public class TutorDynaSqlProvider&#123; public String deleteTutor(int tutorId) &#123; return new SQL() &#123;&#123; DELETE_FROM("TUTORS"); WHERE("TUTOR_ID = #&#123;tutorId&#125;"); &#125;&#125;.toString(); &#125;&#125; 12345public interface TutorMapper&#123; @DeleteProvider(type=TutorDynaSqlProvider.class,method="deleteTutor") int deleteTutor(int tutorId);&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[Java中的代理模式代理(Proxy)是一种设计模式,提供了对目标对象另外的访问方式;即通过代理对象访问目标对象.这样做的好处是:可以在目标对象实现的基础上,增强额外的功能操作,即扩展目标对象的功能.这里使用到编程中的一个思想:不要随意去修改别人已经写好的代码或者方法,如果需改修改,可以通过代理的方式来扩展该方法 举个例子来说明代理的作用:假设我们想邀请一位明星,那么并不是直接连接明星,而是联系明星的经纪人,来达到同样的目的.明星就是一个目标对象,他只要负责活动中的节目,而其他琐碎的事情就交给他的代理人(经纪人)来解决.这就是代理思想在现实中的一个例子 用图表示如下: 代理模式的关键点是:代理对象与目标对象.代理对象是对目标对象的扩展,并会调用目标对象 三种代理模式1.静态代理静态代理在使用时,需要定义接口或者父类,被代理对象与代理对象一起实现相同的接口或者是继承相同父类. 下面举个案例来解释: 模拟保存动作,定义一个保存动作的接口:IUserDao.java,然后目标对象实现这个接口的方法UserDao.java,此时如果使用静态代理方式,就需要在代理对象(UserDaoProxy.java)中也实现IUserDao接口.调用的时候通过调用代理对象的方法来调用目标对象. 需要注意的是,代理对象与目标对象要实现相同的接口,然后通过调用相同的方法来调用目标对象的方法 123456/** * 接口 */public interface IUserDao &#123; void save();&#125; 123456789/** * 接口实现 * 目标对象 */public class UserDao implements IUserDao &#123; public void save() &#123; System.out.println("----已经保存数据!----"); &#125;&#125; 12345678910111213141516/** * 代理对象,静态代理 */public class UserDaoProxy implements IUserDao&#123; //接收保存目标对象 private IUserDao target; public UserDaoProxy(IUserDao target)&#123; this.target=target; &#125; public void save() &#123; System.out.println("开始事务..."); target.save();//执行目标对象的方法 System.out.println("提交事务..."); &#125;&#125; 静态代理总结:1.可以做到在不修改目标对象的功能前提下,对目标功能扩展.2.缺点: 因为代理对象需要与目标对象实现一样的接口,所以会有很多代理类,类太多.同时,一旦接口增加方法,目标对象与代理对象都要维护. 如何解决静态代理中的缺点呢?答案是使用动态代理方式 2.动态代理动态代理有以下特点:1.代理对象,不需要实现接口2.代理对象的生成,是利用JDK的API,动态的在内存中构建代理对象(需要我们指定创建代理对象/目标对象实现的接口的类型)3.动态代理也叫做:JDK代理,接口代理 JDK中生成代理对象的API 代理类所在包:java.lang.reflect.Proxy JDK实现代理只需要使用newProxyInstance方法,但是该方法需要接收三个参数,完整的写法是: 12static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces,InvocationHandler h ) 注意该方法是在Proxy类中是静态方法,且接收的三个参数依次为: ClassLoader loader,:指定当前目标对象使用类加载器,获取加载器的方法是固定的 Class&lt;?&gt;[] interfaces,:目标对象实现的接口的类型,使用泛型方式确认类型 InvocationHandler h:事件处理,执行目标对象的方法时,会触发事件处理器的方法,会把当前执行目标对象的方法作为参数传入 代码示例: 1234567891011121314151617181920212223242526272829303132333435/** * 创建动态代理对象 * 动态代理不需要实现接口,但是需要指定接口类型 */public class ProxyFactory&#123; //维护一个目标对象 private Object target; public ProxyFactory()&#123; &#125; //给目标对象生成代理对象 public Object getProxyInstance(Object target)&#123; this.target=target; return Proxy.newProxyInstance( /* 既然要创建对象,那么就要有类型,实现什么接口,调用它的方法要怎么处理. */ target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InvocationHandler() &#123; @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; System.out.println("开始事务2"); //执行目标对象方法 Object returnValue = method.invoke(target, args); System.out.println("提交事务2"); return returnValue; &#125; &#125; ); &#125;&#125; 总结: 代理对象不需要实现接口,但是目标对象一定要实现接口,否则不能用动态代理 3.Cglib代理上面的静态代理和动态代理模式都是要求目标对象是实现一个接口的目标对象,但是有时候目标对象只是一个单独的对象,并没有实现任何的接口,这个时候就可以使用以目标对象子类的方式类实现代理,这种方法就叫做:Cglib代理. Cglib代理,也叫作子类代理,它是在内存中构建一个子类对象从而实现对目标对象功能的扩展. JDK的动态代理有一个限制,就是使用动态代理的对象必须实现一个或多个接口,如果想代理没有实现接口的类,就可以使用Cglib实现. Cglib是一个强大的高性能的代码生成包,它可以在运行期扩展java类与实现java接口.它广泛的被许多AOP的框架使用,例如Spring AOP和synaop,为他们提供方法的interception(拦截) Cglib包的底层是通过使用一个小而块的字节码处理框架ASM来转换字节码并生成新的类.不鼓励直接使用ASM,因为它要求你必须对JVM内部结构包括class文件的格式和指令集都很熟悉. Cglib子类代理实现方法:1.需要引入cglib的jar文件2.引入功能包后,就可以在内存中动态构建子类3.被代理的类不能为final,否则报错4.目标对象的方法如果为final/static,那么就不会被拦截,即不会执行目标对象额外的业务方法. 1234567891011121314151617181920212223242526272829303132333435/** * Cglib子类代理工厂 * 对UserDao在内存中动态构建一个子类对象 */public class ProxyFactory implements MethodInterceptor&#123; // 维护目标对象 private Object target; // 设置目标对象 public ProxyFactory() &#123; &#125; //给目标对象创建一个代理对象 public Object getProxyInstance(Object target)&#123; this.target = target; //1.工具类 Enhancer en = new Enhancer(); //2.设置父类 en.setSuperclass(target.getClass()); //3.设置回调函数 en.setCallback(this); //4.创建子类(代理对象) return en.create(); &#125; @Override public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable &#123; System.out.println("开始事务..."); //执行目标对象的方法 Object returnValue = method.invoke(target, args); System.out.println("提交事务..."); return returnValue; &#125;&#125; 123456public static void main(String[] args) &#123; Star star = new Star(); ProxyFactory factory = new ProxyFactory(); Star starProxy = (Star) factory.getInstance(star); starProxy.sing();&#125; 在Spring的AOP编程中: 如果加入容器的目标对象有实现接口,用JDK代理 如果目标对象没有实现接口,用Cglib代理]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F7.%E6%8C%81%E4%B9%85%E5%B1%82%2FSpring%20Data%20Access%2FSpring_JDBC_Support%2F2.JdbcTemplate%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F%E6%9E%84%E9%80%A0%E5%9E%8B%2F1.%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[单例模式单例模式就是一个类只能拥有一个实例. 饥汉式单例模式Java的Runtime类就是使用了单例模式,下面我们来看看他的源码. 1234567891011public class Runtime &#123; private static Runtime currentRuntime = new Runtime(); public static Runtime getRuntime() &#123; return currentRuntime; &#125; private Runtime() &#123;&#125; // ................&#125; Runtime类的代码不少,但是关于单例模式的,只看上面的代码就可以了 定义一个静态变量,用来存储唯一实例 私有化构造器,禁止外部创建新实例 提供一个返回实例的方法 上面这种结构的单例类叫做饥汉式单例模式 懒汉式单例模式1234567891011121314public class LazySingleton &#123; private static LazySingleton singleton = null; private LazySingleton() &#123; &#125; private static LazySingleton getSingleton() &#123; if (singleton == null) &#123; singleton = new LazySingleton(); &#125; return singleton; &#125;&#125; 双检测锁机制的单例模式懒汉式单例模式在多线程中不安全。 123456789101112131415161718public class FixLazySingleton &#123; private static DoubleCheckSingleton singleton = null; private DoubleCheckSingleton() &#123; &#125; public static synchronized DoubleCheckSingleton getSingleton()&#123; if(singleton==null)&#123; singleton = new DoubleCheckSingleton(); &#125; return singleton; &#125;&#125;//----------------------------------------------------------------------/**synchronized的作用synchronized 关键字，代表这个方法加锁,相当于不管哪一个线程（例如线程A），运行到这个方法时,都要检查有没有其它线程B（或者C、 D等）正在用这个方法(或者该类的其他同步方法)，有的话要等正在使用synchronized方法的线程B（或者C 、D）运行完这个方法后再运行此线程A,没有的话,锁定调用者,然后直接运行。它包括两种用法：synchronized 方法和 synchronized 块。*/ 上面的做法虽然解决了懒汉式单例模式多线程不安全的问题,但是性能不好. 123456789101112131415161718public class DoubleCheckSingleton &#123; private static DoubleCheckSingleton singleton = null; private DoubleCheckSingleton() &#123; &#125; public static DoubleCheckSingleton getSingleton()&#123; if(singleton==null)&#123; synchronized(DoubleCheckSingleton.class)&#123; if(singleton==null)&#123; singleton = new DoubleCheckSingleton(); &#125; &#125; &#125; return singleton; &#125;&#125; 这就是双检测锁机制的单例模式]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F6.%E4%B8%9A%E5%8A%A1%E5%B1%82%2FSpring%2F2.Spring%20IoC%E5%AE%B9%E5%99%A8%E4%B8%8EBean%2F</url>
    <content type="text"><![CDATA[Spring IoC容器与Bean1.IoC容器IcC，Inversion of control，意思是控制反转。在实际开发中，常常会有一个对象的功能的实现需要依赖另一个对象的情况，也就是说一个对象为了完成工作，必须获得另一个对象。传统开发中，对象获取其依赖对象的过程由它自身来完成，这个做法会导致代码冗余以及代码难以调试。而控制反转设计原则，则是把对象获取其依赖对象的过程，交由容器来完成。容器为对象注入它所依赖的对象。由于获取依赖对象的方式被反转了，因此得名控制反转。 2.Bean在软件开发中，习惯把可重用的组件叫做Bean。例如JavaBean其实就是可重用的组件，然后它还带有Java的色彩，所以就叫JavaBean。在Spring中，由IoC容器管理的组件就叫做Bean。 3.容器的创建和使用org.springframework.context.ApplicationContext代表Spring IoC容器,它负责Bean的实例化、配置以及组装. 容器读取配置元数据了解需要创建哪些对象,以及如何配置和管理这些对象.配置元数据可以是XML文件也可以是Java代码. spring提供了一些ApplicationContext接口的实现类.分别是 ClassPathXmlApplicationContext 容器从XML文件中读取配置信息 FileSystemXmlApplicationContext 容器从XML文件中读取配置信息 AnnotationConfigApplicationContext 容器从Java文件中读取配置信息 3.1创建容器创建Java配置 1234@Configurationpublic class AppConfig &#123; // bean definition&#125; 创建容器 123456ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();ctx.register(AppConfig.class, OtherConfig.class);ctx.refresh(); 3.2使用容器容器提供了一个getBean方法，让我们可以从容器中获取Bean 1PetStoreService service = context.getBean("petStore", PetStoreService.class);]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F6.%E4%B8%9A%E5%8A%A1%E5%B1%82%2FSpring%2F%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3SpringIoC%E5%AE%B9%E5%99%A8%2F</url>
    <content type="text"><![CDATA[简介Spring的IoC容器有两个重要的接口，分别是BeanFactory和ApplicationContext。 BeanFactory是最基础的容器，它规定了容器应该提供的基本服务。 ApplicationContext是前者的扩展，它添加很多开发企业级应用需要用到的功能。 为了更好的区分，我把BeanFactory称为低级容器，ApplicationCon称为高级容器。 本文将从源码级别对这两种容器进行解析。 IoC与IoC容器什么是IoC？IoC有什么用？ IoC，inversion of control，控制反转。大部分应用都是由多个类相互合作来实现业务逻辑，也就说一个对象完成它的功能往往都需要依赖其它对象。如果对象获取其依赖的过程，由对象自身来完成，这将导致代码高耦合以及难以测试。 控制反转原则，让我们把依赖对象统一交由容器来管理，然后通过依赖注入，或者依赖查找这样的方式来让对象获取其依赖。 SpringIoC容器的工作流程无论是BeanFactory还是ApplicationContext它们的工作流程都是大致相同的。 获取配置文件 读取配置文件中定义的Bean，然后转换成BeanDefinition对象 在容器上注册BeanDefinition对象（使用HashMap） 根据BeanDefinition完成Bean的创建以及依赖注入 BeanFactory看一下BeanFactory提供的基本服务 1234567891011121314151617181920212223242526272829public interface BeanFactory &#123; /* 用来区分FactoryBean与它产生的实例 容器中存放两种Bean，一种是直接使用的，另一种则是FactoryBean，该Bean用来生成直接使用的Bean。 例如，如果你注册了一个Bean，叫myJndiObject，然后这个对象又实现了FactoryBean接口 factory.getBean("&amp;myJndiObject")获得的是FactoryBean factory.getBean("myJndiObject")获得的是FactoryBean产生的Bean */ String FACTORY_BEAN_PREFIX = "&amp;"; Object getBean(String name) throws BeansException; &lt;T&gt; T getBean(String name, Class&lt;T&gt; requiredType) throws BeansException; Object getBean(String name, Object... args) throws BeansException; &lt;T&gt; T getBean(Class&lt;T&gt; requiredType) throws BeansException; &lt;T&gt; T getBean(Class&lt;T&gt; requiredType, Object... args) throws BeansException; &lt;T&gt; ObjectProvider&lt;T&gt; getBeanProvider(Class&lt;T&gt; requiredType); &lt;T&gt; ObjectProvider&lt;T&gt; getBeanProvider(ResolvableType requiredType); boolean containsBean(String name); boolean isSingleton(String name) throws NoSuchBeanDefinitionException; boolean isPrototype(String name) throws NoSuchBeanDefinitionException; boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException; boolean isTypeMatch(String name, Class&lt;?&gt; typeToMatch) throws NoSuchBeanDefinitionException; @Nullable Class&lt;?&gt; getType(String name) throws NoSuchBeanDefinitionException; String[] getAliases(String name);&#125; DefaultListableBeanFactoryDefaultListableBeanFactory是简单容器的一个实现，在它下面本来还有个XmlBeanFactory的，不过在Spring3.1以后就被废弃了。 Spring文档对DefaultListableBeanFactory的描述 DefaultListableBeanFactory是ConfigurableListableBeanFactory和BeanDefinitionRegistry接口的默认实现。它是一个有毛有翼的Bean工厂。。。。。。 构造器 1234567891011121314151617181920212223 public DefaultListableBeanFactory() &#123;super();&#125; // Create a new DefaultListableBeanFactory with the given parent. public DefaultListableBeanFactory(@Nullable BeanFactory parentBeanFactory) &#123; super(parentBeanFactory); &#125;// 查看父类的构造器 public AbstractAutowireCapableBeanFactory() &#123; super(); ignoreDependencyInterface(BeanNameAware.class); ignoreDependencyInterface(BeanFactoryAware.class); ignoreDependencyInterface(BeanClassLoaderAware.class); &#125; public AbstractAutowireCapableBeanFactory(@Nullable BeanFactory parentBeanFactory) &#123; this(); setParentBeanFactory(parentBeanFactory); &#125;// 再查看父类的构造器..... public AbstractBeanFactory() &#123; // ？？？ 一脸懵逼 &#125; public AbstractBeanFactory(@Nullable BeanFactory parentBeanFactory) &#123; this.parentBeanFactory = parentBeanFactory; &#125; 完蛋。。。。。。应该从XmlFactoryBean开始讲起的，就算它已经被废弃了 我有点疑问，XmlFactoryBean里面容器的初始化用的是DefaultListableBeanFactory，然后读取BeanDefinition用的是XmlBeanDefinitionReader，读取到的BeanDefinition是怎么装入容器的？？？]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F6.%E4%B8%9A%E5%8A%A1%E5%B1%82%2FSpring%2F%E6%97%A7AOP%2F3.AOP%E7%9A%84%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[Framework Services for AOP上面我们看到AOP是如何工作的，但是也发现要写模板代码也太多了，好在Spring给我们提供了更加便捷的方式，通过声明的方式配置AOP。 使用声明的方式配置AOP，我们有三种选项 使用ProxyFactoryBean 使用AOP命名空间 使用@AspectJ-style注解 使用ProxyFactoryBeanProxyFactoryBean是FactoryBean的实现类]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F6.%E4%B8%9A%E5%8A%A1%E5%B1%82%2FSpring%2F%E6%97%A7AOP%2F2.Introduction%2F</url>
    <content type="text"><![CDATA[IntroductionsIntroductions是Spring AOP的重要部分。通过它，我们可以动态的为对象引入新的功能。在Spring，你可以为对象引入接口的实现类。它的使用场景就是，你需要添加的功能是corsscutting但是它又不好通过传统的advice实现。 Introduction 简介Spring把introductions看做是特殊的around advice。introductions只能应用在类上面，所以它不能跟pointcut一起使用。因为introductions是为类添加接口实现类，而pointcut负责决定advice应用到哪些方法上。 我们通过实现IntroductionInterceptor接口来创建一个Introduction。Spring提供了IntroductionInterceptor接口的默认实现DelegatingIntroductionInterceptor。通过继承它和实现想要引入的接口，我们就能创建出一个introduction。 正如使用pointcut和advice时，我们需要PointcutAdvisor，使用introduction时我们需要使用IntroductionAdvisor 通过Introduction检测对象的修改对象修改检测是一种非常有用的技术。例如，当你调用一个方法对持久层对象进行修改，但该对象实质上并有做出任何的改变，这时候如果调用数据库的更新语句那就没什么意义了。使用对象修改检测能有效增大应用的吞吐量。如果是自己动手写，检测对象没有有发生改变，那是很麻烦的，这时候introduction就有了用武之地。 下面我们使用introduction创建一个完成的修改检测框架。 123456/*** 检测对象是否被修改的接口*/public interface IsModified &#123; boolean isModified();&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758public class IsModifiedMixin extends DelegatingIntroductionInterceptor implements IsModified &#123; private boolean isModified = false; private Map&lt;Method, Method&gt; methodCache = new HashMap&lt;&gt;(); @Override public boolean isModified() &#123; return isModified; &#125; @Override public Object invoke(MethodInvocation invocation) throws Throwable &#123; if (!isModified) &#123; if ((invocation.getMethod().getName().startsWith("set")) &amp;&amp; (invocation.getArguments().length == 1)) &#123; Method getter = getGetter(invocation.getMethod()); if (getter != null) &#123; Object newVal = invocation.getArguments()[0]; Object oldVal = getter.invoke(invocation.getThis(), null); if ((newVal == null) &amp;&amp; (oldVal == null)) &#123; isModified = false; &#125; else if ((newVal == null) &amp;&amp; (oldVal != null)) &#123; isModified = true; &#125; else if ((newVal != null) &amp;&amp; (oldVal == null)) &#123; isModified = true; &#125; else &#123; isModified = !newVal.equals(oldVal); &#125; &#125; &#125; &#125; return super.invoke(invocation); &#125; private Method getGetter(Method setter) &#123; Method getter = methodCache.get(setter); if (getter != null) &#123; return getter; &#125; String getterName = setter.getName().replaceFirst("set", "get"); try &#123; getter = setter.getDeclaringClass().getMethod(getterName, null); synchronized (methodCache) &#123; methodCache.put(setter, getter); &#125; return getter; &#125; catch (NoSuchMethodException e) &#123; return null; &#125; &#125;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F6.%E4%B8%9A%E5%8A%A1%E5%B1%82%2FSpring%2F%E6%97%A7AOP%2F6.AOP%2F</url>
    <content type="text"><![CDATA[AOP什么是AOP?AOP,面向切面编程,是面向对象编程思想的一种补充.其作用是,在不修改类源码的情况,对类的功能进行扩充. 你可能在想这有什么嘛? 用继承不久行了? 让我们来看着一个场景,我们现在有一个学生类,现在需要在调用这些方法的前后,输出当前时间. 12345678public calss Student&#123; void sayHello()&#123; // ..... &#125;; void study()&#123; // ..... &#125;;&#125; 你可能会想到两种解决方案 继承 代理 继承 123456789101112public calss Student2 extends Student&#123; void sayHello()&#123; // 输出当前时间 super.sayHello(); // 输出当前时间 &#125;; void study()&#123; // 输出当前时间 super.study(); // 输出当前时间 &#125;;&#125; 如你所见,随着方法的增多,我们重复的代码越来越多. 代理 1234567891011121314151617181920212223242526public class ProxyFactory&#123; private Object target; public ProxyFactory(Object target)&#123; this.target=target; &#125; public Object getProxyInstance()&#123; return Proxy.newProxyInstance( target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InvocationHandler() &#123; @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; // 输出当前时间 Object returnValue = method.invoke(target, args); // 输出当前时间 return returnValue; &#125; &#125; ); &#125;&#125; 不错不错,这种方式,确实大大减少了代码的重用性,但问题是,如果我们添加的不仅仅是输出当前时间,而是一个非常复杂的功能,那么直接写在这里,肯定是不好维护的. AOP AOP思想的解决方案是,编写一个新功能类,然后把新功能类与目标类进行组合,把整合好的对象返回给程序员调用. AOP术语在使用AOP之前,我们需要知道点术语. advice 需要添加的新功能 target 需要增强功能的目标. Joinpoint 能添加advice的地方 Pointcut 需要添加advice的地方 weaving 编织: 把advice加入到target proxy 代理对象,编织好的对象. AOP的分类AOP分为静态和动态 静态AOP在编译过程把advice编织到target上 动态AOP在运行时期动态把advice编织到target上 Spring AOPSpringAOP的核心是代理， SpringAOP中 Jointpoint指的就是方法 Aspects指的是实现了Advisor接口的类的实例 ProxyFactory类控制编织和生成代理的过程 AdviceSpring支持6种类型的Advice Before After-Returning After（finally） Around Throws Introduction Before AdviceBefore Advice可以修改传递给方法的参数，还能通过抛出异常的方式，阻断方法的执行。 12345678910111213141516171819202122public class MyBeforeAdvice implements MethodBeforeAdvice &#123; @Override public void before(Method method, Object[] args, Object target) throws Throwable &#123; System.out.println("do something before invoked the target method"); &#125; public static void main(String[] args) &#123; ProxyFactory pf = new ProxyFactory(); pf.setTarget(new Target()); pf.addAdvice(new MyBeforeAdvice()); Target proxy = (Target) pf.getProxy(); proxy.speck(); &#125;&#125;public class Target &#123; public void speck()&#123; System.out.println("I am the target"); &#125;&#125; After-Returning AdviceAfter-Returning Advice会在方法方法返回后执行，你不能修改方法参数，也不能修改方法返回的结果，但是你可以抛出异常。对于After-Returning Advice的使用，一般是检查方法返回的结果，如果结果有误，则抛出异常。 Around Advice可以修改方法参数，修改返回的结果。 12345678910111213// 这个MethodInterceptor是aopalliance包的public class AroundAdvice implements MethodInterceptor &#123; @Override public Object invoke(MethodInvocation invocation) throws Throwable &#123; long start = System.currentTimeMillis(); System.out.println("方法参数："+ Arrays.toString(invocation.getArguments())); Object invokeResult = invocation.proceed(); long end = System.currentTimeMillis(); System.out.println("耗时：" + (end - start)); return invokeResult; &#125;&#125; Throws Advice123456789101112131415161718public class ErrorAdvice implements ThrowsAdvice &#123; // 该接口没有方法，使用的时候看看该接口的源码即可 public void afterThrowing(Method method, Object[] args, Object target, Exception ex)&#123; String name = method.getName(); System.out.println("方法"+name+"出现异常"); System.out.println("异常信息:"+ex.getMessage()); &#125; public static void main(String[] args) &#123; ProxyFactory pf = new ProxyFactory(); pf.addAdvice(new ErrorAdvice()); pf.setTarget(new Target()); Target proxy = (Target) pf.getProxy(); proxy.speck(); &#125;&#125; 上面只是例子而已，实际生产是不会这么写，这样硬编码的话，还是很不好维护的 Pointcut接口1234public interface Pointcut &#123; ClassFilter getClassFilter (); MethodMatcher getMethodMatcher();&#125; 12345public interface MethodMatcher &#123; boolean matches(Method m, Class&lt;?&gt; targetClass); boolean isRuntime(); boolean matches(Method m, Class&lt;?&gt; targetClass, Object[] args);&#125; Pointcut分为静态和动态，至于是静态还是动态，就要看isRuntime()方法返回的结果 对于静态的，Spring会调用boolean matches(Method m, Class&lt;?&gt; targetClass); 对于动态的，Spring会调用boolean matches(Method m, Class&lt;?&gt; targetClass, Object[] args); Pointcut接口的实现类pointcut其实就是用来决定，是否在joinpoint上织入advice DynamicMethodMatcherPointcut 抽象类 StaticMethodMatcherPointcut 抽象类 AnnotationMatchingPointcut NameMatchMethodPointcut JdkRegexpMethodPointcut ControlFlowPointcut ComposablePointcut AspectJExpressionPointcut 使用DefaultPointcutAdvisor在使用任何Pointcut的实现类之前，我们必须先创建Advisor接口的实例 注意 Advisor由advice和pointcut组成 使用StaticMethodMatcherPointcut创建静态Pointcut1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162public class GoodGuitarist extends Singer &#123; @Override public void sing() &#123; System.out.println("Who says I can't be free \n" + "From all of the things that I used to be"); &#125;&#125;public class GreatGuitarist extends Singer&#123; @Override public void sing() &#123; System.out.println("I shot the sheriff, \n" + "But I did not shoot the deputy"); &#125;&#125;// 设置Pointcutpublic class SingerPointcut extends StaticMethodMatcherPointcut &#123; @Override public boolean matches(Method method, Class&lt;?&gt; targetClass) &#123; return "sing".equals(method.getName()); &#125; @Override public ClassFilter getClassFilter() &#123; return clz -&gt; (clz == GoodGuitarist.class); &#125;&#125;// 设置advicepublic class AroundAdvice implements MethodInterceptor &#123; @Override public Object invoke(MethodInvocation invocation) throws Throwable &#123; System.out.println("&gt;&gt; Invoking " + invocation.getMethod().getName()); Object retVal = invocation.proceed(); System.out.println("&gt;&gt; Done\n"); return retVal; &#125;&#125;public class StaticMethodPointCutDemo &#123; public static void main(String[] args) &#123; GoodGuitarist goodGuitarist = new GoodGuitarist(); GreatGuitarist greatGuitarist = new GreatGuitarist(); SingerPointcut pointcut = new SingerPointcut(); AroundAdvice aroundAdvice = new AroundAdvice(); // 把advice和pointcut组装成advisor DefaultPointcutAdvisor advisor = new DefaultPointcutAdvisor( pointcut, aroundAdvice); ProxyFactory pf = new ProxyFactory(); pf.addAdvisor(advisor); pf.setTarget(goodGuitarist); GoodGuitarist ggProxy = (GoodGuitarist) pf.getProxy(); ggProxy.sing(); pf = new ProxyFactory(); pf.addAdvisor(advisor); pf.setTarget(greatGuitarist); GreatGuitarist proxy = (GreatGuitarist) pf.getProxy(); proxy.sing(); &#125;&#125; 使用DyanmicMethodMatcherPointcut创建动态Pointcut原理差不多，自己琢磨琢磨 使用NameMatchMethodPointcut上面那些是抽象类，所以才那么麻烦，现在我们使用Spring提供的Pointcut实现类 使用AnnotationMatchingPointcut这个好用多了 Advisor Implementations123456789101112131415161718public class NamePointcutUsingAdvisor &#123; public static void main(String... args) &#123; GrammyGuitarist johnMayer = new GrammyGuitarist(); NameMatchMethodPointcut pc = new NameMatchMethodPointcut(); pc.addMethodName("sing"); pc.addMethodName("rest"); Advisor advisor = new NameMatchMethodPointcutAdvisor(new SimpleAdvice()); ProxyFactory pf = new ProxyFactory(); pf.setTarget(johnMayer); pf.addAdvisor(advisor); GrammyGuitarist proxy = (GrammyGuitarist) pf.getProxy(); proxy.sing(); proxy.sing(new Guitar()); proxy.rest(); proxy.talk(); &#125;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F6.%E4%B8%9A%E5%8A%A1%E5%B1%82%2FSpringBoot%2F%E5%85%A5%E9%97%A8%2F3.Spring%20Boot%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[三、日志1、日志框架 小张；开发一个大型系统； 1、System.out.println(&quot;&quot;)；将关键数据打印在控制台；去掉？写在一个文件？ 2、框架来记录系统的一些运行时信息；日志框架 ； zhanglogging.jar； 3、高大上的几个功能？异步模式？自动归档？xxxx？ zhanglogging-good.jar？ 4、将以前框架卸下来？换上新的框架，重新修改之前相关的API；zhanglogging-prefect.jar； 5、JDBC---数据库驱动； 写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar； 给项目中导入具体的日志实现就行了；我们之前的日志框架都是实现的抽象层； 市面上的日志框架； JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j…. 日志门面 （日志的抽象层/接口） 日志实现 JCL（Jakarta Commons Logging） SLF4j（Simple Logging Facade for Java） jboss-logging Log4j JUL（java.util.logging） Log4j2 Logback 左边选一个门面（抽象层）、右边来选一个实现； 日志门面： SLF4J； 日志实现：Logback； SpringBoot：底层是Spring框架，Spring框架默认是用JCL；‘ ==SpringBoot选用 SLF4j和logback；== 2、SLF4j使用1、如何在系统中使用SLF4j https://www.slf4j.org以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法； 给系统里面导入slf4j的jar和 logback的实现jar 123456789import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class HelloWorld &#123; public static void main(String[] args) &#123; Logger logger = LoggerFactory.getLogger(HelloWorld.class); logger.info("Hello World"); &#125;&#125; 图示； 每一个日志的实现框架都有自己的配置文件。使用slf4j以后，配置文件还是做成日志实现框架自己本身的配置文件； 2、遗留问题a（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx 统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？ 如何让系统中所有的日志都统一到slf4j； ==1、将系统中其他日志框架先排除出去；== ==2、用中间包来替换原有的日志框架；== ==3、我们导入slf4j其他的实现== 3、SpringBoot日志关系1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;&lt;/dependency&gt; SpringBoot使用它来做日志功能； 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt; &lt;/dependency&gt; 底层依赖关系 总结： 1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录 2）、SpringBoot也把其他的日志都替换成了slf4j； 3）、中间替换包？ 123456@SuppressWarnings("rawtypes")public abstract class LogFactory &#123; static String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = "http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j"; static LogFactory logFactory = new SLF4JLogFactory(); 4）、如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？ Spring框架用的是commons-logging； 12345678910&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;commons-logging&lt;/groupId&gt; &lt;artifactId&gt;commons-logging&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt; ==SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；== 4、日志使用；1、默认配置SpringBoot默认帮我们配置好了日志； 123456789101112131415161718//记录器Logger logger = LoggerFactory.getLogger(getClass());@Testpublic void contextLoads() &#123; //System.out.println(); //日志的级别； //由低到高 trace&lt;debug&lt;info&lt;warn&lt;error //可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效 logger.trace("这是trace日志..."); logger.debug("这是debug日志..."); //SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别 logger.info("这是info日志..."); logger.warn("这是warn日志..."); logger.error("这是error日志...");&#125; 日志输出格式： %d表示日期时间， %thread表示线程名， %-5level：级别从左显示5个字符宽度 %logger{50} 表示logger名字最长50个字符，否则按照句点分割。 %msg：日志消息， %n是换行符 --&gt; %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n SpringBoot修改日志的默认配置 123456789101112131415logging.level.com.atguigu=trace#logging.path=# 不指定路径在当前项目下生成springboot.log日志# 可以指定完整的路径；#logging.file=G:/springboot.log# 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件logging.path=/spring/log# 在控制台输出的日志的格式logging.pattern.console=%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n# 指定文件中日志输出的格式logging.pattern.file=%d&#123;yyyy-MM-dd&#125; === [%thread] === %-5level === %logger&#123;50&#125; ==== %msg%n logging.file logging.path Example Description (none) (none) 只在控制台输出 指定文件名 (none) my.log 输出日志到my.log文件 (none) 指定目录 /var/log 输出到指定目录的 spring.log 文件中 2、指定配置给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了 Logging System Customization Logback logback-spring.xml, logback-spring.groovy, logback.xml or logback.groovy Log4j2 log4j2-spring.xml or log4j2.xml JDK (Java Util Logging) logging.properties logback.xml：直接就被日志框架识别了； logback-spring.xml：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能 1234&lt;springProfile name="staging"&gt; &lt;!-- configuration to be enabled when the "staging" profile is active --&gt; 可以指定某段配置只在某个环境下生效&lt;/springProfile&gt; 如： 12345678910111213141516171819&lt;appender name="stdout" class="ch.qos.logback.core.ConsoleAppender"&gt; &lt;!-- 日志输出格式： %d表示日期时间， %thread表示线程名， %-5level：级别从左显示5个字符宽度 %logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 %msg：日志消息， %n是换行符 --&gt; &lt;layout class="ch.qos.logback.classic.PatternLayout"&gt; &lt;springProfile name="dev"&gt; &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ----&gt; [%thread] ---&gt; %-5level %logger&#123;50&#125; - %msg%n&lt;/pattern&gt; &lt;/springProfile&gt; &lt;springProfile name="!dev"&gt; &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ==== [%thread] ==== %-5level %logger&#123;50&#125; - %msg%n&lt;/pattern&gt; &lt;/springProfile&gt; &lt;/layout&gt; &lt;/appender&gt; 如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误 no applicable action for [springProfile] 5、切换日志框架可以按照slf4j的日志适配图，进行相关的切换； slf4j+log4j的方式； 12345678910111213141516171819&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;artifactId&gt;logback-classic&lt;/artifactId&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;/exclusion&gt; &lt;exclusion&gt; &lt;artifactId&gt;log4j-over-slf4j&lt;/artifactId&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;&lt;/dependency&gt; 切换为log4j2 123456789101112131415 &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;&lt;/dependency&gt;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F6.%E4%B8%9A%E5%8A%A1%E5%B1%82%2FSpringBoot%2F%E5%85%A5%E9%97%A8%2F1.Spring%20Boot%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[一、Spring Boot 入门1、Spring Boot 简介 简化Spring应用开发的一个框架； 整个Spring技术栈的一个大整合； J2EE开发的一站式解决方案； 2、微服务2014，martin fowler 微服务：架构风格（服务微化） 一个应用应该是一组小型服务；可以通过HTTP的方式进行互通； 单体应用：ALL IN ONE 微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元； 详细参照微服务文档 3、环境准备环境约束 –jdk1.8：Spring Boot 推荐jdk1.7及以上；java version “1.8.0_112” –maven3.x：maven 3.3以上版本；Apache Maven 3.3.9 –IntelliJIDEA2017：IntelliJ IDEA 2017.2.2 x64、STS –SpringBoot 1.5.9.RELEASE：1.5.9； 统一环境； 1、MAVEN设置给maven 的settings.xml配置文件的profiles标签添加 123456789101112&lt;profile&gt; &lt;id&gt;jdk-1.8&lt;/id&gt; &lt;activation&gt; &lt;activeByDefault&gt;true&lt;/activeByDefault&gt; &lt;jdk&gt;1.8&lt;/jdk&gt; &lt;/activation&gt; &lt;properties&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt; &lt;/properties&gt;&lt;/profile&gt; 2、IDEA设置整合maven进来； 4、Spring Boot HelloWorld一个功能： 浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串； 1、创建一个maven工程；（jar）2、导入spring boot相关的依赖1234567891011&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;&lt;/parent&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 3、编写一个主程序；启动Spring Boot应用12345678910111213/** * @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用 */@SpringBootApplicationpublic class HelloWorldMainApplication &#123; public static void main(String[] args) &#123; // Spring应用启动起来 SpringApplication.run(HelloWorldMainApplication.class,args); &#125;&#125; 4、编写相关的Controller、Service123456789@Controllerpublic class HelloController &#123; @ResponseBody @RequestMapping("/hello") public String hello()&#123; return "Hello World!"; &#125;&#125; 5、运行主程序测试6、简化部署123456789&lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；--&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; 将这个应用打成jar包，直接使用java -jar的命令进行执行； 5、Hello World探究1、POM文件1、父项目1234567891011121314&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;&lt;/parent&gt;他的父项目是&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt; &lt;version&gt;1.5.9.RELEASE&lt;/version&gt; &lt;relativePath&gt;../../spring-boot-dependencies&lt;/relativePath&gt;&lt;/parent&gt;他来真正管理Spring Boot应用里面的所有依赖版本； Spring Boot的版本仲裁中心； 以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号） 2、启动器1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt; spring-boot-starter-==web==： spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件； Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器 2、主程序类，主入口类123456789101112/** * @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用 */@SpringBootApplicationpublic class HelloWorldMainApplication &#123; public static void main(String[] args) &#123; // Spring应用启动起来 SpringApplication.run(HelloWorldMainApplication.class,args); &#125;&#125; @SpringBootApplication: Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用； 12345678910@Target(ElementType.TYPE)@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@SpringBootConfiguration@EnableAutoConfiguration@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class), @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)public @interface SpringBootApplication &#123; @SpringBootConfiguration:Spring Boot的配置类； 标注在某个类上，表示这是一个Spring Boot的配置类； @**Configuration**:配置类上来标注这个注解； 配置类 ----- 配置文件；配置类也是容器中的一个组件；@Component @EnableAutoConfiguration：开启自动配置功能； 以前我们需要配置的东西，Spring Boot帮我们自动配置；@**EnableAutoConfiguration**告诉SpringBoot开启自动配置功能；这样自动配置才能生效； 123@AutoConfigurationPackage@Import(EnableAutoConfigurationImportSelector.class)public @interface EnableAutoConfiguration &#123; @**AutoConfigurationPackage**：自动配置包 @**Import**(AutoConfigurationPackages.Registrar.class)： Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class； ==将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；== @**Import**(EnableAutoConfigurationImportSelector.class)； 给容器中导入组件？ **EnableAutoConfigurationImportSelector**：导入哪些组件的选择器； 将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中； 会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件； ![自动配置类](images/搜狗截图20180129224104.png) 有了自动配置类，免去了我们手动编写配置注入功能组件等的工作； SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)； ==Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；==以前我们需要自己配置的东西，自动配置类都帮我们； J2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar； 6、使用Spring Initializer快速创建Spring Boot项目1、IDEA：使用 Spring Initializer快速创建项目IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目； 选择我们需要的模块；向导会联网创建Spring Boot项目； 默认生成的Spring Boot项目； 主程序已经生成好了，我们只需要我们自己的逻辑 resources文件夹中目录结构 static：保存所有的静态资源； js css images； templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）； application.properties：Spring Boot应用的配置文件；可以修改一些默认设置；]]></content>
  </entry>
  <entry>
    <title><![CDATA[2.Spring MVC架构]]></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F5.%E8%A1%A8%E7%A4%BA%E5%B1%82%2FMySpringMVC%2F2.Spring%20MVC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[Spring MVC架构Spring MVC也是根据前端控制器模式而设计的。 通过一个中央Servlet,DispatcherServlet,接受请求,然后根据请求信息调用相应的组件处理请求，再由DispatcherServlet把响应发送给请求方。 处理请求的组件DispatcherServlet委派的用来处理请求的组件有 HandlerMapping 根据当前请求的找到对应的 Handler，并将 Handler与一堆HandlerInterceptor（拦截器）封装到 HandlerExecutionChain 对象中。 Handler 有可能是一个 HandlerMethod（封装了 Controller 中的方法）对象，也有可能是一个 Controller 对象、 HttpRequestHandler 对象或 Servlet 对象，而这个 Handler 具体是什么对象，也是与所使用的 HandlerMapping 实现类有关。 HandlerAdapter 根据 Handler 来找到支持它的 HandlerAdapter，通过 HandlerAdapter 执行这个 Handler 得到 ModelAndView 对象。 HandlerExceptionResolver 异常的解决方案，可能将它们映射到处理程序，HTML错误视图或其他目标。 ViewResolver 将从handler返回的基于字符串的视图名称解析为用于呈现给响应的实际View。 LocaleResolver, LocaleContextResolver 解析客户端正在使用的区域设置以及可能的时区，以便能够提供国际化服务。 ThemeResolver 解决Web应用程序可以使用的主题 - 例如，提供个性化布局。 MultipartResolver 在一些multipart解析库的帮助下，解析multipart请求（例如，浏览器表单文件上载）的抽象。 FlashMapManager 存储和检索“输入”和“输出”FlashMap，可用于将属性从一个请求传递到另一个请求，通常是用作重定向。]]></content>
      <categories>
        <category>Spring</category>
        <category>SpringMVC</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch12_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F5.JUC%2FOldPaper%2F3.Executor%2F</url>
    <content type="text"><![CDATA[Executor执行用户提交上来的任务（Runnable）。该接口提供了一种方法来对任务的提交和任务的运行机制进行解耦。 ExecutorServiceExecutor，提供管理终止的方法和可以生成Future以跟踪一个或多个异步任务进度的方法。 ExecutorService是可以关闭，这将导致它拒绝新任务。有两种方法关闭它。shutdown（）方法将允许先前提交的任务在终止之前执行，而shutdownNow（）方法则阻止等待任务启动并尝试停止当前正在执行的任务。 终止时，执行程序没有正在执行的任务，没有等待执行的任务，也没有任何新任务可以提交。 应关闭未使用的ExecutorService以允许回收其资源。 ThreadPoolExecutor一个ExecutorService，通过线程池来进行用户提交的任务。 ScheduledExecutorService一个ExecutorService，等待给定的时间后执行命令或者定期执行。 ScheduledThreadPoolExecutor一个ThreadPoolExecutor，等待给定的时间后执行命名或者定期执行。 Java线程池ThreadPoolExecutorThreadPoolExecutor类是Java线程池的核心类。 继承关系ThreadPoolExecutor &gt;&gt; AbstractExecutorService &gt;&gt; ExecutorService &gt;&gt;Executor 构造器1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465public class ThreadPoolExecutor extends AbstractExecutorService &#123; /** * 他有四个构造器 * corePoolSize 核心线程池大小 * maximumPoolSize 最大线程池大小 * keepAliveTime 当前线程数量大于核心数时，空闲的线程可以存活多久 * unit keepAliveTime的单位 * workQueue * ThreadFactory 线程工厂 * handler */ public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue) &#123; this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, Executors.defaultThreadFactory(), defaultHandler); &#125; public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory) &#123; this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, defaultHandler); &#125; public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, RejectedExecutionHandler handler) &#123; this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, Executors.defaultThreadFactory(), handler); &#125; public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) &#123; if (corePoolSize &lt; 0 || maximumPoolSize &lt;= 0 || maximumPoolSize &lt; corePoolSize || keepAliveTime &lt; 0) throw new IllegalArgumentException(); if (workQueue == null || threadFactory == null || handler == null) throw new NullPointerException(); this.acc = System.getSecurityManager() == null ? null : AccessController.getContext(); this.corePoolSize = corePoolSize; this.maximumPoolSize = maximumPoolSize; this.workQueue = workQueue; this.keepAliveTime = unit.toNanos(keepAliveTime); this.threadFactory = threadFactory; this.handler = handler; &#125;&#125; 重要方法在ThreadPoolExecutor类中有几个非常重要的方法： execute() execute()方法实际上是Executor中声明的方法，在ThreadPoolExecutor进行了具体的实现，这个方法是ThreadPoolExecutor的核心方法，通过这个方法可以向线程池提交一个任务，交由线程池去执行。 submit() submit()方法是在ExecutorService中声明的方法，在AbstractExecutorService就已经有了具体的实现，在ThreadPoolExecutor中并没有对其进行重写，这个方法也是用来向线程池提交任务的，但是它和execute()方法不同，它能够返回任务执行的结果，去看submit()方法的实现，会发现它实际上还是调用的execute()方法，只不过它利用了Future来获取任务执行结果。 shutdown() shutdownNow() 尝试停止正在执行的任务，返回等待执行的任务。 深入线程池任务缓存队列及排队策略在前面我们多次提到了任务缓存队列，即workQueue，它用来存放等待执行的任务。 workQueue的类型为BlockingQueue，通常可以取下面三种类型： 1）ArrayBlockingQueue：基于数组的先进先出队列，此队列创建时必须指定大小； 2）LinkedBlockingQueue：基于链表的先进先出队列，如果创建时没有指定此队列大小，则默认为Integer.MAX_VALUE； 3）synchronousQueue：这个队列比较特殊，它不会保存提交的任务，而是将直接新建一个线程来执行新来的任务。 任务拒绝策略当线程池的任务缓存队列已满并且线程池中的线程数目达到maximumPoolSize，如果还有任务到来就会采取任务拒绝策略，通常有以下四种策略： ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常 ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。 ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程） ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务 线程池容量的动态调整ThreadPoolExecutor提供了动态调整线程池容量大小的方法：setCorePoolSize()和setMaximumPoolSize()， setCorePoolSize：设置核心池大小 setMaximumPoolSize：设置线程池最大能创建的线程数目大小 当上述参数从小变大时，ThreadPoolExecutor进行线程赋值，还可能立即创建新的线程来执行任务。 ExecutorsJava并不提倡我们直接使用ThreadPoolExecutor，而是使用Executors类中提供的几个静态方法来创建线程池： 123456Executors.newCachedThreadPool(); //创建一个缓冲池，缓冲池容量大小为Integer.MAX_VALUEExecutors.newSingleThreadExecutor(); //创建容量为1的缓冲池Executors.newFixedThreadPool(int); //创建固定容量大小的缓冲池// 上面三个方法都是使用ThreadPoolExecutor来创建线程池newScheduledThreadPool(int);newWorkStealingPool(int); ##]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F5.%E8%A1%A8%E7%A4%BA%E5%B1%82%2FMySpringMVC%2Fx.%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86%2F</url>
    <content type="text"><![CDATA[Content Negotiation 内容协商分析需要通过哪种数据形式返回数据叫做内容协商。 请求方有三种方式告诉SpringMVC它需要的是哪一种形式的数据。 URL后缀 12http://myserver/myapp/accounts/list.htmlhttp://myserver/myapp/accounts/list.xls URL参数 12http://myserver/myapp/accounts/list?format=htmlhttp://myserver/myapp/accounts/list?format=xls 请求头的Accept 1Accept: text/html,application/xhtml+xml,application/xml; 先检查URL后缀，再检查URL参数，最后检查Accept URL后缀默认情况下，Spring框架可以通过检测URL后缀来去确定响应消息体的内容类型的。 接下来通过Java和XML文件配置两种方法来对这种以后缀作为内容协商方法的策略进行设置。 123456789@Overridepublic void configureContentNegotiation(final ContentNegotiationConfigurer configurer) &#123; configurer .favorPathExtension(true) // 使用后缀方式进行内容协商 .favorParameter(false) // 禁用使用URL查询方式进行内容协商 .ignoreAcceptHeader(true) // 忽略请求头部的Accept字段 .useJaf(false) // 禁用JAF去解析内容类型 .defaultContentType(MediaType.APPLICATION_JSON); // 设置默认响应消息体内容类型为JSON&#125; 12345678&lt;bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean"&gt; &lt;property name="favorPathExtension" value="true" /&gt; &lt;property name="favorParameter" value="false"/&gt; &lt;property name="ignoreAcceptHeader" value="true" /&gt; &lt;property name="defaultContentType" value="application/json" /&gt; &lt;property name="useJaf" value="false" /&gt;&lt;/bean&gt; 方法查询1234567891011public void configureContentNegotiation(final ContentNegotiationConfigurer configurer) &#123; configurer .favorPathExtension(false) .favorParameter(true) .parameterName("format") // 内容类型查询参数为format .ignoreAcceptHeader(true) .useJaf(false) .defaultContentType(MediaType.APPLICATION_JSON) .mediaType("xml", MediaType.APPLICATION_XML) // 设定不同参数值所对应的内容类型 .mediaType("json", MediaType.APPLICATION_JSON); // 设定不同参数值所对应的内容类型&#125; 12345678910111213141516&lt;bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean"&gt; &lt;property name="favorPathExtension" value="false" /&gt; &lt;property name="favorParameter" value="true"/&gt; &lt;property name="parameterName" value="format"/&gt; &lt;property name="ignoreAcceptHeader" value="true" /&gt; &lt;property name="defaultContentType" value="application/json" /&gt; &lt;property name="useJaf" value="false" /&gt; &lt;property name="mediaTypes"&gt; &lt;map&gt; &lt;entry key="json" value="application/json" /&gt; &lt;entry key="xml" value="application/xml" /&gt; &lt;/map&gt; &lt;/property&gt;&lt;/bean&gt; 头部Accept字段123456789@Overridepublic void configureContentNegotiation(final ContentNegotiationConfigurer configurer) &#123; configurer .favorPathExtension(false) .favorParameter(false) .ignoreAcceptHeader(false) .useJaf(false) .defaultContentType(MediaType.APPLICATION_JSON);&#125; 12345678&lt;bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean"&gt; &lt;property name="favorPathExtension" value="false" /&gt; &lt;property name="favorParameter" value="false"/&gt; &lt;property name="ignoreAcceptHeader" value="false" /&gt; &lt;property name="defaultContentType" value="application/json" /&gt; &lt;property name="useJaf" value="false" /&gt;&lt;/bean&gt;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch12_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F5.JUC%2FOldPaper%2FExecutorServiceAndThreadPool%2F</url>
    <content type="text"><![CDATA[Executors框架前面我们已经学了如何通过继承Thread类或者实现Runnable接口来创建线程。 如果只是创建几个线程还好，如果要创建的线程数量比较多，那么这种不断创建和销毁线程的方法，其实是大大降低对系统资源的利用度的。 为了解决这个问题，JDK为我们提供了Executor框架，一个用来创建和管理线程的框架。 Executor框架具有以下的作用： 创建线程：它提供了多种方法来创建线程，具体来说就是使用线程池维护线程，从线程池调用线程执行任务。 线程管理：通过线程池来维护线程的生命周期。 任务的提交与执行：它不仅提供了方法让你提交任务，还能让你决定任务是马上执行，还是延迟执行，甚至定期执行。 JUC提供了以下三个接口，这三个接口定义所有创建和管理线程所需要的方法。 Executor：一个只包含execute（）方法的接口，通过接收一个runnable对象来执行任务。 ExecutorService：Executor的子接口，添加了管理任务生命周期的功能。同时还提供了submit()方法可以接收Runnable和Callable对象。Callable与Runnable类似，只不过前者可以返回执行后的结果。 ScheduledExecutorService：ExecutorService的子接口，It adds functionality to schedule the execution of the tasks. 除了上面三个接口，JUC还提供了一个Executors类，提供了一些工厂方法来创建不同类型的ExecutorService。 ExecutorService Example12345678910111213141516171819202122import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;public class ExecutorsExample &#123; public static void main(String[] args) &#123; System.out.println("Inside : " + Thread.currentThread().getName()); System.out.println("Creating Executor Service..."); ExecutorService executorService = Executors.newSingleThreadExecutor(); System.out.println("Creating a Runnable..."); Runnable runnable = () -&gt; &#123; System.out.println("Inside : " + Thread.currentThread().getName()); &#125;; System.out.println("Submit the task."); executorService.submit(runnable); System.out.println("Shutting down the executor"); executorService.shutdown(); &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243public class ExecutorsExample &#123; public static void main(String[] args) &#123; System.out.println("Inside : " + Thread.currentThread().getName()); System.out.println("Creating Executor Service with a thread pool of Size 2"); ExecutorService executorService = Executors.newFixedThreadPool(2); Runnable task1 = () -&gt; &#123; System.out.println("Executing Task1 inside : " + Thread.currentThread().getName()); try &#123; TimeUnit.SECONDS.sleep(2); &#125; catch (InterruptedException ex) &#123; throw new IllegalStateException(ex); &#125; &#125;; Runnable task2 = () -&gt; &#123; System.out.println("Executing Task2 inside : " + Thread.currentThread().getName()); try &#123; TimeUnit.SECONDS.sleep(4); &#125; catch (InterruptedException ex) &#123; throw new IllegalStateException(ex); &#125; &#125;; Runnable task3 = () -&gt; &#123; System.out.println("Executing Task3 inside : " + Thread.currentThread().getName()); try &#123; TimeUnit.SECONDS.sleep(3); &#125; catch (InterruptedException ex) &#123; throw new IllegalStateException(ex); &#125; &#125;; System.out.println("Submitting the tasks for execution..."); executorService.submit(task1); executorService.submit(task2); executorService.submit(task3); executorService.shutdown(); &#125;&#125; ScheduledExecutorService exampleScheduledExecutorService用来定期或者延期执行任务。 123456// 延迟执行public static void main(String[] args) &#123; ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1); Runnable task = () -&gt; System.out.println("老婆听电话！"); executorService.schedule(task, 2, TimeUnit.MINUTES);&#125; 123456// 定时执行任务public static void main(String[] args) &#123; ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1); Runnable task = () -&gt; System.out.println("老婆听电话！"); executorService.scheduleAtFixedRate(task, 2, 2, TimeUnit.MINUTES);&#125; Callable And Future在上面的例子，我们都是使用Runnable对象来定义任务，这种方法很方便，但是有个缺陷，那就是它不能返回任务执行后的结果。 JDK为我们提供了Callable接口用它来定义的任务，可以在执行完毕后返回结果。 12345678910Callable&lt;String&gt; task = new Callable&lt;String&gt;() &#123; @Override public String call() throws Exception &#123; return "hello world"; &#125;&#125;;Callable&lt;String&gt; task = () -&gt; &#123; return "hello world";&#125;; 12345678910111213141516public static void main(String[] args) throws ExecutionException, InterruptedException &#123; Callable&lt;String&gt; task = () -&gt; &#123; // Perform some computation System.out.println("Entered Callable"); Thread.sleep(2000); return "Hello from Callable"; &#125;; ExecutorService executorService = Executors.newSingleThreadExecutor(); Future&lt;String&gt; result = executorService.submit(task); // Future.get() blocks until the result is available String s = result.get(); System.out.println(s); executorService.shutdown();&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch12_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F5.JUC%2FOldPaper%2FFuture%2F</url>
    <content type="text"><![CDATA[Future在前面的文章中我们讲述了创建线程的2种方式，一种是直接继承Thread，另外一种就是实现Runnable接口。 这2种方式都有一个缺陷就是：在执行完任务之后无法获取执行结果。 如果需要获取执行结果，就必须通过共享变量或者使用线程通信的方式来达到效果，这样使用起来就比较麻烦。 而自从Java 1.5开始，就提供了Callable和Future，通过它们可以在任务执行完毕之后得到任务执行结果。 Interface Future代表一次异步计算的结果，它提供方法来查看计算是否完成、获取计算结果、取消计算。 方法与描述 cancel(boolean mayInterruptIfRunning)尝试取消执行该任务 get()一直等待直到任务完成 get(long timeout, TimeUnit unit)最多等待指定的时间 isCancelled()是否成功取消该任务 isDone()任务是否已完成 ScheduledFutureInterface A delayed result-bearing action that can be cancelled. Usually a scheduled future is the result of scheduling a task with a ScheduledExecutorService. RunnableFutureInterface 一个Runnable的Future，在成功执行玩run方法后，可以获取其结果。 FutureTaskFuture接口的基本实现。 RunnableScheduledFutureA ScheduledFuture that is Runnable. Successful execution of the run method causes completion of the Future and allows access to its results.]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch12_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F5.JUC%2FOldPaper%2F2.Future%2F</url>
    <content type="text"><![CDATA[Future在前面的文章中我们讲述了创建线程的2种方式，一种是直接继承Thread，另外一种就是实现Runnable接口。 这2种方式都有一个缺陷就是：在执行完任务之后无法获取执行结果。 如果需要获取执行结果，就必须通过共享变量或者使用线程通信的方式来达到效果，这样使用起来就比较麻烦。 而自从Java 1.5开始，就提供了Callable和Future，通过它们可以在任务执行完毕之后得到任务执行结果。 Interface Future代表一次异步计算的结果，它提供方法来查看计算是否完成、获取计算结果、取消计算。 方法与描述 cancel(boolean mayInterruptIfRunning)尝试取消执行该任务 get()一直等待直到任务完成 get(long timeout, TimeUnit unit)最多等待指定的时间 isCancelled()是否成功取消该任务 isDone()任务是否已完成 ScheduledFutureInterface A delayed result-bearing action that can be cancelled. Usually a scheduled future is the result of scheduling a task with a ScheduledExecutorService. RunnableFutureInterface 一个Runnable的Future，在成功执行玩run方法后，可以获取其结果。 FutureTaskFuture接口的基本实现。 RunnableScheduledFutureA ScheduledFuture that is Runnable. Successful execution of the run method causes completion of the Future and allows access to its results.]]></content>
  </entry>
  <entry>
    <title><![CDATA[ServletContext]]></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F3.Servlet%2FServletContext%2F</url>
    <content type="text"></content>
      <categories>
        <category>JavaWeb</category>
        <category>Servlet</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F0.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2FWeb%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[Web开发的基本模式从宏观上讲,Web开发模式中最最最重要的一条就是分层开发模式. 分层开发模式分层开发模式指的是,将整个程序根据功能职责进行纵向划分. 常见的划分方法就是分成 表示层、业务层、持久层. 表示层:负责处理与界面交互相关的功能 业务层:负责复杂的业务逻辑计算和判断 持久层:负责将业务逻辑数据进行持久化存储 分层开发模式体现了”分而治之”的设计思想,并且提高了程序可读性与可扩展性. MVC模式MVC模式是处理表示层的最佳实践. M (Model) 数据模型 V (View) 视图展现 C (Control) 控制器 MVC模式的工作流程图]]></content>
  </entry>
  <entry>
    <title><![CDATA[1.Servlet与Web容器]]></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaWeb%2F5.%E8%A1%A8%E7%A4%BA%E5%B1%82%2FMySpringMVC%2F1.Servlet%E4%B8%8EWeb%E5%AE%B9%E5%99%A8%2F</url>
    <content type="text"><![CDATA[Servlet与Web容器Servlet看Servlet3.1规范（有中文版） Web容器J2EE的概念以及容器概念 Servlet3.0整合SpringMVC的原理在容器启动的时候，容器会扫描lib目录下所有jar包的META-INF目录，查看是否具有javax.servlet.ServletContainerInitializer这个文件。 例如在spring-web-5.1.2.RELEASE.jar!/META-INF/services/就有这么个文件。 该文件的内容是 1org.springframework.web.SpringServletContainerInitializer 这是一个实现了ServletContainerInitializer接口的类。 SpringServletContainerInitializer会把WebApplicationInitializer的实现类注入到ServletContext中。]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>SpringMVC</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch12_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F5.JUC%2FOldPaper%2F1.Callable%2F</url>
    <content type="text"><![CDATA[Callable一个可以返回结果和抛出异常的任务。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch12_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F5.JUC%2Ftools%2F</url>
    <content type="text"><![CDATA[CountDownLatch一个同步辅助工具，允许一个或多个线程处于等待直到其它线程中执行的一组操作完成。 构造CountDownLatch的时候需要给定一个计数量（count），每次调用countDown()方法就会减少一次，当计量数为0的时候，唤醒所有等待中的线程。 方法和描述 void await()Causes the current thread to wait until the latch has counted down to zero, unless the thread is interrupted. boolean await(long timeout, TimeUnit unit)Causes the current thread to wait until the latch has counted down to zero, unless the thread is interrupted, or the specified waiting time elapses. void countDown()Decrements the count of the latch, releasing all waiting threads if the count reaches zero. long getCount()Returns the current count. String toString()Returns a string identifying this latch, as well as its state. 例子 12345678910111213141516171819202122232425262728class Driver &#123; // ... void main() throws InterruptedException &#123; CountDownLatch doneSignal = new CountDownLatch(N); Executor e = ... for (int i = 0; i &lt; N; ++i) // create and start threads e.execute(new WorkerRunnable(doneSignal, i)); doneSignal.await(); // wait for all to finish &#125; &#125; class WorkerRunnable implements Runnable &#123; private final CountDownLatch doneSignal; private final int i; WorkerRunnable(CountDownLatch doneSignal, int i) &#123; this.doneSignal = doneSignal; this.i = i; &#125; public void run() &#123; try &#123; doWork(i); doneSignal.countDown(); &#125; catch (InterruptedException ex) &#123;&#125; // return; &#125; void doWork() &#123; ... &#125; &#125; CyclicBarrier允许一组线程全部等待彼此到达共同的障碍点。 CyclicBarrier支持可选的Runnable命令，该命令在每个障碍点运行一次，在聚会中的最后一个线程到达之后，但在释放任何线程之前。 方法和描述 int await()Waits until all parties have invoked await on this barrier. int await(long timeout, TimeUnit unit)Waits until all parties have invoked await on this barrier, or the specified waiting time elapses. int getNumberWaiting()Returns the number of parties currently waiting at the barrier. int getParties()Returns the number of parties required to trip this barrier. boolean isBroken()Queries if this barrier is in a broken state. void reset()Resets the barrier to its initial state. SemaphoreSemaphore是一种基于计数的信号量。它可以设定一个阈值，基于此，多个线程竞争获取许可信号，做完自己的申请后归还，超过阈值后，线程申请许可信号将会被阻塞。Semaphore可以用来构建一些对象池，资源池之类的，比如数据库连接池，我们也可以创建计数为1的Semaphore，将其作为一种类似互斥锁的机制，这也叫二元信号量，表示两种互斥状态。 123456789101112131415161718192021222324252627282930313233343536373839404142class Pool &#123; private static final int MAX_AVAILABLE = 100; private final Semaphore available = new Semaphore(MAX_AVAILABLE, true); public Object getItem() throws InterruptedException &#123; available.acquire(); return getNextAvailableItem(); &#125; public void putItem(Object x) &#123; if (markAsUnused(x)) available.release(); &#125; // Not a particularly efficient data structure; just for demo protected Object[] items = ... whatever kinds of items being managed protected boolean[] used = new boolean[MAX_AVAILABLE]; protected synchronized Object getNextAvailableItem() &#123; for (int i = 0; i &lt; MAX_AVAILABLE; ++i) &#123; if (!used[i]) &#123; used[i] = true; return items[i]; &#125; &#125; return null; // not reached &#125; protected synchronized boolean markAsUnused(Object item) &#123; for (int i = 0; i &lt; MAX_AVAILABLE; ++i) &#123; if (item == items[i]) &#123; if (used[i]) &#123; used[i] = false; return true; &#125; else return false; &#125; &#125; return false; &#125;&#125; Executors此包中定义的Executor，ExecutorService，ScheduledExecutorService，ThreadFactory和Callable类的工厂和实用方法。 该类支持以下几种方法： Methods that create and return an ExecutorService set up with commonly useful configuration settings. Methods that create and return a ScheduledExecutorService set up with commonly useful configuration settings. Methods that create and return a “wrapped” ExecutorService, that disables reconfiguration by making implementation-specific methods inaccessible. Methods that create and return a ThreadFactory that sets newly created threads to a known state. Methods that create and return a Callable out of other closure-like forms, so they can be used in execution methods requiring Callable. Exchanger]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch12_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F1.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[多线程基础1.线程与进程进程和线程之间有什么不同？一个进程是一个独立(self contained)的运行环境，它可以被看作一个程序或者一个应用。而线程是在进程中执行的一个任务。线程可以被称为轻量级进程。线程需要较少的资源来创建和驻留在进程中，并且可以共享进程中的资源。 2.线程的创建和启动Java中有两种途径创建线程。 2.1继承Thread类Thread类代表线程类，它的最主要的两个方法是： run()：包含线程运行时要执行的代码 start()：用于启动线程 12345678910111213class MyThread extends Thread &#123; @Override public void run() &#123; for (int i = 0; i &lt; 10; i++) &#123; System.out.println(Thread.currentThread().getName() +"--"+ i); &#125; &#125; // 启动线程 public static void main(Strig[] args)&#123; MyThread thread = new MyThread(); thread.start(); &#125;&#125; 关于调用Thread类的run()方法 如果我们调用了Thread的run()方法，它的行为就会和普通的方法一样，为了在新的线程中执行我们的代码，必须使用Thread.start()方法。 2.2实现Runnable接口由于Java不支持多继承，也就是说如果我们继承了Thread类，就不能继承其他类。 为了解决这个问题，Java提供了Runnable接口。 12345678910111213class MyRunnable implements Runnable &#123; @Override public void run() &#123; for (int i = 0; i &lt; 10; i++) &#123; System.out.println(Thread.currentThread().getName() +"--"+ i); &#125; &#125; // 启动线程 public static void main(String[] args) &#123; Thread thread = new Thread(new MyThread()); thread.start(); &#125;&#125; 3.线程的状态线程在它的生命周期中会处于各种不同的状态 3.1新建状态用new语句创建的线程对象处于新建状态。 3.2就绪状态调用了线程的start()方法，线程就处于就绪状态 3.3运行状态正在占用cpu，执行程序代码的线程处于运行状态 3.4阻塞状态阻塞状态是指线程因为某些原因放弃CPU，暂时停止运行。当线程处于阻塞状态时，Java虚拟机不会给该线程分配CPU，直到线程重新进入就绪状态，它才有机会转到运行状态。 阻塞状态可分为3种 位于对象等待池的阻塞状态：当线程处于运行状态时，如果执行了某个对象的wait()方法，Java虚拟机会把线程放到这个对象的等待池中。 位于对象锁池中的阻塞状态：当线程处于运行状态，视图获取某个对象的同步锁时，如果该对象的同步锁已经被其他线程占用，Java虚拟机会把这个线程放到这个对象的锁池中。 其他阻塞状态：当前线程执行了sleep()方法，或者调用了其他线程的join()方法，或者发出了IO请求，就会进入这个状态。 3.5死亡状态当线程执行完run方法，或者在执行过程中出现了异常，那么该线程就会退出，然后进入死亡状态 4.获取当前线程的引用Thread类的currentThread静态方法返回当前线程对象的引用。 5.线程的调度线程的调度是指按照特定的机制为多个线程分配cpu的使用权，有两种调度模型：分时调度模型和抢占式调度模型。 分时调度模型是让所有线程轮流获得CPU的使用权，并且平均分配每个线程占用CPU的时间片。 Java虚拟机采用抢占式调度模型，它是指优先让可运行池中的优先级高的线程占用CPU，如果可运行池中线程的优先级相同，那么就随机地选择一个线程，使其占用CPU。 5.1调整各个线程的优先级Thread类提供了getPriority(int)和getPripority()方法设置和读取优先级。优先级的取值范围是1~10，越大有越优先，默认优先级为5。Thread类提供了3个静态变量，分别用来对应三个优先级，分别是 MAX_PRIORITY:10 NORM_PRIORITY:5 MIN_PRIPROTY:1 虽然说是分了10个优先级，但不是所有操作系统的支持的，所以一般推荐使用上面三个静态变量。 5.2线程的睡眠、让步、等待睡眠：调用线程的静态sleep方法，它就会放弃CPU，转到阻塞状态。 让步：调用线程的静态yield方法，如果此时具有相同优先级的其他线程处于就绪状态，该方法就会把当前运行的线程放到可运行池中，并运行那个线程。 等待：当前运行的线程可以调用另外一个线程的join()方法，当前运行的线程将阻塞直到零一个线程运行结束，它才会恢复运行。 6.守护线程Java中有两类线程：User Thread(用户线程)、Daemon Thread(守护线程) 用户线程即运行在前台的线程，而守护线程是运行在后台的线程。 守护线程作用是为其他前台线程的运行提供便利服务，而且仅在普通、非守护线程仍然运行时才需要，比如垃圾回收线程就是一个守护线程。当JVM检测仅剩一个守护线程，而用户线程都已经退出运行时，JVM就会退出。如果有非守护线程仍然存活，JVM就不会退出。 守护线程并非只有虚拟机内部提供，用户在编写程序时也可以自己设置守护线程。用户可以用Thread的setDaemon（true）方法设置当前线程为守护线程。 虽然守护线程可能非常有用，但必须小心确保其他所有非守护线程消亡时，不会由于它的终止而产生任何危害。因为你不可能知道在所有的用户线程退出运行前，守护线程是否已经完成了预期的服务任务。一旦所有的用户线程退出了，虚拟机也就退出运行了。 因此，不要在守护线程中执行业务逻辑操作（比如对数据的读写等）。 7.定时器java.util.Timer是一个工具类，可以用于安排一个线程在未来的某个特定时间执行。Timer类可以用安排一次性任务或者周期任务。java.util.TimerTask是一个实现了Runnable接口的抽象类，我们需要去继承这个类来创建我们自己的定时任务并使用Timer去安排它的执行。 推荐使用ScheduledExecutorService]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch12_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F5.JUC%2Fexecutor%2F</url>
    <content type="text"><![CDATA[Executors框架前面我们已经学了如何通过继承Thread类或者实现Runnable接口来创建线程。 如果只是创建几个线程还好，如果要创建的线程数量比较多，那么这种不断创建和销毁线程的方法，其实是大大降低对系统资源的利用度的。 为了解决这个问题，JDK为我们提供了Executor框架，一个用来创建和管理线程的框架。 Executor框架具有以下的作用： 创建线程：它提供了多种方法来创建线程，具体来说就是使用线程池维护线程，从线程池调用线程执行任务。 线程管理：通过线程池来维护线程的生命周期。 任务的提交与执行：它不仅提供了方法让你提交任务，还能让你决定任务是马上执行，还是延迟执行，甚至定期执行。 JUC提供了以下三个接口，这三个接口定义所有创建和管理线程所需要的方法。 Executor：一个只包含execute（）方法的接口，通过接收一个runnable对象来执行任务。 ExecutorService：Executor的子接口，添加了管理任务生命周期的功能。同时还提供了submit()方法可以接收Runnable和Callable对象。Callable与Runnable类似，只不过前者可以返回执行后的结果。 ScheduledExecutorService：ExecutorService的子接口，It adds functionality to schedule the execution of the tasks. 除了上面三个接口，JUC还提供了一个Executors类，提供了一些工厂方法来创建不同类型的ExecutorService。 ExecutorService Example12345678910111213141516171819202122import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;public class ExecutorsExample &#123; public static void main(String[] args) &#123; System.out.println("Inside : " + Thread.currentThread().getName()); System.out.println("Creating Executor Service..."); ExecutorService executorService = Executors.newSingleThreadExecutor(); System.out.println("Creating a Runnable..."); Runnable runnable = () -&gt; &#123; System.out.println("Inside : " + Thread.currentThread().getName()); &#125;; System.out.println("Submit the task."); executorService.submit(runnable); System.out.println("Shutting down the executor"); executorService.shutdown(); &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243public class ExecutorsExample &#123; public static void main(String[] args) &#123; System.out.println("Inside : " + Thread.currentThread().getName()); System.out.println("Creating Executor Service with a thread pool of Size 2"); ExecutorService executorService = Executors.newFixedThreadPool(2); Runnable task1 = () -&gt; &#123; System.out.println("Executing Task1 inside : " + Thread.currentThread().getName()); try &#123; TimeUnit.SECONDS.sleep(2); &#125; catch (InterruptedException ex) &#123; throw new IllegalStateException(ex); &#125; &#125;; Runnable task2 = () -&gt; &#123; System.out.println("Executing Task2 inside : " + Thread.currentThread().getName()); try &#123; TimeUnit.SECONDS.sleep(4); &#125; catch (InterruptedException ex) &#123; throw new IllegalStateException(ex); &#125; &#125;; Runnable task3 = () -&gt; &#123; System.out.println("Executing Task3 inside : " + Thread.currentThread().getName()); try &#123; TimeUnit.SECONDS.sleep(3); &#125; catch (InterruptedException ex) &#123; throw new IllegalStateException(ex); &#125; &#125;; System.out.println("Submitting the tasks for execution..."); executorService.submit(task1); executorService.submit(task2); executorService.submit(task3); executorService.shutdown(); &#125;&#125; ScheduledExecutorService exampleScheduledExecutorService用来定期或者延期执行任务。 123456// 延迟执行public static void main(String[] args) &#123; ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1); Runnable task = () -&gt; System.out.println("老婆听电话！"); executorService.schedule(task, 2, TimeUnit.MINUTES);&#125; 123456// 定时执行任务public static void main(String[] args) &#123; ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1); Runnable task = () -&gt; System.out.println("老婆听电话！"); executorService.scheduleAtFixedRate(task, 2, 2, TimeUnit.MINUTES);&#125; Callable And Future在上面的例子，我们都是使用Runnable对象来定义任务，这种方法很方便，但是有个缺陷，那就是它不能返回任务执行后的结果。 JDK为我们提供了Callable接口用它来定义的任务，可以在执行完毕后返回结果。 12345678910Callable&lt;String&gt; task = new Callable&lt;String&gt;() &#123; @Override public String call() throws Exception &#123; return "hello world"; &#125;&#125;;Callable&lt;String&gt; task = () -&gt; &#123; return "hello world";&#125;; 12345678910111213141516public static void main(String[] args) throws ExecutionException, InterruptedException &#123; Callable&lt;String&gt; task = () -&gt; &#123; // Perform some computation System.out.println("Entered Callable"); Thread.sleep(2000); return "Hello from Callable"; &#125;; ExecutorService executorService = Executors.newSingleThreadExecutor(); Future&lt;String&gt; result = executorService.submit(task); // Future.get() blocks until the result is available String s = result.get(); System.out.println(s); executorService.shutdown();&#125; CompletionService对生成新的异步任务和消费任务完成后的结果进行解耦。生产者提交需要被执行的任务，消费按顺序消费产物，先生产出来的，先消费。通常，CompletionService依赖于单独的Executor来实际执行任务，在这种情况下，CompletionService仅管理内部完成队列。 ExecutorCompletionService类提供了此方法的实现。 方法和描述 Future&lt;V&gt; poll()Retrieves and removes the Future representing the next completed task, or null if none are present. Future&lt;V&gt; poll(long timeout, TimeUnit unit)Retrieves and removes the Future representing the next completed task, waiting if necessary up to the specified wait time if none are yet present. Future&lt;V&gt; submit(Callable&lt;V&gt; task)Submits a value-returning task for execution and returns a Future representing the pending results of the task. Future&lt;V&gt; submit(Runnable task, V result)Submits a Runnable task for execution and returns a Future representing that task. Future&lt;V&gt; take()Retrieves and removes the Future representing the next completed task, waiting if none are yet present. ExecutorCompletionService一个CompletionService，它使用提供的Executor来执行任务。该类安排提交的任务在完成后放置在可使用take访问的队列中。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch12_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F5.JUC%2Flocks%2F</url>
    <content type="text"><![CDATA[locks我们知道，synchronized 是Java的关键字，是Java的内置特性，在JVM层面实现了对临界资源的同步互斥访问，但 synchronized 在处理实际问题时存在诸多局限性，比如响应中断等。Lock 提供了比 synchronized更广泛的锁操作，它能以更优雅的方式处理线程同步问题。 lock是控制多线程获取共享资源的工具，只有在获取到锁的情况下，才能对共享资源进行操作，而在同一个时间只能有一个线程获取到锁。当然也有些锁是运行并发获取共享资源的，例如ReadWriteLock中的读锁。 每个对象都藏有一个监视器锁（monitor lock），synchronized关键字就是用来获取这个锁的，synchronized要求对锁的占用和释放都必须在代码块或方法块中进行。这就导致synchronized用起来简单，但是它不够灵活，在某些情景下，我们需要更加灵活的锁。例如用于遍历并发访问的数据结构的一些算法需要使用“手动”或“链锁”：获取节点A的锁定，然后获取节点B，然后释放A并获取C，然后释放B并获取D等等。Lock接口的实现类允许在不同的作用域中获取和释放锁，还允许以任何的顺序获取或释放多个锁。 由于它允许你在不同的作用域使用锁，因此你需要手动的对锁进行释放。 Lock12345678public interface Lock &#123; void lock(); void lockInterruptibly() throws InterruptedException; boolean tryLock(); boolean tryLock(long time, TimeUnit unit) throws InterruptedException; void unlock(); Condition newCondition();&#125; 在Lock中声明了四个方法来获取锁，下面来讲讲这四个方法有何区别。 lock() 用来获取锁。如果锁已被其他线程获取，则一直等待。 tryLock()tryLock() 尝试获取锁，如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false，也就说这个方法无论如何都会立即返回。在拿不到锁时不会一直在那等待。 tryLock(long time, TimeUnit unit) 和tryLock()方法是类似的，只不过区别在于这个方法在拿不到锁时会等待一定的时间，在时间期限之内如果还拿不到锁，就返回false。如果如果一开始拿到锁或者在等待期间内拿到了锁，则返回true。 lockInterruptibly() 获取锁，unless the current thread is interrupted. ReentrantLockReentrantLock是目前JUC中唯一实现了Lock接口的类，并且ReentrantLock提供了更多的方法。下面通过一些实例看具体看一下如何使用ReentrantLock。 ReentrantReadWriteLock.ReadLockThe lock returned by method ReentrantReadWriteLock.readLock(). ReentrantReadWriteLock.WriteLockConditionCondition接口可以让线程暂停执行，直到给定的条件（Condition）为真。 Lock用来代替synchronized，Condition用来代替Object的监控方法（wait, notify and notifyAll）。 方法和描述 void await()线程进入等待状态直到接收到信号或者被打断 boolean await(long time, TimeUnit unit)Causes the current thread to wait until it is signalled or interrupted, or the specified waiting time elapses. long awaitNanos(long nanosTimeout)Causes the current thread to wait until it is signalled or interrupted, or the specified waiting time elapses. void awaitUninterruptibly()线程进入等待状态直到接收到信号 boolean awaitUntil(Date deadline)Causes the current thread to wait until it is signalled or interrupted, or the specified deadline elapses. void signal()Wakes up one waiting thread. void signalAll()Wakes up all waiting threads. 例子 12345678910111213141516171819202122232425262728293031323334353637class BoundedBuffer &#123; final Lock lock = new ReentrantLock(); final Condition notFull = lock.newCondition(); final Condition notEmpty = lock.newCondition(); final Object[] items = new Object[100]; int putptr, takeptr, count; public void put(Object x) throws InterruptedException &#123; lock.lock(); try &#123; while (count == items.length) notFull.await(); items[putptr] = x; if (++putptr == items.length) putptr = 0; ++count; notEmpty.signal(); &#125; finally &#123; lock.unlock(); &#125; &#125; public Object take() throws InterruptedException &#123; lock.lock(); try &#123; while (count == 0) notEmpty.await(); Object x = items[takeptr]; if (++takeptr == items.length) takeptr = 0; --count; notFull.signal(); return x; &#125; finally &#123; lock.unlock(); &#125; &#125;&#125; ReadWriteLockReadWriteLock维护一对关联的锁，一个用于只读操作，另一个用于写入。只要没有写入，读锁定可以由多个读取器线程同时保持。写锁是独占的。 方法和描述 Lock readLock()Returns the lock used for reading. Lock writeLock()Returns the lock used for writing. ReentrantReadWriteLockReadWriteLock的实现，支持与ReentrantLock类似的语义。 123456789101112131415161718192021222324252627class RWDictionary &#123; private final Map&lt;String, Data&gt; m = new TreeMap&lt;String, Data&gt;(); private final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock(); private final Lock r = rwl.readLock(); private final Lock w = rwl.writeLock(); public Data get(String key) &#123; r.lock(); try &#123; return m.get(key); &#125; finally &#123; r.unlock(); &#125; &#125; public String[] allKeys() &#123; r.lock(); try &#123; return m.keySet().toArray(); &#125; finally &#123; r.unlock(); &#125; &#125; public Data put(String key, Data value) &#123; w.lock(); try &#123; return m.put(key, value); &#125; finally &#123; w.unlock(); &#125; &#125; public void clear() &#123; w.lock(); try &#123; m.clear(); &#125; finally &#123; w.unlock(); &#125; &#125;&#125; LockSupportconcurrent包的基础Doug Lea 的神作concurrent包是基于AQS (AbstractQueuedSynchronizer)框架，AQS框架借助于两个类：Unsafe(提供CAS操作)和LockSupport(提供park/unpark操作)。因此，LockSupport可谓构建concurrent包的基础之一。理解concurrent包，就从这里开始。 两个重点 操作对象 归根结底，LockSupport调用的Unsafe中的native代码： 12public native void unpark(Thread jthread); public native void park(boolean isAbsolute, long time); 两个函数声明清楚地说明了操作对象：park函数是将当前Thread阻塞，而unpark函数则是将另一个Thread唤醒。 与Object类的wait/notify机制相比，park/unpark有两个优点：1. 以thread为操作对象更符合阻塞线程的直观定义；2. 操作更精准，可以准确地唤醒某一个线程（notify随机唤醒一个线程，notifyAll唤醒所有等待的线程），增加了灵活性。 关于许可 在上面的文字中，我使用了阻塞和唤醒，是为了和wait/notify做对比。其实park/unpark的设计原理核心是“许可”。park是等待一个许可。unpark是为某线程提供一个许可。如果某线程A调用park，那么除非另外一个线程调用unpark(A)给A一个许可，否则线程A将阻塞在park操作上。 有一点比较难理解的，是unpark操作可以再park操作之前。也就是说，先提供许可。当某线程调用park时，已经有许可了，它就消费这个许可，然后可以继续运行。这其实是必须的。考虑最简单的生产者(Producer)消费者(Consumer)模型：Consumer需要消费一个资源，于是调用park操作等待；Producer则生产资源，然后调用unpark给予Consumer使用的许可。非常有可能的一种情况是，Producer先生产，这时候Consumer可能还没有构造好（比如线程还没启动，或者还没切换到该线程）。那么等Consumer准备好要消费时，显然这时候资源已经生产好了，可以直接用，那么park操作当然可以直接运行下去。如果没有这个语义，那将非常难以操作。 其它细节理解了以上两点，我觉得应该把握了关键，其它细节就不是那么关键，也容易理解了，不作分析。 Lock和synchronized的选择总结来说，Lock和synchronized有以下几点不同： 1）Lock是一个接口，而synchronized是Java中的关键字，synchronized是内置的语言实现； 2）synchronized在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而Lock在发生异常时，如果没有主动通过unLock()去释放锁，则很可能造成死锁现象，因此使用Lock时需要在finally块中释放锁； 3）Lock可以让等待锁的线程响应中断，而synchronized却不行，使用synchronized时，等待的线程会一直等待下去，不能够响应中断； 4）通过Lock可以知道有没有成功获取锁，而synchronized却无法办到。 5）Lock可以提高多个线程进行读操作的效率。 在性能上来说，如果竞争资源不激烈，两者的性能是差不多的，而当竞争资源非常激烈时（即有大量线程同时竞争），此时Lock的性能要远远优于synchronized。所以说，在具体使用时要根据适当情况选择。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch12_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2Fx.%E4%B9%90%E8%A7%82%E9%94%81%E4%B8%8E%E6%82%B2%E8%A7%82%E9%94%81%2F</url>
    <content type="text"><![CDATA[乐观锁与悲观锁简介悲观锁：每次拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。Java中synchronized和ReentrantLock等独占锁就是悲观锁思想的实现。 悲观锁机制存在以下问题： 在多线程竞争下，加锁、释放锁会导致比较多的上下文切换和调度延时，引起性能问题。 一个线程持有锁会导致其它所有需要此锁的线程挂起。 如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能风险。 乐观锁：每次拿数据的时候都不会上锁，但是在更新的时候会对数据是否产生并发冲突进行检测，只有通过检测才对数据进行更新操作。 两种锁的使用场景 两种锁各有优缺点，乐观锁适用于写比较少的情况下（多读场景），即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果是多写的情况，一般会经常产生冲突，这就会导致上层应用会不断的进行retry，这样反倒是降低了性能，所以一般多写的场景下用悲观锁就比较合适。 悲观锁的实现在Java中，你可以通过synchronized和ReentrantLock等独占锁的方式实现。 在MySQL InnoDB中 要使用悲观锁，我们必须关闭mysql数据库的自动提交属性，因为MySQL默认使用autocommit模式，也就是说，当你执行一个更新操作后，MySQL会立刻将结果进行提交。set autocommit=0; 使用select…for update会把数据给锁住，不过我们需要注意一些锁的级别，MySQL InnoDB默认行级锁。行级锁都是基于索引的，如果一条SQL语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住，这点需要注意。 乐观锁的实现乐观锁一般会使用版本号机制或CAS算法实现 版本号机制一般是在数据表中加上一个数据版本号version字段，读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。此时，将提交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如果提交的数据 版本号大于数据库表当前版本号，则予以更新，否则重试更新操作，直到更新成功。 123update t_goods set status = 2,version = version + 1where id=#&#123;id&#125; and version=#&#123;version&#125;; 举个例子： 假设数据库中帐户信息表中有一个 version 字段，当前值为 1 ；而当前帐户余额字段（ balance ）为 $100 。 操作员 A 此时将其读出（ version=1 ），并从其帐户余额中扣除 $50（ $100-$50 ）。 在操作员 A 操作的过程中，操作员B 也读入此用户信息（version=1），并从其帐户余额中扣除 $20 （$100-$20）。 操作员 A 完成了修改工作，将数据版本号加一（version=2），连同帐户扣除后余额（ balance=$50 ），提交至数据库更新，此时由于提交数据版本大于数据库记录当前版本，数据被更新，数据库记录 version 更新为 2 。 操作员 B 完成了操作，也将版本号加一（ version=2 ）试图向数据库提交数据（ balance=$80 ），但此时比对数据库记录版本时发现，操作员 B 提交的数据版本号为 2 ，数据库记录当前版本也为 2 ，不满足 “ 提交版本必须大于记录当前版本才能执行更新 “ 的乐观锁策略，因此，操作员 B 的提交被驳回。 除了版本号我们也可以使用时间戳，原理也是类似的，也是在更新提交的时候检查当前数据库中数据的时间戳和自己更新前取到的时间戳进行对比，如果一致则OK，否则就是冲突。 CASCAS（Compare and Swap）是一种有名的无锁算法。无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步，所以也叫非阻塞同步（Non-blocking Synchronization）。 漫谈：什么是CAS机制 上 漫谈：什么是CAS机制 下]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch12_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2Fx.%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%90%8C%E6%AD%A5%2F</url>
    <content type="text"><![CDATA[线程的同步为什么要同步？当多个线程同时操作一个可共享的资源变量时，操作的结果会变得无法预测，这就是同步问题。 为解决同步问题，Java引入了同步锁机制从而避免共享资源变量在线程没有完成操作之前，被其他线程的调用，从而保证了该变量的唯一性和准确性。 同步代码块为了解决同步问题，Java引入了同步机制，具体的做法实在会出现同步问题的代码前加上synchronized标志，这样的代码被称为同步代码块。 12345public void withdrawal() &#123; synchronized (this)&#123; // do something &#125;&#125; 每个Java对象都有且只有一个同步锁，在任何时刻，最多只允许一个线程拥有这把锁。 如果对象A的锁已经被线程T1所使用，那么需要使用对象A的锁的线程T2就会被虚拟机放入对象A的锁池中，当线程T1执行释放锁以后，虚拟机再从对象A的锁池中随机抽取一个线程，使这个线程拥有锁，并转到就绪状态。 同步方法如果一个方法中所有代码都需要进行同步，那么可以直接用synchronized修饰这个方法。 123public synchronized void withdrawal() &#123; // do something&#125; 线程同步需要注意的地方 如果同步代码和非同步代码共同操作共享资源，那么仍然会有同步问题。 每个对象有且只有一把锁 synchronized还可以修饰静态方法 在执行同步代码块时，Thread.sleed和Thread.yield方法并不会释放锁，它们只是让出了CPU的使用权 synchronized声明不会被继承 释放对象的锁线程会在以下情况释放锁 执行完同步代码 执行同步代码的过程中，出现了异常导致线程终止 执行同步代码的过程中，调用了锁所属对象的wait()方法 死锁当线程A等待线程B的锁，线程B又等待线程A的锁，这种情况就是死锁。 生产者消费者模式synchronized 确保一个方法不能被多个线程同时执行。 使用标记和Object.wait() Object.notify(),让线程在正确的时机运行。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495package ThreadDemo;public class ProducterConsumer &#123; public static void main(String[] args) &#123; Food food = new Food(); Thread pt = new Thread(new Producter(food)); Thread ct = new Thread(new Consumer(food)); pt.start(); ct.start(); &#125;&#125;class Food &#123; private String name; private String desc; public boolean isReady = false; public synchronized void set(String name, String desc) &#123; // 判断 if (this.isReady) &#123; try &#123; System.out.println("别急呢，食物还没吃完"); this.wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; // 设值 this.name = name; try &#123; Thread.sleep(500); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; this.desc = desc; // 修改 this.isReady = true; this.notify(); &#125; public synchronized void get() &#123; // 判断 if (!this.isReady) &#123; try &#123; System.out.println("别急呢，食物还没做好呢"); this.wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; // 输出 System.out.println(this.name + "--" + this.desc); // 设值 this.isReady = false; this.notify(); &#125;&#125;class Producter implements Runnable &#123; private Food food; private String name; private String desc; public Producter(Food food) &#123; this.food = food; &#125; @Override public void run() &#123; for (int i = 0; i &lt; 10; i++) &#123; name = i % 2 == 0 ? "叉烧" : "饼干"; desc = i % 2 == 0 ? "美味可口" : "充饥神器"; this.food.set(name, desc); &#125; &#125;&#125;class Consumer implements Runnable &#123; private Food food; public Consumer(Food food) &#123; this.food = food; &#125; @Override public void run() &#123; for (int i = 0; i &lt; 10; i++) &#123; this.food.get(); &#125; &#125;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch12_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F5.JUC%2Fatomic%2F</url>
    <content type="text"><![CDATA[1.何谓Atomic？ Atomic一词跟原子有点关系，后者曾被人认为是最小物质的单位。计算机中的Atomic是指不能分割成若干部分的意思。如果一段代码被认为是Atomic，则表示这段代码在执行过程中，是不能被中断的。通常来说，原子指令由硬件提供，供软件来实现原子方法（某个线程进入该方法后，就不会被中断，直到其执行完成） 在x86 平台上，CPU提供了在指令执行期间对总线加锁的手段。CPU芯片上有一条引线#HLOCK pin，如果汇编语言的程序中在一条指令前面加上前缀”LOCK”，经过汇编以后的机器代码就使CPU在执行这条指令的时候把#HLOCK pin的电位拉低，持续到这条指令结束时放开，从而把总线锁住，这样同一总线上别的CPU就暂时不能通过总线访问内存了，保证了这条指令在多处理器环境中的原子性。 2.原子操作类当多个线程同时更新公共变量，会导致线程不安全，通常大家可以会想到使用synchronized关键字或者Lock来解决这个问题，synchronized和Lock可以保证多个线程不会同时更新该公共变量。为了使用更简单，性能更高效，jdk1.5提出原子操作类。 原子操作类主要集中在Atomic（java.util.concurrent.atomic）包下，按照原子更新方式，这些原子操作类大致可以分为四种：原子更新基本类型、原子更新数组、原子更新引用以及原子更新属性，接下来就这四种类型原子操作类的具体实现做相关分析。 2.1原子更新基本类型Atomic包主要提供三个类来更新基本类型变量： AtomicBoolean：用来更新布尔型变量； AtomicInteger：用来更新整型变量； AtomicLong：用来更新长整型变量； 2.2原子更新数组Atomic包提供三个类来以原子的方式更新数组里的元素： AtomicIntegerArray：用来更新整型数组里的元素； AtomicLongArray：用来更新长整型数组里的元素； AtomicReferenceArray：用来更新引用类型数组里的元素。 2.3原子更新引用类型原子更新基本类型每次只能更新一个变量，假如需要更新多个变量怎么办呢？针对这个问题，Atomic包提供引用类型类来一次更新多个变量： AtomicReference：用于更新引用类型，可以理解为更新Object； AtomicMarkableReference：用于更新带有标记位的引用类型； AtomicStampedReference：用于更新带有版本号的引用类型，该类将版本号与引用类型关联起来，可以解决使用CAS进行原子更新时可能会出现的ABA问题。 2.4原子更新属性AtomicReference系列可以更新Object，同样的，针对Object的属性，Atomic提供一下方法来更新Object的属性： AtomicIntegerFieldUpdater：用于更新Object的整型属性； AtomicLongFieldUpdater：用于更新Object的长整型属性； AtomicReferenceFieldUpdater：用于更新Object的引用类型属性。 3.原子操作类源码分析3.1原子更新基本类型对于原子跟新基本类型，我们以AtomicLong为切入点，分析一下具体的源码实现。 AtomicLong有以下比较常用的方法： boolean compareAndSet(long expect, long update) long getAndSet(long newValue) add系列方法 long addAndGet(long delta)和long getAndAdd(long delta) increment系列方法 decrement系列方法 void lazySet(long newValue) compareAndSet 12345// 使用了CAS机制：CAS机制当中使用了3个基本操作数：内存地址V，旧的预期值A，要修改的新值B。// 调用Unsafe的compareAndSwapLong方法实现比较设置，如果当前value与预期值expect相等，则将value设置为update的值。public final boolean compareAndSet(long expect, long update) &#123; return unsafe.compareAndSwapLong(this, valueOffset, expect, update);&#125; 1234// 当对象是数组的时候，offset才有用的，如果其他，offset其实是没用的public final native boolean compareAndSwapLong(Object o, long offset, long expected, long x); getAndSet 123public final long getAndSet(long newValue) &#123; return unsafe.getAndSetLong(this, valueOffset, newValue);&#125; 1234567public final long getAndSetLong(Object o, long offset, long newValue) &#123; long v; do &#123; v = getLongVolatile(o, offset); &#125; while (!compareAndSwapLong(o, offset, v, newValue)); return v;&#125; add系列方法 AtomicLong提供addAndGet方法和getAndAdd方法来做加法运算。 123public final long getAndAdd(long delta) &#123; return unsafe.getAndAddLong(this, valueOffset, delta);&#125; 123public final long addAndGet(long delta) &#123; return unsafe.getAndAddLong(this, valueOffset, delta) + delta;&#125; increment系列方法 同add一样，AtomicLong同样提供两个方法：incrementAndGet和getAndIncrement方法来做自增操作。 decrement系列方法 同样的，AtomicLong也提供两个方法：decrementAndGet和getAndDecrement方法来做自减操作。 lazySet方法 练习 实现自增计数器，要求线程安全。 3.2原子更新数组Atomic包提供三个类来以原子的方式更新数组里的元素： AtomicIntegerArray：用来更新整型数组里的元素； AtomicLongArray：用来更新长整型数组里的元素； AtomicReferenceArray：用来更新引用类型数组里的元素。 接下来还是以AtomicLongArray为例，分析具体的源码实现。 AtomicLongArray同AtomicLong对外提供的方法大致一致，只不过前者是操作数组，后者是操作基本类型。 12//AtomicLongArray自己维护一个长整型数组array，对数组元素的操作实质是对array的操作。private final long[] array; 3.3原子更新引用类型原子更新基本类型每次只能更新一个变量，假如需要更新多个变量怎么办呢？针对这个问题，Atomic包提供引用类型类来一次更新多个变量： AtomicReference：用于更新引用类型，可以理解为更新Object； AtomicMarkableReference：用于更新带有标记位的引用类型； AtomicStampedReference：用于更新带有版本号的引用类型，该类将版本号与引用类型关联起来，可以解决使用CAS进行原子更新时可能会出现的ABA问题。 3.4原子更新属性AtomicReference系列可以更新Object，同样的，针对Object的属性，Atomic提供一下方法来更新Object的属性： AtomicIntegerFieldUpdater：用于更新Object的整型属性； AtomicLongFieldUpdater：用于更新Object的长整型属性； AtomicReferenceFieldUpdater：用于更新Object的引用类型属性。 以AtomicIntegerFieldUpdater为例，分析一下源码的具体实现。 在使用AtomicIntegerFieldUpdater来更改Object整型属性大致分为两步： 使用静态方法newUpdater创建一个更新器，设置需要更新的类和属性； 调用相关CAS系列方法更新属性，需要注意的是，更新的属性必须使用public volatile修饰。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch12_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F2.%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%2F</url>
    <content type="text"><![CDATA[线程通信java.lang.Object类提供了两个用于线程通信的方法 wait()：执行该方法的线程会释放对象的锁，并进入对象的等待池中，等待其它线程将他唤醒。 notify()：执行该方法的线程唤醒在对象的等待池中等待的一个线程。Java虚拟机从对象的等待池随机选择一个线程，把它转到对象的锁池中。 假定线程T1和线程T2共同操作一个对象obj，这两个线程可以通过对象obj的wait()和notify()方法来进行通信。 线程T1执行对象obj的同步代码块时，T1持有对象obj的锁，T2在对象obj的锁池中等待。 线程T1在同步代码块中执行obj.wait()方法，线程T1释放obj的锁，进入obj的等待池。 线程T2获得obj的锁，执行obj的另一个同步代码块。 线程T2在同步代码中执行obj.notify()方法，Java虚拟机把T1从等待池放入锁池。 线程T2执行完同步代码块后，释放锁。 ThreadLocal类java.lang.ThreadLocal类可用来存放线程的局部变量，每个线程都有单独的局部变量，彼此之间不会共享。 ThreadLocal&lt;T&gt;类主要包括以下三个方法： public T get()：返回当前线程的局部变量 protected T initialValue()：返回当前线程的局部变量的初始值 public void set(T value)：设置当前线程的局部变量]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch12_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2Fx.JMM%2F</url>
    <content type="text"><![CDATA[1.并行、并发、高并发、线程安全性并行、并发、高并发 并行：如果某个系统支持两个或以上个动作同时存在，那么这个系统就是一个并发系统。并发：如果某个系统支持两个或以上个动作同时执行，那么这个系统就是一个并行系统。 并发系统与并行系统这两个定义之间的关键差异在于“执行”这个词。在并发程序中可以同时拥有两个或以上个线程。这意味着，如果程序在单核处理器上运行，那么这些线程将交替的执行。这些线程是同时“存在”的——每个线程都处于执行过程中的某个状态。如果程序能够并行执行，那么就一定是运行在多核处理器上。此时，程序中的每个线程都将分配到一个独立的处理器核上，因此可以同时运行。 高并发：通常是指，通过设计保证系统能够同时并行处理很多请求。 线程安全性：一个类无论被多少个线程访问，该类始终能表现出正确的行为，那么就称这个类是线程安全的。 2.并发编程的问题在并发编程中，我们会遇到某些问题，例如原子性问题、可见性问题、有序性问题等等。 解决问题，我们要有方法论以及具体实现。在Java并发编程中，这个方法论就是Java内存模型，而具体实现就是Java提供的一系列和并发处理相关的关键字，比如volatile、synchronized、final以及concurrent包等等。 我们先来学习其中的方法论，再来学习具体实现。 Java内存模型，顾名思义就是一种内存模型，那么我们有必要先了解一下什么是内存模型。 2.1内存模型内存模型的作用是定义共享内存的正确性。具体的做法就是内存模型提供了一些关于内存读写的规则。通过这些规则来规范对内存的读写操作，从而保证指令执行的正确性。 2.1CPU缓存一致性背景知识：CPU的高速缓存 总所周知，CPU和内存并不是直接交换数据的，它们之间还隔着一个高速缓存。高速缓存是对程序员透明的，这意味在编程的时候是感知不到CPU的缓存的存在的。一般情况下确实如此，但在，在某些特殊的情形下（多核多线程），就不能忽略缓存的存在了。这其实是和缓存的设计有关系，一般多处理器下的每个CPU都有一个自己的缓存，存储在这个缓存的数据是其它CPU是无法查看的。 引入问题1：缓存一致性 问题来了，由于缓存是每个CPU私有的，那么在多线程环境下，某个CPU修改了变量x后保存在本地缓存，对于其它CPU，何时才能发现变量x被修改呢？如何保证其它CPU的缓存中持有的x的值是最新的呢？这就是缓存一致性问题。 缓存一致性问题是由于引入缓存而导致的，所以，这是很多CPU厂商必须解决的问题。为了解决前面提到的缓存数据不一致的问题，人们提出过很多方案，通常来说有以下2种方案： 通过在总线加LOCK#锁的方式。 通过缓存一致性协议（Cache Coherence Protocol）。 LOCK# 在早期的CPU当中，是通过在总线上加LOCK#锁的形式来解决缓存不一致的问题。因为CPU和其他部件进行通信都是通过总线来进行的，如果对总线加LOCK#锁的话，也就是说阻塞了其他CPU对其他部件访问（如内存），从而使得只能有一个CPU能使用这个变量的内存。在总线上发出了LCOK#锁的信号，那么只有等待这段代码完全执行完毕之后，其他CPU才能从其内存读取变量，然后进行相应的操作。这样就解决了缓存不一致的问题。但是由于在锁住总线期间，其他CPU无法访问内存，会导致效率低下。因此出现了第二种解决方案，通过缓存一致性协议来解决缓存一致性问题。 缓存一致性协议 缓存一致性协议（Cache Coherence Protocol），最出名的就是Intel 的MESI协议，MESI协议的作用就是保证每个缓存中使用的共享变量的副本是一致的。MESI的核心的思想是：当CPU写数据时，如果发现操作的变量是共享变量，即在其他CPU中也存在该变量的副本，会发出信号通知其他CPU将该变量的缓存行置为无效状态，因此当其他CPU需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取。 在MESI协议中，每个缓存可能有有4个状态，它们分别是： M(Modified)：这行数据有效，数据被修改了，和内存中的数据不一致，数据只存在于本Cache中。 E(Exclusive)：这行数据有效，数据和内存中的数据一致，数据只存在于本Cache中。 S(Shared)：这行数据有效，数据和内存中的数据一致，数据存在于很多Cache中。 I(Invalid)：这行数据无效。 关于MESI的更多细节这里就不详细介绍了，我们只要知道，MESI是一种比较常用的缓存一致性协议，他可以用来解决缓存之间的数据一致性问题就可以了。 通过缓存一致性协议之后，内存可见性问题似乎是得以解决了。但是，这里面还隐藏着另外一个问题：乱序执行！ 2.1.2乱序执行乱序，指的是程序指令实际上执行的顺序，和我们书写的指令的顺序不一致。乱序分两种，分别是编译器的指令重排和CPU的乱序执行。本意上乱序是为了优化指令执行的速度而产生的。并且为了维护程序原来的语义，编译器和CPU不会对两个有数据依赖的指令重排（reorder）。这种保护在单线程的环境下是可以工作的，但是到了多线程，就可能出问题了。 举个例子，CPU-0将要执行两条指令，分别是： 121. STORE x2. LOAD y 当CPU-0执行指令1的时候，发现这个变量x的当前状态为Shared，这意味着其它CPU也持有了x，因此根据缓存一致性协议，CPU-0在修改x之前必须通知其它CPU，直到收到来自其它CPU的ack才会执行真正的修改x。但是，事情没有这么简单。现代CPU缓存通常都有一个Store Buffer，其存在的目的是，先将要Store的变量记下来，注意此时并不真的执行Store操作，然后待时机合适的时候再执行实际的Store。有了这个Store Buffer，CPU-0在向其它CPU发出disable消息之后并不是干等着，而是转而执行指令2（由于指令1和指令2在CPU-0看来并不存在数据依赖）。这样做效率是有了，但是也带来了问题。虽然我们在写程序的时候，是先STORE x再执行LOAD y，但是实际上CPU却是先LOAD y再STORE x，这个便是CPU乱序执行（reorder）的一种情况！ 当你的程序要求指令1、2有逻辑上的先后顺序时，CPU这样的优化就是有问题的。但是，CPU并不知道指令之间蕴含着什么样的逻辑顺序，在你告诉它之前，它只是假设指令之间都没有逻辑关联，并且尽最大的努力优化执行速度。因此我们需要一种机制能告诉CPU：这段指令执行的顺序是不可被重排的！做这种事的就是内存屏障（memory barrier）！ 123STORE xWMB (Write memory barrier)LOAD y 例如，通过在STORE x之后加上这个写内存屏障，就能保证在之后LOAD y指令不会被重排到STORE x之前了。 2.1.3总结前面讲了那么多，那么内存模型是什么呢？由于每个CPU设计都是不同的，每个CPU对指令乱序的程度也是不一样的。比较保守的如x86仅会对Store Load乱序，但是一些优化激进的CPU（PS的Power）会允许更多情况的乱序产生。如果目标是写一个跨平台多线程的程序，那么势必要了解每一个CPU的细节，来插入确切的、足够的内存屏障来保证程序的正确性。这是多么的不科学啊！科学的做法应该是，编写一套抽象的程序，然后在不同的平台下让编程语言、编译器来生成合适的内存屏障以及处理缓存一致性问题。因此，我们有了内存模型的概念。我们只需要根据这个抽象的内存模型来编写程序即可。 2.2原子性、可见性、有序性 可见性：指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。 原子性：指在一个操作中cpu不可以在中途暂停然后再调度，既不被中断操作，要不执行完成，要不就不执行。 有序性：程序执行的顺序按照代码的先后顺序执行。 有没有发现，缓存一致性问题其实就是可见性问题。CPU乱序执行就是原子性问题，编译器指令重排就是有序性问题。所以说Java内存模型是解决这些问题的方法论。 3.Java内存模型3.1什么是Java内存模型Java内存模型（Java Memory Model ,JMM）就是一种符合内存模型规范的，屏蔽了各种硬件和操作系统的访问差异的，保证了Java程序在各种平台下对内存的访问都能保证效果一致的机制及规范。 提到Java内存模型，一般指的是JDK 5 开始使用的新的内存模型，主要由JSR-133: JavaTM Memory Model and Thread Specification 描述。 Java内存模型规定了所有的变量都存储在主内存中，每条线程还有自己的工作内存，线程的工作内存保存了主内存中该线程使用到的变量的副本，线程对变量的所有操作都必须在工作内存中进行，而不能直接读写主内存。不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量的传递均需要自己的工作内存和主存之间进行数据同步进行。 3.2Java内存模型的实现在Java中提供了一系列和并发处理相关的关键字，比如volatile、synchronized、final等等。其实这些就是Java内存模型封装了底层的实现后提供给程序员使用的一些关键字。 在开发多线程的代码的时候，我们可以直接使用synchronized等关键字来控制并发，从来就不需要关心底层的编译器优化、缓存一致性等问题。所以，Java内存模型，除了定义了一套规范，还提供了一系列原语，封装了底层实现后，供开发者直接使用。 下面我们看看在Java中分别使用什么方式解决原子性、有序性和一致性等问题。 3.2.1原子性问题 原子变量类 synchronized 在Java中，为了保证原子性，提供了两个高级的字节码指令monitorenter和monitorexit。在synchronized的实现原理文章中，介绍过，这两个字节码，在Java中对应的关键字就是synchronized。因此，在Java中可以使用synchronized来保证方法和代码块内的操作是原子性的。 3.2.2可见性问题Java内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值的这种依赖主内存作为传递媒介的方式来实现的。Java中的volatile关键字提供了一个功能，那就是被其修饰的变量在被修改后可以立即同步到主内存，被其修饰的变量在每次是用之前都从主内存刷新。因此，可以使用volatile来保证多线程操作时变量的可见性。除了volatile，Java中的synchronized和final两个关键字也可以实现可见性。只不过实现方式不同，这里不再展开了。 3.2.3有序性问题在Java中，可以使用synchronized和volatile来保证多线程之间操作的有序性。实现方式有所区别： volatile关键字会禁止指令重排。 synchronized关键字保证同一时刻只允许一条线程操作。进出锁住的代码块是串行的，因为只能有一个线程拿到锁，这就使得使用同一个锁的两个执行过程A和B之间，A看B的操作是有序的，B看A的操作也是有序的，是因为执行过程内部无论会不会指令重排序，结果都是一致的。但是锁的内部代码依然会指令重排序。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch12_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F4.%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[并发问题1.并发编程的基本知识并行：如果某个系统支持两个或以上个动作同时存在，那么这个系统就是一个并发系统。并发：如果某个系统支持两个或以上个动作同时执行，那么这个系统就是一个并行系统。 并发系统与并行系统这两个定义之间的关键差异在于“执行”这个词。在并发程序中可以同时拥有两个或以上个线程。这意味着，如果程序在单核处理器上运行，那么这些线程将交替的执行。这些线程是同时“存在”的——每个线程都处于执行过程中的某个状态。如果程序能够并行执行，那么就一定是运行在多核处理器上。此时，程序中的每个线程都将分配到一个独立的处理器核上，因此可以同时运行。 高并发：通常是指，通过设计保证系统能够同时并行处理很多请求。 2.并发问题Java中的多线程编程属于并发编程的一种。并发编程能有效提高程序运行的效率，但同时也容易出现一些问题，下面我们来了解这些问题，只有把这些问题了解了，才能写出好的并发程序。 2.1可见性问题可见性：一个线程对共享变量值的修改，能够及时的被其它线程看到。 共享变量：如果一个变量在多个线程的工作内存中存在副本，那么这个变量就是这几个线程的共享变量。 知道了什么是可见性，那么顾名思义，可见性问题就是一个线程对共享变量值的修改，没有及时的被其它线程看到。 为什么会出现这种情况？ 线程的交叉执行 共享变量更新后的值没有及时在工作内存和主内存中更新 网上有很多关于可见性问题的文章，都会说什么Java内存模型、CPU多级缓存等等，但是个人觉得都说的不太清楚，本人觉得如果要想真正的了解这个问题的本质，需要对JVM以及计算机组成原理，特别是内存和CPU相关的知识有一定的认识才可以。本人暂时没有这个能力，暂时就不讲这个了。 解决方案 要实现共享变量的可见性，必须保证两点： 线程修改后的共享变量能够及时从工作内存刷新到主内存中 其他线程能及时把共享变量的最新值从主内存中更新到自己的工作内存中 Java解决可见性问题的方式包括 synchronized volatile Lock synchronizedJMM关于synchronized的两条规定 线程解锁前，必须把共享变量的最新值刷新到主内存中 线程加锁时，将清空工作内存中共享变量的值，从而在使用共享变量时，需要从主内存中重新读取最新的值 volatile通过内存屏障和禁止重排序优化来保证可见性。 要在多线程中安全的使用volatile变量，必须同时满足 对变量的写入操作不依赖其当前值 该变量没有包含在具有其他变量的不变式中 2.2原子性问题原子性操作：一般我们认为原子是不可再分的，在编程领域中，原子性操作指的是一组操作是不可再分的，这组操作是一个统一的整体，这组操作在执行的过程中不会其它因素干扰，例如执行过程中被中断、或者执行过程中所用到的值被偷偷修改了。在Java中，对基本数据类型的变量的读取和赋值操作是原子性操作。例如 12x = 10;y = x; 注意：在32位平台下，对64位数据的读取和赋值是需要通过两个操作来完成的，不能保证其原子性。但是好像在最新的JDK中，JVM已经保证对64位数据的读取和赋值也是原子性操作了。 123x += 1；x = x + 1;// 上面这种就不是原子性操作了， 原子性问题：我想不到、也找不到一个正式的定义，只能通过例子来讲。 例如 x = x + 1;这个操作。假设当前x = 9，然后有两个线程同时执行上面这条语句。由于两个线程都读到x的值为9，然后都执行递增操作，最后x的值变为10， 而不是预期的11。这种问题就是原子性问题。 产生的原因有些操作在被多个线程同时执行的时候，无法保证当前使用的数据的有效性。 解决方案 原子类 synchronized Lock 2.3有序性问题有序性问题：程序执行的顺序与编写代码的先后顺序不一致。 产生的原因 编译器指令重排 编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。 CPU乱序执行 现代处理器采用了指令级并行技术（Instruction-Level Parallelism， ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器 可以改变语句对应机器指令的执行顺序。 内存系统的重排序 由于处理器使用缓存和读/写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。 解决方案在Java中，可以使用synchronized和volatile来保证多线程之间操作的有序性。实现方式有所区别： volatile关键字会禁止指令重排。 synchronized关键字保证同一时刻只允许一条线程操作。进出锁住的代码块是串行的，因为只能有一个线程拿到锁，这就使得使用同一个锁的两个执行过程A和B之间，A看B的操作是有序的，B看A的操作也是有序的，是因为执行过程内部无论会不会指令重排序，结果都是一致的。但是锁的内部代码依然会指令重排序。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch10_%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%BA%93%2FScanner%2F</url>
    <content type="text"><![CDATA[Scannerjava.util.Scanner A simple text scanner which can parse primitive(原始的) types and strings using regular expressions. 一个简单的文本扫描器,可以通过使用正则表达式解析基本数据类型和字符串, primitive types : 基本数据类型 A Scanner breaks its input into tokens(记号) using a delimiter(分隔符) pattern,which by default matches whitespace. The resulting tokens may then be converted into values of different types using the various next methods. 文本扫描器会根据你设置的分隔符,对输入的内容进行分隔,默认的分隔符是空格. 你可以通过使用各种各样的 next 方法来读取内容.]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch10_%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%BA%93%2F7.1_%E4%B8%8E%E7%94%A8%E6%88%B7%E4%BA%92%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[与用户互动运行Java程序的参数在运行Java程序时输入参数 123456789101112public class Demo&#123; public static void main(String[] args) &#123; for(String arg : args) &#123; System.out.println(arg); &#125; &#125;&#125;//------// java Demo Hello World 使用Scanner获取键盘参数Scanner类可以方便的获取用户的键盘输入,它是一个基于正则表达式的文本扫描器. 它可以从文件,输入流,字符串中解析出基本数据类型和字符串值. 123456789101112131415// useDelimiter("定义分隔符"); hasNext();是否有内容; Next()输出内容; close(); 关闭扫描器import java.util.Scanner;public class Demo&#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); sc.useDelimiter("\n"); while(sc.hasNext()) &#123; System.out.println(sc.next()); &#125; sc.close(); &#125;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch10_%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%BA%93%2F7.2_%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%2F</url>
    <content type="text"><![CDATA[系统相关System类System类代表当前Java程序的运行平台,它是final修饰的类,你知道我在说什么吗? 就是它不能有子类. 它提供了代表标准输入 输出 和错误输出的类变量, 还提供了一些静态方法,用于访问环境变量、系统属性的方法、还提供了加载文件和动态链接库的方法. 常用方法: ① getenv() 以字典的形式返回系统所有环境变量 ② getProperty(“”)获取系统属性 ③getProperties()获取所有系统属性 ④currentTimeMillis()返回long型整数格式的时间. ⑤identityHashCode(Object x) 获取某个对象的hashCode值. hashCode值相同,绝对是同一个对象. 123456789101112131415161718// getenv();获取环境变量 getProperty("")获取系统属性 getProperties()获取系统所有属性.import java.util.Map;import java.util.Properties;public class Demo &#123; public static void main(String[] args) &#123; // 获取系统所有的环境变量. Map&lt;String,String&gt; env = System.getenv(); for (String name: env.keySet()) &#123; System.out.println(name+":"+env.get(name)); &#125; // 获取系统所有属性 Properties props = System.getProperties(); System.out.println(props); &#125;&#125; Runtime类Runtime类代表着Java程序运行时环境,每个Java程序都有一个与之对应的Runtime实例.]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch11_%E6%B3%A8%E8%A7%A3%2F%E6%B3%A8%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[注解自定义注解类型12public @interface MyAnnotation&#123;&#125; 上面的代码等价于 1public class MyAnnotation implements java.lang.annotation.Annotation 标识型注解注解体为空时，不包含任何成员的注解就是标识型注解。 成员的可选类型 String Class 基本类型 枚举类型 注解类型 以及上述类型的数组 1234567public @interface MyAnnotation &#123; String value() default "默认构造方法"; Class type() default void.class;&#125; 用于注解类的注解JDK内置了一些注解，让我们可以对自定义的注解类进行更加灵活的配置 @Target指出该注解类适用于那些目标 12345678@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)public @interface MyAnnotation &#123; String value() default "默认构造方法"; Class type() default void.class;&#125; 选项 描述 ANNOTATION_TYPE 注解类型 TYPE 各种Java类型，包括类、接口、枚举类、注解类型 CONSTRUCTOR 构造方法 FIELD 成员变量 METHOD 成员方法 PARAMETER 方法参数 LOCAL_VARIABLE 局部变量 PACKAGE 包 @Retention指定当前注解的有效范围 选项 描述 SOURCE 仅保存在源码中，不会引入到编译后的class文件中 CLASS 会把程序中对注解类型的引用编译到类文件中 RUNTIME 包含以上CLASS的范围，并且还能在运行时把注解加载到虚拟机中 @Document标识型注解。表示注解类型包含的信息会被加入到JavaDoc文档中。 @Inherited表示该注解类可被继承 补充@SuppressWarnings用于关闭编译时产生的特定警告信息 选项 描述 deprecation 使用了过时的类或方法的警告 unchecked 使用了未检查的类型转换的警告 fallthrough switch语句中没有Break的警告 path serial final all 以上所有警告]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F21%2FJava%2FJavaSE%2Fch10_%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%BA%93%2F7.3_%E5%B8%B8%E7%94%A8%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[常用类Object类Object类常用方法 123456boolean equlas(Object obj); // 判断两个对象是否同一个对象protected void finalize(); //当系统中没有引用变量引用到该对象时,垃圾回收器来该方法回收对象.Class&lt;T&gt; getClass()//获取该对象的运行时类int hashCode() // 返回该对象的hashCode值.结果默认跟System那个方法一致.String toString()//默认返回字符串,运行时类名@十六进制hashCodeprotected clone() // 对对象进行浅克隆 clone()方法 ①自定义类实现Cloneable接口 ②自定义类实现自己的clone()方法 123456789101112131415class User implements Cloneable &#123; public User clone() throws CloneNotSupportedException &#123; return (User) super.clone(); &#125;&#125;public class Demo &#123; public static void main(String[] args) throws CloneNotSupportedException &#123; User u1 = new User(); User u2 = u1.clone(); System.out.println(u1 == u2); //不是同一个对象 &#125;&#125; Objects类 String、StringBuffer、StringBuilder类String类是不可变类. StringBuffer类代表一个字符序列可变的字符串.该对象具有append() insert() reverse() setCharAt() setLength()等方法. 一旦通过StringBuffer类生成了最终想要的字符串,就可以通过toString()方法获得一个String对象. ##]]></content>
  </entry>
  <entry>
    <title><![CDATA[3.Cookie]]></title>
    <url>%2F2018%2F12%2F31%2FJava%2FJavaWeb%2F0.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F3.Cookie%2F</url>
    <content type="text"><![CDATA[Cookie什么是CookieWeb应用程序是使用HTTP协议传输数据的。HTTP协议是无状态的协议。一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换数据需要建立新的连接。这就意味着服务器无法从连接上跟踪会话。即用户A购买了一件商品放入购物车内，当再次购买商品时服务器已经无法判断该购买行为是属于用户A的会话还是用户B的会话了。要跟踪该会话，必须引入一种机制。Cookie就是这样的一种机制。它可以弥补HTTP协议无状态的不足。在Session出现之前，基本上所有的网站都采用Cookie来跟踪会话。 如果你把Cookies看成为http协议的一个扩展的话，理解起来就容易的多了，其实本质上cookies就是http的一个扩展。有两个http头部是专门负责设置以及发送cookie的,它们分别是Set-Cookie以及Cookie。当服务器返回给客户端一个http响应信息时，其中如果包含Set-Cookie这个头部时，意思就是指示客户端建立一个cookie，并且在后续的http请求中自动发送这个cookie到服务器端，直到这个cookie过期。如果cookie的生存时间是整个会话期间的话，那么浏览器会将cookie保存在内存中，浏览器关闭时就会自动清除这个cookie。另外一种情况就是保存在客户端的硬盘中，浏览器关闭的话，该cookie也不会被清除，下次打开浏览器访问对应网站时，这个cookie就会自动再次发送到服务器端。 一个cookie的设置以及发送过程分为以下四步： Cookie的不可跨域名性很多网站都会使用Cookie。例如，Google会向客户端颁发Cookie，Baidu也会向客户端颁发Cookie。那浏览器访问Google会不会也携带上Baidu颁发的Cookie呢？或者Google能不能修改Baidu颁发的Cookie呢？ 答案是否定的。Cookie具有不可跨域名性。根据Cookie规范，浏览器访问Google只会携带Google的Cookie，而不会携带Baidu的Cookie。Google也只能操作Google的Cookie，而不能操作Baidu的Cookie。 Cookie在客户端是由浏览器来管理的。浏览器能够保证Google只会操作Google的Cookie而不会操作Baidu的Cookie，从而保证用户的隐私安全。浏览器判断一个网站是否能操作另一个网站Cookie的依据是域名。Google与Baidu的域名不一样，因此Google不能操作Baidu的Cookie。 需要注意的是，虽然网站images.google.com与网站www.google.com同属于Google，但是域名不一样，二者同样不能互相操作彼此的Cookie。 注意：用户登录网站www.google.com之后会发现访问images.google.com时登录信息仍然有效，而普通的Cookie是做不到的。这是因为Google做了特殊处理，设置Cookie的domain参数。 12345Cookie cookie = new Cookie("time","20080808"); // 新建Cookiecookie.setDomain(".google.com"); // 设置域名cookie.setPath("/"); // 设置路径cookie.setMaxAge(Integer.MAX_VALUE); // 设置有效期response.addCookie(cookie); // 输出到客户端 Unicode编码：保存中文中文与英文字符不同，中文属于Unicode字符，在内存中占4个字符，而英文属于ASCII字符，内存中只占2个字节。Cookie中使用Unicode字符时需要对Unicode字符进行编码，否则会乱码。 提示：Cookie中保存中文只能编码。一般使用UTF-8编码即可。不推荐使用GBK等中文编码，因为浏览器不一定支持，而且JavaScript也不支持GBK编码。 BASE64编码：保存二进制图片Cookie不仅可以使用ASCII字符与Unicode字符，还可以使用二进制数据。例如在Cookie中使用数字证书，提供安全度。使用二进制数据时也需要进行编码。 注意：Cookie中存储二进制内容并不实用。由于浏览器每次请求服务器都会携带Cookie，因此Cookie内容不宜过多，否则影响速度。Cookie的内容应该少而精。 Java中的cookieJava中把Cookie封装成了javax.servlet.http.Cookie类。每个Cookie都是该Cookie类的对象。服务器通过操作Cookie类对象对客户端Cookie进行操作。通过request.getCookie()获取客户端提交的所有Cookie（以Cookie[]数组形式返回），通过response.addCookie(Cookie cookie)向客户端设置Cookie。 Cookie对象使用key-value属性对的形式保存用户状态，一个Cookie对象保存一个属性对，一个request或者response同时使用多个Cookie。因为Cookie类位于包javax.servlet.http.*下面，所以JSP中不需要import该类。 Cookie的有效期正数 Cookie的maxAge决定着Cookie的有效期，单位为秒（Second）。Cookie中通过getMaxAge()方法与setMaxAge(int maxAge)方法来读写maxAge属性。 如果maxAge属性为正数，则表示该Cookie会在maxAge秒之后自动失效。浏览器会将maxAge为正数的Cookie持久化，即写到对应的Cookie文件中。无论客户关闭了浏览器还是电脑，只要还在maxAge秒之前，登录网站时该Cookie仍然有效。下面代码中的Cookie信息将永远有效。 123Cookie cookie = new Cookie("username","helloweenvsfei"); // 新建Cookiecookie.setMaxAge(Integer.MAX_VALUE); // 设置生命周期为MAX_VALUEresponse.addCookie(cookie); // 输出到客户端 负数 如果maxAge为负数，则表示该Cookie仅在本浏览器窗口以及本窗口打开的子窗口内有效，关闭窗口后该Cookie即失效。maxAge为负数的Cookie，为临时性Cookie，不会被持久化，不会被写到Cookie文件中。Cookie信息保存在浏览器内存中，因此关闭浏览器该Cookie就消失了。Cookie默认的maxAge值为–1。 零 如果maxAge为0，则表示删除该Cookie。Cookie机制没有提供删除Cookie的方法，因此通过设置该Cookie即时失效实现删除Cookie的效果。失效的Cookie会被浏览器从Cookie文件或者内存中删除： 123Cookie cookie = new Cookie("username","helloweenvsfei"); // 新建Cookiecookie.setMaxAge(0); // 设置生命周期为0，不能为负数response.addCookie(cookie); // 必须执行这一句 注意：从客户端读取Cookie时，包括maxAge在内的其他属性都是不可读的，也不会被提交。浏览器提交Cookie时只会提交name与value属性。maxAge属性只被浏览器用来判断Cookie是否过期。 Cookie的修改、删除Cookie并不提供修改、删除操作。如果要修改某个Cookie，只需要新建一个同名的Cookie，添加到response中覆盖原来的Cookie。如果要删除某个Cookie，只需要新建一个同名的Cookie，并将maxAge设置为0，并添加到response中覆盖原来的Cookie。注意是0而不是负数。负数代表其他的意义。读者可以通过上例的程序进行验证，设置不同的属性。 注意：修改、删除Cookie时，新建的Cookie除value、maxAge之外的所有属性，例如name、path、domain等，都要与原Cookie完全一样。否则，浏览器将视为两个不同的Cookie不予覆盖，导致修改、删除失败。 Cookie的路径domain属性决定运行访问Cookie的域名，而path属性决定允许访问Cookie的路径（ContextPath）。例如，如果只允许/sessionWeb/下的程序使用Cookie，可以这么写： 123Cookie cookie = new Cookie("time","20080808"); // 新建Cookiecookie.setPath("/session/"); // 设置路径response.addCookie(cookie); // 输出到客户端 设置为“/”时允许所有路径使用Cookie。path属性需要使用符号“/”结尾。 name相同但domain不同的两个Cookie也是两个不同的Cookie。 注意：页面只能获取它属于的Path的Cookie。例如/session/test/a.jsp不能获取到路径为/session/abc/的Cookie。使用时一定要注意。 domain表示的是cookie所在的域，默认为请求的地址，如网址为www.test.com/test/test.aspx，那么domain默认为www.test.com。而跨域访问，如域A为t1.test.com，域B为t2.test.com，那么在域A生产一个令域A和域B都能访问的cookie就要将该cookie的domain设置为.test.com；如果要在域A生产一个令域A不能访问而域B能访问的cookie就要将该cookie的domain设置为t2.test.com。 path表示cookie所在的目录，默认为/，就是根目录。在同一个服务器上有目录如下：/test/,/test/cd/,/test/dd/，现设一个cookie1的path为/test/，cookie2的path为/test/cd/，那么test下的所有页面都可以访问到cookie1，而/test/和/test/dd/的子页面不能访问cookie2。这是因为cookie能让其path路径下的页面访问。 浏览器会将domain和path都相同的cookie保存在一个文件里，cookie间用*隔开。 Cookie的安全属性HTTP协议不仅是无状态的，而且是不安全的。使用HTTP协议的数据不经过任何加密就直接在网络上传播，有被截获的可能。使用HTTP协议传输很机密的内容是一种隐患。如果不希望Cookie在HTTP等非安全协议中传输，可以设置Cookie的secure属性为true。浏览器只会在HTTPS和SSL等安全协议中传输此类Cookie。下面的代码设置secure属性为true： 123Cookie cookie = new Cookie("time", "20080808"); // 新建Cookiecookie.setSecure(true); // 设置安全属性response.addCookie(cookie); // 输出到客户端 提示：secure属性并不能对Cookie内容加密，因而不能保证绝对的安全性。如果需要高安全性，需要在程序中对Cookie内容加密、解密，以防泄密。 永久登录如果用户是在自己家的电脑上上网，登录时就可以记住他的登录信息，下次访问时不需要再次登录，直接访问即可。实现方法是把登录信息如账号、密码等保存在Cookie中，并控制Cookie的有效期，下次访问时再验证Cookie中的登录信息即可。 保存登录信息有多种方案。最直接的是把用户名与密码都保持到Cookie中，下次访问时检查Cookie中的用户名与密码，与数据库比较。这是一种比较危险的选择，一般不把密码等重要信息保存到Cookie中。 还有一种方案是把密码加密后保存到Cookie中，下次访问时解密并与数据库比较。这种方案略微安全一些。如果不希望保存密码，还可以把登录的时间戳保存到Cookie与数据库中，到时只验证用户名与登录时间戳就可以了。 这几种方案验证账号时都要查询数据库。 本例将采用另一种方案，只在登录时查询一次数据库，以后访问验证登录信息时不再查询数据库。实现方式是把账号按照一定的规则加密后，连同账号一块保存到Cookie中。下次访问时只需要判断账号的加密规则是否正确即可。本例把账号保存到名为account的Cookie中，把账号连同密钥用MD5算法加密后保存到名为ssid的Cookie中。验证时验证Cookie中的账号与密钥加密后是否与Cookie中的ssid相等。]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>基础知识</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[6.AOP]]></title>
    <url>%2F2018%2F11%2F29%2FJava%2FJavaWeb%2F6.%E4%B8%9A%E5%8A%A1%E5%B1%82%2FSpring%2F6.AOP%2F</url>
    <content type="text"><![CDATA[AOP1.什么是AOP1.1横切关注点与AOP1.1.1横切关注点（crosscutting concern） 在了解横切关注点之前，我们首先要了解什么是关注点（concern）。 关注点（concern）：根据功能对系统进行划分，划分出来的结果就是关注点。例如我们常常会把一个系统分为表示层、业务层、持久层，这每一层就是一个关注点。 其中，关注点又分为两种类型： 核心关注点（core concerns） 横切关注点（crosscutting concerns） 核心关注点：表示主要需求的单一和特定功能的关注点称为核心关注点。例如在一个银行系统，你会关注用户管理、账户管理、贷款管理，还有对持久层和表示层的实现等等，这些都是核心关注点。 横切关注点：适用于整个应用程序，并影响整个应用程序的关注点称为横切关注点。例如安全认证、日志、缓存、性能监控、并发控制、事务管理等等。 1.1.2AOP ​ 随着项目的迭代，项目必然会变得越来越复杂，应对复杂，我们的解决方案就是模块化。通过把大问题分解成一个个小问题，然后再逐个击破。利用OOP很容易对核心关注点进行模块化。例如我们常常会看到类似的LoanManagementService类来实现业务逻辑，AccountRepository类来实现数据获取。对于横切关注点呢？传统上我们并没有对那些横切关注点进行模块化，就拿日志来说把，我们需要在每个类都写入一个日志字段，通过它实现日志记录功能，这就造成不同功能的代码纠缠（Code tangling）和代码分散（Code scattering）。然后很明显，OOP没办法帮我们处理这个问题，因为我们就是用了OOP所以才导致这个问题。 ​ 这时候就轮到AOP出场了，AOP是一种思想，它引入了新的模块化单元—切面(aspect)—来实现横切关注点的分离。例如日志记录的代码作为一个切面，事务管理的代码又作为一个切面，然后通过一些技术把这些切面（在编译时期或者在运行时）切入到核心关注点中，从而实现完整的功能。 下图是没有使用AOP时的情况 下图是使用AOP时的情况 可以看出，在没有使用AOP时，安全模块处于被动调用的情况，我们很难对它的调用者进行统一管理。 而使用AOP时，安全模块通过切面可以主动选择它的调用者，从而实现对调用者的统一管理。 总之：AOP提供横切关注点的模块化。 1.2AOP基本术语 join point：在程序运行期间，程序会暴露出一些点（point），例如方法的执行、创建对象、抛出异常等等。这些点就叫做joint point。 pointcut：join point有很多，我们要从中选择出满足我们需求的点，根据某些条件选出来的点，就叫做pointcut。 advice：advice是在joint point中执行的行为，例如安全认证，事务管理等等。 aspect：aspect（切面）是一个实现横切关注点的模块单元。aspect里面包含了advice和join point。（做什么？对谁做？） weaving：把核心功能和切面组合在一起的过程叫做weaving（编织）。 2.AspectJ未完待续。。。。。。。。。。。。。。。 2.x@AspectJMapping pointcuts定义好切面后，我们就需要添加pointcuts。我们通过@Pointcut注解表示一个pointcut。这个注解的值就是pointcut表达式。 举例说明: 12345678910111213141516171819execution("修饰符 类路径 方法名(方法参数)") // 任意公共方法的执行：execution("public * *(..)") // 任何一个以“set”开始的方法的执行：execution("* set*(..)") // AccountService 接口的任意方法的执行：execution("* com.xyz.service.AccountService.*(..)") // 定义在service包里的任意方法的执行：execution("* com.xyz.service.*.*(..)") //定义在service包和所有子包里的任意类的任意方法的执行：execution("* com.xyz.service..*.*(..)") //定义在pointcutexp包和所有子包里的JoinPointObjP2类的任意方法的执行：execution("* com.test.spring.aop.pointcutexp..JoinPointObjP2.*(..))") 3.Spring AOP3.1例子配置 12345678910111213141516@Configuration@EnableAspectJAutoProxy // 启动AOP配置@ComponentScan("com.hdr.learn.spring.aop")public class AppConfig &#123; @Bean public Speaker speaker()&#123; return new Speaker(); &#125; @Bean public MethodLogAspect aspect()&#123; return new MethodLogAspect(); &#125;&#125; 核心关注点 123456public class Speaker &#123; public void sayHello(String name) throws IllegalAccessException &#123; System.out.println(String.format("hello %s",name)); &#125;&#125; 切面 1234567891011121314151617@Aspectpublic class MethodLogAspect &#123; @Pointcut("execution(public void com.hdr.learn.spring.aop.Speaker.sayHello(..))") public void pointCut() &#123; &#125; @Before("pointCut()") public void start(JoinPoint joinPoint) &#123; System.out.println("Execute Method：" + joinPoint.getSignature().getName()); &#125; @AfterReturning("pointCut()") public void finish() &#123; System.out.println("方法执行完毕"); &#125;&#125; 测试 1234567public static void main(String[] args) throws IllegalAccessException &#123; AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(AppConfig.class); Speaker speaker = (Speaker) ctx.getBean("speaker"); speaker.sayHello("hdr"); ctx.close();&#125; 3.2SpringAOP底层原理Spring AOP是一个基于动态代理来对横切关注点进行模块化的AOP系统。 根据我们编写的配置，Spring自动为pointcut生成代理。 关于代理的知识，可以看这篇文章。 可以看出使用代理其实还是挺繁琐的，所以Spring帮我们封装好了。 下图是Spring AOP 的实现机制 未完待续。。。。。。。。。。。。。。。。。。]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[2.Git基础]]></title>
    <url>%2F2018%2F11%2F29%2F%E5%B7%A5%E5%85%B7%2FGit%2FGit%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[Git基础仓库创建仓库1git init 获取仓库12# git clone [url]git clone https://github.com/libgit2/libgit2 记录每个更新到仓库在Git仓库里面，文件有两种类型，分别是已跟踪和未跟踪。 对于已跟踪的文件又有三种类型，分别是为修改、已修改、暂存 查看提交历史git log 会按提交时间列出所有的更新，最近的更新排在最上面。 git config --global log.date iso 修改时间样式 -p，用来显示每次提交的内容差异。 你也可以加上 -2 来仅显示最近两次提交 1git log -p -2 --stat 选项在每次提交的下面列出所有被修改过的文件、有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了。 在每次提交的最后还有一个总结。 撤销操作 提交完了，发现漏掉了几个文件没有添加，或者提交信息写错了 1git commit --amend 这个命令会将暂存区中的文件提交。 如果自上次提交以来你还未做任何修改（例如，在上次提交后马上执行了此命令），那么快照会保持不变，而你所修改的只是提交信息。 取消暂存的文件，使用 git reset HEAD &lt;file&gt;... 来取消暂存。 1git reset HEAD CONTRIBUTING.md 取消对尚未暂存的文件的修改 如果你并不想保留对 CONTRIBUTING.md 文件的修改怎么办？ 你该如何方便地撤消修改 - 将它还原成上次提交时的样子（或者刚克隆完的样子，或者刚把它放入工作目录时的样子）？ 1git checkout -- CONTRIBUTING.md git checkout -- [file] 是一个危险的命令。 你对那个文件做的任何修改都会消失 - 你只是拷贝了另一个文件来覆盖它。 除非你确实清楚不想要那个文件了，否则不要使用这个命令。 远程仓库的使用查看远程仓库查看你已经配置的远程仓库服务器，可以运行 git remote 命令 指定选项 -v，会显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL。如果你的远程仓库不止一个，该命令会将它们全部列出。 git remote show [remote-name] 获取更详细的信息 添加远程仓库运行 git remote add &lt;shortname&gt; &lt;url&gt; 添加一个新的远程 Git 仓库。 从远程仓库中抓取与拉取1git fetch [remote-name] 这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。 必须注意 git fetch 命令会将数据拉取到你的本地仓库 - 它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。 推送到远程仓库1git push [remote-name] [branch-name] 只有当你有所克隆服务器的写入权限，并且之前没有人推送过时，这条命令才能生效。 当你和其他人在同一时间克隆，他们先推送到上游然后你再推送到上游，你的推送就会毫无疑问地被拒绝。 你必须先将他们的工作拉取下来并将其合并进你的工作后才能推送。 远程仓库的移除与重命名如果想要重命名引用的名字可以运行 git remote rename 去修改一个远程仓库的简写名。 1git remote rename pb paul 想要移除一个远程仓库，可以使用 git remote rm 1git remote rm paul]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1.Spring Secuirty 大杂烩]]></title>
    <url>%2F2018%2F11%2F13%2FJava%2FJavaWeb%2F6.%E4%B8%9A%E5%8A%A1%E5%B1%82%2FSpringSecurity%2F1.SpringSecurity%E5%A4%A7%E6%9D%82%E7%83%A9%2F</url>
    <content type="text"><![CDATA[Spring Secuirty 大杂烩Spring Security是一个企业级应用中用来用户验证、鉴权以及安全保护的Java框架。 Authentication：认证 Authenticated：已认证 Authorize：授权 通过一个个Authentication Filter(认证过滤器)组成的链，来对用户进行验证，最后进入FilterSecurity拦截器，如果认真过程出现异常就交由ExceptionTranslationFilter处理。 流程 通过表单提交了一个登录请求，请求就会进入用户名密码认证过滤器（UsernamePasswordAuthenticationFilter），该过滤器获取表单提交的用户名和密码然后生成一个用户名密码认证令牌（UsernamePasswordAuthenticationToken）然后调用认证管理器（AuthenticationManager）的认证方法（authentication），认证管理器(AuthenticationManager)只是个接口，它的实现类(ProviderManager)本身不会对token进行验证，它负责找出相应的认证提供者（AuthenticationProvider），让它进行认证工作。 在表单登录中，认证提供者（AuthenticationProvider）是DAO认证提供者（DaoAuthenticationProvider），它负责根据输入的用户名查找出相应的用户信息，然后对密码进行验证，验证通过后返回一个新的带有全名用户信息的token，（未完成待续） UsernamePasswordAuthenticationFilter对一次提交进行认证处理。 登录表单需要提交两个参数给该过滤器，默认是username和password。 12public static final String SPRING_SECURITY_FORM_USERNAME_KEY = "username";public static final String SPRING_SECURITY_FORM_PASSWORD_KEY = "password"; 当然，可以通过修改usernameParameter 和 passwordParameter属性制定我们想要的参数名 12private String usernameParameter = SPRING_SECURITY_FORM_USERNAME_KEY;private String passwordParameter = SPRING_SECURITY_FORM_PASSWORD_KEY; ExceptionTranslationFilter处理所有在过滤器链中抛出的AccessDeniedException 和 AuthenticationException。 该过滤器在Java异常和HTTP响应之间建立一座桥梁。 如果是AuthenticationException，那么过滤器会运行authenticationEntryPoint，它允许共同处理源自AbstractSecurityInterceptor的任何子类的身份验证失败。 如果是AccessDeniedException ，过滤器首先判断用户是不是匿名用户，如果是则运行authenticationEntryPoint，否则调用AccessDeniedHandler。 FilterSecurityInterceptor通过实现过滤器接口（Filter）对HTTP资源进行安全处理。具体的工作流程需要查看它所继承的抽象类AbstractSecurityInterceptor ## 自定义用户认证逻辑 处理用户信息获取逻辑：UserDetailsService 处理用户校验逻辑：UserDetails 处理密码加密解密：PasswordEncoder UserDetailsService加载用户相关信息的核心接口。 框架中用它作为User DAO，以及使用了策略模式，它的具体策略会被DaoAuthenticationProvider所调用。 123public interface UserDetailsService &#123; UserDetails loadUserByUsername(String username) throws UsernameNotFoundException;&#125; DaoAuthenticationProvider从UserDetailsService中获取用户信息 UserDetails定义了需要存储那些用户信息的接口。 方法类型 f方法描述 java.util.Collection&lt;? extends GrantedAuthority&gt; getAuthorities()Returns the authorities granted to the user. java.lang.String getPassword() java.lang.String getUsername() boolean isAccountNonExpired() boolean isAccountNonLocked() boolean isCredentialsNonExpired() boolean isEnabled() PasswordEncoder对密码进行编码的服务接口，推荐使用其实现类BCryptPasswordEncoder 自定义登录界面12345@Overrideprotected void configure(HttpSecurity http) throws Exception &#123; // 该方法返回一个 FormLoginConfigurer http.formLogin()&#125; FormLoginConfigurer123public final class FormLoginConfigurer&lt;H extends HttpSecurityBuilder&lt;H&gt;&gt; extends AbstractAuthenticationFilterConfigurer&lt;H,FormLoginConfigurer&lt;H&gt;, UsernamePasswordAuthenticationFilter&gt; 添加基于表单的身份验证。所有属性都有合理的默认值，所有参数都是可选的。 123456// 根据loginProcessingUrl创建RequestMatcher // RequestMatcher 匹配HttpServletRequest的简单策略。@Overrideprotected RequestMatcher createLoginProcessingUrlMatcher(String loginProcessingUrl) &#123; return new AntPathRequestMatcher(loginProcessingUrl, "POST");&#125; 123456789public FormLoginConfigurer&lt;H&gt; successForwardUrl(String forwardUrl) &#123; successHandler(new ForwardAuthenticationSuccessHandler(forwardUrl)); return this;&#125;public FormLoginConfigurer&lt;H&gt; failureForwardUrl(String forwardUrl) &#123; failureHandler(new ForwardAuthenticationFailureHandler(forwardUrl)); return this;&#125; 它继承自AbstractAuthenticationFilterConfigurer，所以更多的方法在AbstractAuthenticationFilterConfigurer上。 loginPage(string path)重定向到这个路径，可以直接返回文件，也可以到达Controller再进行处理。 loginProcessingUrl(“/authentication/login”)表单中action的值 SpringSecurity表单登录验证流程 表单登录请求进入UsernamePasswordAuthenticationFilter， UsernamePasswordAuthenticationFilter使用传递过来的用户名和密码创建一个UsernamePasswordAuthenticationToken对象， UsernamePasswordAuthenticationFilter调用getAuthenticationManager()获得ProviderManager对象 调用ProviderManager对象的authenticate(Authentication authentication)方法 authenticate(Authentication authentication)方法找到DaoAuthenticationProvider类进行authenticate]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>Spring Security</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Jackson]]></title>
    <url>%2F2018%2F11%2F01%2FJava%2FJavaWeb%2F%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%BA%93%2FJackson%2F</url>
    <content type="text"><![CDATA[Jackson什么是JacksonJackson是一个Java应用库，Jackson可以轻松的将Java对象转换成json对象和xml文档，同样也可以将json、xml转换成Java对象。 Jackson的三种使用方法jackson提供了三种处理JSON的方式 Streaming API 使用org.codehaus.jackson.JsonParser解析Json，使用org.codehaus.jackson.JsonGenerator生成Json Tree Model 使用org.codehaus.jackson.map.ObjectMapper构建树，节点是JsonNode，树模型类似于XML的DOM模型 Data Binding 使用属性方法或者注解实现JSON和POJOs之间的相互转换 完全对象绑定（full data binding） 用来在JSON和java bean对象之间的转换，同样适用于java内置对象 简单对象绑定（simple data binding） 用来在JSON和java的Maps, Lists, Strings, Numbers, Booleans, and null之间转换 各自的优势 Streaming API性能最好（最低的消耗、最快的读写速度、其他两种方法的基础） Tree Model 灵活 Data Binding 好用、便利 例子Full Data Binding (POJO)123456&#123; "name" : &#123; "first" : "Joe", "last" : "Sixpack" &#125;, "gender" : "MALE", "verified" : false, "userImage" : "Rm9vYmFyIQ=="&#125; 1234567891011121314151617181920212223242526272829public class User &#123; // 名字 内部类 public static class Name &#123; private String _first, _last; public String getFirst() &#123; return _first; &#125; public String getLast() &#123; return _last; &#125; public void setFirst(String s) &#123; _first = s; &#125; public void setLast(String s) &#123; _last = s; &#125; &#125; // 性别 枚举类 public enum Gender &#123; MALE, FEMALE &#125;; // 实例变量 private Gender _gender; private Name _name; private boolean _verified; private byte[] _userImage; public Name getName() &#123; return _name; &#125; public boolean isVerified() &#123; return _isVerified; &#125; public Gender getGender() &#123; return _gender; &#125; public byte[] getUserImage() &#123; return _userImage; &#125; public void setName(Name n) &#123; _name = n; &#125; public void setVerified(boolean b) &#123; _isVerified = b; &#125; public void setGender(Gender g) &#123; _gender = g; &#125; public void setUserImage(byte[] b) &#123; _userImage = b; &#125; &#125; 12345ObjectMapper mapper = new ObjectMapper(); // can reuse, share globally// 读取jsonUser user = mapper.readValue(new File("user.json"), User.class); // 写入jsonmapper.writeValue(new File("user-modified.json"), user); Simple Data Binding如果我们没有或者不想创建一个单独的类来做JSON和POJO之间的转换，那么可以使用Simple Data Binding JSON转换成java对象实例： 1Map&lt;String,Object&gt; userData = mapper.readValue(new File("user.json"), Map.class); java对象实例转换成JSON: 123456789Map&lt;String,Object&gt; userData = new HashMap&lt;String,Object&gt;();Map&lt;String,String&gt; nameStruct = new HashMap&lt;String,String&gt;();nameStruct.put("first", "Joe");nameStruct.put("last", "Sixpack");userData.put("name", nameStruct);userData.put("gender", "MALE");userData.put("verified", Boolean.FALSE);userData.put("userImage", "Rm9vYmFyIQ==");mapper.writeValue(new File("user-modified.json"), userData); 你会发现在JSON转成Map.class的过程中没有指定Map的泛型类型，但是jackson也能正确的转换。jackson有一个自己的转换关系，能够对json数据进行默认转换。默认转换关系如下：JSON TypeJava TypeobjectLinkedHashMap 如果我们想指定具体的Key和Value类型，也是可以的。比如，想转换成Map 12Map&lt;String,User&gt; result = mapper.readValue(src, new TypeReference&lt;Map&lt;String,User&gt;&gt;() &#123; &#125;); Tree Model树模型和XML的DOM方式类似。jackson会构建一课由JsonNode组成的树，里面的JsonNode暴露了一般需要用到的取值接口。当然，树里面的Node是JsonNode的子类，只有需要修改值的时候，你才有必要转换到子类型。 把json文本读取到一棵树 1234567891011ObjectMapper m = new ObjectMapper();// can either use mapper.readTree(source), or mapper.readValue(source, JsonNode.class);JsonNode rootNode = m.readTree(new File("user.json"));// ensure that "last name" isn't "Xmler"; if is, change to "Jsoner"JsonNode nameNode = rootNode.path("name");String lastName = nameNode.path("last").getTextValue().if ("xmler".equalsIgnoreCase(lastName)) &#123; ((ObjectNode)nameNode).put("last", "Jsoner");&#125;// and write it out:m.writeValue(new File("user-modified.json"), rootNode); 直接在内存创建一棵树 123456789TreeMapper treeMapper = new TreeMapper();ObjectNode userOb = treeMapper.objectNode();Object nameOb = userRoot.putObject("name");nameOb.put("first", "Joe");nameOb.put("last", "Sixpack");userOb.put("gender", User.Gender.MALE.toString());userOb.put("verified", false);byte[] imageData = getImageData(); // or wherever it comes fromuserOb.put("userImage", imageData); Streaming API很少用，这里不讲 注意：当POJO里面包含isXXX这样的字段的时候，gson转出来的结果是is_xxx，但是jackson转出来的是xxx，也就是自动抹掉了is。解决办法有一个就是在对应属性上添加@JsonPropety(“is_xxx”)注解，指名属性名。就算如此，在一个些复杂的项目里面也会有其他的坑，所以尽量不要用isXXX来做属性名！！]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>常用类</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[2.Session]]></title>
    <url>%2F2018%2F10%2F31%2FJava%2FJavaWeb%2F0.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F2.session%2F</url>
    <content type="text"><![CDATA[SessionSession什么是Session对Tomcat而言，Session是一块在服务器开辟的内存空间，其存储结构为ConcurrentHashMap； Session的作用Http协议是一种无状态协议，即每次服务端接收到客户端的请求时，都是一个全新的请求，服务器并不知道客户端的历史请求记录；Session的主要目的就是为了弥补Http的无状态特性。简单的说，就是服务器可以利用session存储客户端在同一个会话期间的一些操作记录； 工作原理1、服务器如何判断客户端发送过来的请求是属于同一个会话？ 答：用Session id区分，Session id相同的即认为是同一个会话，在Tomcat中Session id用JSESSIONID表示； 2、服务器、客户端如何获取Session id？Session id在其之间是如何传输的呢？ 答：服务器第一次接收到请求时，开辟了一块Session空间（创建了Session对象），同时生成一个Session id，并通过响应头的Set-Cookie：“JSESSIONID=XXXXXXX”命令，向客户端发送要求设置cookie的响应； 客户端收到响应后，在本机客户端设置了一个JSESSIONID=XXXXXXX的cookie信息，该cookie的过期时间为浏览器会话结束； 接下来客户端每次向同一个网站发送请求时，请求头都会带上该cookie信息（包含Session id）； 然后，服务器通过读取请求头中的Cookie信息，获取名称为JSESSIONID的值，得到此次请求的Session id； ps：服务器只会在客户端第一次请求响应的时候，在响应头上添加Set-Cookie：“JSESSIONID=XXXXXXX”信息，接下来在同一个会话的第二第三次响应头里，是不会添加Set-Cookie：“JSESSIONID=XXXXXXX”信息的；而客户端是会在每次请求头的cookie中带上JSESSIONID信息； Tomcat中Session的实现Tomcat中使用Session接口代表Session，Session接口的实现类是StandardSession，查看源码有一个叫attributes的实例变量，类型为ConcurrentHashMap，用于存储session的数据结构； 1234/** * The collection of user data attributes associated with this Session. */protected ConcurrentMap&lt;String, Object&gt; attributes = new ConcurrentHashMap&lt;&gt;(); 那么，tomcat中多个会话对应的session是由谁来维护的呢？ManagerBase类，查看其代码，可以发现其有一个sessions成员属性，存储着各个会话的session信息： 12345/** * The set of currently active Sessions for this Manager, keyed by * session identifier. */protected Map&lt;String, Session&gt; sessions = new ConcurrentHashMap&lt;&gt;(); 实战12345678910111213141516171819202122public class SessionDemo extends HttpServlet &#123; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; resp.setCharacterEncoding("UTF-8"); resp.setContentType("text/html;charset=UTF-8"); // 获取session HttpSession session = req.getSession(); String sessionId = session.getId(); if (session.isNew()) &#123; session.setAttribute("name", "黄大仁"); resp.getWriter().print("session创建成功,session的Id是：" + sessionId); &#125; else &#123; resp.getWriter().print("session已存在,session的Id是:" + sessionId); &#125; &#125; @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; doGet(req, resp); &#125;&#125; Session存在的问题1、session劫持,知道你的sessionId，那么就能利用的sessionId冒充你登录你的账号； 2、如果存在多台服务器的话，还存在session同步问题，同一个会话有可能会被分配到不同的tomcat服务器，因此很可能出现session不一致问题；解决session同步问题，实际上主要是保证能够抽离出一块共享空间存放session信息，且这块空间不同的tomcat服务器都可以访问到；一般这块共享的空间可以是数据库，或者某台服务器的内存空间，甚至硬盘空间，或者客户端的cookie也是可以的； Spring Seesion配置Spring Session在Web项目中配置Spring Session分为四步： 搭建用于Spring Session的数据存储 将Spring Session的jar文件添加到web应用中 将Spring Session filter添加到web应用的配置中 配置Spring Session如何选择session数据存储的连接]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>基础知识</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[3.对象的生命周期]]></title>
    <url>%2F2018%2F10%2F31%2FJava%2FJavaSE%2Fch4_%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%2F3.%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%2F</url>
    <content type="text"><![CDATA[对象的生命周期对象的生命周期就是对象从创建到销毁这一个过程。 1.对象的创建方式与过程1.1有4种显式地创建对象的方式： new 反射 对象的clone方法 反序列化手段 1.2对象的创建过程 给对象分配内存 将对象的实例变量自动初始化为其变量类型的默认值 初始化对象，主要负责给实例变量赋予正确的初始值 对于第3步，不同方法创建对象其初始化不一样 clone方法创建的，那就把被克隆对象的实例变量的值复制到新对象中 如果对象是通过反序列化方式创建了，那就从输入流中读入数据来初始化 2.对象的销毁：垃圾回收当对象被创建后，就会在Java虚拟机的堆区中拥有一块内存，如果对象没用了，那么就Java虚拟机的垃圾回收器就会回收对象。 2.1对象的触及状性 可触及状态：对象被创建后，有引用变量引用它。 可复活状态：对象没有被任何引用变量引用。在这个状态下，垃圾回收器会准备释放它占用的内存，在释放之前会调用它及其其它该状态下的对象的finalize方法，这些方法有可能使对象转为可触及状态。 不可触及状态：对象执行了finalize方法后没有恢复成可触及状态，就会变成不可触及状态，这时候垃圾回收器才会真正的收回它占用的内存。 2.2finalize方法finalize方法定义在Object类 1protected void finalize() throws Throwable &#123; &#125; 3.深入垃圾回收3.1无用对象的判定引用计数算法 给对象添加一个引用计数器，没当有一个地方引用它，引用次数加1。 缺点：难以解决相互循环引用问题。 可达性分析算法 通过一系列称为GC Roots的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots之间没有那么的引用链，则说明该对象不可用。 关于GC Root：GC Root不是垃圾回收目标区域的对象，譬如你要回收年轻代，那年老代必然是Root之一。 3.2垃圾收集算法3.2.1标记-清除算法原理：标记出需要回收的对象，然后统一回收所有被标记的对象。 缺点：效率不高、而且清除后产生大量不连续的内存碎片。 3.2.2复制算法原理：把内存分为两部分，当其中一块内存用完，就把该内存中存活的对象复制到另一块内存中。 3.2.3标记-整理-清除算法原理：标记出需要回收的对象，让所有存活的对象往一端移动，然后直接清除掉端边界以外的内存。 3.2.4分代收集算法原理：根据对象存活周期的不同将内存划分为几块。一般分为新生代和老年代，然后根据各个年代的特点采用合适的收集算法。新生代死得快，所以采用复制算法，老年代则采用标记-整理算法。 关于新生代、老年代请看新生代、老年代、永久代。 3.3垃圾收集器如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。 下面以JDK1.7Update14之后的HostSpot虚拟机为例，讲解这个虚拟机包含的收集器。 上图展示了7种作用于不同分代的收集器，如果两个收集器之间存在连线，就说明它们可以搭配使用。 并发与并行 并发的关键是你有处理多个任务的能力，不一定要同时。并行的关键是你有同时处理多个任务的能力。它们最关键的点就是：是否是『同时』。 3.3.1Serial收集器Serial（串行）收集器是最基本、发展历史最悠久的收集器。是单线程的收集器。它在进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集完成。 缺点：需要暂停所有用户线程，用户体验不好。 优点：简单而高效（与其他垃圾收集器在中单线程运行中比较） Serial收集器对于运行在Client模式下的虚拟机来说是一个很好的选择。 3.3.2ParNew收集器ParNe收集器其实就是Serial收集器的多线程版本，除了使用多线程进行垃圾收集之外，其余行为包括Serial收集器可用的所有控制参数、收集算法、Stop The Worl、对象分配规则、回收策略等都与Serial 收集器完全一样，在实现上两者也公用了相当多的代码。 ParNew收集器是许多运行在Server模式下的虚拟机中首选新生代收集器，其中有一个与性能无关但很重要的原因是，除Serial收集器之外，目前只有ParNew它能与CMS收集器配合工作。 3.3.3CMS收集器CMS(Concurrent Mark Sweep)收集器是一种以获取最短回收停顿时间为目标的收集器。这款收集器是HotSpot虚拟机中第一款真正意义上的并发收集器，它第一次实现了让垃圾回收线程和用户线程同时工作。 目前很大一部分的Java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务器的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求。 CMS收集器是基于“标记-清除”算法实现的。它的运作过程相对前面几种收集器来说更复杂一些，整个过程分为4个步骤： 初始标记 标记一下GCRoot能直接关联到的对象 并发标记 GCRoot Tracing 重新标记 并发清除 其中，初始标记、重新标记这两个步骤仍然需要“Stop The World”. 优点：并发收集，低停顿。 缺点： （1）CMS收集器对CPU资源非常敏感。CPU个数少于4个时，CMS对于用户程序的影响就可能变得很大，为了应付这种情况，虚拟机提供了一种称为“增量式并发收集器”的CMS收集器变种。所做的事情和单CPU年代PC机操作系统使用抢占式来模拟多任务机制的思想 （2）CMS收集器无法处理浮动垃圾，可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生。 ​ 浮动垃圾：CMS运行的时候，用户线程还在继续工作，会产生一些没有被标记的垃圾，这些垃圾只有在下一次GC时再清掉。 （3）CMS是基于“标记-清除”算法实现的收集器，收集结束时会有大量空间碎片产生。空间碎片过多，可能会出现老年代还有很大空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前触发FullGC。为了解决这个问题，CMS收集器提供了一个-XX:+UseCMSCompactAtFullCollection开关参数（默认就是开启的），用于在CMS收集器顶不住要进行FullGC时开启内存碎片合并整理过程，内存整理的过程是无法并发的，空间碎片问题没有了，但停顿时间变长了。虚拟机设计者还提供了另外一个参数-XX:CMSFullGCsBeforeCompaction,这个参数是用于设置执行多少次不压缩的Full GC后，跟着来一次带压缩的（默认值为0，标识每次进入Full GC时都进行碎片整理） 3.3.4Parallel Scavenge收集器Parallel Scavenge收集器是一个新生代收集器，它也是使用复制算法的收集器，又是并行的多线程收集器。该收集器的目标是达到一个可控制的吞吐量（Throughput）。所谓吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即 吞吐量=运行用户代码时间/（运行用户代码时间+垃圾收集时间）。 停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验，而高吞吐量则可用高效率地利用CPU，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。 Parallel Scavenge收集器提供两个参数用于精确控制吞吐量 控制最大垃圾收集停顿时间的-XX:MaxGCPauseMillis参数 通过牺牲吞吐量和降低新生代空间来降低垃圾回收的停顿时间 设置吞吐量大小的-XX:GCTimeRatio参数 参数值应该是一个0到100的整数，代表垃圾回收时间占总时间的百分比。 Parallel Scavenge收集器还有一个参数：-XX:+UseAdaptiveSizePolicy。这是一个开关参数，当这个参数打开后，就不需要手工指定新生代的大小（-Xmn）、Eden与Survivor区的比例（-XX:SurvivorRatio）、晋升老年代对象年龄（-XX:PretenureSizeThreshold）等细节参数，只需要把基本的内存数据设置好（如-Xmx设置最大堆），然后使用MaxGVPauseMillis参数或GCTimeRation参数给虚拟机设立一个优化目标。 3.3.5Serial Old 收集器Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用标记整理算法。 这个收集器的主要意义也是在于给Client模式下的虚拟机使用。 如果在Server模式下，主要两大用途： 在JDK1.5以及之前的版本中与Parallel Scavenge收集器搭配使用 作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure时使用 3.3.6Parallel Old 收集器Parallel Old 是Parallel Scavenge收集器的老年代版本，使用多线程和“标记-整理”算法。这个收集器在1.6中才开始提供。 在注重吞吐量以及CPU资源敏感的场合，都可以优先考虑Parallel Scavenger 加 Parallel Old收集器。 3.3.7G1收集器优点： 并行与并发 利用多CPU来缩短停顿时间，可以通过并发的方式让Java程序继续执行。 分代收集 空间整理 （标记整理算法，复制算法） 可预测的停顿（G1处处理追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒） 3.3.8垃圾收集器参数总结3.3.9总结：新生代收集器：Serial、ParNew、Parallel Scavenge 老年代收集器：Serial Old、Parallel Old、CMS 3.4内存分配与回收策略]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch4类与对象的生命周期</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1.JVM运行时数据区]]></title>
    <url>%2F2018%2F10%2F30%2FJava%2FJavaSE%2Fch4_%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%2F2.JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%2F</url>
    <content type="text"><![CDATA[JVM运行时数据区Java虚拟机在执行Java程序的时候，会把它所管理的内存划分为若干个不同的数据区域。 1.程序计数器（program counter）程序计数器，线程私有，在执行非本地方法时，记录当前正在执行的指令的地址，如果是本地方法（Native Method），值为undefined。 可以看作是当前线程所执行字节码的行号指示器 字节码解释器工作时就是通过改变这个计数器的值来获取下一条需要执行的字节码指令 我们学过多线程，有两个线程，其中一个线程可以暂停使用，让其他线程运行，然后等自己获得cpu资源时，又能从暂停的地方开始运行，那么为什么能够记住暂停的位置的，这就依靠了程序计数器。 2.虚拟机栈虚拟机栈，线程私有，用来存放栈帧。 每个方法在执行的同时都会创建一个栈帧用来存放存储局部变量表、操作数表、动态连接、方法出口等信息，每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。比如执行一个类(类中有main方法)时，执行到main方法，就会把为main方法创建一个栈帧，然后在加到虚拟机栈中，栈帧中会存放这main方法中的各种局部变量，对象引用等东西。我们常常听说的栈存储局部变量，说的就是这个。 在某些情况下虚拟机栈会出现以下异常： 线程请求的虚拟机栈大小超出了虚拟机的许可，出现栈溢出（StackOverflowError） 虚拟机栈的大小可以动态扩展，但是已经没有内容可以给它使用了，出现OutOfMemoryError 2.1.内存模型虚拟机栈描述的是Java方法执行的内存模型。什么是内存模型？ 有兴趣的可以看看着两篇文章 什么是内存模型？ 终于有人把Java内存模型说清楚了 3.本地方法栈本地方法栈与虚拟机栈所发挥的作用是非常相似的，只不过一个是为Java方法服务，一个是为Native方法服务。 4.Java堆Java堆，所有线程共享的一块内存区域，在虚拟机启动时创建。 它存储的对象由垃圾回收器进行回收。对象永远不会被显式释放。 堆的大小可以是固定的，也可以动态扩展，具体看它的实现。 5.方法区方法区域类似于传统语言的编译代码的存储区域或类似于操作系统进程中的“文本”段。 各个线程共享的内存区域 存储类结构：例如运行时常量池、字段、方法数据、方法、构造器、类和实例和接口初始化使用的特殊方法（special methods） 虽然方法区域在逻辑上是堆的一部分，但是简单的实现可能选择不垃圾收集或压缩它。 5.1.运行时常量池 运行时常量池是方法区的一部分。 运行时常量池用于存放编译期生成的各种字面量和符号引用。 符号引用：用一组符号来描述所引用的目标，符号可以是任意形式的字面量，只要使用时能无歧义的定位到目标即可。 运行时常量池包含几种常量，从编译时已知的数字文字到必须在运行时解析的方法和字段引用。]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch4类与对象的生命周期</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1.类与对象]]></title>
    <url>%2F2018%2F10%2F29%2FJava%2FJavaSE%2Fch4_%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%2F1.%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%2F</url>
    <content type="text"><![CDATA[类的生命周期一个类从被加载、连接和初始化开始，到被使用，最后被卸载，这整个过程称为类的生命周期。 1.类加载机制类加载机制：虚拟机把Class文件中的数据加载进内存，进过一系列处理后，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。 类加载的全过程由加载、连接、初始化三部分所组成。其中连接又由验证、准备、解析三部分组成。 注意：这些过程不是按部就班的执行的，有可能在执行一个过程的途中，执行另一个过程。 1.1加载注意：加载是类加载过程的一个阶段，别混淆了。 加载（Loading）是一个过程，通过类的全限定名来获取该类或接口的二进制表示，然后根据该二进制表示创建类或接口。 在加载阶段，虚拟机需要完成以下三个任务： 通过类的全限定名来获取定义此类的二进制字节流。 把类的数据结构存放在方法区中 在内存里创建一个java.lang.Class对象，作为在方法区中的这个类的各种数据结构的访问入口。 （一般来说对象都是存放在Java堆里面，但是Class对象有点特殊，有些虚拟机的实现会把它放到方法区中） 注意：加载阶段和连接阶段的部分内容其实是交叉进行的，例如一部分字节码文件格式的验证。 Java虚拟机能够从多种来源加载类的二进制数据 从本地文件系统加载类的.class文件 通过网络下载类的.class文件 从ZIP、JAR或其他归档文件中提取.class文件 从一个专有数据库中提取.class文件 把一个java源文件动态编译为.class文件 1.2连接1.2.1类的验证验证的目的是确保Class文件的字节流中信息符合虚拟机的要求,不会危害虚拟机安全. 大致完成以下四个校验动作: 文件格式验证 源数据验证 字节码验证 符号引用验证 1.2.2类的准备在方法区中为类变量分配内存，并设置默认初始值； 1234public static int value = 123；// 这时候value的值为0，类初始化以后value才为123public static final int value = 123；// 被final修饰的类变量会在准备阶段进行正确的赋值，所以这里的value是123 1.2.3类的解析解析阶段是虚拟机把常量池内的符号引用替换为直接引用的过程。 符号引用：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。 123public void gotoWrok()&#123; car.run(); // 这个car.run()就是符号引用，在解析阶段，会被替换成这个方法在内存位置的指针。&#125; 1.3初始化在初始化阶段才是真正开始执行类中定义的Java程序代码（或者说是字节码）。 在初始化阶段，Java虚拟机执行类的初始化语句，为类的静态变量赋予初始值。 1.3.1类的初始化时机前面讲过，Java虚拟机只有在程序首次主动使用一个类或接口时才会初始化它，下面行为属于主动使用 创建类的实例，例如new、反射、克隆、反序列化 调用类的静态方法 访问或操作某个类或接口的静态变量 启动Java虚拟机时，指定运行的类 例如 java Sample 注意 对于final类型的静态变量，如果在编译时就能计算出变量的取值，那么这个变量会被看做是编译时常量，访问它不会导致类的初始化。 2.类加载器作用：通过一个类的全限定名来获取描述此类的二进制字节流。 分类： Java虚拟机自带的加载器 用户自定义的类加载器 注意：类加载器可以在预料某个类将要被使用时就预先加载它，如果在预先加载过程，遇到.class文件缺失或存在错误，类加载器必须等到程序首次主动使用该类时才报告错误。如果该类没有被程序主动使用，则不报错。 类的加载过程采用双亲委派模型，除了Java虚拟机自带的启动类加载器以外，其余的类加载器都有且只有一个父加载器。 例如Java程序请求加载器A加载Sample类，加载器A会先委托自己的父类去加载Sample类，如果父类无法加载，那么才由加载器A来加载Sample类。 2.1类加载器的双亲委派模型​ 双亲委派模型是一种组织类加载器之间关系的一种规范,他的工作原理是:如果一个类加载器收到了类加载的请求,它不会自己去尝试加载这个类,而是把这个请求委派给父类加载器去完成,这样层层递进,最终所有的加载请求都被传到最顶层的启动类加载器中,只有当父类加载器无法完成这个加载请求(它的搜索范围内没有找到所需的类)时,才会交给子类加载器去尝试加载. ​ 这样的好处是:Java类随着它的类加载器一起具备了带有优先级的层次关系.这是十分必要的,比如java.langObject,它存放在/jre/lib/rt.jar中,它是所有Java类的父类,因此无论哪个类加载都要加载这个类,最终所有的加载请求都汇总到顶层的启动类加载器中,因此Object类会由启动类加载器来加载,所以加载的都是同一个类,如果不使用双亲委派模型,由各个类加载器自行去加载的话,系统中就会出现不止一个Object类,应用程序就会全乱了. 2.2Java虚拟机自带类加载器 启动类加载器：没有父类加载器，负责加载核心类库，例如java.lang.*等 扩展类加载器：启动类加载器是它的父加载器，它从java.ext.dirs系统属性所指定的目录下加载类库，或者从JDK的安装目录的jre\lib\ext子目录下加载。它是java.lang.ClassLoader类的子类。 应用程序类加载器：扩展类加载器是它的父加载器，它从classpath环境变量或者系统属性java.class.path所指定的目录中加载类。它是java.lang.ClassLoader类的子类。是ClassLoader中的getSystemClassLoader方法的返回值。 2.3自定义类加载器要创建自己的类加载器，只需要继承java.lang.ClassLoader类，重写findClass方法即可。 123protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123; throw new ClassNotFoundException(name);&#125; 12345678910111213141516171819202122232425262728293031323334353637protected Class&lt;?&gt; loadClass(String name, boolean resolve) throws ClassNotFoundException&#123; synchronized (getClassLoadingLock(name)) &#123; // First, check if the class has already been loaded Class&lt;?&gt; c = findLoadedClass(name); if (c == null) &#123; long t0 = System.nanoTime(); try &#123; if (parent != null) &#123; c = parent.loadClass(name, false); &#125; else &#123; c = findBootstrapClassOrNull(name); &#125; &#125; catch (ClassNotFoundException e) &#123; // ClassNotFoundException thrown if class not found // from the non-null parent class loader &#125; if (c == null) &#123; // If still not found, then invoke findClass in order // to find the class. long t1 = System.nanoTime(); c = findClass(name); // this is the defining class loader; record the stats sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0); sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1); sun.misc.PerfCounter.getFindClasses().increment(); &#125; &#125; if (resolve) &#123; resolveClass(c); &#125; return c; &#125;&#125; 2.4Class.forname()与ClassLoader.loadClass()Class.forname():是一个静态方法,最常用的是Class.forname(String className);根据传入的类的全限定名返回一个Class对象.该方法在将Class文件加载到内存的同时,会执行类的初始化. ClassLoader.loadClass():这是一个实例方法,需要一个ClassLoader对象来调用该方法,该方法将Class文件加载到内存时,并不会执行类的初始化,直到这个类第一次使用时才进行初始化.该方法因为需要得到一个ClassLoader对象,所以可以根据需要指定使用哪个类加载器. 3.类的卸载Java虚拟机自带的类加载器所加载的类，在虚拟机的生命周期中，始终不会被卸载。也就是用户自定义的类加载器所加载的类才会被卸载]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch4类与对象的生命周期</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[4.线程的同步]]></title>
    <url>%2F2018%2F09%2F25%2FJava%2FJavaSE%2Fch11_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2Fx.%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%90%8C%E6%AD%A5%2F</url>
    <content type="text"><![CDATA[线程的同步为什么要同步？当多个线程同时操作一个可共享的资源变量时，操作的结果会变得无法预测，这就是同步问题。 为解决同步问题，Java引入了同步锁机制从而避免共享资源变量在线程没有完成操作之前，被其他线程的调用，从而保证了该变量的唯一性和准确性。 同步代码块为了解决同步问题，Java引入了同步机制，具体的做法实在会出现同步问题的代码前加上synchronized标志，这样的代码被称为同步代码块。 12345public void withdrawal() &#123; synchronized (this)&#123; // do something &#125;&#125; 每个Java对象都有且只有一个同步锁，在任何时刻，最多只允许一个线程拥有这把锁。 如果对象A的锁已经被线程T1所使用，那么需要使用对象A的锁的线程T2就会被虚拟机放入对象A的锁池中，当线程T1执行释放锁以后，虚拟机再从对象A的锁池中随机抽取一个线程，使这个线程拥有锁，并转到就绪状态。 同步方法如果一个方法中所有代码都需要进行同步，那么可以直接用synchronized修饰这个方法。 123public synchronized void withdrawal() &#123; // do something&#125; 线程同步需要注意的地方 如果同步代码和非同步代码共同操作共享资源，那么仍然会有同步问题。 每个对象有且只有一把锁 synchronized还可以修饰静态方法 在执行同步代码块时，Thread.sleed和Thread.yield方法并不会释放锁，它们只是让出了CPU的使用权 synchronized声明不会被继承 释放对象的锁线程会在以下情况释放锁 执行完同步代码 执行同步代码的过程中，出现了异常导致线程终止 执行同步代码的过程中，调用了锁所属对象的wait()方法 死锁当线程A等待线程B的锁，线程B又等待线程A的锁，这种情况就是死锁。 生产者消费者模式synchronized 确保一个方法不能被多个线程同时执行。 使用标记和Object.wait() Object.notify(),让线程在正确的时机运行。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495package ThreadDemo;public class ProducterConsumer &#123; public static void main(String[] args) &#123; Food food = new Food(); Thread pt = new Thread(new Producter(food)); Thread ct = new Thread(new Consumer(food)); pt.start(); ct.start(); &#125;&#125;class Food &#123; private String name; private String desc; public boolean isReady = false; public synchronized void set(String name, String desc) &#123; // 判断 if (this.isReady) &#123; try &#123; System.out.println("别急呢，食物还没吃完"); this.wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; // 设值 this.name = name; try &#123; Thread.sleep(500); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; this.desc = desc; // 修改 this.isReady = true; this.notify(); &#125; public synchronized void get() &#123; // 判断 if (!this.isReady) &#123; try &#123; System.out.println("别急呢，食物还没做好呢"); this.wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; // 输出 System.out.println(this.name + "--" + this.desc); // 设值 this.isReady = false; this.notify(); &#125;&#125;class Producter implements Runnable &#123; private Food food; private String name; private String desc; public Producter(Food food) &#123; this.food = food; &#125; @Override public void run() &#123; for (int i = 0; i &lt; 10; i++) &#123; name = i % 2 == 0 ? "叉烧" : "饼干"; desc = i % 2 == 0 ? "美味可口" : "充饥神器"; this.food.set(name, desc); &#125; &#125;&#125;class Consumer implements Runnable &#123; private Food food; public Consumer(Food food) &#123; this.food = food; &#125; @Override public void run() &#123; for (int i = 0; i &lt; 10; i++) &#123; this.food.get(); &#125; &#125;&#125;]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch11并发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[5.乐观锁与悲观锁]]></title>
    <url>%2F2018%2F09%2F25%2FJava%2FJavaSE%2Fch11_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2Fx.%E4%B9%90%E8%A7%82%E9%94%81%E4%B8%8E%E6%82%B2%E8%A7%82%E9%94%81%2F</url>
    <content type="text"><![CDATA[乐观锁与悲观锁简介悲观锁：每次拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。Java中synchronized和ReentrantLock等独占锁就是悲观锁思想的实现。 悲观锁机制存在以下问题： 在多线程竞争下，加锁、释放锁会导致比较多的上下文切换和调度延时，引起性能问题。 一个线程持有锁会导致其它所有需要此锁的线程挂起。 如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能风险。 乐观锁：每次拿数据的时候都不会上锁，但是在更新的时候会对数据是否产生并发冲突进行检测，只有通过检测才对数据进行更新操作。 两种锁的使用场景 两种锁各有优缺点，乐观锁适用于写比较少的情况下（多读场景），即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果是多写的情况，一般会经常产生冲突，这就会导致上层应用会不断的进行retry，这样反倒是降低了性能，所以一般多写的场景下用悲观锁就比较合适。 悲观锁的实现在Java中，你可以通过synchronized和ReentrantLock等独占锁的方式实现。 在MySQL InnoDB中 要使用悲观锁，我们必须关闭mysql数据库的自动提交属性，因为MySQL默认使用autocommit模式，也就是说，当你执行一个更新操作后，MySQL会立刻将结果进行提交。set autocommit=0; 使用select…for update会把数据给锁住，不过我们需要注意一些锁的级别，MySQL InnoDB默认行级锁。行级锁都是基于索引的，如果一条SQL语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住，这点需要注意。 乐观锁的实现乐观锁一般会使用版本号机制或CAS算法实现 版本号机制一般是在数据表中加上一个数据版本号version字段，读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。此时，将提交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如果提交的数据 版本号大于数据库表当前版本号，则予以更新，否则重试更新操作，直到更新成功。 123update t_goods set status = 2,version = version + 1where id=#&#123;id&#125; and version=#&#123;version&#125;; 举个例子： 假设数据库中帐户信息表中有一个 version 字段，当前值为 1 ；而当前帐户余额字段（ balance ）为 $100 。 操作员 A 此时将其读出（ version=1 ），并从其帐户余额中扣除 $50（ $100-$50 ）。 在操作员 A 操作的过程中，操作员B 也读入此用户信息（version=1），并从其帐户余额中扣除 $20 （$100-$20）。 操作员 A 完成了修改工作，将数据版本号加一（version=2），连同帐户扣除后余额（ balance=$50 ），提交至数据库更新，此时由于提交数据版本大于数据库记录当前版本，数据被更新，数据库记录 version 更新为 2 。 操作员 B 完成了操作，也将版本号加一（ version=2 ）试图向数据库提交数据（ balance=$80 ），但此时比对数据库记录版本时发现，操作员 B 提交的数据版本号为 2 ，数据库记录当前版本也为 2 ，不满足 “ 提交版本必须大于记录当前版本才能执行更新 “ 的乐观锁策略，因此，操作员 B 的提交被驳回。 除了版本号我们也可以使用时间戳，原理也是类似的，也是在更新提交的时候检查当前数据库中数据的时间戳和自己更新前取到的时间戳进行对比，如果一致则OK，否则就是冲突。 CASCAS（Compare and Swap）是一种有名的无锁算法。无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步，所以也叫非阻塞同步（Non-blocking Synchronization）。 漫谈：什么是CAS机制 上 漫谈：什么是CAS机制 下]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch11并发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[3.并发问题]]></title>
    <url>%2F2018%2F09%2F24%2FJava%2FJavaSE%2Fch11_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F3.%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[并发问题1.并发编程的基本知识并行：如果某个系统支持两个或以上个动作同时存在，那么这个系统就是一个并发系统。并发：如果某个系统支持两个或以上个动作同时执行，那么这个系统就是一个并行系统。 并发系统与并行系统这两个定义之间的关键差异在于“执行”这个词。在并发程序中可以同时拥有两个或以上个线程。这意味着，如果程序在单核处理器上运行，那么这些线程将交替的执行。这些线程是同时“存在”的——每个线程都处于执行过程中的某个状态。如果程序能够并行执行，那么就一定是运行在多核处理器上。此时，程序中的每个线程都将分配到一个独立的处理器核上，因此可以同时运行。 高并发：通常是指，通过设计保证系统能够同时并行处理很多请求。 2.并发问题Java中的多线程编程属于并发编程的一种。并发编程能有效提高程序运行的效率，但同时也容易出现一些问题，下面我们来了解这些问题，只有把这些问题了解了，才能写出好的并发程序。 2.1可见性问题可见性：一个线程对共享变量值的修改，能够及时的被其它线程看到。 共享变量：如果一个变量在多个线程的工作内存中存在副本，那么这个变量就是这几个线程的共享变量。 知道了什么是可见性，那么顾名思义，可见性问题就是一个线程对共享变量值的修改，没有及时的被其它线程看到。 为什么会出现这种情况？ 线程的交叉执行 共享变量更新后的值没有及时在工作内存和主内存中更新 网上有很多关于可见性问题的文章，都会说什么Java内存模型、CPU多级缓存等等，但是个人觉得都说的不太清楚，本人觉得如果要想真正的了解这个问题的本质，需要对JVM以及计算机组成原理，特别是内存和CPU相关的知识有一定的认识才可以。本人暂时没有这个能力，暂时就不讲这个了。 解决方案 要实现共享变量的可见性，必须保证两点： 线程修改后的共享变量能够及时从工作内存刷新到主内存中 其他线程能及时把共享变量的最新值从主内存中更新到自己的工作内存中 Java解决可见性问题的方式包括 synchronized volatile Lock synchronizedJMM关于synchronized的两条规定 线程解锁前，必须把共享变量的最新值刷新到主内存中 线程加锁时，将清空工作内存中共享变量的值，从而在使用共享变量时，需要从主内存中重新读取最新的值 volatile通过内存屏障和禁止重排序优化来保证可见性。 要在多线程中安全的使用volatile变量，必须同时满足 对变量的写入操作不依赖其当前值 该变量没有包含在具有其他变量的不变式中 2.2原子性问题原子性操作：一般我们认为原子是不可再分的，在编程领域中，原子性操作指的是一组操作是不可再分的，这组操作是一个统一的整体，这组操作在执行的过程中不会其它因素干扰，例如执行过程中被中断、或者执行过程中所用到的值被偷偷修改了。在Java中，对基本数据类型的变量的读取和赋值操作是原子性操作。例如 12x = 10;y = x; 注意：在32位平台下，对64位数据的读取和赋值是需要通过两个操作来完成的，不能保证其原子性。但是好像在最新的JDK中，JVM已经保证对64位数据的读取和赋值也是原子性操作了。 123x += 1；x = x + 1;// 上面这种就不是原子性操作了， 原子性问题：我想不到、也找不到一个正式的定义，只能通过例子来讲。 例如 x = x + 1;这个操作。假设当前x = 9，然后有两个线程同时执行上面这条语句。由于两个线程都读到x的值为9，然后都执行递增操作，最后x的值变为10， 而不是预期的11。这种问题就是原子性问题。 产生的原因有些操作在被多个线程同时执行的时候，无法保证当前使用的数据的有效性。 解决方案 原子类 synchronized Lock 2.3有序性问题有序性问题：程序执行的顺序与编写代码的先后顺序不一致。 产生的原因 编译器指令重排 编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。 CPU乱序执行 现代处理器采用了指令级并行技术（Instruction-Level Parallelism， ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器 可以改变语句对应机器指令的执行顺序。 内存系统的重排序 由于处理器使用缓存和读/写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。 解决方案在Java中，可以使用synchronized和volatile来保证多线程之间操作的有序性。实现方式有所区别： volatile关键字会禁止指令重排。 synchronized关键字保证同一时刻只允许一条线程操作。进出锁住的代码块是串行的，因为只能有一个线程拿到锁，这就使得使用同一个锁的两个执行过程A和B之间，A看B的操作是有序的，B看A的操作也是有序的，是因为执行过程内部无论会不会指令重排序，结果都是一致的。但是锁的内部代码依然会指令重排序。]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch11并发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[2.线程通信]]></title>
    <url>%2F2018%2F09%2F23%2FJava%2FJavaSE%2Fch11_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F2.%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%2F</url>
    <content type="text"><![CDATA[线程通信java.lang.Object类提供了两个用于线程通信的方法 wait()：执行该方法的线程会释放对象的锁，并进入对象的等待池中，等待其它线程将他唤醒。 notify()：执行该方法的线程唤醒在对象的等待池中等待的一个线程。Java虚拟机从对象的等待池随机选择一个线程，把它转到对象的锁池中。 假定线程T1和线程T2共同操作一个对象obj，这两个线程可以通过对象obj的wait()和notify()方法来进行通信。 线程T1执行对象obj的同步代码块时，T1持有对象obj的锁，T2在对象obj的锁池中等待。 线程T1在同步代码块中执行obj.wait()方法，线程T1释放obj的锁，进入obj的等待池。 线程T2获得obj的锁，执行obj的另一个同步代码块。 线程T2在同步代码中执行obj.notify()方法，Java虚拟机把T1从等待池放入锁池。 线程T2执行完同步代码块后，释放锁。 ThreadLocal类java.lang.ThreadLocal类可用来存放线程的局部变量，每个线程都有单独的局部变量，彼此之间不会共享。 ThreadLocal&lt;T&gt;类主要包括以下三个方法： public T get()：返回当前线程的局部变量 protected T initialValue()：返回当前线程的局部变量的初始值 public void set(T value)：设置当前线程的局部变量]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch11并发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1.多线程基础]]></title>
    <url>%2F2018%2F09%2F22%2FJava%2FJavaSE%2Fch11_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F1.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[多线程基础1.线程与进程进程和线程之间有什么不同？一个进程是一个独立(self contained)的运行环境，它可以被看作一个程序或者一个应用。而线程是在进程中执行的一个任务。线程可以被称为轻量级进程。线程需要较少的资源来创建和驻留在进程中，并且可以共享进程中的资源。 2.线程的创建和启动Java中有两种途径创建线程。 2.1继承Thread类Thread类代表线程类，它的最主要的两个方法是： run()：包含线程运行时要执行的代码 start()：用于启动线程 12345678910111213class MyThread extends Thread &#123; @Override public void run() &#123; for (int i = 0; i &lt; 10; i++) &#123; System.out.println(Thread.currentThread().getName() +"--"+ i); &#125; &#125; // 启动线程 public static void main(Strig[] args)&#123; MyThread thread = new MyThread(); thread.start(); &#125;&#125; 关于调用Thread类的run()方法 如果我们调用了Thread的run()方法，它的行为就会和普通的方法一样，为了在新的线程中执行我们的代码，必须使用Thread.start()方法。 2.2实现Runnable接口由于Java不支持多继承，也就是说如果我们继承了Thread类，就不能继承其他类。 为了解决这个问题，Java提供了Runnable接口。 12345678910111213class MyRunnable implements Runnable &#123; @Override public void run() &#123; for (int i = 0; i &lt; 10; i++) &#123; System.out.println(Thread.currentThread().getName() +"--"+ i); &#125; &#125; // 启动线程 public static void main(String[] args) &#123; Thread thread = new Thread(new MyThread()); thread.start(); &#125;&#125; 3.线程的状态线程在它的生命周期中会处于各种不同的状态 3.1新建状态用new语句创建的线程对象处于新建状态。 3.2就绪状态调用了线程的start()方法，线程就处于就绪状态 3.3运行状态正在占用cpu，执行程序代码的线程处于运行状态 3.4阻塞状态阻塞状态是指线程因为某些原因放弃CPU，暂时停止运行。当线程处于阻塞状态时，Java虚拟机不会给该线程分配CPU，直到线程重新进入就绪状态，它才有机会转到运行状态。 阻塞状态可分为3种 位于对象等待池的阻塞状态：当线程处于运行状态时，如果执行了某个对象的wait()方法，Java虚拟机会把线程放到这个对象的等待池中。 位于对象锁池中的阻塞状态：当线程处于运行状态，视图获取某个对象的同步锁时，如果该对象的同步锁已经被其他线程占用，Java虚拟机会把这个线程放到这个对象的锁池中。 其他阻塞状态：当前线程执行了sleep()方法，或者调用了其他线程的join()方法，或者发出了IO请求，就会进入这个状态。 3.5死亡状态当线程执行完run方法，或者在执行过程中出现了异常，那么该线程就会退出，然后进入死亡状态 4.获取当前线程的引用Thread类的currentThread静态方法返回当前线程对象的引用。 5.线程的调度线程的调度是指按照特定的机制为多个线程分配cpu的使用权，有两种调度模型：分时调度模型和抢占式调度模型。 分时调度模型是让所有线程轮流获得CPU的使用权，并且平均分配每个线程占用CPU的时间片。 Java虚拟机采用抢占式调度模型，它是指优先让可运行池中的优先级高的线程占用CPU，如果可运行池中线程的优先级相同，那么就随机地选择一个线程，使其占用CPU。 5.1调整各个线程的优先级Thread类提供了getPriority(int)和getPripority()方法设置和读取优先级。优先级的取值范围是1~10，越大有越优先，默认优先级为5。Thread类提供了3个静态变量，分别用来对应三个优先级，分别是 MAX_PRIORITY:10 NORM_PRIORITY:5 MIN_PRIPROTY:1 虽然说是分了10个优先级，但不是所有操作系统的支持的，所以一般推荐使用上面三个静态变量。 5.2线程的睡眠、让步、等待睡眠：调用线程的静态sleep方法，它就会放弃CPU，转到阻塞状态。 让步：调用线程的静态yield方法，如果此时具有相同优先级的其他线程处于就绪状态，该方法就会把当前运行的线程放到可运行池中，并运行那个线程。 等待：当前运行的线程可以调用另外一个线程的join()方法，当前运行的线程将阻塞直到零一个线程运行结束，它才会恢复运行。 6.守护线程Java中有两类线程：User Thread(用户线程)、Daemon Thread(守护线程) 用户线程即运行在前台的线程，而守护线程是运行在后台的线程。 守护线程作用是为其他前台线程的运行提供便利服务，而且仅在普通、非守护线程仍然运行时才需要，比如垃圾回收线程就是一个守护线程。当JVM检测仅剩一个守护线程，而用户线程都已经退出运行时，JVM就会退出。如果有非守护线程仍然存活，JVM就不会退出。 守护线程并非只有虚拟机内部提供，用户在编写程序时也可以自己设置守护线程。用户可以用Thread的setDaemon（true）方法设置当前线程为守护线程。 虽然守护线程可能非常有用，但必须小心确保其他所有非守护线程消亡时，不会由于它的终止而产生任何危害。因为你不可能知道在所有的用户线程退出运行前，守护线程是否已经完成了预期的服务任务。一旦所有的用户线程退出了，虚拟机也就退出运行了。 因此，不要在守护线程中执行业务逻辑操作（比如对数据的读写等）。 7.定时器java.util.Timer是一个工具类，可以用于安排一个线程在未来的某个特定时间执行。Timer类可以用安排一次性任务或者周期任务。java.util.TimerTask是一个实现了Runnable接口的抽象类，我们需要去继承这个类来创建我们自己的定时任务并使用Timer去安排它的执行。 推荐使用ScheduledExecutorService]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch11并发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[数据验证]]></title>
    <url>%2F2018%2F08%2F11%2FJava%2FJavaWeb%2F5.%E8%A1%A8%E7%A4%BA%E5%B1%82%2FSpringMVC%2F%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81%2F</url>
    <content type="text"><![CDATA[Data ValidationData Validation 数据验证,在网络开发中,对用户提交的数据进行检验,是常见的需求.在本章中我们会讲解Java中常用的两种数据验证方式. Bean Validation Spring v Validation Bean ValidationBean Validation是一种规范,为验证JavaBean定义了相应的Annotation和API。 关于该规范的详细内容,可以上网查看JSR-303. JSRs Java Specification Requests Java 规范提案,它是一份文档,里面描述了添加到Java平台的建议规范和技术. Hibernate ValidatorHibernate Validator 是 Bean Validation 规范的实现. Hibernate Validator 提供了 JSR 303 规范中所有内置 constraint 的实现，除此之外还有一些附加的 constraint。 简而言之,Bean Validation是一种方案,Hibernate Validator则是该方案的实施者. Spring Validator Hibernate Validator概括 了解Hibernate Validator 内置约束 学会单独使用Hibernate Validator 使用内置的约束 自定义约束 Hibernate Validator 内置约束约束(constraint)其实就是,规定某样东西必须符合某种要求. 由于Hibernate Validator是JSR303规范的实现库,也就是说Hibernate Validator 内置的约束,其实就是JSR303规定的约束. JSR303规定的约束JSR303中定义了很多常用的约束注解，使用方法就是把约束注解添加到目标(字段 方法等等)上,然后通过验证器(validator)进行验证.下面是常见的约束. 空检查@Null 验证对象是否为null@NotNull 验证对象是否不为null, 无法查检长度为0的字符串@NotBlank 检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.@NotEmpty 检查约束元素是否为NULL或者是EMPTY. Booelan检查@AssertTrue 验证 Boolean 对象是否为 true@AssertFalse 验证 Boolean 对象是否为 false 长度检查@Size(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内@Length(min=, max=) 限制字符长度 日期检查@Past 验证 Date 和 Calendar 对象是否在当前时间之前，验证成立的话被注释的元素一定是一个过去的日期@Future 验证 Date 和 Calendar 对象是否在当前时间之后 ，验证成立的话被注释的元素一定是一个将来的日期 正则表达式@Pattern 验证 String 对象是否符合正则表达式的规则，被注释的元素符合制定的正则表达式，regexp:正则表达式 flags: 指定 Pattern.Flag 的数组，表示正则表达式的相关选项。 数值检查建议使用在Stirng,Integer类型，不建议使用在int类型上，因为表单值为“”时无法转换为int,Integer则为null@Min 验证 Number 和 String 对象是否大等于指定的值@Max 验证 Number 和 String 对象是否小等于指定的值@DecimalMax 被标注的值必须不大于约束中指定的最大值. 这个约束的参数是一个通过BigDecimal定义的最大值的字符串表示.小数存在精度@DecimalMin 被标注的值必须不小于约束中指定的最小值. 这个约束的参数是一个通过BigDecimal定义的最小值的字符串表示.小数存在精度@Digits 验证 Number 和 String 的构成是否合法@Digits(integer=,fraction=) 验证字符串是否是符合指定格式的数字，interger指定整数精度，fraction指定小数精度。@Range(min=, max=) 被指定的元素必须在合适的范围内@Range(min=10000,max=50000,message=”range.bean.wage”)@Valid 递归的对关联对象进行校验, 如果关联对象是个集合或者数组,那么对其中的元素进行递归校验,如果是一个map,则对其中的值部分进行校验.(是否进行递归验证)@CreditCardNumber信用卡验证@Email 验证是否是邮件地址，如果为null,不进行验证，算通过验证。@ScriptAssert(lang= ,script=, alias=)@URL(protocol=,host=, port=,regexp=, flags=) Hibernate Validator扩展的约束Hibernate validator 在JSR303的基础上对校验注解进行了扩展，扩展注解如下： 使用内置的约束引入依赖123456&lt;dependency&gt; &lt;groupId&gt;org.hibernate&lt;/groupId&gt; &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt; &lt;version&gt;5.2.4.Final&lt;/version&gt; &lt;scope&gt;compile&lt;/scope&gt;&lt;/dependency&gt; 使用约束123456789public class Person &#123; @NotNull @Pattern(regexp = "[0-9]&#123;15&#125;|[0-9]&#123;18&#125;" ,message = "身份证格式错误,必须是15或18位数字") private String id; @NotNull(message = "名字不能为空") private String name; // setter getter&#125; 验证在上代码前,我们需要了解两个对象,分别是validator对象以及ConstraintViolation对象. validator对象Validator用于检验对象是否遵循其约束 12//获取Validator的实例Validator validator = Validation.buildDefaultValidatorFactory().getValidator(); Validator中有三个方法能够用来校验整个实体对象或者实体对象中的属性. 这三个方法都会返回一个Set&lt;ConstraintViolation&gt;对象, 如果整个验证过程没有发现问题的话,那么这个set是空的, 否则, 每个违反约束的地方都会被包装成一个ConstraintViolation的实例然后添加到set当中. validate(obj) 使用validate()方法对一个给定的实体对象中定义的所有约束条件进行校验 validateProperty(obj,”propertyName”) 对一个给定实体对象的单个属性进行校验. 其中属性名称需要符合JavaBean规范中定义的属性名称 validateValue(Class,”propertyName”,null) 测试把一个特定的值赋给一个类的某一个属性,是否会违反此类中定义的约束条件. ConstraintViolation对象ConstraintViolation对象包含了违反约束的相关信息. getMessage() 获取message getMessageTemplate() 获取信息模板 getRootBean() 获取校验的对象 getRootBeanClass() 获取校验的对象的类 getLeafBean() 如果约束是添加在一个bean(实体对象)上的,那么则返回这个bean的实例 如果是约束是定义在一个属性上的, 则返回这个属性所属的bean的实例对象 getPropertyPath() 从被验证的根对象到被验证的属性的路径. getConstraintDescriptor() 导致校验失败的约束定义 1234567891011121314public class TestValidation &#123; private static Validator validator = Validation.buildDefaultValidatorFactory().getValidator(); @Test public void personValidation()&#123; Person person = new Person(); person.setId("123456789012345"); Set&lt;ConstraintViolation&lt;Person&gt;&gt; constraintViolations = validator.validate(person); for(ConstraintViolation&lt;Person&gt; cv:constraintViolations)&#123; System.out.println(cv.getMessage()); &#125; &#125;&#125; 自定义约束尽管Bean Validation API定义了一大堆标准的约束条件, 但是肯定还是有这些约束不能满足我们需求的时候, 在这种情况下, 你可以根据你的特定的校验需求来创建自己的约束条件. 按照以下三个步骤来创建一个自定义的约束 创建约束注解 实现一个验证器 创建约束注解123456789101112@Target( &#123; METHOD, FIELD, ANNOTATION_TYPE &#125;)@Retention(RUNTIME) //注解信息是在运行期通过反射被读取的@Constraint(validatedBy = IdValidator.class) //验证器@Documented //对使用了@CheckCase的类进行javadoc操作到时候, 这个标注会被添加到javadoc当中public @interface IdConstraint &#123; //默认的消息模版, 当这个约束条件被验证失败的时候,通过此属性来输出错误信息 String message() default "&#123;身份证号有误,必须是15或18位数字&#125;"; //指定这个约束条件属于哪(些)个校验组 Class&lt;?&gt;[] groups() default &#123;&#125;; //使用者可以通过此属性来给约束条件指定严重级别 Class&lt;? extends Payload&gt;[] payload() default &#123;&#125;;&#125; 验证器1234567891011import javax.validation.ConstraintValidator;import javax.validation.ConstraintValidatorContext;public class IdValidator implements ConstraintValidator&lt;IdConstraint, String&gt; &#123; public void initialize(IdConstraint constraint) &#123; &#125; public boolean isValid(String id, ConstraintValidatorContext context) &#123; return id.matches("[0-9]&#123;15&#125;|[0-9]&#123;18&#125;"); &#125;&#125; 使用123456public class Person &#123; @IdConstraint private String id; // getter setter&#125; 测试12345678910111213141516public class TestValidation &#123; private static Validator validator = Validation.buildDefaultValidatorFactory().getValidator(); @Test public void personValidation()&#123; Person person = new Person(); person.setId("123456"); Set&lt;ConstraintViolation&lt;Person&gt;&gt; constraintViolations = validator.validate(person); for(ConstraintViolation&lt;Person&gt; cv:constraintViolations)&#123; System.out.println(cv.getMessage()); &#125; &#125; &#125; 掌握了上面的知识就可以去看下一篇文章了. Spring MVC整合Hibernate Validator注册Validator123456&lt;bean id="validator" class= "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"&gt; &lt;property name="providerClass" value= "org.hibernate.validator.HibernateValidator"/&gt;&lt;/bean&gt;&lt;mvc:annotation-driven validator="validator"/&gt; 使用信息源123456789101112 &lt;bean id="messageSource" class= "org.springframework.context.support.ResourceBundleMessageSource"&gt; &lt;property name="basename" value="message"/&gt; &lt;/bean&gt;&lt;bean id="validator" class= "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"&gt; &lt;property name="providerClass" value="org.hibernate.validator.HibernateValidator"/&gt; &lt;property name="validationMessageSource" ref="messageSource"/&gt; &lt;/bean&gt; &lt;mvc:annotation-driven validator="validator" /&gt; 国际化1234&lt;bean id="localeResolver" class= "org.springframework.web.servlet.i18n.SessionLocaleResolver"&gt; &lt;property name="defaultLocale" value="en"/&gt;&lt;/bean&gt; Hibernate Validator进阶约束条件组合有些时候一个属性可能会有多个约束注解,如果这个属性在多个地方出现,重复写这些注解就有违DRY原则了. 这是我们可以定义一个约束,然后在其中添加其他约束. 12345678910111213141516@NotNull@Size(min = 2, max = 14)@CheckCase(CaseMode.UPPER)@Target( &#123; METHOD, FIELD, ANNOTATION_TYPE &#125;)@Retention(RUNTIME)@Constraint(validatedBy = &#123;&#125;)@Documentedpublic @interface ValidLicensePlate &#123; String message() default "......."; Class&lt;?&gt;[] groups() default &#123;&#125;; Class&lt;? extends Payload&gt;[] payload() default &#123;&#125;;&#125; Spring Validation在Bean Validation中,validator只需要进行验证,然后返回boolean类型的结果. 在Spring Validation中,validator使用Errors对象,由它来存放验证错误的信息. Validator接口spring提供了一个Validator接口,通过实现Validator接口进行验证,Validator接口里面有一个Errors对象，该对象存放验证错误的信息. 看个例子 1234567public class Person &#123; private String name; private int age; // the usual getters and setters...&#125; 接下来我们要为Person类提供数据验证的服务,通过实现 org.springframework.validation.Validator 接口的两个方法 supports(Class) 此验证器可以验证提供的类的实例吗？ validate(Object, org.springframework.validation.Errors) 对传入的对象进行验证,如果有错误则传递给Errors对象. 1234567891011121314public class PersonValidator implements Validator &#123; public boolean supports(Class clazz) &#123; return Person.class.equals(clazz); &#125; public void validate(Object obj, Errors e) &#123; Person p = (Person) o; String name = p.getName(); int age = p.getAge(); if(name==null) errors.rejectValue("name","name.empty"); if(age&lt;0||age&gt;110) errors.rejectValue("age","请输入正确的年龄"); &#125;&#125; Errors接口Errors接口的作用:存储和公开有关特定对象的数据绑定和验证错误的信息。 具体内容看API,注意看它的方法和实现类. 使用12345678910111213141516171819public class TestValidation &#123; private static Validator validator = new PersonValidator(); @Test public void personValidation()&#123; Person person = new Person(); person.setAge(-1); Errors errors = new BeanPropertyBindingResult(person,"person"); if(validator.supports(person.getClass()))&#123; validator.validate(person,errors); &#125; List&lt;ObjectError&gt; allErrors = errors.getAllErrors(); for(ObjectError e:allErrors)&#123; System.out.println(e.toString()); &#125; System.out.println(errors.getObjectName()); &#125; &#125; DataBinder从Spring3开始,可以使用Validator配置DataBinder实例.一旦配置了,可以通过binder.validate()方法调用Validator.所有的验证错误都会被添加到BindingResult. 123456789101112Foo target = new Foo();DataBinder binder = new DataBinder(target);binder.setValidator(new FooValidator());// bind to the target objectbinder.bind(propertyValues);// validate the target objectbinder.validate();// get BindingResult that includes any validation errorsBindingResult results = binder.getBindingResult(); 嵌套的validator123456789101112131415161718192021222324252627282930313233343536public class CustomerValidator implements Validator &#123; private final Validator addressValidator; public CustomerValidator(Validator addressValidator) &#123; if (addressValidator == null) &#123; throw new IllegalArgumentException("The supplied [Validator] is " + "required and must not be null."); &#125; if (!addressValidator.supports(Address.class)) &#123; throw new IllegalArgumentException("The supplied [Validator] must " + "support the validation of [Address] instances."); &#125; this.addressValidator = addressValidator; &#125; /** * This Validator validates Customer instances, and any subclasses of Customer too */ public boolean supports(Class clazz) &#123; return Customer.class.isAssignableFrom(clazz); &#125; public void validate(Object target, Errors errors) &#123; ValidationUtils.rejectIfEmptyOrWhitespace(errors, "firstName", "field.required"); ValidationUtils.rejectIfEmptyOrWhitespace(errors, "surname", "field.required"); Customer customer = (Customer) target; try &#123; errors.pushNestedPath("address"); ValidationUtils.invokeValidator(this.addressValidator, customer.getAddress(), errors); &#125; finally &#123; errors.popNestedPath(); &#125; &#125;&#125; Spring MVC ValidationLocalValidatorFactoryBean默认的,如果Bean Validation存在于类路径(例如引入了Hibernate Validator库),LocalValidatorFactoryBean会被注册为全局Validator,用于与控制器方法参数上的@Valid和@Validated一起使用。 基于java配置 123456789@Configuration@EnableWebMvcpublic class WebConfig implements WebMvcConfigurer &#123; @Override public Validator getValidator(); &#123; // ... &#125;&#125; 基于XML 12345678910111213&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"&gt; &lt;mvc:annotation-driven validator="globalValidator"/&gt;&lt;/beans&gt; 整合Spring Validation和 BeanValidation编写Validator1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package com.packt.webstore.validation.validator;import com.packt.webstore.domain.bean.Product;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.validation.Errors;import org.springframework.validation.Validator;import javax.validation.ConstraintViolation;import javax.validation.Path;import java.util.HashSet;import java.util.Set;public class ProductValidator implements Validator &#123; @Autowired private javax.validation.Validator beanValidator; private Set&lt;Validator&gt; springValidators; public ProductValidator()&#123; this.springValidators = new HashSet&lt;Validator&gt;(); &#125; public void setSpringValidators(Set&lt;Validator&gt; springValidators) &#123; this.springValidators = springValidators; &#125; @Override public boolean supports(Class&lt;?&gt; aClass) &#123; return Product.class.isAssignableFrom(aClass); &#125; @Override public void validate(Object o, Errors errors) &#123; Set&lt;ConstraintViolation&lt;Object&gt;&gt; constraintViolationSet = beanValidator.validate(o); for(ConstraintViolation&lt;Object&gt; cv:constraintViolationSet)&#123; String propertyPath = cv.getPropertyPath().toString(); String message = cv.getMessage(); errors.rejectValue(propertyPath,"",message); &#125; for(Validator validator:springValidators)&#123; validator.validate(o,errors); &#125; &#125;&#125; 注册Validator Bean1234567&lt;bean id="productValidator" class="com.packt.webstore.validation.validator.ProductValidator"&gt; &lt;property name="springValidators"&gt; &lt;set&gt; &lt;bean class="com.packt.webstore.validation.validator.UnitsInStockValidator"/&gt; &lt;/set&gt; &lt;/property&gt;&lt;/bean&gt; 在Controller注入Bean12@Autowiredprivate ProductValidator productValidator; 绑定Validator1binder.setValidator(productValidator);]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>SpringMVC</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[数据验证]]></title>
    <url>%2F2018%2F08%2F11%2FJava%2FJavaWeb%2F5.%E8%A1%A8%E7%A4%BA%E5%B1%82%2FMySpringMVC%2F5.%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81%2F</url>
    <content type="text"><![CDATA[Data ValidationData Validation 数据验证,在网络开发中,对用户提交的数据进行检验,是常见的需求.在本章中我们会讲解Java中常用的两种数据验证方式. Bean Validation Spring v Validation Bean ValidationBean Validation是一种规范,为验证JavaBean定义了相应的Annotation和API。 关于该规范的详细内容,可以上网查看JSR-303. JSRs Java Specification Requests Java 规范提案,它是一份文档,里面描述了添加到Java平台的建议规范和技术. Hibernate ValidatorHibernate Validator 是 Bean Validation 规范的实现. Hibernate Validator 提供了 JSR 303 规范中所有内置 constraint 的实现，除此之外还有一些附加的 constraint。 简而言之,Bean Validation是一种方案,Hibernate Validator则是该方案的实施者. Spring Validator Hibernate Validator概括 了解Hibernate Validator 内置约束 学会单独使用Hibernate Validator 使用内置的约束 自定义约束 Hibernate Validator 内置约束约束(constraint)其实就是,规定某样东西必须符合某种要求. 由于Hibernate Validator是JSR303规范的实现库,也就是说Hibernate Validator 内置的约束,其实就是JSR303规定的约束. JSR303规定的约束JSR303中定义了很多常用的约束注解，使用方法就是把约束注解添加到目标(字段 方法等等)上,然后通过验证器(validator)进行验证.下面是常见的约束. 空检查@Null 验证对象是否为null@NotNull 验证对象是否不为null, 无法查检长度为0的字符串@NotBlank 检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.@NotEmpty 检查约束元素是否为NULL或者是EMPTY. Booelan检查@AssertTrue 验证 Boolean 对象是否为 true@AssertFalse 验证 Boolean 对象是否为 false 长度检查@Size(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内@Length(min=, max=) 限制字符长度 日期检查@Past 验证 Date 和 Calendar 对象是否在当前时间之前，验证成立的话被注释的元素一定是一个过去的日期@Future 验证 Date 和 Calendar 对象是否在当前时间之后 ，验证成立的话被注释的元素一定是一个将来的日期 正则表达式@Pattern 验证 String 对象是否符合正则表达式的规则，被注释的元素符合制定的正则表达式，regexp:正则表达式 flags: 指定 Pattern.Flag 的数组，表示正则表达式的相关选项。 数值检查建议使用在Stirng,Integer类型，不建议使用在int类型上，因为表单值为“”时无法转换为int,Integer则为null@Min 验证 Number 和 String 对象是否大等于指定的值@Max 验证 Number 和 String 对象是否小等于指定的值@DecimalMax 被标注的值必须不大于约束中指定的最大值. 这个约束的参数是一个通过BigDecimal定义的最大值的字符串表示.小数存在精度@DecimalMin 被标注的值必须不小于约束中指定的最小值. 这个约束的参数是一个通过BigDecimal定义的最小值的字符串表示.小数存在精度@Digits 验证 Number 和 String 的构成是否合法@Digits(integer=,fraction=) 验证字符串是否是符合指定格式的数字，interger指定整数精度，fraction指定小数精度。@Range(min=, max=) 被指定的元素必须在合适的范围内@Range(min=10000,max=50000,message=”range.bean.wage”)@Valid 递归的对关联对象进行校验, 如果关联对象是个集合或者数组,那么对其中的元素进行递归校验,如果是一个map,则对其中的值部分进行校验.(是否进行递归验证)@CreditCardNumber信用卡验证@Email 验证是否是邮件地址，如果为null,不进行验证，算通过验证。@ScriptAssert(lang= ,script=, alias=)@URL(protocol=,host=, port=,regexp=, flags=) Hibernate Validator扩展的约束Hibernate validator 在JSR303的基础上对校验注解进行了扩展，扩展注解如下： 使用内置的约束引入依赖123456&lt;dependency&gt; &lt;groupId&gt;org.hibernate&lt;/groupId&gt; &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt; &lt;version&gt;5.2.4.Final&lt;/version&gt; &lt;scope&gt;compile&lt;/scope&gt;&lt;/dependency&gt; 使用约束123456789public class Person &#123; @NotNull @Pattern(regexp = "[0-9]&#123;15&#125;|[0-9]&#123;18&#125;" ,message = "身份证格式错误,必须是15或18位数字") private String id; @NotNull(message = "名字不能为空") private String name; // setter getter&#125; 验证在上代码前,我们需要了解两个对象,分别是validator对象以及ConstraintViolation对象. validator对象Validator用于检验对象是否遵循其约束 12//获取Validator的实例Validator validator = Validation.buildDefaultValidatorFactory().getValidator(); Validator中有三个方法能够用来校验整个实体对象或者实体对象中的属性. 这三个方法都会返回一个Set&lt;ConstraintViolation&gt;对象, 如果整个验证过程没有发现问题的话,那么这个set是空的, 否则, 每个违反约束的地方都会被包装成一个ConstraintViolation的实例然后添加到set当中. validate(obj) 使用validate()方法对一个给定的实体对象中定义的所有约束条件进行校验 validateProperty(obj,”propertyName”) 对一个给定实体对象的单个属性进行校验. 其中属性名称需要符合JavaBean规范中定义的属性名称 validateValue(Class,”propertyName”,null) 测试把一个特定的值赋给一个类的某一个属性,是否会违反此类中定义的约束条件. ConstraintViolation对象ConstraintViolation对象包含了违反约束的相关信息. getMessage() 获取message getMessageTemplate() 获取信息模板 getRootBean() 获取校验的对象 getRootBeanClass() 获取校验的对象的类 getLeafBean() 如果约束是添加在一个bean(实体对象)上的,那么则返回这个bean的实例 如果是约束是定义在一个属性上的, 则返回这个属性所属的bean的实例对象 getPropertyPath() 从被验证的根对象到被验证的属性的路径. getConstraintDescriptor() 导致校验失败的约束定义 1234567891011121314public class TestValidation &#123; private static Validator validator = Validation.buildDefaultValidatorFactory().getValidator(); @Test public void personValidation()&#123; Person person = new Person(); person.setId("123456789012345"); Set&lt;ConstraintViolation&lt;Person&gt;&gt; constraintViolations = validator.validate(person); for(ConstraintViolation&lt;Person&gt; cv:constraintViolations)&#123; System.out.println(cv.getMessage()); &#125; &#125;&#125; 自定义约束尽管Bean Validation API定义了一大堆标准的约束条件, 但是肯定还是有这些约束不能满足我们需求的时候, 在这种情况下, 你可以根据你的特定的校验需求来创建自己的约束条件. 按照以下三个步骤来创建一个自定义的约束 创建约束注解 实现一个验证器 创建约束注解123456789101112@Target( &#123; METHOD, FIELD, ANNOTATION_TYPE &#125;)@Retention(RUNTIME) //注解信息是在运行期通过反射被读取的@Constraint(validatedBy = IdValidator.class) //验证器@Documented //对使用了@CheckCase的类进行javadoc操作到时候, 这个标注会被添加到javadoc当中public @interface IdConstraint &#123; //默认的消息模版, 当这个约束条件被验证失败的时候,通过此属性来输出错误信息 String message() default "&#123;身份证号有误,必须是15或18位数字&#125;"; //指定这个约束条件属于哪(些)个校验组 Class&lt;?&gt;[] groups() default &#123;&#125;; //使用者可以通过此属性来给约束条件指定严重级别 Class&lt;? extends Payload&gt;[] payload() default &#123;&#125;;&#125; 验证器1234567891011import javax.validation.ConstraintValidator;import javax.validation.ConstraintValidatorContext;public class IdValidator implements ConstraintValidator&lt;IdConstraint, String&gt; &#123; public void initialize(IdConstraint constraint) &#123; &#125; public boolean isValid(String id, ConstraintValidatorContext context) &#123; return id.matches("[0-9]&#123;15&#125;|[0-9]&#123;18&#125;"); &#125;&#125; 使用123456public class Person &#123; @IdConstraint private String id; // getter setter&#125; 测试12345678910111213141516public class TestValidation &#123; private static Validator validator = Validation.buildDefaultValidatorFactory().getValidator(); @Test public void personValidation()&#123; Person person = new Person(); person.setId("123456"); Set&lt;ConstraintViolation&lt;Person&gt;&gt; constraintViolations = validator.validate(person); for(ConstraintViolation&lt;Person&gt; cv:constraintViolations)&#123; System.out.println(cv.getMessage()); &#125; &#125; &#125; 掌握了上面的知识就可以去看下一篇文章了. Spring MVC整合Hibernate Validator注册Validator123456&lt;bean id="validator" class= "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"&gt; &lt;property name="providerClass" value= "org.hibernate.validator.HibernateValidator"/&gt;&lt;/bean&gt;&lt;mvc:annotation-driven validator="validator"/&gt; 使用信息源123456789101112 &lt;bean id="messageSource" class= "org.springframework.context.support.ResourceBundleMessageSource"&gt; &lt;property name="basename" value="message"/&gt; &lt;/bean&gt;&lt;bean id="validator" class= "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"&gt; &lt;property name="providerClass" value="org.hibernate.validator.HibernateValidator"/&gt; &lt;property name="validationMessageSource" ref="messageSource"/&gt; &lt;/bean&gt; &lt;mvc:annotation-driven validator="validator" /&gt; 国际化1234&lt;bean id="localeResolver" class= "org.springframework.web.servlet.i18n.SessionLocaleResolver"&gt; &lt;property name="defaultLocale" value="en"/&gt;&lt;/bean&gt; Hibernate Validator进阶约束条件组合有些时候一个属性可能会有多个约束注解,如果这个属性在多个地方出现,重复写这些注解就有违DRY原则了. 这是我们可以定义一个约束,然后在其中添加其他约束. 12345678910111213141516@NotNull@Size(min = 2, max = 14)@CheckCase(CaseMode.UPPER)@Target( &#123; METHOD, FIELD, ANNOTATION_TYPE &#125;)@Retention(RUNTIME)@Constraint(validatedBy = &#123;&#125;)@Documentedpublic @interface ValidLicensePlate &#123; String message() default "......."; Class&lt;?&gt;[] groups() default &#123;&#125;; Class&lt;? extends Payload&gt;[] payload() default &#123;&#125;;&#125; Spring Validation在Bean Validation中,validator只需要进行验证,然后返回boolean类型的结果. 在Spring Validation中,validator使用Errors对象,由它来存放验证错误的信息. Validator接口spring提供了一个Validator接口,通过实现Validator接口进行验证,Validator接口里面有一个Errors对象，该对象存放验证错误的信息. 看个例子 1234567public class Person &#123; private String name; private int age; // the usual getters and setters...&#125; 接下来我们要为Person类提供数据验证的服务,通过实现 org.springframework.validation.Validator 接口的两个方法 supports(Class) 此验证器可以验证提供的类的实例吗？ validate(Object, org.springframework.validation.Errors) 对传入的对象进行验证,如果有错误则传递给Errors对象. 1234567891011121314public class PersonValidator implements Validator &#123; public boolean supports(Class clazz) &#123; return Person.class.equals(clazz); &#125; public void validate(Object obj, Errors e) &#123; Person p = (Person) o; String name = p.getName(); int age = p.getAge(); if(name==null) errors.rejectValue("name","name.empty"); if(age&lt;0||age&gt;110) errors.rejectValue("age","请输入正确的年龄"); &#125;&#125; Errors接口Errors接口的作用:存储和公开有关特定对象的数据绑定和验证错误的信息。 具体内容看API,注意看它的方法和实现类. 使用12345678910111213141516171819public class TestValidation &#123; private static Validator validator = new PersonValidator(); @Test public void personValidation()&#123; Person person = new Person(); person.setAge(-1); Errors errors = new BeanPropertyBindingResult(person,"person"); if(validator.supports(person.getClass()))&#123; validator.validate(person,errors); &#125; List&lt;ObjectError&gt; allErrors = errors.getAllErrors(); for(ObjectError e:allErrors)&#123; System.out.println(e.toString()); &#125; System.out.println(errors.getObjectName()); &#125; &#125; DataBinder从Spring3开始,可以使用Validator配置DataBinder实例.一旦配置了,可以通过binder.validate()方法调用Validator.所有的验证错误都会被添加到BindingResult. 123456789101112Foo target = new Foo();DataBinder binder = new DataBinder(target);binder.setValidator(new FooValidator());// bind to the target objectbinder.bind(propertyValues);// validate the target objectbinder.validate();// get BindingResult that includes any validation errorsBindingResult results = binder.getBindingResult(); 嵌套的validator123456789101112131415161718192021222324252627282930313233343536public class CustomerValidator implements Validator &#123; private final Validator addressValidator; public CustomerValidator(Validator addressValidator) &#123; if (addressValidator == null) &#123; throw new IllegalArgumentException("The supplied [Validator] is " + "required and must not be null."); &#125; if (!addressValidator.supports(Address.class)) &#123; throw new IllegalArgumentException("The supplied [Validator] must " + "support the validation of [Address] instances."); &#125; this.addressValidator = addressValidator; &#125; /** * This Validator validates Customer instances, and any subclasses of Customer too */ public boolean supports(Class clazz) &#123; return Customer.class.isAssignableFrom(clazz); &#125; public void validate(Object target, Errors errors) &#123; ValidationUtils.rejectIfEmptyOrWhitespace(errors, "firstName", "field.required"); ValidationUtils.rejectIfEmptyOrWhitespace(errors, "surname", "field.required"); Customer customer = (Customer) target; try &#123; errors.pushNestedPath("address"); ValidationUtils.invokeValidator(this.addressValidator, customer.getAddress(), errors); &#125; finally &#123; errors.popNestedPath(); &#125; &#125;&#125; Spring MVC ValidationLocalValidatorFactoryBean默认的,如果Bean Validation存在于类路径(例如引入了Hibernate Validator库),LocalValidatorFactoryBean会被注册为全局Validator,用于与控制器方法参数上的@Valid和@Validated一起使用。 基于java配置 123456789@Configuration@EnableWebMvcpublic class WebConfig implements WebMvcConfigurer &#123; @Override public Validator getValidator(); &#123; // ... &#125;&#125; 基于XML 12345678910111213&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"&gt; &lt;mvc:annotation-driven validator="globalValidator"/&gt;&lt;/beans&gt; 整合Spring Validation和 BeanValidation编写Validator1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package com.packt.webstore.validation.validator;import com.packt.webstore.domain.bean.Product;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.validation.Errors;import org.springframework.validation.Validator;import javax.validation.ConstraintViolation;import javax.validation.Path;import java.util.HashSet;import java.util.Set;public class ProductValidator implements Validator &#123; @Autowired private javax.validation.Validator beanValidator; private Set&lt;Validator&gt; springValidators; public ProductValidator()&#123; this.springValidators = new HashSet&lt;Validator&gt;(); &#125; public void setSpringValidators(Set&lt;Validator&gt; springValidators) &#123; this.springValidators = springValidators; &#125; @Override public boolean supports(Class&lt;?&gt; aClass) &#123; return Product.class.isAssignableFrom(aClass); &#125; @Override public void validate(Object o, Errors errors) &#123; Set&lt;ConstraintViolation&lt;Object&gt;&gt; constraintViolationSet = beanValidator.validate(o); for(ConstraintViolation&lt;Object&gt; cv:constraintViolationSet)&#123; String propertyPath = cv.getPropertyPath().toString(); String message = cv.getMessage(); errors.rejectValue(propertyPath,"",message); &#125; for(Validator validator:springValidators)&#123; validator.validate(o,errors); &#125; &#125;&#125; 注册Validator Bean1234567&lt;bean id="productValidator" class="com.packt.webstore.validation.validator.ProductValidator"&gt; &lt;property name="springValidators"&gt; &lt;set&gt; &lt;bean class="com.packt.webstore.validation.validator.UnitsInStockValidator"/&gt; &lt;/set&gt; &lt;/property&gt;&lt;/bean&gt; 在Controller注入Bean12@Autowiredprivate ProductValidator productValidator; 绑定Validator1binder.setValidator(productValidator);]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>SpringMVC</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SpringMVC配置]]></title>
    <url>%2F2018%2F08%2F10%2FJava%2FJavaWeb%2F5.%E8%A1%A8%E7%A4%BA%E5%B1%82%2FMySpringMVC%2F4.Spring%20MVC%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[Spring MVC配置1.SpringMVC初始化配置1.1编写配置类Java配置 12345@Configuration@EnableWebMvc // 导入DelegatingWebMvcConfiguration配置类@ComponentScan(basePackages ="com.hdr.webstore")public class WebAppConfig implements WebMvcConfigurer &#123;&#125; @EnableWebMvc使用该注解修饰Configuration类可从WebMvcConfigurationSupport导入Spring MVC配置 12345@Retention(value=RUNTIME)@Target(value=TYPE)@Documented@Import(value=DelegatingWebMvcConfiguration.class)public @interface EnableWebMvc 如果想修改导入的配置，实现WebMvcConfigurer接口并覆盖单个方法 1234567891011121314@Configuration@EnableWebMvc@ComponentScan(basePackageClasses = MyConfiguration.class)public class MyConfiguration implements WebMvcConfigurer &#123; @Override public void addFormatters(FormatterRegistry formatterRegistry) &#123; formatterRegistry.addConverter(new MyConverter()); &#125; @Override public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123; converters.add(new MyHttpMessageConverter()); &#125;&#125; 注意： 只有一个@Configuration类可以使用@EnableWebMvc注解修饰，不过WebMvcConfigurer可以被多个配置类实现 DelegatingWebMvcConfigurationWebMvcConfigurationSupport的子类，通过检测和委派WebMvcConfigurer类型的Bean来修改WebMvcConfigurationSupport提供的配置。 WebMvcConfigurationSupport这是MVC提供Java配置的主要类 WebMvcConfigurer通过使用@EnableWebMvc修饰@Configuration类,从而引入了DelegatingWebMvcConfiguration配置类 DelegatingWebMvcConfiguration继承了WebMvcConfigurationSupport 如果要对继承的方法进行重写,那就要@EnableWebMvc修饰的@Configuration类继承WebMvcConfigurer接口,然后重写接口方法. XML配置 12345678910&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"&gt; &lt;!--告诉Spring MVC 我们需要用到它提供的注解--&gt; &lt;mvc:annotation-driven/&gt; &lt;!--告诉Spring MVC 大概在哪里会找到使用了@Controller注解的Java类--&gt; &lt;context:component-scan base-package="com.packt.webstore"/&gt;&lt;/beans&gt; 1.2注册DispathcerServletJava配置 123456789101112131415161718public class WebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer &#123; @Override protected Class&lt;?&gt;[] getRootConfigClasses() &#123; return null; &#125; @Override protected Class&lt;?&gt;[] getServletConfigClasses() &#123; return new Class[]&#123;WebAppConfig.class&#125;; &#125; @Override protected String[] getServletMappings() &#123; return new String[]&#123;"/"&#125;; &#125;&#125; SpringServletContainerInitializerSpringServletContainerInitializer通过使用WebApplicationInitializer这个SPI来提供基于代码的方式来配置servlet容器 工作原理 Servlet容器的启动原理 在容器启动阶段，如果在类路径发现了spring-web模块，那么容器会加载、实例化这个类，然后再调用它的onStartup方法。 WebApplicationInitializerWebApplicationInitializer是个SPI（Service Provider Interface 服务提供接口）目的是提供接口，让第三方（服务厂商或扩展框架开发者）提供自定义实现的服务功能。 该接口的实现类提供以编程的方式配置ServletContext Servlet 3.0容器启动SpringServletContainerInitializer类，通过SpringServletContainerInitializer类检测WebApplicationInitializer接口的实现类，然后配置ServletContext WebApplicationInitializer接口的实现类 AbstractContextLoaderInitializer 在servlet context中注册ContextLoaderListener 子类只需要实现createRootApplicationContext() AbstractDispatcherServletInitializer 在servlet context中注册DispatcherServlet，推荐使用下面那个实现类 AbstractAnnotationConfigDispatcherServletInitializer 注册DispatcherServlet以及使用基于Java的Spring配置 子类需要实现getRootConfigClasses()和getServletConfigClasses() XML配置 12345678910111213141516&lt;servlet&gt; &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt; &lt;servlet-class&gt; org.springframework.web.servlet.DispatcherServlet &lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;/WEB-INF/spring/dispatcher-config.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 2.模型据我目前的理解，SpringMVC有两种工作方式。 一种是接收请求，然后直接把处理后的数据，返回给请求方，例如常见的返回json数据。 另一种就是接收请求，然后把处理后的数据，交给视图使用，最后返回渲染好的页面给请求方。 模型（Model）负责携带要被视图使用的数据。 在SpirngMVC中有两个类与模型有关，一个是ModelAndView，一个是Model， 前者不仅携带数据，还说明了数据交由哪个视图处理。后者仅携带数据。 1234567// 使用ModelAndView@GetMappingpublic ModelAndView Welcome(ModelAndView mv) &#123; mv.addObject("name", "hdr"); mv.setViewName("welcome"); return mv;&#125; 123456// 使用Model@GetMappingpublic String Welcome(Model model) &#123; model.addAttribute("name","hdr"); return "welcome";&#125; 2.1@ModelAttribute@ModelAttribute有以下用途 应用在普通方法上 应用在@RequestMapping方法上 应用在方法参数上 2.1.1应用在普通方法上@ModelAttribute修饰的方法会在执行@RequestMapping方法前调用。 123456789101112131415@ModelAttributepublic void modelOne(@RequestParam(required=false)String name, Model model)&#123; model.addAttribute("name",name);&#125;@PostMapping("/login")public String login()&#123; return "login"; // 这里会传递上面那个model对象给视图&#125;// -----------------------------------------------------------------@ModelAttribute("name")public String modelOne(@RequestParam(required=false)String name)&#123; return name;&#125; 2.1.2应用在方法参数上12345@PostMapping("/login")public String login(@ModelAttribute("name") String name)&#123; // 获取属性 return "login";&#125; 2.1.3应用在@RequestMapping方法上1234567@PostMapping("/login")@ModelAttribute("name")public String login()&#123; return "hdr";&#125;// 标志该方法的返回值是model属性// 这有什么卵用？？？？？？？？？ 3.视图解析器与视图视图解析器（view resolver）、视图（view） 视图是渲染数据模型展示给用户的用户的组件，在SpringMVC中分了逻辑视图和非逻辑视图两种。 逻辑视图需要使用视图解析器进行进一步的定位，例如上面的例子，我们只是返回了一个字符串，就能找到对应的jsp文件，这是视图解析器起的作用。 工作流程 请求来到dispatcher servlet，dispatcher servlet把请求发送给相应的Controller进行处理。 Controller对Model中的对象进行更新，然后返回view的名称给dispatcher servlet。 dispatcher servlet使用view resolver找出view的实际路径，然后把model传递给view。 view使用Model提供的数据进行渲染，然后把页面传递给dispatcher servlet dispatcher servlet 把页面返回给用户。 具体原理还有待学习 3.1JSP12345678@Beanpublic InternalResourceViewResolver getInternalResourceViewResolver()&#123; InternalResourceViewResolver resolver = new InternalResourceViewResolver(); resolver.setViewClass(JstlView.class); resolver.setPrefix("/WEB-INF/jsp/"); resolver.setSuffix(".jsp"); return resolver;&#125; 3.2ThymeLeaf由于Servlet默认提供了对JSP文件进行渲染的功能，所以使用JSP我们只需要注册JSP视图解析器即可。 但是对于ThymeLeaf，我们不仅要注册视图解析器，还要注册模板引擎和模板解析器。 123456789101112131415161718192021222324252627282930@Autowiredprivate ApplicationContext applicationContext;@Beanpublic SpringResourceTemplateResolver templateResolver()&#123; SpringResourceTemplateResolver templateResolver = new SpringResourceTemplateResolver(); templateResolver.setApplicationContext(this.applicationContext); templateResolver.setPrefix("/WEB-INF/templates/"); templateResolver.setSuffix(".html"); templateResolver.setCharacterEncoding("utf-8"); templateResolver.setTemplateMode(TemplateMode.HTML); templateResolver.setCacheable(true); return templateResolver;&#125;@Beanpublic SpringTemplateEngine templateEngine()&#123; SpringTemplateEngine templateEngine = new SpringTemplateEngine(); templateEngine.setTemplateResolver(templateResolver()); templateEngine.setEnableSpringELCompiler(true); return templateEngine;&#125;// 注册视图解析器@Beanpublic ThymeleafViewResolver viewResolver()&#123; ThymeleafViewResolver viewResolver = new ThymeleafViewResolver(); viewResolver.setTemplateEngine(templateEngine()); viewResolver.setCharacterEncoding("utf-8"); return viewResolver;&#125; 3.3JSON导入依赖 12345&lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;version&gt;2.9.6&lt;/version&gt;&lt;/dependency&gt; 使用 12345678910111213141516// 返回Json数据@GetMapping@ResponseBodypublic User getUser()&#123; User user = new User(); user.setName("黄大仁"); user.setEmail("13143754797@163.com"); return user;&#125;// 获取Json数据@PostMapping@ResponseBodypublic User getUser(@RequestBody User user)&#123; return user;&#125; JsonView 4.DataBinderDataBinder（数据绑定器），用于给目标对象设值，同时还支持validation和绑定结果分析。 在@Controller和@ControllerAdvice类中声明@InitBinder方法，可以创建WebDataBinder对象。 该对象有以下功能： 绑定请求参数到model对象 把String类型的请求值转换成合适的类型 Format model object values as String values when rendering HTML forms. 具体内容看这个简解Spring的BeanWrapper、DataBinder、ConversionService、Formatter WebDataBinder,用来从HttpServletRequest对象中提取相关的数据,然后组装到相应的对象中,并进行验证. 123456@InitBinderpublic void initialiseBinder(WebDataBinder binder) &#123; binder.setAllowedFields("productId","name","unitPrice","description", "manufacturer","category","unitsInStock", "condition");&#125; 12345678910public StringprocessAddNewProductForm(@ModelAttribute("newProduct")Product productToBeAdded, BindingResult result)&#123; // 添加 BindingResult String[] suppressedFields = result.getSuppressedFields(); if (suppressedFields.length &gt; 0) &#123; throw new RuntimeException("Attempting to bind disallowed fields:"+ StringUtils.arrayToCommaDelimitedString(suppressedFields)); &#125; // 更多详情请查看@InitBinder 和 BindingResult&#125; 5.过滤器与拦截器 filter（过滤器） interceptor（拦截器） 5.1过滤器5.2拦截器HandlerInterceptor接口负责拦截功能,它具有以下三个方法 preHandle: 在请求到达Controller之前调用 postHandle: Controller方法执行完毕后调用 afterCompletion:整个请求流程走完后再调用 5.2.1拦截器的设置所有的拦截器都要实现HandlerInterceptor接口，该接口具有三个方法 12345678910111213default boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)throws Exception &#123; return true;// 返回true则，则把请求交给处理器处理，否则结束所有流程&#125;// 处理器处理后，视图处理前default void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,@Nullable ModelAndView modelAndView) throws Exception &#123;&#125;// 视图处理后default void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) throws Exception &#123;&#125; 5.2.2注册拦截器123456@Overridepublic void addInterceptors(InterceptorRegistry registry) &#123; registry .addInterceptor(new CheckLogin()) .addPathPatterns("/category");&#125; 5.2.3多个拦截器的顺序先注册的，先被执行 5.文件上传5.1SpringMVC对文件上传的支持首先，DispatchServlet使用适配器模式，将HttpServletRequest接口对象转换成MultipartHttpServletRequest对象。 MultipartHttpServletRequest接口扩展了HttpServletRequest接口，定义了一些操作文件的方法，我们通过这些方法实现对上传文件的操作。 5.2MultipartResolverMultipartResolver接口用于把HttpServletRequest转换成MultipartHttpServletRequest。 MultipartResolver接口具有两个实现类，分别是StandardServletMultipartResolver和CommonsMultipartResolver，Spring推荐使用前者，因为那是Servlet API提供的包。 12345// 在配置类添加multipartResolver Bean@Beanpublic StandardServletMultipartResolver multipartResolver()&#123; return new StandardServletMultipartResolver();&#125; 12345678@Overrideprotected Filter[] getServletFilters() &#123; CharacterEncodingFilter cef = new CharacterEncodingFilter(); cef.setEncoding("UTF-8"); cef.setForceEncoding(true); return new Filter[]&#123;new HiddenHttpMethodFilter(), cef&#125;; // 注意：这个HiddenHttpMethodFilter是必须的&#125; 123456789101112@Controller@RequestMapping("/")public class UploadController &#123; @PostMapping @ResponseBody public void upload(@RequestParam(value = "file") Part file) throws IOException &#123; String path = "/home/hdr/Desktop/"; String fileName = "beauty.jpg"; file.write(path + fileName); &#125;&#125; 6.静态资源的访问一般我们使用SpringMVC，都会把DispatcherServlet请求映射配置为”/”，那么Web容器会把所有请求都交给Spring MVC的DispatchServlet处理，那么就会有这么一个问题，在请求静态资源的时候，Spring MVC会将它们当成一个普通请求处理，因此找不到对应处理器将导致错误。如何在DispatcherServlet请求映射配置为”/”的情况下，让Spring框架能够捕获所有URL的请求，同时又将静态资源的请求转由Web容器处理呢？有两种方法 默认Servlet启动DefaultServletHttpRequestHandler，设置默认Servlet的URL映射为/ **，并且相对于其他URL映射具有最低优先级，也就是把DispatchServlet处理不了的请求，转发给容器的默认Servlet处理。 123456@Overridepublic void configureDefaultServletHandling( DefaultServletHandlerConfigurer configurer) &#123; configurer.enable();&#125;// 层层匹配,真不知性能如何 对应XML配置 1&lt;mvc:default-servlet-handler/&gt; 资源处理器12345678910111213// 在配置类重写该方法@Overridepublic void addResourceHandlers(ResourceHandlerRegistry registry) &#123; registry .addResourceHandler("/img_in_res/**") .addResourceLocations("classpath:/img_in_res/"); registry .addResourceHandler("/img_in_web/**") .addResourceLocations("/img_in_web/"); registry .addResourceHandler("/img_in_web_inf/**") .addResourceLocations("/WEB-INF/img_in_web_inf/");&#125; 注意：理解项目打包后的结构关系非常重要。 7.异常处理Spring 统一异常处理有 3 种方式，分别为： 使用 @ ExceptionHandler 注解 实现 HandlerExceptionResolver 接口 使用 @controlleradvice 注解 7.1@ExceptionHandler123456@ExceptionHandler@ResponseBodypublic String exceptionHandler(IOException ex)&#123; return ex.getMessage();&#125;// 这种方式最大的缺陷就是不能全局控制异常,进行异常处理的方法必须与出错的方法在同一个Controller里面。 7.2@ControllerAdvice + @ ExceptionHandler123456789101112131415161718192021222324252627282930313233343536373839404142434445@ControllerAdvice@ResponseBodypublic class WebExceptionHandle &#123; /** * 400 - Bad Request */ @ResponseStatus(HttpStatus.BAD_REQUEST) @ExceptionHandler(HttpMessageNotReadableException.class) public ValueObject handleHttpMessageNotReadableException( HttpMessageNotReadableException e) &#123; return new ValueObject("could_not_read_json"); &#125; /** * 405 - Method Not Allowed */ @ResponseStatus(HttpStatus.METHOD_NOT_ALLOWED) @ExceptionHandler(HttpRequestMethodNotSupportedException.class) public ValueObject handleHttpRequestMethodNotSupportedException(HttpRequestMethodNotSupportedException e) &#123; return new ValueObject("request_method_not_supported"); &#125; /** * 415 - Unsupported Media Type */ @ResponseStatus(HttpStatus.UNSUPPORTED_MEDIA_TYPE) @ExceptionHandler(HttpMediaTypeNotSupportedException.class) public ValueObject handleHttpMediaTypeNotSupportedException(Exception e) &#123; return new ValueObject("content_type_not_supported"); &#125; /** * 500 - Internal Server Error */ @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) @ExceptionHandler(Exception.class) public ValueObject handleException(Exception e) &#123; if (e instanceof IOException) &#123; return new ValueObject("IOException:" + e.getMessage()); &#125; e.printStackTrace(); return new ValueObject("server_error"); &#125;&#125; 7.3HandlerExceptionResolverHandlerExceptionResolver接口的实现类可以解析控制器映射和执行过程中抛出的异常. 1234567891011@Component public class GlobalExceptionHandler implements HandlerExceptionResolver&#123; public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) &#123; System.out.println("This is exception handler method!"); return null; &#125; &#125; Spring MVC 为了我们提供了HandlerExceptionResolver接口的两个实现类, ResponseStatusExceptionResolver ExceptionHandlerExceptionResolver 1234567891011121314@ResponseStatus(value=HttpStatus.NOT_FOUND, reason="Products no found")public class ProductNotFoundException extends RuntimeException&#123; private static final long serialVersionUID = -694354952032299587L; private String productId; public ProductNotFoundException(String productId) &#123; this.productId = productId; &#125; public String getProductId() &#123; return productId; &#125;&#125; 在@controller类添加 12345678910@ExceptionHandler(ProductNotFoundException.class)public ModelAndView handleError(HttpServletRequest req, ProductNotFoundException exception) &#123; ModelAndView mav = new ModelAndView(); mav.addObject("invalidProductId",exception.getProductId()); mav.addObject("exception", exception); mav.addObject("url",req.getRequestURL()+"?"+req.getQueryString()); mav.setViewName("productNotFound"); return mav;&#125; 优先级排序 @ExceptionHandler&gt;@ControllerAdvice + @ ExceptionHandler&gt;HandlerExceptionResolver 8.SpringMVC乱码问题 页面的几种编码属性 123pageEncoding=&quot;UTF-8&quot; jsp页面编码，jsp文件本身的编码contentType=&quot;text/html; charset=UTF-8&quot; web页面显示的编码，jsp页面输出流在浏览器中显示的编码&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; web界面的输入编码，就是输入框中输入的字体编码。 get提交方式乱码处理（一般是由于tomcat引起的，所以需要设置tomcat的编码） 改tomcat中server.xml中的port=“8080”，加上一个 URIEncoding=”utf-8” post提交方式乱码处理/返回中文乱码（在web.xml中设置编码过滤器） 12345678910111213141516171819&lt;!-- 解决工程编码过滤器 --&gt;&lt;filter&gt; &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;UTF-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;forceEncoding&lt;/param-name&gt; &lt;param-value&gt;true&lt;/param-value&gt; &lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt; 1234567@Overrideprotected Filter[] getServletFilters() &#123; CharacterEncodingFilter characterEncodingFilter = new CharacterEncodingFilter(); characterEncodingFilter.setEncoding("UTF-8"); characterEncodingFilter.setForceEncoding(true); return new Filter[]&#123;characterEncodingFilter&#125;;&#125; 9.View Resolvers 和 View Controller9.1View Resolvers1234567891011@Configuration@EnableWebMvcpublic class WebConfig implements WebMvcConfigurer &#123; @Override public void configureViewResolvers(ViewResolverRegistry registry) &#123; // 把model中的属性转换成JSON形式然后返回（鸡肋） registry.enableContentNegotiation(new MappingJackson2JsonView()); registry.jsp(); &#125;&#125; 9.2View Controller如果一些请求不需要进行逻辑处理，只需要直接返回视图，可以使用View Controller 123456789@Configuration@EnableWebMvcpublic class WebConfig implements WebMvcConfigurer &#123; @Override public void addViewControllers(ViewControllerRegistry registry) &#123; registry.addViewController("/").setViewName("home"); &#125;&#125; 提取外部信息123456@Beanpublic MessageSource messageSource() &#123; ResourceBundleMessageSource resource = new ResourceBundleMessageSource(); resource.setBasename("messages"); return resource;&#125; 11.内容协商ContentNegotiating(内容协商),提供了一种机制,可以采用不同的表现形式来表现同一种资源. ContentNegotiationConfigurer 创建ContentNegotiationManager并为它提供ContentNegotiationStrategy实例 ContentNegotiationStrategy：函数式接口，用于解析请求媒体类型（media type） ContentNegotiationManager 提供用于确定请求的媒体类型的方法（通过ContentNegotiationStrategy） 提供查找媒体类型对应的文件扩展名的方法（通过MediaTypeFileExtensionResolver） ContentNegotiatingViewResolver 解析请求的文件名或Accept的内容找出合适的View 它本身不会进行解析工作，而是调用其它view resolver进行解析 ContentNegotiationConfigurer：配置从哪里读取信息，然后判断以什么样的形式返回数据 ContentNegotiatingViewResolver：根据返回数据的形式找到合适的view 请求方有三种方式告诉SpringMVC返回的资源应该采用何种表现形式（例如Json、XML等等）。 URL后缀 12http://myserver/myapp/accounts/list.htmlhttp://myserver/myapp/accounts/list.xls URL参数 12http://myserver/myapp/accounts/list?format=htmlhttp://myserver/myapp/accounts/list?format=xls 请求头的Accept 1Accept: text/html,application/xhtml+xml,application/xml; 11.1URL后缀默认情况下，Spring框架可以通过检测URL后缀来去确定响应消息体的内容类型的。 接下来通过Java和XML文件配置两种方法来对这种以后缀作为内容协商方法的策略进行设置。 12345678@Overridepublic void configureContentNegotiation(final ContentNegotiationConfigurer configurer) &#123; configurer .favorPathExtension(true) // 使用后缀方式进行内容协商 .favorParameter(false) // 禁用使用URL查询方式进行内容协商 .ignoreAcceptHeader(true) // 忽略请求头部的Accept字段 .defaultContentType(MediaType.APPLICATION_JSON); // 设置默认响应消息体内容类型为JSON&#125; 12345678&lt;bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean"&gt; &lt;property name="favorPathExtension" value="true" /&gt; &lt;property name="favorParameter" value="false"/&gt; &lt;property name="ignoreAcceptHeader" value="true" /&gt; &lt;property name="defaultContentType" value="application/json" /&gt; &lt;property name="useJaf" value="false" /&gt;&lt;/bean&gt; 11.2方法查询1234567891011public void configureContentNegotiation(final ContentNegotiationConfigurer configurer) &#123; configurer .favorPathExtension(false) .favorParameter(true) .parameterName("format") // 内容类型查询参数为format .ignoreAcceptHeader(true) .useJaf(false) .defaultContentType(MediaType.APPLICATION_JSON) .mediaType("xml", MediaType.APPLICATION_XML) // 设定不同参数值所对应的内容类型 .mediaType("json", MediaType.APPLICATION_JSON); // 设定不同参数值所对应的内容类型&#125; 12345678910111213141516&lt;bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean"&gt; &lt;property name="favorPathExtension" value="false" /&gt; &lt;property name="favorParameter" value="true"/&gt; &lt;property name="parameterName" value="format"/&gt; &lt;property name="ignoreAcceptHeader" value="true" /&gt; &lt;property name="defaultContentType" value="application/json" /&gt; &lt;property name="useJaf" value="false" /&gt; &lt;property name="mediaTypes"&gt; &lt;map&gt; &lt;entry key="json" value="application/json" /&gt; &lt;entry key="xml" value="application/xml" /&gt; &lt;/map&gt; &lt;/property&gt;&lt;/bean&gt; 11.3头部Accept字段12345678@Overridepublic void configureContentNegotiation(final ContentNegotiationConfigurer configurer) &#123; configurer .favorPathExtension(false) .favorParameter(false) .ignoreAcceptHeader(false) .defaultContentType(MediaType.APPLICATION_JSON);&#125; 12345678&lt;bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean"&gt; &lt;property name="favorPathExtension" value="false" /&gt; &lt;property name="favorParameter" value="false"/&gt; &lt;property name="ignoreAcceptHeader" value="false" /&gt; &lt;property name="defaultContentType" value="application/json" /&gt; &lt;property name="useJaf" value="false" /&gt;&lt;/bean&gt; 如果三者都用则先检查URL后缀，再检查URL参数，最后检查Accept 注册Bean 123456789101112131415161718192021222324252627@Beanpublic MappingJackson2JsonView jsonView() &#123; MappingJackson2JsonView jsonView = new MappingJackson2JsonView(); jsonView.setPrettyPrint(true); return jsonView;&#125;@Beanpublic MarshallingView xmlView() &#123; Jaxb2Marshaller marshaller = new Jaxb2Marshaller(); marshaller.setClassesToBeBound(Product.class); MarshallingView xmlView = new MarshallingView(marshaller); return xmlView;&#125;@Beanpublic ViewResolver contentNegotiatingViewResolver(ContentNegotiationManager manager) &#123; ContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver(); resolver.setContentNegotiationManager(manager); ArrayList&lt;View&gt; views = new ArrayList&lt;&gt;(); views.add(jsonView()); views.add(xmlView()); resolver.setDefaultViews(views); return resolver;&#125; 国际化123456@Beanpublic LocaleResolver localeResolver()&#123; SessionLocaleResolver resolver = new SessionLocaleResolver(); resolver.setDefaultLocale(new Locale("en")); return resolver;&#125; 123456@Overridepublic void addInterceptors(InterceptorRegistry registry) &#123; LocaleChangeInterceptor localeChangeInterceptor = new LocaleChangeInterceptor(); localeChangeInterceptor.setParamName("language"); registry.addInterceptor(localeChangeInterceptor);&#125;]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>SpringMVC</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SpringMVC配置]]></title>
    <url>%2F2018%2F08%2F10%2FJava%2FJavaWeb%2F5.%E8%A1%A8%E7%A4%BA%E5%B1%82%2FSpringMVC%2FSpring%20MVC%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[Spring MVC配置1.SpringMVC初始化配置1.1编写配置类Java配置 123456@Configuration@EnableWebMvc // 导入DelegatingWebMvcConfiguration配置类@ComponentScan(basePackages ="com.hdr.webstore")public class WebAppConfig implements WebMvcConfigurer &#123; &#125; @EnableWebMvc使用该注解修饰Configuration类可从WebMvcConfigurationSupport导入Spring MVC配置 12345@Retention(value=RUNTIME)@Target(value=TYPE)@Documented@Import(value=DelegatingWebMvcConfiguration.class)public @interface EnableWebMvc 如果想修改导入的配置，实现WebMvcConfigurer接口并覆盖单个方法 1234567891011121314@Configuration@EnableWebMvc@ComponentScan(basePackageClasses = MyConfiguration.class)public class MyConfiguration implements WebMvcConfigurer &#123; @Override public void addFormatters(FormatterRegistry formatterRegistry) &#123; formatterRegistry.addConverter(new MyConverter()); &#125; @Override public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123; converters.add(new MyHttpMessageConverter()); &#125;&#125; 注意： 只有一个@Configuration类可以使用@EnableWebMvc注解修饰，不过WebMvcConfigurer可以被多个配置类实现 DelegatingWebMvcConfigurationWebMvcConfigurationSupport的子类，通过检测和委派WebMvcConfigurer类型的Bean来修改WebMvcConfigurationSupport提供的配置。 WebMvcConfigurationSupport这是MVC提供Java配置的主要类 WebMvcConfigurer通过使用@EnableWebMvc修饰@Configuration类,从而引入了DelegatingWebMvcConfiguration配置类 DelegatingWebMvcConfiguration继承了WebMvcConfigurationSupport 如果要对继承的方法进行重写,那就要@EnableWebMvc修饰的@Configuration类继承WebMvcConfigurer接口,然后重写接口方法. XML配置 12345678910&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"&gt; &lt;!--告诉Spring MVC 我们需要用到它提供的注解--&gt; &lt;mvc:annotation-driven/&gt; &lt;!--告诉Spring MVC 大概在哪里会找到使用了@Controller注解的Java类--&gt; &lt;context:component-scan base-package="com.packt.webstore"/&gt;&lt;/beans&gt; 1.2注册DispathcerServletJava配置 123456789101112131415161718public class WebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer &#123; @Override protected Class&lt;?&gt;[] getRootConfigClasses() &#123; return null; &#125; @Override protected Class&lt;?&gt;[] getServletConfigClasses() &#123; return new Class[]&#123;WebAppConfig.class&#125;; &#125; @Override protected String[] getServletMappings() &#123; return new String[]&#123;"/"&#125;; &#125;&#125; SpringServletContainerInitializerSpringServletContainerInitializer通过使用WebApplicationInitializer这个SPI来提供基于代码的方式来配置servlet容器 工作原理 在容器启动阶段，如果在类路径发现了spring-web模块，那么容器会加载、实例化这个类，然后再调用它的onStartup方法。 WebApplicationInitializerWebApplicationInitializer是个SPI（Service Provider Interface 服务提供接口）目的是提供接口，让第三方（服务厂商或扩展框架开发者）提供自定义实现的服务功能。 该接口的实现类提供以编程的方式配置ServletContext Servlet 3.0容器启动SpringServletContainerInitializer类，通过SpringServletContainerInitializer类检测WebApplicationInitializer接口的实现类，然后配置ServletContext WebApplicationInitializer接口的实现类 AbstractContextLoaderInitializer 在servlet context中注册ContextLoaderListener 子类只需要实现createRootApplicationContext() AbstractDispatcherServletInitializer 在servlet context中注册DispatcherServlet，推荐使用下面那个实现类 AbstractAnnotationConfigDispatcherServletInitializer 注册DispatcherServlet以及使用基于Java的Spring配置 子类需要实现getRootConfigClasses()和getServletConfigClasses() XML配置 12345678910111213141516&lt;servlet&gt; &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt; &lt;servlet-class&gt; org.springframework.web.servlet.DispatcherServlet &lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;/WEB-INF/spring/dispatcher-config.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 2.模型据我目前的理解，SpringMVC有两种工作方式。 一种是接收请求，然后直接把处理后的数据，返回给请求方，例如常见的返回json数据。 另一种就是接收请求，然后把处理后的数据，交给视图使用，最后返回渲染好的页面给请求方。 模型（Model）负责携带要被视图使用的数据。 在SpirngMVC中有两个类与模型有关，一个是ModelAndView，一个是Model， 前者不仅携带数据，还说明了数据交由哪个视图处理。后者仅携带数据。 1234567// 使用ModelAndView@GetMappingpublic ModelAndView Welcome(ModelAndView mv) &#123; mv.addObject("name", "hdr"); mv.setViewName("welcome"); return mv;&#125; 123456// 使用Model@GetMappingpublic String Welcome(Model model) &#123; model.addAttribute("name","hdr"); return "welcome";&#125; 3.视图解析器与视图视图解析器（view resolver）、视图（view） 视图是渲染数据模型展示给用户的用户的组件，在SpringMVC中分了逻辑视图和非逻辑视图两种。 逻辑视图需要是视图解析器进行进一步的定位，例如上面的例子，我们只是返回了一个字符串，就能找到对应的jsp文件，这是视图解析器起的作用。 工作流程 请求来到dispatcher servlet，dispatcher servlet把请求发送给相应的Controller进行处理。 Controller对Model中的对象进行更新，然后返回view的名称给Controller。 Controller使用view resolver找出view的实际路径，然后把model传递给view。 view使用Model提供的数据进行渲染，然后把页面传递给dispatcher servlet dispatcher servlet 把页面返回给用户。 具体原理还有待学习 3.1JSP12345678@Beanpublic InternalResourceViewResolver getInternalResourceViewResolver()&#123; InternalResourceViewResolver resolver = new InternalResourceViewResolver(); resolver.setViewClass(JstlView.class); resolver.setPrefix("/WEB-INF/jsp/"); resolver.setSuffix(".jsp"); return resolver;&#125; 3.2ThymeLeaf由于Servlet默认提供了对JSP文件进行渲染的功能，所以使用JSP我们只需要注册JSP视图解析器即可。 但是对于ThymeLeaf，我们不仅要注册视图解析器，还要注册模板引擎和模板解析器。 123456789101112131415161718192021222324252627282930@Autowiredprivate ApplicationContext applicationContext;@Beanpublic SpringResourceTemplateResolver templateResolver()&#123; SpringResourceTemplateResolver templateResolver = new SpringResourceTemplateResolver(); templateResolver.setApplicationContext(this.applicationContext); templateResolver.setPrefix("/WEB-INF/templates/"); templateResolver.setSuffix(".html"); templateResolver.setCharacterEncoding("utf-8"); templateResolver.setTemplateMode(TemplateMode.HTML); templateResolver.setCacheable(true); return templateResolver;&#125;@Beanpublic SpringTemplateEngine templateEngine()&#123; SpringTemplateEngine templateEngine = new SpringTemplateEngine(); templateEngine.setTemplateResolver(templateResolver()); templateEngine.setEnableSpringELCompiler(true); return templateEngine;&#125;// 注册视图解析器@Beanpublic ThymeleafViewResolver viewResolver()&#123; ThymeleafViewResolver viewResolver = new ThymeleafViewResolver(); viewResolver.setTemplateEngine(templateEngine()); viewResolver.setCharacterEncoding("utf-8"); return viewResolver;&#125; 3.3JSON导入依赖 12345&lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;version&gt;2.9.6&lt;/version&gt;&lt;/dependency&gt; 使用 12345678910111213141516// 返回Json数据@GetMapping@ResponseBodypublic User getUser()&#123; User user = new User(); user.setName("黄大仁"); user.setEmail("13143754797@163.com"); return user;&#125;// 获取Json数据@PostMapping@ResponseBodypublic User getUser(@RequestBody User user)&#123; return user;&#125; JsonView 了解一下 4.过滤器与拦截器 filter 拦截器 4.1 过滤器4.1拦截器HandlerInterceptor接口负责拦截功能,它具有以下三个方法 preHandle: 在请求到达Controller之前调用 postHandle: Controller方法执行完毕后调用 afterCompletion:整个请求流程走完后再调用 4.1.1拦截器的设置所有的拦截器都要实现HandlerInterceptor接口，该接口具有三个方法 12345678910111213default boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)throws Exception &#123; return true;// 返回true则，则把请求交给处理器处理，否则结束所有流程&#125;// 处理器处理后，视图处理前default void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,@Nullable ModelAndView modelAndView) throws Exception &#123;&#125;// 视图处理后default void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) throws Exception &#123;&#125; 4.1.2注册拦截器123456@Overridepublic void addInterceptors(InterceptorRegistry registry) &#123; registry .addInterceptor(new CheckLogin()) .addPathPatterns("/category");&#125; 4.1.3多个拦截器的顺序先注册的，先被执行 5.文件上传5.1SpringMVC对文件上传的支持首先，DispatchServlet使用适配器模式，将HttpServletRequest接口对象转换成MultipartHttpServletRequest对象。 MultipartHttpServletRequest接口扩展了HttpServletRequest接口，定义了一些操作文件的方法，我们通过这些方法实现对上传文件的操作。 5.2MultipartResolverMultipartResolver接口用于把HttpServletRequest转换成MultipartHttpServletRequest。 MultipartResolver接口具有两个实现类，分别是StandardServletMultipartResolver和CommonsMultipartResolver，Spring推荐使用前者，因为那是Servlet API提供的包。 12345// 在配置类添加multipartResolver Bean@Beanpublic StandardServletMultipartResolver multipartResolver()&#123; return new StandardServletMultipartResolver();&#125; 12345678@Overrideprotected Filter[] getServletFilters() &#123; CharacterEncodingFilter cef = new CharacterEncodingFilter(); cef.setEncoding("UTF-8"); cef.setForceEncoding(true); return new Filter[]&#123;new HiddenHttpMethodFilter(), cef&#125;; // 注意：这个HiddenHttpMethodFilter是必须的&#125; 123456789101112@Controller@RequestMapping("/")public class UploadController &#123; @PostMapping @ResponseBody public void upload(@RequestParam(value = "file") Part file) throws IOException &#123; String path = "/home/hdr/Desktop/"; String fileName = "beauty.jpg"; file.write(path + fileName); &#125;&#125; 6.静态资源的访问一般我们使用SpringMVC，都会把DispatcherServlet请求映射配置为”/”，那么Web容器会把所有请求都交给Spring MVC的DispatchServlet处理，那么就会有这么一个问题，在请求静态资源的时候，Spring MVC会将它们当成一个普通请求处理，因此找不到对应处理器将导致错误。如何在DispatcherServlet请求映射配置为”/”的情况下，让Spring框架能够捕获所有URL的请求，同时又将静态资源的请求转由Web容器处理呢？有两种方法 默认Servlet启动DefaultServletHttpRequestHandler，设置默认Servlet的URL映射为/ **，并且相对于其他URL映射具有最低优先级，也就是把DispatchServlet处理不了的请求，转发给容器的默认Servlet处理。 123456@Overridepublic void configureDefaultServletHandling( DefaultServletHandlerConfigurer configurer) &#123; configurer.enable();&#125;// 层层匹配,真不知性能如何 对应XML配置 1&lt;mvc:default-servlet-handler/&gt; 资源处理器12345678910111213// 在配置类重写该方法@Overridepublic void addResourceHandlers(ResourceHandlerRegistry registry) &#123; registry .addResourceHandler("/img_in_res/**") .addResourceLocations("classpath:/img_in_res/"); registry .addResourceHandler("/img_in_web/**") .addResourceLocations("/img_in_web/"); registry .addResourceHandler("/img_in_web_inf/**") .addResourceLocations("/WEB-INF/img_in_web_inf/");&#125; 注意：理解项目打包后的结构关系非常重要。 日期类型参数的处理一般返回时间戳 异常处理自定义页面 根据请求方，返回相映的结果 数据绑定 data bindingSprng MVC提供了WebDataBinder类,用来从HttpServletRequest对象中提取相关的数据,然后组装到相应的对象中,并进行验证. 我们可以在@Controller中使用@InitBinder注解配置数据绑定的行为. 123456@InitBinderpublic void initialiseBinder(WebDataBinder binder) &#123; binder.setAllowedFields("productId","name","unitPrice","description", "manufacturer","category","unitsInStock", "condition");&#125; 12345678910public StringprocessAddNewProductForm(@ModelAttribute("newProduct")Product productToBeAdded, BindingResult result)&#123; // 添加 BindingResult String[] suppressedFields = result.getSuppressedFields(); if (suppressedFields.length &gt; 0) &#123; throw new RuntimeException("Attempting to bind disallowed fields:"+ StringUtils.arrayToCommaDelimitedString(suppressedFields)); &#125; // 更多详情请查看@InitBinder 和 BindingResult&#125; Bean Validation提取外部信息123456@Beanpublic MessageSource messageSource() &#123; ResourceBundleMessageSource resource = new ResourceBundleMessageSource(); resource.setBasename("messages"); return resource;&#125; multipart request1234567@Beanpublic CommonsMultipartResolver multipartResolver() &#123; CommonsMultipartResolver resolver=new CommonsMultipartResolver(); resolver.setDefaultEncoding("utf-8"); resolver.setMaxUploadSize(10240000); return resolver;&#125; 依赖 12commons-fileuploadcommons-io 12345678910111213141516public String processAddNewProductForm( @ModelAttribute("newProduct") Product newProduct, BindingResult result, HttpServletRequest request) &#123; MultipartFile productImage = newProduct.getProductImage(); String rootDirectory = request.getSession().getServletContext().getRealPath("/"); if (productImage!=null &amp;&amp; !productImage.isEmpty()) &#123; try &#123; productImage.transferTo(new File( rootDirectory + "resources\\images" + newProduct.getProductId() + ".png") ); &#125; catch (Exception e) &#123; throw new RuntimeException("Product Image saving failed", e); &#125;&#125; ContentNegotiatingViewResolverContentNegotiating(内容协商),提供了一种机制,可以采用不同的表现形式来表现同一种资源. 表现形式例如JSP JSON XML. 依赖 123spring-oxmacksonmapper-asljackson-databind 注册Bean 12345678910111213141516171819202122232425@Beanpublic MappingJackson2JsonView jsonView() &#123; MappingJackson2JsonView jsonView = new MappingJackson2JsonView(); jsonView.setPrettyPrint(true); return jsonView;&#125;@Beanpublic MarshallingView xmlView() &#123; Jaxb2Marshaller marshaller = new Jaxb2Marshaller(); marshaller.setClassesToBeBound(Product.class); MarshallingView xmlView = new MarshallingView(marshaller); return xmlView;&#125;@Beanpublic ViewResolver contentNegotiatingViewResolver(ContentNegotiationManager manager) &#123; ContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver(); resolver.setContentNegotiationManager(manager); ArrayList&lt;View&gt; views = new ArrayList&lt;&gt;(); views.add(jsonView()); views.add(xmlView()); resolver.setDefaultViews(views); return resolver;&#125; HandlerExceptionResolverHandlerExceptionResolver接口的实现类可以解析控制器映射和执行过程中抛出的异常. Spring MVC 为了我们提供了HandlerExceptionResolver接口的两个实现类, ResponseStatusExceptionResolver ExceptionHandlerExceptionResolver 12345@ResponseStatus(value=HttpStatus.NOT_FOUND, reason="No products found under this category")public class NoProductsFoundUnderCategoryException extends RuntimeException&#123; private static final long serialVersionUID = 3935230281455340039L;&#125; 123456789101112public class ProductNotFoundException extends RuntimeException&#123; private static final long serialVersionUID = -694354952032299587L; private String productId; public ProductNotFoundException(String productId) &#123; this.productId = productId; &#125; public String getProductId() &#123; return productId; &#125;&#125; 在@controller类添加 12345678910@ExceptionHandler(ProductNotFoundException.class)public ModelAndView handleError(HttpServletRequest req, ProductNotFoundException exception) &#123; ModelAndView mav = new ModelAndView(); mav.addObject("invalidProductId",exception.getProductId()); mav.addObject("exception", exception); mav.addObject("url",req.getRequestURL()+"?"+req.getQueryString()); mav.setViewName("productNotFound"); return mav;&#125; 国际化123456@Beanpublic LocaleResolver localeResolver()&#123; SessionLocaleResolver resolver = new SessionLocaleResolver(); resolver.setDefaultLocale(new Locale("en")); return resolver;&#125; 123456@Overridepublic void addInterceptors(InterceptorRegistry registry) &#123; LocaleChangeInterceptor localeChangeInterceptor = new LocaleChangeInterceptor(); localeChangeInterceptor.setParamName("language"); registry.addInterceptor(localeChangeInterceptor);&#125; ##]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>SpringMVC</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[URI]]></title>
    <url>%2F2018%2F08%2F06%2FJava%2FJavaWeb%2F5.%E8%A1%A8%E7%A4%BA%E5%B1%82%2FSpringMVC%2F5.URI%E9%93%BE%E6%8E%A5%2F</url>
    <content type="text"><![CDATA[URISpring MVC提供了一种机制，可以使用UriComponentsBuilder和UriComponents来组建并编码URI。 UriCompontsBuilder可以先创建UriComponts，然后UriComponts创建Uri，也可以直接创建Uri UriCompontsBuilderUriCompontsBuilder创建UriCOmponents 12345UriComponents uriComponents = UriComponentsBuilder .fromUriString("http://example.com/hotels/&#123;hotel&#125;") .queryParam("q", "&#123;q&#125;") .encode() .build(); UriComponentsUriComponents创建Uri 1URI uri = uriComponents.expand("Westin", "123").toUri(); 前面的示例可以合并，如下例所示： 123456URI uri = UriComponentsBuilder .fromUriString("http://example.com/hotels/&#123;hotel&#125;") .queryParam("q", "&#123;q&#125;") .encode() .buildAndExpand("Westin", "123") .toUri(); 直接创建 1234URI uri = UriComponentsBuilder .fromUriString("http://example.com/hotels/&#123;hotel&#125;") .queryParam("q", "&#123;q&#125;") .build("Westin", "123"); 您使用完整的URI模板进一步缩短它，如下例所示： 123URI uri = UriComponentsBuilder .fromUriString("http://example.com/hotels/&#123;hotel&#125;?q=&#123;q&#125;") .build("Westin", "123"); URI编码 UriComponentsBuilder#encode(): 先对URI模板进行编码，等URI变量插入时直接对变量进行编码。 UriComponents#encode(): 等URI变量插入后再编码。 这两个选项都使用转义的八位字节替换非ASCII和非法字符。 但是，第一个选项还会替换出现在URI变量中的保留含义的字符。 对于大多数情况，第一个选项可能会给出预期结果，因为它将URI变量视为完全编码的不透明数据，而选项2仅在URI变量故意包含保留字符时才有用。 1234567URI uri = UriComponentsBuilder.fromPath("/hotel list/&#123;city&#125;") .queryParam("q", "&#123;q&#125;") .encode() .buildAndExpand("New York", "foo+bar") .toUri(); // Result is "/hotel%20list/New%20York?q=foo%2Bbar" 123URI uri = UriComponentsBuilder.fromPath("/hotel list/&#123;city&#125;") .queryParam("q", "&#123;q&#125;") .build("New York", "foo+bar") 12URI uri = UriComponentsBuilder.fromPath("/hotel list/&#123;city&#125;?q=&#123;q&#125;") .build("New York", "foo+bar") Relative Servlet Requests您可以使用ServletUriComponentsBuilder创建相对于当前请求的URI，如以下示例所示： 12345678HttpServletRequest request = ...// Re-uses host, scheme, port, path and query string...ServletUriComponentsBuilder ucb = ServletUriComponentsBuilder.fromRequest(request) .replaceQueryParam("accountId", "&#123;id&#125;").build() .expand("123") .encode(); 12ServletUriComponentsBuilder ucb = ServletUriComponentsBuilder.fromContextPath(request) .path("/accounts").build() 12ServletUriComponentsBuilder ucb = ServletUriComponentsBuilder.fromServletMapping(request) .path("/accounts").build() 链接到控制器Spring MVC提供了一种机制来为controller方法提前准备链接。 123456789@Controller@RequestMapping("/hotels/&#123;hotel&#125;")public class BookingController &#123; @GetMapping("/bookings/&#123;booking&#125;") public ModelAndView getBooking(@PathVariable Long booking) &#123; // ... &#125;&#125; 您可以通过按名称引用方法来准备链接，如以下示例所示： 1234UriComponents uriComponents = MvcUriComponentsBuilder .fromMethodName(BookingController.class, "getBooking", 21).buildAndExpand(42);URI uri = uriComponents.encode().toUri(); 在前面的示例中，我们提供了实际的方法参数值（在本例中，long值：21），用作路径变量并插入到URL中。 此外，我们提供值42来填充任何剩余的URI变量，例如从类型级请求映射继承的hotel变量。 如果方法有更多参数，我们可以为URL不需要的参数提供null。 通常，只有@PathVariable和@RequestParam参数与构造URL相关。 还有其他方法可以使用MvcUriComponentsBuilder。 例如，您可以使用类似于通过代理进行模拟测试的技术，以避免按名称引用控制器方法，如以下示例所示（该示例假定静态导入MvcUriComponentsBuilder.on）： 1234UriComponents uriComponents = MvcUriComponentsBuilder .fromMethodCall(on(BookingController.class).getBooking(21)).buildAndExpand(42);URI uri = uriComponents.encode().toUri(); Links in Views在Thymeleaf，FreeMarker或JSP等视图中，您可以通过引用每个请求映射的隐式或显式指定名称来构建指向带注释控制器的链接。 12345@RequestMapping("/people/&#123;id&#125;/addresses")public class PersonAddressController &#123; @RequestMapping("/&#123;country&#125;") public HttpEntity getAddress(@PathVariable String country) &#123; ... &#125;]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>SpringMVC</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Controller]]></title>
    <url>%2F2018%2F08%2F04%2FJava%2FJavaWeb%2F5.%E8%A1%A8%E7%A4%BA%E5%B1%82%2FSpringMVC%2F4.Controllers%2F</url>
    <content type="text"><![CDATA[控制器 ControllersSpring MVC 提供了@Controller和@RestController注解来实现请求映射,请求输入,异常处理等等. 123456789@Controllerpublic class HelloController &#123; @GetMapping("/hello") public String handle(Model model) &#123; model.addAttribute("message", "Hello World!"); return "index"; &#125;&#125; 上面这个例子,handle接收一个Model然后返回的View的名称,还有更多内容,我们接下来会讲. 声明控制器@Controller @RestController 是一个由@Controller和@ResponseBody组合而成的注解. AOP ProxiesIn some cases, you many need to decorate a controller with an AOP proxy at runtime. One example is if you choose to have @Transactional annotations directly on the controller. When this is the case, for controllers specifically, we recommend using class-based proxying. This is typically the default choice with controllers. However, if a controller must implement an interface that is not a Spring Context callback (such as InitializingBean, *Aware, and others), you may need to explicitly configure class-based proxying. For example, with &lt;tx:annotation-driven/&gt;, you can change to &lt;tx:annotation-driven proxy-target-class=&quot;true&quot;/&gt;. 请求映射 @RequestMapping @GetMapping @PostMapping @PutMapping @DeleteMapping @PatchMapping URL 匹配模式 ? 匹配单个字符 * 匹配路径块的零到多个字符 ** 匹配整个路径零到多个字符 语法{varName：regex}声明一个URI变量，其正则表达式的语法为{varName：regex}。 例如，给定URL“/spring-web-3.0.5 .jar”，以下方法提取名称，版本和文件扩展名： 1234@GetMapping("/&#123;name:[a-z-]+&#125;-&#123;version:\\d\\.\\d\\.\\d&#125;&#123;ext:\\.[a-z]+&#125;")public void handle(@PathVariable String version, @PathVariable String ext) &#123; // ...&#125; URI路径模式还可以嵌入$ {…}占位符，这些占位符在启动时通过对本地，系统，环境和其他属性源使用PropertyPlaceHolderConfigurer来解析。 例如，您可以使用它来根据某些外部配置参数化基本URL。 Pattern Comparison当多个模式与URL匹配时，必须对它们进行比较以找到最佳匹配。 这是通过使用AntPathMatcher.getPatternComparator（String path）来完成的，它会查找更具体的模式。 如果URI变量的数量较少且单个通配符计为1且双通配符计为2，则模式的特定性较低。给定相等的分数，选择较长的模式。 给定相同的分数和长度，选择具有比通配符更多的URI变量的模式。 默认映射模式（/ ）从评分中排除，并始终排在最后。 此外，前缀模式（例如/ public / ）被认为不具有不具有双通配符的其他模式的特定性。 有关完整的详细信息，请参阅AntPathMatcher中的AntPatternComparator，并记住您可以自定义PathMatcher实现。 请参阅配置部分中的路径匹配。 后缀匹配默认情况下，Spring MVC执行.后缀模式匹配，以便映射到/ person的控制器也隐式映射到/person.*。然后使用文件扩展名来解释用于响应的请求内容类型（即，而不是Accept标头） - 例如，/ person.pdf，/person.xml等。 当浏览器用于发送难以一致解释的Accept标头时，必须以这种方式使用文件扩展名。目前，这不再是必需品，使用Accept标头应该是首选。 随着时间的推移，文件扩展名的使用已经证明有多种方式存在问题。当使用URI变量，路径参数和URI编码进行覆盖时，它可能会导致歧义。有关基于URL的授权和安全性的推理（有关更多详细信息，请参阅下一节）也变得更加困难。 要完全禁用文件扩展名，必须同时设置以下两项： useSuffixPatternMatching（false），请参阅PathMatchConfigurer favorPathExtension（false），请参阅ContentNeogiationConfigurer 基于URL的内容协商仍然有用（例如，在浏览器中键入URL时）。为此，我们建议使用基于查询参数的策略来避免文件扩展名带来的大多数问题。或者，如果必须使用文件扩展名，请考虑通过ContentNeogiationConfigurer的mediaTypes属性将它们限制为显式注册的扩展名列表。 Suffix Match and RFDConsumable Media Types您可以根据请求的Content-Type缩小请求映射范围，如以下示例所示： 1234@PostMapping(path = "/pets", consumes = "application/json") public void addPet(@RequestBody Pet pet) &#123; // ...&#125; Producible Media Types您可以根据Accept请求标头和控制器方法生成的内容类型列表来缩小请求映射，如以下示例所示： 12345@GetMapping(path = "/pets/&#123;petId&#125;", produces = "application/json;charset=UTF-8") @ResponseBodypublic Pet getPet(@PathVariable String petId) &#123; // ...&#125; accept 和 content-Type区别accept表示 客服端（浏览器）支持的类型，也是希望服务器响应发送回来的的数据类型。 例如：Accept：text/xml; ，也就是希望服务器响应发送回来的是xml文本格式的内容 区别： 1.Accept属于请求头， Content-Type属于实体头。 Http报头分为通用报头，请求报头，响应报头和实体报头。 请求方的http报头结构：通用报头|请求报头|实体报头 响应方的http报头结构：通用报头|响应报头|实体报头 2.Accept代表发送端（客户端）希望接受的数据类型。 比如：Accept：text/xml; 代表客户端希望接受的数据类型是xml类型 Content-Type代表发送端（客户端|服务器）发送的实体数据的数据类型。 比如：Content-Type：text/html; 代表发送端发送的数据格式是html。 二者合起来， Accept:text/xml； Content-Type:text/html 即代表客户端希望接受的数据类型是xml格式，本次客户端请求发送的数据的数据格式是html。 Parameters, headers您可以根据请求参数条件缩小请求映射。 您可以测试是否存在请求参数（myParam），缺少一个（！myParam）或特定值（myParam = myValue）。 以下示例显示如何测试特定值： 1234@GetMapping(path = "/pets/&#123;petId&#125;", params = "myParam=myValue") public void findPet(@PathVariable String petId) &#123; // ...&#125; 1234@GetMapping(path = "/pets", headers = "myHeader=myValue") public void findPet(@PathVariable String petId) &#123; // ...&#125; You can match Content-Type and Accept with the headers condition, but it is better to use consumes and produces instead. HTTP HEAD, OPTIONS@GetMapping（和@RequestMapping（method = HttpMethod.GET））透明地支持HTTP HEAD以进行请求映射。控制器方法无需更改。应用于javax.servlet.http.HttpServlet的响应包装器确保将Content-Length头设置为写入的字节数（不实际写入响应）。 @GetMapping（和@RequestMapping（method = HttpMethod.GET））被隐式映射到并支持HTTP HEAD。处理HTTP HEAD请求就像它是HTTP GET一样，除了编写字节数而不是写入主体，并设置Content-Length头。 默认情况下，通过将Allow响应头设置为所有具有匹配URL模式的@RequestMapping方法中列出的HTTP方法列表来处理HTTP OPTIONS。 对于没有HTTP方法声明的@RequestMapping，Allow标头设置为GET，HEAD，POST，PUT，PATCH，DELETE，OPTIONS。控制器方法应始终声明支持的HTTP方法（例如，通过使用特定于HTTP方法的变体：@ GetMapping，@ PostMapping等）。 您可以将@RequestMapping方法显式映射到HTTP HEAD和HTTP OPTIONS，但在常见情况下这不是必需的。 自定义注解注册处理方法控制器里面@RequestMapping注解修饰的方法就是处理方法，她们用来处理请求，所以叫做处理方法。 @RequestMapping修饰的方法具有灵活的签名，可以从一系列受支持的控制器方法参数和返回值中进行选择。 方法参数 controller 方法参数 描述 WebRequest, NativeWebRequest 无需直接使用Servlet API即可访问请求参数以及请求和会话属性。 javax.servlet.ServletRequest, javax.servlet.ServletResponse 选择任何特定的请求或响应类型 - 例如，ServletRequest，HttpServletRequest或Spring的MultipartRequest，MultipartHttpServletRequest。 更多内容 https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-arguments （个人猜测，Controller也是Bean，那就方法参数其实就是可以给她注入的依赖，让她更好的完成工作） 返回值下表描述了支持的控制器方法返回值。 所有返回值都支持反应类型。 具体请看这个 类型转换如果参数声明为String以外的其他参数，则表示基于String的请求输入的某些带注释的控制器方法参数（例如@ RequestParam，@ RequestHeader，@ PathVariable，@ MatrixVariable和@CookieValue）可能需要进行类型转换。 对于此类情况，将根据配置的转换器自动应用类型转换。 默认情况下，支持简单类型（int，long，Date和其他）。 您可以通过WebDataBinder自定义类型转换（请参阅使用DataBinder）或使用FormattingConversionService注册Formatters。 请参见Spring Field Formatting。 路径变量 @PathVariable123456789101112131415// 修饰方法@GetMapping("/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;")public Pet findPet(@PathVariable Long ownerId, @PathVariable Long petId) &#123; // ...&#125;// 修饰类@Controller@RequestMapping("/owners/&#123;ownerId&#125;")public class OwnerController &#123; @GetMapping("/pets/&#123;petId&#125;") public Pet findPet(@PathVariable Long ownerId, @PathVariable Long petId) &#123; // ... &#125;&#125; 矩阵变量 @MatrixVariable矩阵变量可以出现在任何路径段中，每个变量用分号分隔，多个值用逗号分隔（例如，/ cars; color = red，green; year = 2012）。 也可以通过重复的变量名称指定多个值（例如，color = red; color = green; color = blue）。 如果URL预计包含矩阵变量，则控制器方法的请求映射必须使用URI变量来屏蔽该变量内容，并确保请求可以成功匹配，而与矩阵变量顺序和存在无关。 以下示例使用矩阵变量： 12345678// GET /pets/42;q=11;r=22@GetMapping("/pets/&#123;petId&#125;")public void findPet(@PathVariable String petId, @MatrixVariable int q) &#123; // petId == 42 // q == 11&#125; 12345678910// GET /owners/42;q=11/pets/21;q=22@GetMapping("/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;")public void findPet( @MatrixVariable(name="q", pathVar="ownerId") int q1, @MatrixVariable(name="q", pathVar="petId") int q2) &#123; // q1 == 11 // q2 == 22&#125; 1234567// GET /pets/42@GetMapping("/pets/&#123;petId&#125;")public void findPet(@MatrixVariable(required=false, defaultValue="1") int q) &#123; // q == 1&#125; 12345678910// GET /owners/42;q=11;r=12/pets/21;q=22;s=23@GetMapping("/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;")public void findPet( @MatrixVariable MultiValueMap&lt;String, String&gt; matrixVars, @MatrixVariable(pathVar="petId") MultiValueMap&lt;String, String&gt; petMatrixVars) &#123; // matrixVars: ["q" : [11,22], "r" : 12, "s" : 23] // petMatrixVars: ["q" : 22, "s" : 23]&#125; 请注意，您需要启用矩阵变量的使用。 在MVC Java配置中，您需要通过路径匹配将removeSemicolonContent = false设置为UrlPathHelper。 在MVC XML命名空间中，您可以设置&lt;mvc：annotation-driven enable-matrix-variables =“true”/&gt;。 12345678910// 开启矩阵变量@Configurationpublic class AppConfig implements WebMvcConfigurer &#123; @Override public void configurePathMatch(PathMatchConfigurer configurer) &#123; UrlPathHelper urlPathHelper = new UrlPathHelper(); urlPathHelper.setRemoveSemicolonContent(false); configurer.setUrlPathHelper(urlPathHelper); &#125;&#125; 请求参数 @RequestParam使用@RequestParam可以把Servlet的请求参数注入到控制器的方法中。 12345678910111213@Controller@RequestMapping("/pets")public class EditPetForm &#123; @GetMapping public String setupForm(@RequestParam("petId") int petId, Model model) &#123; //默认如果请求中没有petId参数则会报错，如果想取消该行为，添加required = false Pet pet = this.clinic.loadPet(petId); model.addAttribute("pet", pet); return "petForm"; &#125;&#125; 请求头 @RequestHeader同上，把请求头信息注入到控制器的处理方法的参数中。 123456@GetMapping("/demo")public void handle( @RequestHeader("Accept-Encoding") String encoding, @RequestHeader("Keep-Alive") long keepAlive) &#123; // ...&#125; 如果该注解修饰的是Map&lt;String, String&gt;, MultiValueMap&lt;String, String&gt;, 或HttpHeaders类型的参数，那么所有的头部信息都会被装进取。 @CookieValue把CookieValue注入到处理方法的参数中。 1234@GetMapping("/demo")public void handle(@CookieValue("JSESSIONID") String cookie) &#123; //...&#125; 会话属性 @SessionAttributes@SessionAttributes把model attribute存储在同一次session的请求中。它是一个类型级别的注解，用于声明特定控制器使用会话属性。 这通常列出模型属性的名称或模型属性的类型，这些属性应该透明地存储在会话中以供后续访问请求使用。 12345@Controller@SessionAttributes("pet")public class EditPetForm &#123; // ...&#125; 在第一个请求中，当名称为pet的模型属性添加到模型中时，它会自动提升并保存在HTTP Servlet会话中。 它保持不变，直到另一个控制器方法使用SessionStatus方法参数来清除存储，如下例所示： 1234567891011121314@Controller@SessionAttributes("pet") public class EditPetForm &#123; @PostMapping("/pets/&#123;id&#125;") public String handle(Pet pet, BindingResult errors, SessionStatus status) &#123; if (errors.hasErrors) &#123; // ... &#125; status.setComplete(); // ... &#125; &#125;&#125; 会话属性 @SessionAttribute（没有S）如果您需要访问全局管理的预先存在的会话属性（即，在控制器外部 - 例如，通过过滤器），则可以对方法参数使用@SessionAttribute注解，如 以下示例显示： 1234@RequestMapping("/")public String handle(@SessionAttribute User user) &#123; // ...&#125; 如果要添加或删除会话属性，请把org.springframework.web.context.request.WebRequest 或javax.servlet.http.HttpSession注入到处理方法的参数中。 模型属性 @ModelAttribute您可以在方法参数上使用@ModelAttribute注解来访问model的属性，如果model不存在则将其实例化。model属性还覆盖了名称与字段名称匹配的HTTP Servlet请求参数的值，它使您不必处理解析和转换单个查询参数和表单字段。 以下示例显示了如何执行此操作： 12@PostMapping("/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;/edit")public String processSubmit(@ModelAttribute Pet pet) &#123; &#125; 上面的Pet实例会按照以下流程进行解析 From the model if already added by using Model. From the HTTP session by using @SessionAttributes. From a URI path variable passed through a Converter (see the next example). From the invocation of a default constructor. From the invocation of a “primary constructor” with arguments that match to Servlet request parameters. Argument names are determined through JavaBeans @ConstructorProperties or through runtime-retained parameter names in the bytecode. 虽然通常使用Model来构造模型，但另一种替代方法是依赖于Converter &lt;String，T&gt;和URI路径变量约定。 在以下示例中，模型属性名称account匹配URI路径变量account，并通过将String字符串编号传递到已注册的Converter &lt;String，Account&gt;来加载帐户： 1234@PutMapping("/accounts/&#123;account&#125;")public String save(@ModelAttribute("account") Account account) &#123; // ...&#125; 获取模型属性实例后，将进行数据绑定。 WebDataBinder类将Servlet请求参数名称（查询参数和表单字段）与目标Object上的字段名称进行匹配。 必要时，在应用类型转换后填充匹配字段。 有关数据绑定（和验证）的更多信息，请参阅 Validation。 有关自定义数据绑定的更多信息，请参阅使用DataBinder。 数据绑定可能导致错误。 默认情况下，会引发BindException。 但是，要在控制器方法中检查此类错误，可以在@ModelAttribute旁边添加一个BindingResult参数，如以下示例所示： 1234567@PostMapping("/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;/edit")public String processSubmit(@ModelAttribute("pet") Pet pet, BindingResult result) &#123; if (result.hasErrors()) &#123; return "petForm"; &#125; // ...&#125; 在某些情况下，您可能希望在没有数据绑定的情况下访问模型属性。 对于这种情况，您可以将模型注入控制器并直接访问它，或者设置@ModelAttribute（binding = false），如下例所示： 123456789101112131415@ModelAttributepublic AccountForm setUpForm() &#123; return new AccountForm();&#125;@ModelAttributepublic Account findAccount(@PathVariable String accountId) &#123; return accountRepository.findOne(accountId);&#125;@PostMapping("update")public String update(@Valid AccountUpdateForm form, BindingResult result, @ModelAttribute(binding=false) Account account) &#123; // ...&#125; 通过添加javax.validation.Valid注解或Spring的@Validated注解（ee Bean验证和Spring验证），您可以在数据绑定后自动应用验证。 以下示例显示了如何执行此操作： 1234567@PostMapping("/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;/edit")public String processSubmit(@Valid @ModelAttribute("pet") Pet pet, BindingResult result) &#123; if (result.hasErrors()) &#123; return "petForm"; &#125; // ...&#125; 请注意，使用@ModelAttribute是可选的（例如，设置其属性）。 默认情况下，任何不是简单值类型的参数（由BeanUtils＃isSimpleProperty确定）并且未被任何其他参数解析器解析的参数都被视为使用@ModelAttribute进行注释。 请求属性 @RequestAttribute与@SessionAttribute类似，您可以使用@RequestAttribute注解来访问先前创建的预先存在的请求属性（例如，通过Servlet过滤器或HandlerInterceptor）： 1234@GetMapping("/")public String handle(@RequestAttribute Client client) &#123; // ...&#125; 重定向属性在重定向URL中，所有模型属性默认视为URI模板变量。在其余属性中，原始类型或集合或基本类型数组的属性会自动附加为查询参数。 如果专门为重定向准备了模型实例，将原始类型属性作为查询参数是个不错的结果。但是，在带注释的控制器中，模型可以包含为渲染目的而添加的其他属性（例如，下拉字段值）。为了避免在URL中出现此类属性的可能性, @ RequestMapping方法可以声明RedirectAttributes类型的参数，并使用它来指定可供RedirectView使用的确切属性。如果方法重定向，则使用RedirectAttributes的内容。否则，使用模型的内容。 RequestMappingHandlerAdapter提供了一个名为ignoreDefaultModelOnRedirect的标志，您可以使用该标志指示如果控制器方法重定向，则永远不应使用默认模型的内容。相反，控制器方法应声明RedirectAttributes类型的属性，如果不这样做，则不应将任何属性传递给RedirectView。 MVC命名空间和MVC Java配置都将此标志设置为false，以保持向后兼容性。但是，对于新应用程序，我们建议将其设置为true。 请注意，在展开重定向URL时，当前请求中的URI模板变量会自动可用，您需要通过Model或RedirectAttributes显式添加它们。以下示例显示如何定义重定向： 12345@PostMapping("/files/&#123;path&#125;")public String upload(...) &#123; // ... return "redirect:files/&#123;path&#125;";&#125; 将数据传递到重定向目标的另一种方法是使用flash属性。 与其他重定向属性不同，Flash属性保存在HTTP会话中（因此，不会出现在URL中）。 有关更多信息，请参阅Flash属性。 Flash属性Flash属性可以让一个请求存储另一个请求要使用的属性。重定向时最常需要这种方法 - 例如，Post-Redirect-Get模式。 Flash重定向（通常在会话中）之前临时保存Flash属性，以便在重定向后使请求可用，并立即删除。 Spring MVC有两个主要的抽象支持flash属性。 FlashMap用于保存Flash属性，而FlashMapManager用于存储，检索和管理FlashMap实例。 Flash属性支持始终处于“打开”状态，无需显式启用。但是，如果不使用，它永远不会导致HTTP会话创建。在每个请求中，都有一个“输入”FlashMap，其中包含从先前请求（如果有）传递的属性，以及一个“输出”FlashMap，其中包含要为后续请求保存的属性。两个FlashMap实例都可以通过RequestContextUtils中的静态方法从Spring MVC中的任何位置访问。 带注释的控制器通常不需要直接使用FlashMap。相反，@ RequestMapping方法可以接受RedirectAttributes类型的参数，并使用它为重定向方案添加flash属性。通过RedirectAttributes添加的Flash属性会自动传播到“输出”FlashMap。同样，在重定向之后，“输入”FlashMap中的属性会自动添加到为目标URL提供服务的控制器的模型中。 Flash属性的概念存在于许多其他Web框架中，并且已经证明有时会暴露于并发问题。 这是因为，根据定义，闪存属性将被存储直到下一个请求。 但是，“下一个”请求可能不是预期的接收者而是另一个异步请求（例如，轮询或资源请求），在这种情况下，过早删除flash属性。 为了减少此类问题的可能性，RedirectView使用目标重定向URL的路径和查询参数自动“标记”FlashMap实例。 反过来，默认的FlashMapManager在查找“输入”FlashMap时将该信息与传入请求进行匹配。 这并不能完全消除并发问题的可能性，但会使用重定向URL中已有的信息大大减少并发问题。 因此，我们建议您主要使用Flash属性进行重定向方案。 Multipart启用MultipartResolver后，将解析具有multipart / form-data的POST请求的内容，并将其作为常规请求参数进行访问。 以下示例访问一个常规表单字段和一个上载文件： 1234567891011121314151617@Controllerpublic class FileUploadController &#123; @PostMapping("/form") public String handleFormUpload(@RequestParam("name") String name, @RequestParam("file") MultipartFile file) &#123; if (!file.isEmpty()) &#123; byte[] bytes = file.getBytes(); // store the bytes somewhere return "redirect:uploadSuccess"; &#125; return "redirect:uploadFailure"; &#125;&#125; 当您使用Servlet 3.0多部分解析时，您也可以使用javax.servlet.http.Part而不是Spring的MultipartFile作为方法参数 您还可以将多部分内容用作绑定到命令对象的数据的一部分。 例如，前面示例中的表单字段和文件可以是表单对象上的字段，如以下示例所示： 123456789101112131415161718192021222324class MyForm &#123; private String name; private MultipartFile file; // ...&#125;@Controllerpublic class FileUploadController &#123; @PostMapping("/form") public String handleFormUpload(MyForm form, BindingResult errors) &#123; if (!form.getFile().isEmpty()) &#123; byte[] bytes = form.getFile().getBytes(); // store the bytes somewhere return "redirect:uploadSuccess"; &#125; return "redirect:uploadFailure"; &#125;&#125; 还可以在RESTful服务方案中从非浏览器客户端提交多部分请求。 以下示例显示了带有JSON的文件： 12345678910111213141516POST /someUrlContent-Type: multipart/mixed--edt7Tfrdusa7r3lNQc79vXuhIIMlatb7PQg7VpContent-Disposition: form-data; name="meta-data"Content-Type: application/json; charset=UTF-8Content-Transfer-Encoding: 8bit&#123; "name": "value"&#125;--edt7Tfrdusa7r3lNQc79vXuhIIMlatb7PQg7VpContent-Disposition: form-data; name="file-data"; filename="file.properties"Content-Type: text/xmlContent-Transfer-Encoding: 8bit... File Data ... 您可以使用@RequestParam作为String访问“元数据”部分，但您可能希望它从JSON反序列化（类似于@RequestBody）。 在使用HttpMessageConverter转换后，使用@RequestPart批注访问多部分： 12345@PostMapping("/")public String handle(@RequestPart("meta-data") MetaData metadata, @RequestPart("file-data") MultipartFile file) &#123; // ...&#125; 您可以将@RequestPart与javax.validation.Valid结合使用，或使用Spring的@Validated注释，这两种注释都会导致应用标准Bean验证。 默认情况下，验证错误会导致MethodArgumentNotValidException，并将其转换为400（BAD_REQUEST）响应。 或者，您可以通过Errors或BindingResult参数在控制器内本地处理验证错误，如以下示例所示： 12345@PostMapping("/")public String handle(@Valid @RequestPart("meta-data") MetaData metadata, BindingResult result) &#123; // ...&#125; @RequestBody您可以使用@RequestBody批注通过HttpMessageConverter将请求主体读取并反序列化为Object。 以下示例使用@RequestBody参数： 1234@PostMapping("/accounts")public void handle(@RequestBody Account account) &#123; // ...&#125; 您可以使用MVC配置的“Message Converters ”选项来配置或自定义消息转换。 您可以将@RequestBody与javax.validation.Valid或Spring的@Validated注释结合使用，这两种注释都会导致应用标准Bean验证。 默认情况下，验证错误会导致MethodArgumentNotValidException，并将其转换为400（BAD_REQUEST）响应。 或者，您可以通过Errors或BindingResult参数在控制器内本地处理验证错误，如以下示例所示： 1234@PostMapping("/accounts")public void handle(@Valid @RequestBody Account account, BindingResult result) &#123; // ...&#125; HttpEntityHttpEntity与使用@RequestBody或多或少相同，但基于公开请求标头和正文的容器对象。 以下清单显示了一个示例： 1234@PostMapping("/accounts")public void handle(HttpEntity&lt;Account&gt; entity) &#123; // ...&#125; @ResponseBody您可以在方法上使用@ResponseBody注解，以通过HttpMessageConverter将返回序列化到响应主体。 以下清单显示了一个示例： 12345@GetMapping("/accounts/&#123;id&#125;")@ResponseBodypublic Account handle() &#123; // ...&#125; 类级别也支持@ResponseBody，在这种情况下，它由所有控制器方法继承。 这是@RestController的效果，它只不过是一个用@Controller和@ResponseBody标记的元注释。 您可以将@ResponseBody与反应类型一起使用。 有关更多详细信息，请参阅异步请求 和Reactive Types。 您可以使用MVC配置的“Message Converters”选项来配置或自定义消息转换。 您可以将@ResponseBody方法与JSON序列化视图结合使用。 有关详细信息，下面会讲。 ResponseEntityResponseEntity与使用@ResponseBody或多或少相同，但基于指定请求标头和正文的容器对象。 以下清单显示了一个示例： 123456@PostMapping("/something")public ResponseEntity&lt;String&gt; handle() &#123; // ... URI location = ... ; return ResponseEntity.created(location).build();&#125; Jackson JSONSpring MVC为Jackson的序列化视图提供内置支持，允许仅渲染Object中所有字段的子集。 要将其与@ResponseBody或ResponseEntity控制器方法一起使用，您可以使用Jackson的@JsonView批注来激活序列化视图类，如以下示例所示： 123456789101112131415161718192021222324252627282930313233343536@RestControllerpublic class UserController &#123; @GetMapping("/user") @JsonView(User.WithoutPasswordView.class) public User getUser() &#123; return new User("eric", "7!jd#h23"); &#125;&#125;public class User &#123; public interface WithoutPasswordView &#123;&#125;; public interface WithPasswordView extends WithoutPasswordView &#123;&#125;; private String username; private String password; public User() &#123; &#125; public User(String username, String password) &#123; this.username = username; this.password = password; &#125; @JsonView(WithoutPasswordView.class) public String getUsername() &#123; return this.username; &#125; @JsonView(WithPasswordView.class) public String getPassword() &#123; return this.password; &#125;&#125; @JsonView允许一组视图类，但每个控制器方法只能指定一个。 如果需要激活多个视图，可以使用复合接口。 对于依赖于视图解析器的控制器，可以将序列化视图类添加到模型中，如以下示例所示： 12345678910@Controllerpublic class UserController extends AbstractController &#123; @GetMapping("/user") public String getUser(Model model) &#123; model.addAttribute("user", new User("eric", "7!jd#h23")); model.addAttribute(JsonView.class.getName(), User.WithoutPasswordView.class); return "userView"; &#125;&#125;]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>SpringMVC</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Controller]]></title>
    <url>%2F2018%2F08%2F04%2FJava%2FJavaWeb%2F5.%E8%A1%A8%E7%A4%BA%E5%B1%82%2FMySpringMVC%2F3.Controllers%2F</url>
    <content type="text"><![CDATA[控制器 ControllersSpring MVC 提供了@Controller和@RestController注解来实现请求映射,请求输入,异常处理等等. 123456789@Controllerpublic class HelloController &#123; @GetMapping("/hello") public String handle(Model model) &#123; model.addAttribute("message", "Hello World!"); return "index"; &#125;&#125; 上面这个例子,handle接收一个Model然后返回的View的名称,还有更多内容,我们接下来会讲. 声明控制器@Controller @RestController 是一个由@Controller和@ResponseBody组合而成的注解. 请求映射 @RequestMapping @GetMapping @PostMapping @PutMapping @DeleteMapping @PatchMapping URL 通配符 ? 匹配单个字符 * 匹配路径块的零到多个字符 ** 匹配整个路径零到多个字符 @PathVariable1234@GetMapping("/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;") public Pet findPet(@PathVariable Long ownerId, @PathVariable Long petId) &#123; // ... &#125; @PathVariable中使用正则表达式 语法{varName：regex}声明一个URI变量，其正则表达式的语法为{varName：regex}。 例如，给定URL“/spring-web-3.0.5 .jar”，以下方法提取名称，版本和文件扩展名： 1234@GetMapping("/&#123;name:[a-z-]+&#125;-&#123;version:\\d\\.\\d\\.\\d&#125;&#123;ext:\\.[a-z]+&#125;")public void handle(@PathVariable String version, @PathVariable String ext) &#123; // ...&#125; URI路径模式还可以嵌入$ {…}占位符 ????????????????????????/ 这些占位符在启动时通过对本地，系统，环境和其他属性源使用PropertyPlaceHolderConfigurer来解析。 后缀匹配默认情况下，Spring MVC执行.*后缀模式匹配，以便映射到/ person的控制器也隐式映射到/person.*。然后使用文件扩展名来解释用于响应的请求内容类型，例如/ person.pdf，/person.xml等。 当浏览器用于发送难以一致解释的Accept标头时，必须以这种方式使用文件扩展名。目前，这不再是必需品，使用Accept标头应该是首选。 随着时间的推移，文件扩展名的使用已经证明有多种方式存在问题。当使用URI变量，路径参数和URI编码进行覆盖时，它可能会导致歧义。有关基于URL的授权和安全性的推理（有关更多详细信息，请参阅下一节）也变得更加困难。 要完全禁用文件扩展名，必须同时设置以下两项： useSuffixPatternMatching（false），请参阅PathMatchConfigurer favorPathExtension（false），请参阅ContentNeogiationConfigurer 基于URL的内容协商仍然有用（例如，在浏览器中键入URL时）。为此，我们建议使用基于查询参数的策略来避免文件扩展名带来的大多数问题。或者，如果必须使用文件扩展名，请考虑通过ContentNeogiationConfigurer的mediaTypes属性将它们限制为显式注册的扩展名列表。 Suffix Match and RFD可接受的媒体类型通过consumes属性说明该处理方法可以接受什么类型的请求，从而缩小请求映射范围，如以下示例所示： 12345@PostMapping(path = "/pets", consumes = "application/json") // 请求头中有Content-Type:application/json 的请求才能被该处理方法处理public void addPet(@RequestBody Pet pet) &#123; // ...&#125; 可生产的媒体类型通过produces属性说明该处理方法可以产生什么类型的响应，从而缩小请求映射范围，如以下示例所示： 123456@GetMapping(path = "/pets/&#123;petId&#125;", produces = "application/json;charset=UTF-8") // 请求头中有accept: application/json 的请求才能被该处理方法处理@ResponseBodypublic Pet getPet(@PathVariable String petId) &#123; // ...&#125; accept 和 content-Type区别accept表示 客服端（浏览器）支持的类型，也是希望服务器响应发送回来的的数据类型。 例如：Accept：text/xml; ，也就是希望服务器响应发送回来的是xml文本格式的内容 区别： 1.Accept属于请求头， Content-Type属于实体头。 Http报头分为通用报头，请求报头，响应报头和实体报头。 请求方的http报头结构：通用报头|请求报头|实体报头 响应方的http报头结构：通用报头|响应报头|实体报头 2.Accept代表发送端（客户端）希望接受的数据类型。 比如：Accept：text/xml; 代表客户端希望接受的数据类型是xml类型 Content-Type代表发送端（客户端|服务器）发送的实体数据的数据类型。 比如：Content-Type：text/html; 代表发送端发送的数据格式是html。 二者合起来， Accept:text/xml； Content-Type:text/html 即代表客户端希望接受的数据类型是xml格式，本次客户端请求发送的数据的数据格式是html。 Parameters, headers您可以根据请求参数条件缩小请求映射。 您可以测试是否存在请求参数（myParam），缺少一个（！myParam）或特定值（myParam = myValue）。 以下示例显示如何测试特定值： 1234@GetMapping(path = "/pets/&#123;petId&#125;", params = "myParam=myValue") public void findPet(@PathVariable String petId) &#123; // ...&#125; 1234@GetMapping(path = "/pets", headers = "myHeader=myValue") public void findPet(@PathVariable String petId) &#123; // ...&#125; You can match Content-Type and Accept with the headers condition, but it is better to use consumes and produces instead. HTTP HEAD, OPTIONS@GetMapping（和@RequestMapping（method = HttpMethod.GET））透明地支持HTTP HEAD以进行请求映射。控制器方法无需更改。应用于javax.servlet.http.HttpServlet的响应包装器确保将Content-Length头设置为写入的字节数（不实际写入响应）。 @GetMapping（和@RequestMapping（method = HttpMethod.GET））被隐式映射到并支持HTTP HEAD。处理HTTP HEAD请求就像它是HTTP GET一样，除了编写字节数而不是写入主体，并设置Content-Length头。 默认情况下，通过将Allow响应头设置为所有具有匹配URL模式的@RequestMapping方法中列出的HTTP方法列表来处理HTTP OPTIONS。 对于没有HTTP方法声明的@RequestMapping，Allow标头设置为GET，HEAD，POST，PUT，PATCH，DELETE，OPTIONS。控制器方法应始终声明支持的HTTP方法（例如，通过使用特定于HTTP方法的变体：@ GetMapping，@ PostMapping等）。 您可以将@RequestMapping方法显式映射到HTTP HEAD和HTTP OPTIONS，但在常见情况下这不是必需的。 处理方法控制器里面@RequestMapping注解修饰的方法就是处理方法，她们用来处理请求，所以叫做处理方法。 @RequestMapping修饰的方法具有灵活的签名，可以从一系列受支持的控制器方法参数和返回值中进行选择。 方法参数 controller 方法参数 描述 WebRequest, NativeWebRequest 无需直接使用Servlet API即可访问请求参数以及请求和会话属性。 javax.servlet.ServletRequest, javax.servlet.ServletResponse 选择任何特定的请求或响应类型 - 例如，ServletRequest，HttpServletRequest或Spring的MultipartRequest，MultipartHttpServletRequest。 更多内容 https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-arguments 返回值下表描述了支持的控制器方法返回值。 所有返回值都支持反应类型。 具体请看这个 类型转换如果参数声明为String以外的其他参数，则表示基于String的请求输入的某些带注释的控制器方法参数（例如@ RequestParam，@ RequestHeader，@ PathVariable，@ MatrixVariable和@CookieValue）可能需要进行类型转换。 对于此类情况，将根据配置的转换器自动应用类型转换。 默认情况下，支持简单类型（int，long，Date和其他）。 您可以通过WebDataBinder自定义类型转换（请参阅使用DataBinder）或使用FormattingConversionService注册Formatters。 请参见Spring Field Formatting。 路径变量 @PathVariable123456789101112131415// 修饰方法@GetMapping("/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;")public Pet findPet(@PathVariable Long ownerId, @PathVariable Long petId) &#123; // ...&#125;// 修饰类@Controller@RequestMapping("/owners/&#123;ownerId&#125;")public class OwnerController &#123; @GetMapping("/pets/&#123;petId&#125;") public Pet findPet(@PathVariable Long ownerId, @PathVariable Long petId) &#123; // ... &#125;&#125; 矩阵变量 @MatrixVariable矩阵变量可以出现在任何路径段中，每个变量用分号分隔，多个值用逗号分隔（例如，/ cars; color = red，green; year = 2012）。 也可以通过重复的变量名称指定多个值（例如，color = red; color = green; color = blue）。 如果URL预计包含矩阵变量，则控制器方法的请求映射必须使用URI变量来屏蔽该变量内容，并确保请求可以成功匹配，而与矩阵变量顺序和存在无关。 以下示例使用矩阵变量： 12345678// GET /pets/42;q=11;r=22@GetMapping("/pets/&#123;petId&#125;")public void findPet(@PathVariable String petId, @MatrixVariable int q) &#123; // petId == 42 // q == 11&#125; 12345678910// GET /owners/42;q=11/pets/21;q=22@GetMapping("/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;")public void findPet( @MatrixVariable(name="q", pathVar="ownerId") int q1, @MatrixVariable(name="q", pathVar="petId") int q2) &#123; // q1 == 11 // q2 == 22&#125; 1234567// GET /pets/42@GetMapping("/pets/&#123;petId&#125;")public void findPet(@MatrixVariable(required=false, defaultValue="1") int q) &#123; // q == 1&#125; 12345678910// GET /owners/42;q=11;r=12/pets/21;q=22;s=23@GetMapping("/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;")public void findPet( @MatrixVariable MultiValueMap&lt;String, String&gt; matrixVars, @MatrixVariable(pathVar="petId") MultiValueMap&lt;String, String&gt; petMatrixVars) &#123; // matrixVars: ["q" : [11,22], "r" : 12, "s" : 23] // petMatrixVars: ["q" : 22, "s" : 23]&#125; 请注意，您需要启用矩阵变量的使用。 在MVC Java配置中，您需要通过路径匹配将removeSemicolonContent = false设置为UrlPathHelper。 在MVC XML命名空间中，您可以设置&lt;mvc：annotation-driven enable-matrix-variables =“true”/&gt;。 12345678910// 开启矩阵变量@Configurationpublic class AppConfig implements WebMvcConfigurer &#123; @Override public void configurePathMatch(PathMatchConfigurer configurer) &#123; UrlPathHelper urlPathHelper = new UrlPathHelper(); urlPathHelper.setRemoveSemicolonContent(false); configurer.setUrlPathHelper(urlPathHelper); &#125;&#125; 请求参数 @RequestParam使用@RequestParam可以把Servlet的请求参数注入到控制器的方法中。 12345678910111213@Controller@RequestMapping("/pets")public class EditPetForm &#123; @GetMapping public String setupForm(@RequestParam("petId") int petId, Model model) &#123; //默认如果请求中没有petId参数则会报错，如果想取消该行为，添加required = false Pet pet = this.clinic.loadPet(petId); model.addAttribute("pet", pet); return "petForm"; &#125;&#125; 请求头 @RequestHeader同上，把请求头信息注入到控制器的处理方法的参数中。 123456@GetMapping("/demo")public void handle( @RequestHeader("Accept-Encoding") String encoding, @RequestHeader("Keep-Alive") long keepAlive) &#123; // ...&#125; 如果该注解修饰的是Map&lt;String, String&gt;, MultiValueMap&lt;String, String&gt;, 或HttpHeaders类型的参数，那么所有的头部信息都会被装进取。 @CookieValue把CookieValue注入到处理方法的参数中。 1234@GetMapping("/demo")public void handle(@CookieValue("JSESSIONID") String cookie) &#123; //...&#125; 会话属性 @SessionAttributes@SessionAttributes把model attribute存储在同一次session的请求中。它是一个类型级别的注解，用于声明特定控制器使用会话属性。 这通常列出模型属性的名称或模型属性的类型，这些属性应该透明地存储在会话中以供后续访问请求使用。 12345@Controller@SessionAttributes("pet")public class EditPetForm &#123; // ...&#125; 在第一个请求中，当名称为pet的模型属性添加到模型中时，它会自动提升并保存在HTTP Servlet会话中。 它保持不变，直到另一个控制器方法使用SessionStatus方法参数来清除存储，如下例所示： 1234567891011121314@Controller@SessionAttributes("pet") public class EditPetForm &#123; @PostMapping("/pets/&#123;id&#125;") public String handle(Pet pet, BindingResult errors, SessionStatus status) &#123; if (errors.hasErrors) &#123; // ... &#125; status.setComplete(); // ... &#125; &#125;&#125; 会话属性 @SessionAttribute（没有S）如果您需要访问全局管理的预先存在的会话属性（即，在控制器外部 - 例如，通过过滤器），则可以对方法参数使用@SessionAttribute注解，如 以下示例显示： 1234@RequestMapping("/")public String handle(@SessionAttribute User user) &#123; // ...&#125; 如果要添加或删除会话属性，请把org.springframework.web.context.request.WebRequest 或javax.servlet.http.HttpSession注入到处理方法的参数中。 模型属性 @ModelAttribute您可以在方法参数上使用@ModelAttribute注解来访问model的属性，如果model不存在则将其实例化。model属性还覆盖了名称与字段名称匹配的HTTP Servlet请求参数的值，它使您不必处理解析和转换单个查询参数和表单字段。 以下示例显示了如何执行此操作： 12@PostMapping("/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;/edit")public String processSubmit(@ModelAttribute Pet pet) &#123; &#125; 上面的Pet实例会按照以下流程进行解析 From the model if already added by using Model. From the HTTP session by using @SessionAttributes. From a URI path variable passed through a Converter (see the next example). From the invocation of a default constructor. From the invocation of a “primary constructor” with arguments that match to Servlet request parameters. Argument names are determined through JavaBeans @ConstructorProperties or through runtime-retained parameter names in the bytecode. 虽然通常使用Model来构造模型，但另一种替代方法是依赖于Converter &lt;String，T&gt;和URI路径变量约定。 在以下示例中，模型属性名称account匹配URI路径变量account，并通过将String字符串编号传递到已注册的Converter &lt;String，Account&gt;来加载帐户： 1234@PutMapping("/accounts/&#123;account&#125;")public String save(@ModelAttribute("account") Account account) &#123; // ...&#125; 获取模型属性实例后，将进行数据绑定。 WebDataBinder类将Servlet请求参数名称（查询参数和表单字段）与目标Object上的字段名称进行匹配。 必要时，在应用类型转换后填充匹配字段。 有关数据绑定（和验证）的更多信息，请参阅 Validation。 有关自定义数据绑定的更多信息，请参阅使用DataBinder。 数据绑定可能导致错误。 默认情况下，会引发BindException。 但是，要在控制器方法中检查此类错误，可以在@ModelAttribute旁边添加一个BindingResult参数，如以下示例所示： 1234567@PostMapping("/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;/edit")public String processSubmit(@ModelAttribute("pet") Pet pet, BindingResult result) &#123; if (result.hasErrors()) &#123; return "petForm"; &#125; // ...&#125; 在某些情况下，您可能希望在没有数据绑定的情况下访问模型属性。 对于这种情况，您可以将模型注入控制器并直接访问它，或者设置@ModelAttribute（binding = false），如下例所示： 123456789101112131415@ModelAttributepublic AccountForm setUpForm() &#123; return new AccountForm();&#125;@ModelAttributepublic Account findAccount(@PathVariable String accountId) &#123; return accountRepository.findOne(accountId);&#125;@PostMapping("update")public String update(@Valid AccountUpdateForm form, BindingResult result, @ModelAttribute(binding=false) Account account) &#123; // ...&#125; 通过添加javax.validation.Valid注解或Spring的@Validated注解（ee Bean验证和Spring验证），您可以在数据绑定后自动应用验证。 以下示例显示了如何执行此操作： 1234567@PostMapping("/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;/edit")public String processSubmit(@Valid @ModelAttribute("pet") Pet pet, BindingResult result) &#123; if (result.hasErrors()) &#123; return "petForm"; &#125; // ...&#125; 请注意，使用@ModelAttribute是可选的（例如，设置其属性）。 默认情况下，任何不是简单值类型的参数（由BeanUtils＃isSimpleProperty确定）并且未被任何其他参数解析器解析的参数都被视为使用@ModelAttribute进行注释。 请求属性 @RequestAttribute与@SessionAttribute类似，您可以使用@RequestAttribute注解来访问先前创建的预先存在的请求属性（例如，通过Servlet过滤器或HandlerInterceptor）： 1234@GetMapping("/")public String handle(@RequestAttribute Client client) &#123; // ...&#125; 重定向属性在重定向URL中，所有模型属性默认视为URI模板变量。在其余属性中，原始类型或集合或基本类型数组的属性会自动附加为查询参数。 如果专门为重定向准备了模型实例，将原始类型属性作为查询参数是个不错的结果。但是，在带注释的控制器中，模型可以包含为渲染目的而添加的其他属性（例如，下拉字段值）。为了避免在URL中出现此类属性的可能性, @ RequestMapping方法可以声明RedirectAttributes类型的参数，并使用它来指定可供RedirectView使用的确切属性。如果方法重定向，则使用RedirectAttributes的内容。否则，使用模型的内容。 RequestMappingHandlerAdapter提供了一个名为ignoreDefaultModelOnRedirect的标志，您可以使用该标志指示如果控制器方法重定向，则永远不应使用默认模型的内容。相反，控制器方法应声明RedirectAttributes类型的属性，如果不这样做，则不应将任何属性传递给RedirectView。 MVC命名空间和MVC Java配置都将此标志设置为false，以保持向后兼容性。但是，对于新应用程序，我们建议将其设置为true。 请注意，在展开重定向URL时，当前请求中的URI模板变量会自动可用，您需要通过Model或RedirectAttributes显式添加它们。以下示例显示如何定义重定向： 12345@PostMapping("/files/&#123;path&#125;")public String upload(...) &#123; // ... return "redirect:files/&#123;path&#125;";&#125; 将数据传递到重定向目标的另一种方法是使用flash属性。 与其他重定向属性不同，Flash属性保存在HTTP会话中（因此，不会出现在URL中）。 有关更多信息，请参阅Flash属性。 Flash属性Flash属性可以让一个请求存储另一个请求要使用的属性。重定向时最常需要这种方法 - 例如，Post-Redirect-Get模式。 Flash重定向（通常在会话中）之前临时保存Flash属性，以便在重定向后使请求可用，并立即删除。 Spring MVC有两个主要的抽象支持flash属性。 FlashMap用于保存Flash属性，而FlashMapManager用于存储，检索和管理FlashMap实例。 Flash属性支持始终处于“打开”状态，无需显式启用。但是，如果不使用，它永远不会导致HTTP会话创建。在每个请求中，都有一个“输入”FlashMap，其中包含从先前请求（如果有）传递的属性，以及一个“输出”FlashMap，其中包含要为后续请求保存的属性。两个FlashMap实例都可以通过RequestContextUtils中的静态方法从Spring MVC中的任何位置访问。 带注释的控制器通常不需要直接使用FlashMap。相反，@ RequestMapping方法可以接受RedirectAttributes类型的参数，并使用它为重定向方案添加flash属性。通过RedirectAttributes添加的Flash属性会自动传播到“输出”FlashMap。同样，在重定向之后，“输入”FlashMap中的属性会自动添加到为目标URL提供服务的控制器的模型中。 Flash属性的概念存在于许多其他Web框架中，并且已经证明有时会暴露于并发问题。 这是因为，根据定义，闪存属性将被存储直到下一个请求。 但是，“下一个”请求可能不是预期的接收者而是另一个异步请求（例如，轮询或资源请求），在这种情况下，过早删除flash属性。 为了减少此类问题的可能性，RedirectView使用目标重定向URL的路径和查询参数自动“标记”FlashMap实例。 反过来，默认的FlashMapManager在查找“输入”FlashMap时将该信息与传入请求进行匹配。 这并不能完全消除并发问题的可能性，但会使用重定向URL中已有的信息大大减少并发问题。 因此，我们建议您主要使用Flash属性进行重定向方案。 Multipart启用MultipartResolver后，将解析具有multipart / form-data的POST请求的内容，并将其作为常规请求参数进行访问。 以下示例访问一个常规表单字段和一个上载文件： 1234567891011121314151617@Controllerpublic class FileUploadController &#123; @PostMapping("/form") public String handleFormUpload(@RequestParam("name") String name, @RequestParam("file") MultipartFile file) &#123; if (!file.isEmpty()) &#123; byte[] bytes = file.getBytes(); // store the bytes somewhere return "redirect:uploadSuccess"; &#125; return "redirect:uploadFailure"; &#125;&#125; 当您使用Servlet 3.0多部分解析时，您也可以使用javax.servlet.http.Part而不是Spring的MultipartFile作为方法参数 您还可以将多部分内容用作绑定到命令对象的数据的一部分。 例如，前面示例中的表单字段和文件可以是表单对象上的字段，如以下示例所示： 123456789101112131415161718192021222324class MyForm &#123; private String name; private MultipartFile file; // ...&#125;@Controllerpublic class FileUploadController &#123; @PostMapping("/form") public String handleFormUpload(MyForm form, BindingResult errors) &#123; if (!form.getFile().isEmpty()) &#123; byte[] bytes = form.getFile().getBytes(); // store the bytes somewhere return "redirect:uploadSuccess"; &#125; return "redirect:uploadFailure"; &#125;&#125; 还可以在RESTful服务方案中从非浏览器客户端提交多部分请求。 以下示例显示了带有JSON的文件： 12345678910111213141516POST /someUrlContent-Type: multipart/mixed--edt7Tfrdusa7r3lNQc79vXuhIIMlatb7PQg7VpContent-Disposition: form-data; name="meta-data"Content-Type: application/json; charset=UTF-8Content-Transfer-Encoding: 8bit&#123; "name": "value"&#125;--edt7Tfrdusa7r3lNQc79vXuhIIMlatb7PQg7VpContent-Disposition: form-data; name="file-data"; filename="file.properties"Content-Type: text/xmlContent-Transfer-Encoding: 8bit... File Data ... 您可以使用@RequestParam作为String访问“元数据”部分，但您可能希望它从JSON反序列化（类似于@RequestBody）。 在使用HttpMessageConverter转换后，使用@RequestPart批注访问多部分： 12345@PostMapping("/")public String handle(@RequestPart("meta-data") MetaData metadata, @RequestPart("file-data") MultipartFile file) &#123; // ...&#125; 您可以将@RequestPart与javax.validation.Valid结合使用，或使用Spring的@Validated注释，这两种注释都会导致应用标准Bean验证。 默认情况下，验证错误会导致MethodArgumentNotValidException，并将其转换为400（BAD_REQUEST）响应。 或者，您可以通过Errors或BindingResult参数在控制器内本地处理验证错误，如以下示例所示： 12345@PostMapping("/")public String handle(@Valid @RequestPart("meta-data") MetaData metadata, BindingResult result) &#123; // ...&#125; @RequestBody您可以使用@RequestBody批注通过HttpMessageConverter将请求主体读取并反序列化为Object。 以下示例使用@RequestBody参数： 1234@PostMapping("/accounts")public void handle(@RequestBody Account account) &#123; // ...&#125; 您可以使用MVC配置的“Message Converters ”选项来配置或自定义消息转换。 您可以将@RequestBody与javax.validation.Valid或Spring的@Validated注释结合使用，这两种注释都会导致应用标准Bean验证。 默认情况下，验证错误会导致MethodArgumentNotValidException，并将其转换为400（BAD_REQUEST）响应。 或者，您可以通过Errors或BindingResult参数在控制器内本地处理验证错误，如以下示例所示： 1234@PostMapping("/accounts")public void handle(@Valid @RequestBody Account account, BindingResult result) &#123; // ...&#125; HttpEntityHttpEntity与使用@RequestBody或多或少相同，但基于公开请求标头和正文的容器对象。 以下清单显示了一个示例： 1234@PostMapping("/accounts")public void handle(HttpEntity&lt;Account&gt; entity) &#123; // ...&#125; @ResponseBody您可以在方法上使用@ResponseBody注解，以通过HttpMessageConverter将返回序列化到响应主体。 以下清单显示了一个示例： 12345@GetMapping("/accounts/&#123;id&#125;")@ResponseBodypublic Account handle() &#123; // ...&#125; 类级别也支持@ResponseBody，在这种情况下，它由所有控制器方法继承。 这是@RestController的效果，它只不过是一个用@Controller和@ResponseBody标记的元注释。 您可以将@ResponseBody与反应类型一起使用。 有关更多详细信息，请参阅异步请求 和Reactive Types。 您可以使用MVC配置的“Message Converters”选项来配置或自定义消息转换。 您可以将@ResponseBody方法与JSON序列化视图结合使用。 有关详细信息，下面会讲。 ResponseEntityResponseEntity与使用@ResponseBody或多或少相同，但基于指定请求标头和正文的容器对象。 以下清单显示了一个示例： 123456@PostMapping("/something")public ResponseEntity&lt;String&gt; handle() &#123; // ... URI location = ... ; return ResponseEntity.created(location).build();&#125; Jackson JSONSpring MVC为Jackson的序列化视图提供内置支持，允许仅渲染Object中所有字段的子集。 要将其与@ResponseBody或ResponseEntity控制器方法一起使用，您可以使用Jackson的@JsonView批注来激活序列化视图类，如以下示例所示： 123456789101112131415161718192021222324252627282930313233343536@RestControllerpublic class UserController &#123; @GetMapping("/user") @JsonView(User.WithoutPasswordView.class) public User getUser() &#123; return new User("eric", "7!jd#h23"); &#125;&#125;public class User &#123; public interface WithoutPasswordView &#123;&#125;; public interface WithPasswordView extends WithoutPasswordView &#123;&#125;; private String username; private String password; public User() &#123; &#125; public User(String username, String password) &#123; this.username = username; this.password = password; &#125; @JsonView(WithoutPasswordView.class) public String getUsername() &#123; return this.username; &#125; @JsonView(WithPasswordView.class) public String getPassword() &#123; return this.password; &#125;&#125; @JsonView允许一组视图类，但每个控制器方法只能指定一个。 如果需要激活多个视图，可以使用复合接口。 对于依赖于视图解析器的控制器，可以将序列化视图类添加到模型中，如以下示例所示： 12345678910@Controllerpublic class UserController extends AbstractController &#123; @GetMapping("/user") public String getUser(Model model) &#123; model.addAttribute("user", new User("eric", "7!jd#h23")); model.addAttribute(JsonView.class.getName(), User.WithoutPasswordView.class); return "userView"; &#125;&#125;]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>SpringMVC</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Filters]]></title>
    <url>%2F2018%2F08%2F03%2FJava%2FJavaWeb%2F5.%E8%A1%A8%E7%A4%BA%E5%B1%82%2FSpringMVC%2F3.Filters%2F</url>
    <content type="text"><![CDATA[FiltersSpring MVC 模块提供了以下有用过滤器. Form Data Forwarded Headers Shallow ETag CORS Form Data浏览器只能通过HTTP GET或HTTP POST提交表单数据，但非浏览器客户端也可以使用HTTP PUT，PATCH和DELETE。 Servlet API要求ServletRequest.getParameter *（）方法仅支持HTTP POST的表单字段访问。 spring-web模块提供FormContentFilter来拦截HTTP PUT，PATCH和DELETE请求，内容类型为application / x-www-form-urlencoded，从请求正文中读取表单数据，并包装ServletRequest以使通过ServletRequest.getParameter *（）系列方法提供表单数据。 Forwarded Headers当请求通过代理（例如负载平衡器）时，主机，端口和方案可能会发生变化，这使得从客户端角度创建指向正确主机，端口和方案的链接成为一项挑战。 RFC 7239定义了代理可以用来提供有关原始请求的信息的转发HTTP头。还有其他非标准头文件，包括X-Forwarded-Host，X-Forwarded-Port，X-Forwarded-Proto，X-Forwarded-Ssl和X-Forwarded-Prefix。 ForwardedHeaderFilter是一个Servlet过滤器，它根据Forwarded标头修改请求的主机，端口和方案，然后删除这些标头。 转发标头存在安全注意事项，因为应用程序无法知道标头是由代理按预期添加还是由恶意客户端添加。这就是为什么应该将信任边界的代理配置为删除来自外部的不受信任的转发标头。您还可以使用removeOnly = true配置ForwardedHeaderFilter，在这种情况下，它会删除但不使用标头。 Shallow ETagShallowEtagHeaderFilter过滤器通过缓存写入响应的内容并从中计算MD5哈希来创建“浅”ETag。 客户端下次发送时，它会执行相同操作，但它也会将计算值与If-None-Match请求标头进行比较，如果两者相等，则返回304（NOT_MODIFIED）。 此策略可以节省网络带宽，但不能节省CPU，因为必须为每个请求计算完整响应。 前面描述的控制器级别的其他策略可以避免计算。 请参阅HTTP缓存。 此过滤器具有writeWeakETag参数，该参数将过滤器配置为写入弱ETag，类似于以下内容：W /“02a2d595e6ed9a0b24f027f2b63b134d6”（如RFC 7232第2.3节中所定义）。 CORSSpring MVC通过控制器上的注释为CORS配置提供细粒度的支持。 但是，当与Spring Security一起使用时，我们建议依赖于必须在Spring Security的过滤器链之前指定的内置CorsFilter。 完全不知道在说什么]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>SpringMVC</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SpringMVC]]></title>
    <url>%2F2018%2F08%2F01%2FJava%2FJavaWeb%2F5.%E8%A1%A8%E7%A4%BA%E5%B1%82%2FSpringMVC%2F2.DispatcherServlet%2F</url>
    <content type="text"><![CDATA[Spring MVC与许多Web框架一样,Spring MVC也是根据前端控制器模式而设计的。 通过一个中央Servlet,DispatcherServlet,接受请求,然后根据请求信息调用相应的组件处理请求，再由DispatcherServlet把响应发送给请求端。 Spring MVC 工作流程 DispatcherServletDispatcherServlet用于接受请求,然后根据请求信息调用相应的组件处理请求，再由DispatcherServlet把响应发送给请求端。 注册DispatcherServletDispatcherServlet与任何Servlet一样，需要使用Java配置或web.xml根据Servlet规范进行声明和映射。 反过来，DispatcherServlet使用Spring配置来发现请求映射，视图解析，异常处理等所需的委托组件。 下面是基于Java配置注册和初始化DispatcherServlet的例子。 Servlet容器会自动检测此类。 Spring MVC 配置类 1234567891011121314151617181920@Configuration@EnableWebMvc@ComponentScan(basePackages ="com.hdr.webstore")public class WebAppConfig implements WebMvcConfigurer &#123; @Override public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) &#123; configurer.enable(); &#125; @Bean public InternalResourceViewResolver getInternalResourceViewResolver()&#123; InternalResourceViewResolver resolver = new InternalResourceViewResolver(); resolver.setViewClass(JstlView.class); resolver.setPrefix("/WEB-INF/jsp/"); resolver.setSuffix(".jsp"); return resolver; &#125;&#125; 注册Servlet 12345678910111213141516public class WebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer &#123; @Override protected Class&lt;?&gt;[] getRootConfigClasses() &#123; return null; &#125; @Override protected Class&lt;?&gt;[] getServletConfigClasses() &#123; return new Class[]&#123;WebAppConfig.class&#125;; &#125; @Override protected String[] getServletMappings() &#123; return new String[]&#123;"/"&#125;; &#125;&#125; 处理请求的组件DispatcherServlet委派的用来处理请求的组件有 HandlerMapping 根据请求的Url 查找Handler Handler 有可能是一个 HandlerMethod（封装了 Controller 的方法）对象，也有可能是一个 Controller 对象、 HttpRequestHandler 对象或 Servlet 对象，而这个 Handler 具体是什么对象，也是与所使用的 HandlerMapping 实现类有关。 HandlerAdapter 执行handler，这是适配器模式的应用，通过扩展适配器可以支持更多类型的handler。 HandlerExceptionResolver 异常的解决方案，可能将它们映射到处理程序，HTML错误视图或其他目标。 ViewResolver 将从handler返回的基于字符串的视图名称解析为用于呈现给响应的实际View。 LocaleResolver, LocaleContextResolver 解析客户端正在使用的区域设置以及可能的时区，以便能够提供国际化服务。 ThemeResolver 解决Web应用程序可以使用的主题 - 例如，提供个性化布局。 MultipartResolver 在一些multipart解析库的帮助下，解析multipart请求（例如，浏览器表单文件上载）的抽象。 FlashMapManager 存储和检索“输入”和“输出”FlashMap，可用于将属性从一个请求传递到另一个请求，通常是用作重定向。 处理器映射 HandlerMapping我们知道DispatcherServlet根据request mapping(请求映射)把request分发到handler method(处理方法)进行处理. 为了对请求进行映射,DispatcherServlet需要用到HandlerMapping接口的实现类,从而获知哪个handler可以处理该请求. HandlerMapping接口只有一个方法 12HandlerExceutionChain getHandler(HttpServletRequest request);// 根据请求返回其handler Spring MVC提供了许多HandlerMapping的实现类,其中RequestMappingHandlerMapping类就是用来@RequestMapping注解的. 还记得我们用@EnableWebMvc注解修饰我们的配置类吗?其中一个作用就是在容器中创建和注册RequestMappingHandlerMapping Bean Java中的SPI机制 处理器适配器 HandlerAdapter每个handler都必须实现的接口，用来处理请求。此接口让DispatcherServlet可以无限的扩展。 DispatcherServlet通过此接口访问所有已安装的处理程序，这意味着它不包含特定于任何处理程序类型的代码。 请注意，handler可以是Object类型。 这是为了使其他框架的handlers能够与此框架集成，而无需自定义编码，以及允许不遵循任何特定Java接口的注释驱动的handler对象。 此接口不适用于应用程序开发人员。 它适用于想要开发自己的Web工作流程的handlers。 注意：HandlerAdapter实现者可以实现Ordered接口，以便能够指定DispatcherServlet应用的排序顺序（从而指定优先级）。 非有序实例被视为最低优先级。 拦截器 Interceptor所有HandlerMapping的实现都支持handler拦截器，当您要将特定功能应用于某些请求时（例如，检查主体），这些拦截器很有用。 拦截器必须使用org.springframework.web.servlet包中的HandlerInterceptor实现三种方法，这些方法应该提供足够的灵活性来执行各种预处理和后处理： preHandle(..) — before the actual handler is executed postHandle(..) — after the handler is executed afterCompletion(..) — after the complete request has finished preHandle方法返回一个布尔值。 您可以使用此方法来中断或继续执行链的处理。 当此方法返回true时，处理程序执行链将继续; 当它返回false时，DispatcherServlet假定拦截器本身已处理请求（例如，呈现了适当的视图），并且不继续执行执行链中的其他拦截器和实际处理程序。 请注意，postHandle对于@ResponseBody和ResponseEntity方法不太有用，对于这些方法，在HandlerAdapter中和postHandle之前编写和提交响应。 这意味着对响应进行任何更改都太晚了，例如添加额外的标头。 对于此类方案，您可以实现ResponseBodyAdvice并将其声明为Controller Advice bean或直接在RequestMappingHandlerAdapter上进行配置。 异常 Exceptions如果在请求映射期间发生异常或从请求处理程序（如@Controller）抛出异常，DispatcherServlet将委托给HandlerExceptionResolver bean链以解决异常并提供备用处理。 下表列出了可用的HandlerExceptionResolver实现： SimpleMappingExceptionResolver DefaultHandlerExceptionResolver ResponseStatusExceptionResolver ExceptionHandlerExceptionResolver Chain of resolvers只需在Spring配置中声明多个HandlerExceptionResolver bean并根据需要设置其顺序属性，就可以形成异常解析器链。 order属性越高，异常解析器定位的越晚。 HandlerExceptionResolver 可以返回以下内容 ModelAndView that points to an error view. Empty ModelAndView if the exception was handled within the resolver. null if the exception remains unresolved, for subsequent resolvers to try; and if the exception remains at the end, it is allowed to bubble up to the Servlet container. Container error page如果出现了错误并且错误没有得多解决,则Servlet容器可能会呈现HTML中的默认错误页面。 要自定义容器的默认错误页面，可以在web.xml中声明错误页面映射： 123&lt;error-page&gt; &lt;location&gt;/error&lt;/location&gt;&lt;/error-page&gt; 鉴于上述情况，当异常冒泡或响应具有错误状态时，Servlet容器会在容器内对配置的URL进行ERROR调度（例如“/ error”）。 然后由DispatcherServlet处理，可能将其映射到@Controller，可以实现该控件以返回带有模型的错误视图名称或呈现JSON响应，如下所示： 1234567891011@RestControllerpublic class ErrorController &#123; @RequestMapping(path = "/error") public Map&lt;String, Object&gt; handle(HttpServletRequest request) &#123; Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;(); map.put("status", request.getAttribute("javax.servlet.error.status_code")); map.put("reason", request.getAttribute("javax.servlet.error.message")); return map; &#125;&#125; Servlet API没有提供在Java中创建错误页面映射的方法。 但是，您可以同时使用WebApplicationInitializer和web.xml。 视图解析 View ResolutionSpring MVC定义了ViewResolver和View接口，使您能够在浏览器中呈现模型，而没有绑定特定的视图技术。 ViewResolver提供视图名称和实际视图之间的映射。 View在移交给特定视图技术之前处理数据的制备。 AbstractCachingViewResolver XmlViewResolver ResourceBundleViewResolver UrlBasedViewResolver InternalResourceViewResolver FreeMarkerViewResolver ContentNegotiatingViewResolver Handling您可以通过声明多个视图解析Bean来形成视图解析链，并在必要时通过设置order属性来指定排序。 请记住，order属性越高，视图解析器在链中的位置越晚。 ViewResolver的契约指定它可以返回null以指示无法找到该视图。 但是，对于JSP和InternalResourceViewResolver，确定JSP是否存在的唯一方法是通过RequestDispatcher执行调度。 因此，必须始终将InternalResourceViewResolver配置为视图解析器的整体顺序中的最后一个。 配置视图解析就像在Spring配置中添加ViewResolver bean一样简单。 MVC Config为View Resolvers提供了一个专用的配置API，并且还提供了无逻辑的View控制器，这些控制器对于没有控制器逻辑的HTML模板渲染非常有用。 Redirectingredirect:用在一个视图名称前,会执行重定向操作。UrlBasedViewResolver（和子类）将此识别为需要重定向的指令。 视图名称的其余部分是重定向URL。 Forwardingforward: Content negotiationContentNegotiatingViewResolver本身不解析视图，而是委托给其他视图解析器，并选择类似于客户端请求的表示的视图。 该表示可以从Accept标头或查询参数确定，例如，”/path?format=pdf”. ContentNegotiatingViewResolver通过将请求媒体类型与与其每个ViewResolvers关联的View支持的媒体类型（也称为Content-Type）进行比较，选择适当的View来处理请求。 列表中具有兼容Content-Type的第一个View将表示返回给客户端。 如果ViewResolver链无法提供兼容视图，则将查询通过DefaultViews属性指定的视图列表。 后一个选项适用于单个视图，它可以呈现当前资源的适当表示，而不管逻辑视图名称如何。 Accept标头可以包括通配符，例如text / *，在这种情况下，Content-Type为text / xml的View是兼容的匹配。 语言环境 LocaleSpring的体系结构的大多数部分都支持国际化，就像Spring Web MVC框架一样。 DispatcherServlet使您可以使用客户端的语言环境自动解析消息。 这是通过LocaleResolver对象完成的。 当请求到达时，DispatcherServlet会查找locale resolver，如果找到它，则会尝试使用它来设置区域。 使用RequestContext.getLocale（）方法，您始终可以重新获得由locale resolver解析的locale。 除了自动locale resolver之外，您还可以将拦截器附加到处理程序映射,以在特定情况下更改语言环境，例如，根据请求中的参数。 区域设置解析器和拦截器在org.springframework.web.servlet.i18n包中定义，并以正常方式在应用程序上下文中进行配置。 以下是Spring中包含的语言环境解析器的选择。 TimeZone除了获取客户端的区域设置外，了解其时区通常也很有用。 LocaleContextResolver接口提供LocaleResolver的扩展，允许解析器提供更丰富的LocaleContext，其中可能包含时区信息。 可以使用RequestContext.getTimeZone（）方法获取用户的TimeZone。(如果有的话)时区信息将由Spring的ConversionService注册的Date / Time Converter和Formatter对象自动使用。 Header resolver该locale resolver检查客户端（例如，Web浏览器）发送的请求中的接受语言标头。 通常，此标头字段包含客户端操作系统的区域设置。 请注意，此解析程序不支持时区信息。 Cookie resolver该locale resolver检查客户端上可能存在的Cookie，以查看是否指定了Locale或TimeZone。 如果是，则使用指定的详细信息。使用此locale resolver的属性，您可以指定cookie的名称以及最大年龄。 在下面找到定义CookieLocaleResolver的示例。 12345678&lt;bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver"&gt; &lt;property name="cookieName" value="clientlanguage"/&gt; &lt;!-- in seconds. If set to -1, the cookie is not persisted (deleted when browser shuts down) --&gt; &lt;property name="cookieMaxAge" value="100000"/&gt;&lt;/bean&gt; Property Default Description cookieName classname + LOCALE The name of the cookie cookieMaxAge Servlet container default The maximum time a cookie will stay persistent on the client. If -1 is specified, the cookie will not be persisted; it will only be available until the client shuts down their browser. cookiePath / Limits the visibility of the cookie to a certain part of your site. When cookiePath is specified, the cookie will only be visible to that path and the paths below it. Session resolverSessionLocaleResolver允许您从可能与用户请求关联的会话中检索Locale和TimeZone。 与CookieLocaleResolver相比，此策略将本地选择的区域设置存储在Servlet容器的HttpSession中。 因此，这些设置对于每个会话来说都是临时的，因此在每个会话终止时都会丢失。 请注意，与Spring Session项目等外部会话管理机制没有直接关系。 此SessionLocaleResolver将简单地针对当前的HttpServletRequest评估和修改相应的HttpSession属性。 Locale interceptor您可以通过将LocaleChangeInterceptor添加到其中一个处理程序映射来启用语言环境的更改（请参阅[mvc-handlermapping]）。 它将检测请求中的参数并更改区域设置。 它在LocaleResolver上调用setLocale（），它也存在于上下文中。 以下示例显示对包含名为siteLanguage的参数的所有* .view资源的调用现在将更改区域设置。 因此，例如，对以下URL的请求http://www.sf.net/home.view?siteLanguage=nl会将站点语言更改为荷兰语。 12345678910111213141516171819&lt;bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"&gt; &lt;property name="paramName" value="siteLanguage"/&gt;&lt;/bean&gt;&lt;bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver"/&gt;&lt;bean id="urlMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"&gt; &lt;property name="interceptors"&gt; &lt;list&gt; &lt;ref bean="localeChangeInterceptor"/&gt; &lt;/list&gt; &lt;/property&gt; &lt;property name="mappings"&gt; &lt;value&gt;/**/*.view=someController&lt;/value&gt; &lt;/property&gt;&lt;/bean&gt; 主题 Themes您可以应用Spring Web MVC框架主题来设置应用程序的整体外观，从而增强用户体验。 主题是静态资源的集合，通常是样式表和图像，它们会影响应用程序的视觉样式。 定义主题要在Web应用程序中使用主题，必须设置org.springframework.ui.context.ThemeSource接口的实现。 WebApplicationContext接口扩展了ThemeSource，但将其职责委托给专用实现。 默认情况下，委托将是一个org.springframework.ui.context.support.ResourceBundleThemeSource实现，它从类路径的根目录加载属性文件。 要使用自定义ThemeSource实现或配置ResourceBundleThemeSource的基本名称前缀，您可以在应用程序上下文中使用保留名称themeSource注册bean。 Web应用程序上下文自动检测具有该名称的bean并使用它。 使用ResourceBundleThemeSource时，主题在简单属性文件中定义。 属性文件列出构成主题的资源。 这是一个例子： 12styleSheet=/themes/cool/style.cssbackground=/themes/cool/img/coolBg.jpg 属性的键是从视图代码引用主题元素的名称。 对于JSP，通常使用spring：theme自定义标记执行此操作，该标记与spring：message标记非常相似。 以下JSP片段使用上一示例中定义的主题来自定义外观： 123456789&lt;%@ taglib prefix="spring" uri="http://www.springframework.org/tags"%&gt;&lt;html&gt; &lt;head&gt; &lt;link rel="stylesheet" href="&lt;spring:theme code='styleSheet'/&gt;" type="text/css"/&gt; &lt;/head&gt; &lt;body style="background=&lt;spring:theme code='background'/&gt;"&gt; ... &lt;/body&gt;&lt;/html&gt; 其实这个没什么用 跳过跳过 Multipart解析器org.springframework.web.multipart包中的MultipartResolver是一种用于解析包括文件上载在内的multipart请求的策略。 有一个基于Commons FileUpload的实现，另一个基于Servlet 3.0多部分请求解析。 要启用multipart处理，需要在DispatcherServlet Spring配置中使用名称“multipartResolver”声明MultipartResolver bean。 DispatcherServlet检测到它并将其应用于传入请求。 当收到内容类型为“multipart / form-data”的POST时，解析器解析内容并将当前的HttpServletRequest包装为MultipartHttpServletRequest，以便除了将它们作为请求参数公开之外，还提供对已解析部分的访问。 Apache FileUpload要使用Apache Commons FileUpload，只需使用名称multipartResolver配置CommonsMultipartResolver类型的bean。 当然，您还需要导入commons-fileupload包 Servlet 3.0需要通过Servlet容器配置启用Servlet 3.0 multipart解析： in Java, set a MultipartConfigElement on the Servlet registration. in web.xml, add a &quot;&lt;multipart-config&gt;&quot; section to the servlet declaration. 123456789101112public class AppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer &#123; // ... @Override protected void customizeRegistration(ServletRegistration.Dynamic registration) &#123; // Optionally also set maxFileSize, maxRequestSize, fileSizeThreshold registration.setMultipartConfig(new MultipartConfigElement("/tmp")); &#125;&#125; 一旦Servlet 3.0配置到位，只需添加名为multipartResolver的StandardServletMultipartResolver类型的bean即可。 日志 LoggingSpring MVC设计了一个简洁的 DEBUG级别的日记系统.它侧重于高价值的信息. TRACE级日志记录通常遵循与DEBUG相同的原则，但可以用于调试任何问题。 此外，一些日志消息可能在TRACE与DEBUG中显示不同的详细程度。良好的日志记录来自使用日志的经验。 如果您发现任何不符合既定目标的事件，请告知我们。 Sensitive DataDEBUG和TRACE日志记录可能会记录敏感信息。 这就是默认情况下屏蔽请求参数和标头的原因，并且必须通过DispatcherServlet上的enableLoggingRequestDetails属性显式启用它们的完整日志记录。 1234567891011121314151617181920212223public class MyInitializer extends AbstractAnnotationConfigDispatcherServletInitializer &#123; @Override protected Class&lt;?&gt;[] getRootConfigClasses() &#123; return ... ; &#125; @Override protected Class&lt;?&gt;[] getServletConfigClasses() &#123; return ... ; &#125; @Override protected String[] getServletMappings() &#123; return ... ; &#125; @Override protected void customizeRegistration(Dynamic registration) &#123; registration.setInitParameter("enableLoggingRequestDetails", "true"); &#125;&#125;]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>SpringMVC</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[5.Environments]]></title>
    <url>%2F2018%2F07%2F15%2FJava%2FJavaWeb%2F6.%E4%B8%9A%E5%8A%A1%E5%B1%82%2FSpring%2F5.Resource%E4%B8%8EEnvironment%2F</url>
    <content type="text"><![CDATA[EnvironmentEnvironment接口是profiles和properties的抽象. profiles是仅在给定配置文件处于活动状态时才向容器注册的Bean定义的命名逻辑组。 properties(属性)几乎在所有应用程序中都发挥着重要作用，这些属性可能来自于：属性文件，JVM系统属性，系统环境变量，JNDI，servlet上下文参数，ad-hoc属性对象，Map对象等。 与属性相关的Environment对象的作用是为用户提供方便的服务接口，用于配置和解析属性源。 profilesBean definition peofiels提供了一种机制,可以让容器根据不同环境创建不同的Bean. 最常见的用法就有dataSource的配置,一般在研发时候和正式生产时候,dataSource是不同. 12345678@Beanpublic DataSource dataSource() &#123; return new EmbeddedDatabaseBuilder() .setType(EmbeddedDatabaseType.HSQL) .addScript("my-schema.sql") .addScript("my-test-data.sql") .build();&#125; 12345@Bean(destroyMethod="")public DataSource dataSource() throws Exception &#123; Context ctx = new InitialContext(); return (DataSource) ctx.lookup("java:comp/env/jdbc/datasource");&#125; 现在的问题是如何在不同环境注册不同的Bean. @Profile为了解决上述问题,我们需要使用@Profile注解. 123456789@Bean@Profile("development")public DataSource dataSource() &#123; return new EmbeddedDatabaseBuilder() .setType(EmbeddedDatabaseType.HSQL) .addScript("my-schema.sql") .addScript("my-test-data.sql") .build();&#125; 123456@Bean@Profile("production")public DataSource dataSource() throws Exception &#123; Context ctx = new InitialContext(); return (DataSource) ctx.lookup("java:comp/env/jdbc/datasource");&#125; @Profile不仅可以修饰Bean,也可以修饰@Configuration类 激活Profile现在我们已经配置好Profile了,那么启动的时候,我们就需要告诉Spring,需要使用哪个Profile. 1234AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();ctx.getEnvironment().setActiveProfiles("development");ctx.register(SomeConfig.class, StandaloneDataConfig.class, JndiDataConfig.class);ctx.refresh(); 默认 Profile123456789101112@Configuration@Profile("default")public class DefaultDataConfig &#123; @Bean public DataSource dataSource() &#123; return new EmbeddedDatabaseBuilder() .setType(EmbeddedDatabaseType.HSQL) .addScript("classpath:com/bank/config/sql/schema.sql") .build(); &#125;&#125; PropertySpring的Environment抽象提供了搜索配置源内容的操作. 1234ApplicationContext ctx = new GenericApplicationContext();Environment env = ctx.getEnvironment();boolean containsMyProperty = env.containsProperty("my-property");System.out.println("Does my environment contain the 'my-property' property? " + containsMyProperty); 上面的例子,我们问Spring我们是否定义了my-property属性.为了回答这个问题,Spring会去搜索一系列的PropertySource对象.PropertySource对象就是键值对属性源的简单抽象.Spring的StandardEnvironment配置了两个PropertySource对象,一个是JVM系统属性,一个是系统环境变量. 最重要的是，整个机制是可配置的。 您可能希望将自定义的属性源集成到此搜索中。 为此，请实现并实例化您自己的PropertySource，并将其添加到当前Environment的PropertySource集合中。 以下示例显示了如何执行此操作： 123ConfigurableApplicationContext ctx = new GenericApplicationContext();MutablePropertySources sources = ctx.getEnvironment().getPropertySources();sources.addFirst(new MyPropertySource()); @PropertySource@PropertySource提供了简洁明了的机制往Spring的Evironment中添加PropertySource. 123456789101112131415@Configuration@PropertySource("classpath:/com/myco/app.properties")// 写得多往往会分不清到底用/还是用. 路径的分割当然就是用/啦public class AppConfig &#123; @Autowired Environment env; @Bean public TestBean testBean() &#123; TestBean testBean = new TestBean(); testBean.setName(env.getProperty("testbean.name")); return testBean; &#125;&#125; @PropertySource资源位置中存在的任何$ {…}占位符将根据已针对环境注册的属性源集合进行解析，如以下示例所示： 123456789101112131415@Configuration@PropertySource("classpath:/com/$&#123;my.placeholder:default/path&#125;/app.properties")// 为什么使用 $&#123;&#125;作为表达式? 因为Linux就是如此.public class AppConfig &#123; @Autowired Environment env; @Bean public TestBean testBean() &#123; TestBean testBean = new TestBean(); testBean.setName(env.getProperty("testbean.name")); return testBean; &#125;&#125; ResourcesJava的 java.net.URL类不好用,所以Spring团队编写了获取资源的相关代码. Resource接口Spring的Resource接口旨在成为一个功能更强的接口，用于抽象对低级资源的访问。 以下清单显示了Resource接口定义： 123456789public interface Resource extends InputStreamSource &#123; boolean exists(); // 判断资源是否真实存在 boolean isOpen(); // 判断资源是否已被打开 String getDescription(); // 返回资源的描述. URL getURL() throws IOException; File getFile() throws IOException; String getFilename(); Resource createRelative(String relativePath) throws IOException;&#125; 我们可以看到Resource接口继承了InputStreamSource类 1234public interface InputStreamSource &#123; InputStream getInputStream() throws IOException; // 找到并打开资源，返回InputStream。 希望每次调用都会返回一个新的InputStream。 呼叫者有责任关闭流。&#125; Spring中获取资源的方式一共有以下四种： 通过Resource接口实现类获取资源 通过ResourceLoader接口获取资源 通过ApplicationContext获取资源 将resource注入到bean中的方式获取资源 Resouce接口实现类UrlResouceUrlResource包装java.net.URL，可以通过URL访问对象，例如文件，HTTP目标，FTP目标等。所有URL都具有标准化的字符串表示，以便使用适当的标准化前缀来指示另一个URL类型。这包括文件：用于访问文件系统路径，http：用于通过HTTP协议访问资源，ftp：用于通过FTP访问资源，以及其他。 UrlResource由Java代码通过显式使用UrlResource构造函数创建，但通常在调用采用String参数表示路径的API方法时隐式创建。对于后一种情况，JavaBeans PropertyEditor最终决定要创建哪种类型的Resource。如果路径字符串包含众所周知的（对于它，那么）前缀（例如classpath :)，它会为该前缀创建适当的专用资源。但是，如果它无法识别前缀，则假定该字符串是标准URL字符串并创建UrlResource。 ClassPathResource该类表示从类路径获取的资源。 它使用线程上下文类加载器，给定的类加载器或给定的类来加载资源。 如果类路径资源驻留在文件系统中，而不是驻留在jar中且尚未（通过servlet引擎或任何环境）扩展到文件系统的类路径资源，则此Resource实现支持解析为java.io.File。为了解决这个问题，各种Resource实现始终支持作为java.net.URL的解析。 ClassPathResource是由Java代码通过显式使用ClassPathResource构造函数创建的，但通常在调用采用String参数表示路径的API方法时隐式创建。 对于后一种情况，JavaBeans PropertyEditor在字符串路径上识别特殊前缀classpath：，并在该情况下创建ClassPathResource。 FileSystemResource这是用来处理java.io.File的 ServletContextResource这是用来处理ServletContext资源的Resource实现类,用于解释相关Web应用程序根目录中的相对路径。 它始终支持流访问和URL访问，但只有在扩展Web应用程序存档且资源实际位于文件系统上时才允许java.io.File访问。 它是否在文件系统上扩展或直接从JAR或其他地方（如数据库）访问它实际上取决于Servlet容器. InputStreamResourceInputStreamResource是给定InputStream的Resource实现。 仅在没有适用的特定资源实现时才应使用它。 特别是，在可能的情况下，更喜欢ByteArrayResource或任何基于文件的资源实现。 与其他资源实现相比，这是已打开资源的描述符。 因此，它从isOpen（）返回true。 如果需要将资源描述符保留在某处或者需要多次读取流，请不要使用它。 ByteArrayResource这是给定字节数组的Resource实现。 它为给定的字节数组创建一个ByteArrayInputStream。 它对于从任何给定的字节数组加载内容非常有用，而无需使用一次性使用的InputStreamResource。 资源加载器 ResourceLoaderSpring框架为了更方便的获取资源，尽量弱化程序员对各个Resource接口的实现类的感知，定义了另一个ResourceLoader接口。 123public interface ResourceLoader &#123; Resource getResource(String location);&#125; 该接口的getResource(String location)方法可以用来获取资源。它的DefaultResourceLoader实现类可以适用于所有的环境，可以返回ClassPathResource、UrlResource等。 ResourceLoader在进行加载资源时需要使用前缀来指定需要加载： classpath:表示返回ClasspathResource http:和file:`表示返回UrlResource资源 如果不加前缀则需要根据当前上下文来决定， 所有的ApplicationContext都实现了ResourceLoader,因此可以从中获取资源实例. 如果调用ApplicationContext的getResource()方法指定的位置路径没有特定前缀时，将返回适合该特定应用程序上下文的Resource类型。例如，假设针对ClassPathXmlApplicationContext实例执行了以下代码片段： 1Resource template = ctx.getResource("some/resource/path/myTemplate.txt"); 针对ClassPathXmlApplicationContext，该代码返回ClassPathResource。 如果对FileSystemXmlApplicationContext实例执行相同的方法，它将返回FileSystemResource。 对于WebApplicationContext，它将返回ServletContextResource。 因此，您可以以适合特定应用程序上下文的方式加载资源。 另一方面，您可以通过指定特殊的classpath：前缀来强制使用ClassPathResource，而不管应用程序上下文类型如何，如下例所示： 1Resource template = ctx.getResource("classpath:some/resource/path/myTemplate.txt"); 同样，您可以通过指定任何标准java.net.URL前缀来强制使用UrlResource。 以下对示例使用文件和http前缀： 1Resource template = ctx.getResource("file:///some/resource/path/myTemplate.txt"); 1Resource template = ctx.getResource("http://myhost.com/resource/path/myTemplate.txt"); ResourceLoaderAwareXXXAware接口意味着这个接口的实现类可以感知、获取到XXX，换言之也就是它能提供XXX。 由上述可知ResourceLoaderAware接口的实现类就是用来提供ResourceLoader的。 123public interface ResourceLoaderAware &#123; void setResourceLoader(ResourceLoader resourceLoader);&#125; 当类实现ResourceLoaderAware并部署到应用程序上下文（作为Spring管理的bean）时，它被应用程序上下文识别为ResourceLoaderAware。然后，应用程序上下文调用setResourceLoader（ResourceLoader），将其自身作为参数提供（请记住，Spring中的所有应用程序上下文都实现了ResourceLoader接口）。 由于ApplicationContext是ResourceLoader，因此bean还可以实现ApplicationContextAware接口并直接使用提供的应用程序上下文来加载资源。但是，一般情况下，如果您需要，最好使用专用的ResourceLoader接口。代码只能耦合到资源加载接口（可以被认为是实用程序接口）而不是整个Spring ApplicationContext接口。 从Spring 2.5开始，您可以依赖ResourceLoader的自动装配作为实现ResourceLoaderAware接口的替代方法。 “传统”构造函数和byType自动装配模式（如自动装配协作者中所述）现在能够分别为构造函数参数或setter方法参数提供ResourceLoader类型的依赖性。为了获得更大的灵活性（包括自动装配字段和多参数方法的能力），请考虑使用基于注释的自动装配功能。在这种情况下，只要有问题的字段，构造函数或方法带有@Autowired注释，ResourceLoader就会自动装入一个字段，构造函数参数或方法参数，这些参数需要ResourceLoader类型。有关更多信息，请参阅使用@Autowired。 作为依赖的资源如果bean本身将通过某种动态过程确定并提供资源路径，那么bean使用ResourceLoader接口加载资源可能是有意义的。 例如，考虑加载某种模板，其中所需的特定资源取决于用户的角色。 如果资源是静态的，那么完全消除ResourceLoader接口的使用是有意义的，让bean公开它需要的Resource属性，并期望将它们注入到它中。 然后注入这些属性变得微不足道的是，所有应用程序上下文都注册并使用特殊的JavaBeans PropertyEditor，它可以将String路径转换为Resource对象。 因此，如果myBean具有Resource类型的模板属性，则可以使用该资源的简单字符串进行配置，如以下示例所示： 123&lt;bean id="myBean" class="..."&gt; &lt;property name="template" value="some/resource/path/myTemplate.txt"/&gt;&lt;/bean&gt; 请注意，资源路径没有前缀。 因此，因为应用程序上下文本身将用作ResourceLoader，所以资源本身通过ClassPathResource，FileSystemResource或ServletContextResource加载，具体取决于上下文的确切类型。 如果需要强制使用特定的资源类型，则可以使用前缀。 以下两个示例显示如何强制ClassPathResource和UrlResource（后者用于访问文件系统文件）： 12&lt;property name="template" value="classpath:some/resource/path/myTemplate.txt"&gt;&lt;property name="template" value="file:///some/resource/path/myTemplate.txt"/&gt; application context与resource path本节介绍如何使用资源创建应用程序上下文，包括使用XML的快捷方式，如何使用通配符以及其他详细信息。 构造application context应用程序上下文构造函数（对于特定的应用程序上下文类型）通常将字符串或字符串数组作为资源的位置路径，例如构成上下文定义的XML文件。 当这样的位置路径没有前缀时，从该路径构建并用于加载bean定义的特定资源类型取决于并且适合于特定的应用程序上下文。 例如，请考虑以下示例，该示例创建ClassPathXmlApplicationContext： 1ApplicationContext ctx = new ClassPathXmlApplicationContext("conf/appContext.xml"); 1ApplicationContext ctx = new FileSystemXmlApplicationContext("conf/appContext.xml"); 12ApplicationContext ctx = new FileSystemXmlApplicationContext("classpath:conf/appContext.xml"); 构造ClassPathXmlApplicationContext对象ClassPathXmlApplicationContext提供了许多构造函数，以便于实例化。 基本思想是，您只能提供一个字符串数组，该数组只包含XML文件本身的文件名（没有前导路径信息），并且还提供一个Class。 然后，ClassPathXmlApplicationContext从提供的类派生路径信息。 考虑以下目录结构 12345com/ foo/ services.xml daos.xml MessengerService.class 以下示例显示如何实例化由名为services.xml和daos.xml（位于类路径中）的文件中定义的bean组成的ClassPathXmlApplicationContext实例： 12ApplicationContext ctx = new ClassPathXmlApplicationContext( new String[] &#123;"services.xml", "daos.xml"&#125;, MessengerService.class); See the ClassPathXmlApplicationContext Javadoc for details on the various constructors. Application Context构造器资源路径通配符应用程序上下文构造函数值中的资源路径可以是简单路径（如前所示），每个路径都与目标资源进行一对一映射，或者可以包含特殊的“classpath *：”前缀或内部Ant样式的正则表达式（使用Spring的PathMatcher实用程序进行匹配）。后者都是有效的通配符。 此机制的一个用途是在需要进行组件样式的应用程序组装时。所有组件都可以将上下文定义片段“发布”到一个众所周知的位置路径，并且当使用前缀为classpath *的相同路径创建最终应用程序上下文时，将自动拾取所有组件片段。 请注意，此通配符特定于在应用程序上下文构造函数中使用资源路径（或直接使用PathMatcher实用程序类层次结构时），并在构造时解析。它与资源类型本身无关。您不能使用classpath *：前缀来构造实际的Resource，因为资源一次只指向一个资源。 Ant-style Patterns1234/WEB-INF/*-context.xmlcom/mycompany/**/applicationContext.xmlfile:C:/some/path/*-context.xmlclasspath:com/mycompany/**/applicationContext.xml 当路径位置包含Ant样式模式时，解析程序遵循更复杂的过程来尝试解析通配符。 它为直到最后一个非通配符段的路径生成一个Resource，并从中获取一个URL。 如果此URL不是jar：URL或特定于容器的变体（例如，在WebLogic中为zip：，在WebSphere中为wsjar，等等），则从中获取java.io.File并用于通过遍历以解析通配符 文件系统。 对于jar URL，解析器要么从中获取java.net.JarURLConnection，要么手动解析jar URL，然后遍历jar文件的内容以解析通配符。 如果指定的路径已经是文件URL（隐式，因为基本ResourceLoader是文件系统或显式），则可以保证通配符以完全可移植的方式工作。 如果指定的路径是类路径位置，则解析程序必须通过进行Classloader.getResource（）调用来获取最后一个非通配符路径段URL。由于这只是路径的一个节点（不是最后的文件），实际上它是未定义的（在ClassLoader Javadoc中），在这种情况下确切地返回了什么类型的URL。实际上，它始终是一个java.io.File，表示目录（类路径资源解析为文件系统位置）或某种类型的jar URL（此处类路径资源解析为jar位置）。尽管如此，这种操作还是存在可移植性问题。 如果获取最后一个非通配符段的jar URL，解析器必须能够从中获取java.net.JarURLConnection或手动解析jar URL，以便能够遍历jar的内容并解析通配符。这在大多数环境中都有效，但在其他环境中无效，我们强烈建议您在依赖它之前，在特定环境中彻底测试来自jar的资源的通配符解析。 classpath*: 前缀12ApplicationContext ctx = new ClassPathXmlApplicationContext("classpath*:conf/appContext.xml"); 此特殊前缀指定必须获取与给定名称匹配的所有类路径资源（在内部，这主要通过调ClassLoader.getResources（…））然后合并以形成最终的应用程序上下文定义。 通配符类路径依赖于底层类加载器的getResources（）方法。 由于现在大多数应用程序服务器都提供自己的类加载器实现，因此行为可能会有所不同，尤其是在处理jar文件时。 检查classpath *是否有效的简单测试是使用类加载器从类路径中的jar中加载文件：getClass（）。getClassLoader（）。getResources（“”）。 尝试使用具有相同名称但放在两个不同位置的文件进行此测试。 如果返回了不适当的结果，请检查应用程序服务器文档以获取可能影响类加载器行为的设置。 您还可以将classpath ：前缀与位置路径的其余部分中的PathMatcher模式组合在一起（例如，classpath ：META-INF / * - beans.xml）。 在这种情况下，解析策略非常简单：在最后一个非通配符路径段上使用ClassLoader.getResources（）调用来获取类加载器层次结构中的所有匹配资源，然后从每个资源中获取相同的PathMatcher解析 前面描述的策略用于通配符子路径。 其他关于通配符的注意事项请注意，classpath*：与Ant样式模式结合使用时，只能在模式启动前与至少一个根目录一起可靠地工作，除非实际目标文件驻留在文件系统中。 这意味着类路径*：* xml等模式可能无法从jar文件的根目录中检索文件，而只能从扩展目录的根目录中检索文件。 Spring检索类路径条目的能力来自JDK的ClassLoader.getResources（）方法，该方法仅返回空字符串的文件系统位置（指示搜索的潜在根）。 Spring也会评估URLClassLoader运行时配置和jar文件中的java.class.path清单，但这不能保证导致可移植行为。 如果要搜索的根包在多个类路径位置中可用，则不保证具有类路径的Ant样式模式：资源可以找到匹配的资源。 请考虑以下资源位置示例： 1com/mycompany/package1/service-context.xml 1classpath:com/mycompany/**/service-context.xml 这样的资源可能只在一个位置，但是当使用前面例子之类的路径来尝试解析它时，解析器会处理getResource（“com / mycompany”）;返回的（第一个）URL。 如果此基本包节点存在于多个类加载器位置中，则实际的最终资源可能不存在。 因此，在这种情况下，您应该更喜欢使用classpath*：使用相同的Ant样式模式，该模式搜索包含根包的所有类路径位置。 FileSystemResource注意事项没有附加到FileSystemApplicationContext的FileSystemResource（即，当FileSystemApplicationContext不是实际的ResourceLoader时）会按预期处理绝对路径和相对路径。 相对路径相对于当前工作目录，而绝对路径相对于文件系统的根目录。 但是，出于向后兼容性（历史）的原因，当FileSystemApplicationContext是ResourceLoader时，这会发生变化。 FileSystemApplicationContext强制所有附加的FileSystemResource实例将所有位置路径视为相对路径，无论它们是否以前导斜杠开头。 实际上，这意味着以下示例是等效的： 12ApplicationContext ctx = new FileSystemXmlApplicationContext("conf/context.xml"); 12ApplicationContext ctx = new FileSystemXmlApplicationContext("/conf/context.xml"); 以下示例也是等效的（即使它们有所不同，因为一个案例是相对的而另一个是绝对的）： 12FileSystemXmlApplicationContext ctx = ...;ctx.getResource("some/resource/path/myTemplate.txt"); 12FileSystemXmlApplicationContext ctx = ...;ctx.getResource("/some/resource/path/myTemplate.txt"); 实际上，如果需要真正的绝对文件系统路径，则应避免对FileSystemResource或FileSystemXmlApplicationContext使用绝对路径，并使用file：URL前缀强制使用UrlResource。 以下示例显示了如何执行此操作： 12// actual context type doesn't matter, the Resource will always be UrlResourcectx.getResource("file:///some/resource/path/myTemplate.txt"); 123// force this FileSystemXmlApplicationContext to load its definition via a UrlResourceApplicationContext ctx = new FileSystemXmlApplicationContext("file:///conf/context.xml"); 通配符classpath:与classpath*:classpath:与classpath*:的区别在于，前者只会从第一个classpath中加载，而后者会从所有的classpath中加载 如果要加载的资源，不在当前ClassLoader的路径里，那么用classpath:前缀是找不到的，这种情况下就需要使用classpath*:前缀 另一种情况下，在多个classpath中存在同名资源，都需要加载，那么用classpath:只会加载第一个，这种情况下也需要用classpath*:前缀 可想而知，用classpath:需要遍历所有的classpath，所以加载速度是很慢的，因此，在规划的时候，应该尽可能规划好资源文件所在的路径，尽量避免使用classpath ResourcePatternResolver 123456ResourcePatternResolver resolver = ResourcePatternUtils.getResourcePatternResolver(null);try &#123; Resource[] resources = resolver.getResources("classpath:/**/**DAO.xml");&#125; catch (IOException e) &#123; e.printStackTrace();&#125;]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[4.常用注解]]></title>
    <url>%2F2018%2F07%2F13%2FJava%2FJavaWeb%2F6.%E4%B8%9A%E5%8A%A1%E5%B1%82%2FSpring%2F4.%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[常用注解@Required用于Bean属性的setter方法上,规定在配置的时候,必需配置这个属性。 @Autowired@Autowired 自动装箱,其实就是实现依赖注入. 在启动spring IoC时，容器自动装载了一个AutowiredAnnotationBeanPostProcessor后置处理器，当容器扫描到@Autowied、@Resource或@Inject时，就会在IoC容器自动查找需要的bean，并装配给该对象的属性. 注意事项: 在使用@Autowired时，首先在容器中查询对应类型的Bean. 如果查询结果刚好为一个，就将该bean装配给@Autowired指定的数据 . 如果查询的结果不止一个，那么@Autowired会根据名称来查找. 如果查询的结果不止一个，又想使用特定的Bean,则使用@Qualifier(“BeanId”). 如果查询的结果为空，那么会抛出异常,解决方法时，使用required=false. 使用方法 修饰构造器 12345678910public class MovieRecommender &#123; private final CustomerPreferenceDao customerPreferenceDao; @Autowired public MovieRecommender(CustomerPreferenceDao customerPreferenceDao) &#123; this.customerPreferenceDao = customerPreferenceDao; &#125; // 在Spring Framework4.3以后,如果只有一个构造器,那就无需使用@Autowired注解.&#125; 修饰setter方法 1234567891011public class SimpleMovieLister &#123; private MovieFinder movieFinder; @Autowired public void setMovieFinder(MovieFinder movieFinder) &#123; this.movieFinder = movieFinder; &#125; // ...&#125; 修饰方法 123456789101112131415public class MovieRecommender &#123; private MovieCatalog movieCatalog; private CustomerPreferenceDao customerPreferenceDao; @Autowired public void prepare(MovieCatalog movieCatalog, CustomerPreferenceDao customerPreferenceDao) &#123; this.movieCatalog = movieCatalog; this.customerPreferenceDao = customerPreferenceDao; &#125; // ...&#125; 修饰字段 1234567891011121314public class MovieRecommender &#123; private final CustomerPreferenceDao customerPreferenceDao; @Autowired private MovieCatalog movieCatalog; @Autowired public MovieRecommender(CustomerPreferenceDao customerPreferenceDao) &#123; this.customerPreferenceDao = customerPreferenceDao; &#125; // ...&#125; 从容器中获取指定类型的所有Bean 1234567public class MovieRecommender &#123; @Autowired private MovieCatalog[] movieCatalogs; // 数组&#125; 1234567891011public class MovieRecommender &#123; private Set&lt;MovieCatalog&gt; movieCatalogs; @Autowired public void setMovieCatalogs(Set&lt;MovieCatalog&gt; movieCatalogs) &#123; this.movieCatalogs = movieCatalogs; &#125; // set&#125; 1234567891011public class MovieRecommender &#123; private Map&lt;String, MovieCatalog&gt; movieCatalogs; @Autowired public void setMovieCatalogs(Map&lt;String, MovieCatalog&gt; movieCatalogs) &#123; this.movieCatalogs = movieCatalogs; &#125; // Map&#125; @Primary正如我们前面所说,@Autowired是根据类型匹配的,如果有多个相同类型的Bean,这时候我们就要对选择哪个Bean做出配置了. 123456789101112@Configurationpublic class MovieConfiguration &#123; @Bean @Primary public MovieCatalog firstMovieCatalog() &#123; ... &#125; @Bean public MovieCatalog secondMovieCatalog() &#123; ... &#125; // ...&#125; @Qualifier@Qualifier注解的目的跟@Primary的目的相同,只不过是使用方式不同. 12345678public class MovieRecommender &#123; @Autowired @Qualifier("main") // 匹配类型是MovieCatalog 名字是 main 的Bean private MovieCatalog movieCatalog; // ...&#125; @Resource@Resource并不是Spring框架定义的注解,但是它跟@Autowired有相同的目的,所以在这里一起讲. @Resource注解与@Autowired注解作用非常相似,区别在于 @Autowired默认按照byType方式进行bean匹配，@Resource默认按照byName方式进行bean匹配 @Autowired是Spring的注解，@Resource是J2EE的注解 注意事项 @Resource后面没有任何内容，默认通过name属性去匹配bean，找不到再按type去匹配 指定了name或者type则根据指定的类型去匹配bean 指定了name和type则根据指定的name和type去匹配bean，任何一个不匹配都将报错 @Import1.导入@Configuration类2.导入ImportSelector类该接口的实现类需要实现selectImports方法，该方法返回一个字符串数组，该数组的元素是需要导入到容器中的bean的全类名。 123456public class MyImportSelector implements ImportSelector &#123; @Override public String[] selectImports(AnnotationMetadata importingClassMetadata) &#123; return new String[]&#123;"com.hdr.learn.spring.bean.CustomManager"&#125;; &#125;&#125; 3.导入ImportBeanDefinitionRegistrar类该接口的实现类需要实现registerBeanDefinitions方法，该方法直接把Bean注册进容器。 123456789public class MyImportBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar &#123; @Override public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) &#123; RootBeanDefinition beanDefinition = new RootBeanDefinition(CustomManager.class); registry.registerBeanDefinition("MyCustomManager",beanDefinition); &#125;&#125; 使用FactoryBean注册组件@ImportResource导入XML配置 1@ImportResource("classpath:/com/acme/properties-config.xml") @PropertySource导入properties文件 总结: @Configuration把一个类作为一个IoC容器，它的某个方法头上如果注册了 @Bean，就会作为这个Spring容器中的Bean。 @Scope注解 作用域 @Lazy(true) 表示延迟初始化 @Service用于标注业务层组件、 @Controller用于标注控制层组件（如struts中的action） @Repository用于标注数据访问组件，即DAO组件。 @Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。 @Scope用于指定scope作用域的（用在类上） @PostConstruct用于指定初始化方法（用在方法上） @PreDestory用于指定销毁方法（用在方法上） @DependsOn：定义Bean初始化及销毁时的顺序 @Primary：自动装配时当出现多个Bean候选者时，被注解为@Primary的Bean将作为首选者，否则将抛出异常 @Autowired 默认按类型装配， @Resource默认按名称装配，当找不到与名称匹配的bean才会按类型装配。 @PostConstruct 初始化注解 @PreDestroy 摧毁注解 默认 单例 启动就加载 @Async异步方法调用]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[3.深入Spring Bean]]></title>
    <url>%2F2018%2F07%2F11%2FJava%2FJavaWeb%2F6.%E4%B8%9A%E5%8A%A1%E5%B1%82%2FSpring%2F3.Bean%E7%9A%84%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[1.给容器注入Bean@Configuration与@BeanSpring IoC容器管理一到多个Bean.我们在配置元数据中对Bean进行定义。 @Configuration修饰的类就是配置类，是配置元数据的一种。 1234567@Configurationpublic class AppConfig &#123; @Bean public Student student()&#123; return new Student(); &#125;&#125; 上面的例子创建了一个Bean，Bean的名字是student。 Spring容器内部使用BeanDefinition对象来代表这些Bean。BeanDefinition API Spring容器允许用户在运行期间往容器添加Bean，原理是通过getBeanFactory方法获取容器，然后再调用容器的registerXXX方法。 @ComponentScan与@Component@ComponentScan:扫描组件 1234@ComponentScan（value="com.hdr", includeFilters = &#123; @Filter(type=FilterType.ANNOTATION,classes=&#123;Controller.class&#125;), @Filter(type=FilterType.ASSIGNABLE_TYPE,classes=&#123;BookService.class&#125;)&#125;） @Component:组件 @Controller @Service @Repository上面三种注解都是用来注册Bean的,分表代表表现层的Bean,业务层的Bean,持久层的Bean. 查看源码会发现，这三个注解都是组合了@Component的。 @Conditional制定条件，满足条件的Bean才注入容器 123456789101112@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)@Retention(RetentionPolicy.RUNTIME)@Documentedpublic @interface Conditional &#123; /** * All &#123;@link Condition Conditions&#125; that must &#123;@linkplain Condition#matches match&#125; * in order for the component to be registered. */ Class&lt;? extends Condition&gt;[] value();&#125; 可以看到该注解需要一个Condition类型的数组 1234567891011121314@FunctionalInterfacepublic interface Condition &#123; /** * Determine if the condition matches. * @param context the condition context * @param metadata metadata of the &#123;@link org.springframework.core.type.AnnotationMetadata class&#125; * or &#123;@link org.springframework.core.type.MethodMetadata method&#125; being checked * @return &#123;@code true&#125; if the condition matches and the component can be registered, * or &#123;@code false&#125; to veto the annotated component's registration */ boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata);&#125; @Import1.导入@Configuration类2.导入ImportSelector类该接口的实现类需要实现selectImports方法，该方法返回一个字符串数组，该数组的元素是需要导入到容器中的bean的全类名。 123456public class MyImportSelector implements ImportSelector &#123; @Override public String[] selectImports(AnnotationMetadata importingClassMetadata) &#123; return new String[]&#123;"com.hdr.learn.spring.bean.CustomManager"&#125;; &#125;&#125; 3.导入ImportBeanDefinitionRegistrar类该接口的实现类需要实现registerBeanDefinitions方法，该方法直接把Bean注册进容器。 123456789public class MyImportBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar &#123; @Override public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) &#123; RootBeanDefinition beanDefinition = new RootBeanDefinition(CustomManager.class); registry.registerBeanDefinition("MyCustomManager",beanDefinition); &#125;&#125; FactoryBean把该接口的实现类注册为Bean，从容器中获取到的Bean，不是该Bean，而是该实现类的getObject方法返回的对象。 1234567891011public class CustomManagerFactoryBean implements FactoryBean &#123; @Override public Object getObject() throws Exception &#123; return new CustomManager(); &#125; @Override public Class&lt;?&gt; getObjectType() &#123; return CustomManager.class; &#125;&#125; @ImportResource导入XML配置 1@ImportResource("classpath:/com/acme/properties-config.xml") 2.Bean的属性Bean的命名与描述12345678910111213141516@Configurationpublic class AppConfig &#123; @Bean(name = "myThing") public Thing thing() &#123; return new Thing(); &#125; @Bean(name = &#123; "dataSource", "subsystemA-dataSource", "subsystemB-dataSource" &#125;) public DataSource dataSource() &#123; // instantiate, configure and return DataSource bean... &#125; @Bean @Description("Provides a basic example of a bean") public Thing thing() &#123; return new Thing(); &#125;&#125; Bean的作用域 singleton 单例 prototype 原型 request 请求 session 会话 application 应用 webSocket 123456789@Bean@Scope(SCOPE_PROTOTYPE) // 默认singleton// ConfigurableBeanFactory.SCOPE_PROTOTYPE, ConfigurableBeanFactory.SCOPE_SINGLETON, WebApplicationContext.SCOPE_REQUEST, WebApplicationContext.SCOPE_SESSION,public Wheel wheel() &#123; return new Wheel();&#125;@RequestScope@SessionScope@ApplicationScope Bean的生命周期回调1.initMethod与destroyMethod1234567891011121314151617181920public class Bean &#123; public void init() &#123; // initialization logic &#125; public void cleanup() &#123; // destruction logic &#125;&#125;@Configurationpublic class AppConfig &#123; @Bean(initMethod = "init",destroyMethod = "cleanup") public Bean bean() &#123; return new Bean(); &#125;&#125; 2.InitializingBean与DisposableBean123456public interface InitializingBean &#123; void afterPropertiesSet() throws Exception;&#125;public interface DisposableBean &#123; void destroy() throws Exception;&#125; 3.@PostConstruct 与 @PreDestroy在Spring中，你可以通过InitializingBean 和 DisposableBean 接口或者在配置Bean的时候指定initMethod和destroyMethod来实现Bean初始化和销毁时调用指定的回调函数。 @PostConstruct 和 @PreDestroy也具有同样的作用 1234567891011121314151617181920212223public class CustomerService&#123; String message; public String getMessage() &#123; return message; &#125; public void setMessage(String message) &#123; this.message = message; &#125; @PostConstruct public void initIt() throws Exception &#123; System.out.println("Init method after properties are set : " + message); &#125; @PreDestroy public void cleanUp() throws Exception &#123; System.out.println("Spring Container is destroy! Customer clean up"); &#125; &#125; 4.BeanPostProcessor12345678910111213public interface BeanPostProcessor &#123; // 在实例化回调之前工作 @Nullable default Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123; return bean; &#125; // 在实例化回调之后工作 @Nullable default Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123; return bean; &#125; // 实例化回调，就是上面的initMethod、@PostConstruct、InitializingBean&#125; @Lazy懒加载，在有在需要用到这个Bean的时候，才初始化这个Bean。 3.Bean的组装12345678910111213141516171819@Beanpublic Wheel wheel() &#123; return new Wheel();&#125;@Beanpublic Car car(Wheel wheel) &#123; // 通过方法参数的方式获取依赖,一般用于从容器中获取依赖 Car car = new Car(); car.setWheel(wheel); return car;&#125; @Beanpublic Car car() &#123; Car car = new Car(); // 通过调用方法的方式获取依赖,一般是调用配置类中的其他创建Bean的方法,而且返回的还是同一个对象。 car.setWheel(wheel()); return car;&#125; lookup-method]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[2.JSTL标签库]]></title>
    <url>%2F2018%2F07%2F10%2FJava%2FJavaWeb%2F%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%2F4.JSP%2F2.JSP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE%2F2.JSTL%E6%A0%87%E7%AD%BE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[JSTL标签库JSTL基础JSTL JSP Standard Tag Library JSP标准库. 为了提高JAVA Web应用开发的效率,Java制定的一组标准标签库的规范. 标签库的制作:把与标签库有关的文件打包成一个JAR文件 ,且该JAR文件需要满足以下两点 所有标签处理类及相关类的.class文件 META-INF目录下有一个描述标签库的TLD文件 使用JSTL标签① 把standard.jar文件复制到WEB-INF/lib目录下 ② 在JSP文件中通过taglib指令声明标签库]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>Jsp</category>
        <category>自定义标签</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[4.JSPcookie]]></title>
    <url>%2F2018%2F07%2F08%2FJava%2FJavaWeb%2F%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%2F4.JSP%2F1.JSP%E5%9F%BA%E7%A1%80%2F4.JSPcookie%2F</url>
    <content type="text"><![CDATA[JSPcookie创建cookie1Cookie c = new Cookie(String name, Object value); 写入cookie对象1response.addCookie(Cookie c); 读取所有Cookie对象1Cookie[] cookies = request.getCookies(); 常用方法12345void setMaxAge(int expiry); //设置cookie的有效期,单位是秒int getMaxAge(); //获取cookie的有效期void setValue(String value); //在cookie创建后,对cookie进行赋值String getName(); //获取cookie名称String getValue(); // 获取cookie的值]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>Jsp</category>
        <category>Jsp基础</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[3.JSP九大对象]]></title>
    <url>%2F2018%2F07%2F08%2FJava%2FJavaWeb%2F%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%2F4.JSP%2F1.JSP%E5%9F%BA%E7%A1%80%2F3.JSP%E4%B9%9D%E5%A4%A7%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[JSP九大对象out对象JspWriter类的实例,是向客户端输出内容常用的对象. 123456789void println()void print()void clear() 清除缓冲区void clearBuffer() 清除缓冲区并把数据发送给客户端void flush() 将缓冲区内容输出到客户端int getBufferSize() 查看缓冲区容量大小int getRemaining() 查看缓冲区剩余容量boolean isAutoFlush() 缓冲区满时,是否自动输出内容到客户端void clean() 关闭输出流 request对象客户端的请求信息被封装在requests对象中, 通过它才能了解客户的需求,然后做出响应.它是HttpServletRequest类的实例. 1234567String getParameter(String name) 获取参数值 对应表单的name属性String[] getParameterValues(Stng name) 获取参数的所有值void setAtribute(String name, Object obj) 添加属性object getAttribute(String name) 获取属性值String getContentType() 获取请求体的MIME类型String getProtocol() 获取请求协议类型及版本号String getServerName() 获取接收请求的服务器主机名 response对象:包含了响应客户端请求的有效信息,在JSP中很少直接用到它. 访问一个页面时,该页面内的response对象只能对这次访问有效. 1234String getCharacterEncoding() 返回响应用的是何种字符编码void setContentType(String type) 设置响应的MIME类型PrintWriter getWriter() 获取一个可以向客户端输出内容的对象.sendRedirect(String location) 重定向 请求转发与请求重定向的区别请求重定向:客户端行为,本质上来讲等于两次请求,第一次请求对象不会保存,地址栏URL改变.请求转发:服务器行为,是一次请求,请求对象会被保存,地址栏URL地址不变. 12&lt;% request.getRequestDispatcher("xxx.jsp").forward(request,response)%&gt;&lt;% response.sendRedirect("xxx.jsp")%&gt; session对象什么是session?session表示客户端与服务器的一次对话Web中的session指的是用户在浏览某个网站时,从进入网站到浏览器关闭所经历的这段时间. session对象session对象在第一个JSP页面被装载时自动创建,完成会话期管理.从一个客户打开浏览器连接到服务器开始,到客户关闭浏览器离开这个服务器结束,被称为一个会话.可以把session对象理解为用户的ID session的生命周期 创建:​ 当客户端第一次访问某个JSP或Servlet时,服务器会为当前会话创建一个SessionId,每次客户端向服务器发送请求时,​ 都会携带该sessionId,服务端会对此sessionId进行校验. 活动:​ 某次会话当中通过超链接打开的新页面属于同一个会话.​ 如果本次会话所有页面都被关闭,那么再次访问JSP或Servlet时,会获得新的sessionId​ 注意:原来的sessionId依然存在,只是再也没有携带那个sessionId的客户端了 销毁:​ ①调用session.invalidate()方法​ ②session过期​ ③服务器重启 123456long getCreationTime():返回session创建时间String getId(): 获取session创建时,JSP引擎为它设定的唯一ID号Object setAttribute(String name , Object value)Object getAttribute(String name)String[] getValueNames() : 获取所有属性名int getMaxInactiveInterval(): 设置session最大请求时间间隔,超过时间,取消session application对象application开始于服务器的启动,终止于服务器的关闭.用于实现服务器内数据共享 1234void setAttribute(String name, Object value)Object getAttribute(String name)Enumeration getAttributeNames()String getServerInfo() config对象page对象page对象就是当前JSP页面本身,很少在JSP中使用. pageContext对象exception对象]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>Jsp</category>
        <category>Jsp基础</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[AJAX]]></title>
    <url>%2F2018%2F07%2F07%2F%E5%89%8D%E7%AB%AF%2FAJAX%2FAJAX%2F</url>
    <content type="text"><![CDATA[AJAX什么是AJAXAJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。 AJAX 是一种用于创建快速动态网页的技术。 使用AJAX技术可以在不重新加载整个网页的情况下，对网页的某部分进行更新。 如何使用AJAX使用AJAX技术的步骤: ①创建XMLHttpRequest对象 ②为XMLHttpRequest对象指定一个回调函数 ③构造请求 ④发送请求 ⑤处理服务器响应 创建 XMLHttpRequest 对象123456789&lt;script&gt; var xmlhttp; if(window.XMLHttpRequest)&#123; xmlhttp = new XMLHttpRequest(); &#125; else&#123; xmlhttp = new ActiveXObject("Microsoft.XMLHTTP"); &#125;&lt;/script&gt; 指定回调函数1234567891011xmlhttp.onreadystatechange = functionName; //不用传递参数的xmlhttp.onreadystatechange = function()&#123;functionName(param)&#125;; //需要传递参数的/**XMLHttpRequest对象具有一个叫作readyState的属性该属性表示AJAX请求的状态0:请求未初始化1:服务器连接已经建立2:请求已接收3:请求处理中4:请求已完成,且响应已就绪*/ 构造请求1xmlhttp.open(method, url, async); 发送请求1xmlhttp.send([string]); //发送请求 可以附带参数 DOM对象的实例 输入流 字符串 处理响应12345/**XMLHttpRequest对象提供了两个用来访问服务器响应的属性responseText 返回字符串响应responseXML 返回XML响应*/ 例子1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE html&gt;&lt;HTML lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;ajax&lt;/title&gt; &lt;script&gt; //定义回调函数 function cFunction(xmlHttp,id)&#123; if(xmlHttp.readyState==4&amp;&amp;xmlHttp.status==200)&#123; document.getElementById(id).innerHTML = xmlHttp.responseText; &#125; &#125; // 创建XMLHttpRequest对象 var xmlHttp; if(window.XMLHttpRequest)&#123;xmlHttp=new XMLHttpRequest()&#125; else&#123;xmlHttp=new ActiveXObject("Microsoft.XMLHTTP")&#125; // 指定回调函数 xmlHttp.onreadystatechange = function()&#123; cFunction(xmlHttp,"title"); &#125;; // 构造请求 xmlHttp.open("GET","hello.txt",true); // 发送请求 xmlHttp.send(); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id="title"&gt;&lt;/h1&gt;&lt;/body&gt;&lt;/HTML&gt; XMLHttpRequest对象的属性和方法属性12345readyState:HTTP请求的状态status:HTTP响应状态码statusText:HTTP响应状态码描述responseText:目前为止接收到的响应体responseXML:目前为止接收到的响应体 方法1234567open(method,url,async) //构造请求send(); //发送请求abort(); //终止请求setRequestHeader(header,value); //添加请求头getAllResponseHeaders();//获取所有响应头getResponseHeader(header);//获取指定响应头 练习表单验证实例]]></content>
      <categories>
        <category>FrontEnd</category>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1.自定义标签]]></title>
    <url>%2F2018%2F07%2F07%2FJava%2FJavaWeb%2F%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%2F4.JSP%2F2.JSP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE%2F1.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE%2F</url>
    <content type="text"><![CDATA[自定义标签基础为什么要使用自定义标签?① JSP脚本非常难读② JSP和HTML混合造成维护成本高③ JSP嵌套在HTML中,美工难以参与开发 自定义标签库的基本步骤① 开发自定义标签处理类② 建立一个TLD文件③ 在JSP文件中使用自定义标签 开发自定义标签处理类12345678910111213// 继承SimpleTagSupport类// 重写doTag()方法// 如果标签类包含属性,那么每个属性都要有getter和setter方法import javax.servlet.jsp.JspException;import javax.servlet.jsp.tagext.SimpleTagSupport;import java.io.IOException;public class HelloWorld extends SimpleTagSupport &#123; @Override public void doTag() throws JspException, IOException&#123; getJspContext().getOut().write("Hello World"+new java.util.Date()); &#125;&#125; 编写TLD文件TLD (Tag Library Definition) ,每个TLD文件对应一个标签库,一个标签库包含多个标签. 12345678910111213141516171819&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;taglib xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd" version="2.1"&gt; &lt;!-- 固定写法 --&gt; &lt;tlib-version&gt;1.0&lt;/tlib-version&gt; &lt;!-- 该标签库的版本 --&gt; &lt;short-name&gt;myshortname&lt;/short-name&gt; &lt;!-- 该标签库的名字 --&gt; &lt;uri&gt;http://mycompany.com&lt;/uri&gt; &lt;!-- 指定标签库的URI --&gt; &lt;!-- 以上都是固定的写法--&gt; &lt;tag&gt; &lt;name&gt;helloWorld&lt;/name&gt; &lt;tag-class&gt;com.hdr.Taglib.HelloWorld&lt;/tag-class&gt; &lt;body-content&gt;empty&lt;/body-content&gt; &lt;/tag&gt; &lt;/taglib&gt; TLD是一个标准的XML文件,其根元素是taglib,该文件需要放在WEB-INF路径下的任意子路径. 使用标签库里的标签123&lt;%-- ①导入标签库 ②使用标签--%&gt;&lt;%@ taglib uri="http://hdr.com" prefix="tld" %&gt;&lt;tld:helloWorld/&gt; 带属性 带标签体的标签12345678910111213141516171819202122232425262728import javax.servlet.jsp.JspException;import javax.servlet.jsp.tagext.SimpleTagSupport;import java.io.IOException;public class SayHello extends SimpleTagSupport &#123; private String name; private String age; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getAge() &#123; return age; &#125; public void setAge(String age) &#123; this.age = age; &#125; @Override public void doTag() throws JspException, IOException&#123; getJspContext().getOut().println("我的名字是: "+name); getJspContext().getOut().write("我的年龄是: "+age); &#125;&#125; 1234567891011121314151617&lt;tag&gt; &lt;name&gt;sayHello&lt;/name&gt; &lt;tag-class&gt;com.hdr.Taglib.SayHello&lt;/tag-class&gt; &lt;body-content&gt;empty&lt;/body-content&gt; &lt;attribute&gt; &lt;name&gt;name&lt;/name&gt; &lt;required&gt;true&lt;/required&gt; &lt;fragment&gt;true&lt;/fragment&gt; &lt;/attribute&gt; &lt;attribute&gt; &lt;name&gt;age&lt;/name&gt; &lt;required&gt;true&lt;/required&gt; &lt;fragment&gt;true&lt;/fragment&gt; &lt;/attribute&gt; &lt;/tag&gt;]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>Jsp</category>
        <category>自定义标签</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1.JSP基本语法]]></title>
    <url>%2F2018%2F07%2F07%2FJava%2FJavaWeb%2F%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%2F4.JSP%2F1.JSP%E5%9F%BA%E7%A1%80%2F1.JSP%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[JSP基本语法JSP可分为四种语法 指令 声明 程序代码 表达式 指令用于设置和整个JSP页面相关的属性. 语法: 1&lt;% @指令名 属性="值" %&gt; JSP中有三个常用指令page include taglib 声明声明变量或方法 语法: 123&lt;%! void sayHello&#123; out.print("Hello World")&#125;%&gt; 程序代码语法 1&lt;% out.print("Hello") %&gt; 输出表达式语法 1&lt;%=表达式%&gt; 提示:你可能很好奇,为什么声明和程序代码要分开. 这是因为JSP脚本的内容全由_jspService()执行 方法中是不能定义方法的,所以需要用另一种语法来声明方法.]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>Jsp</category>
        <category>Jsp基础</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[2.JSP指令详解]]></title>
    <url>%2F2018%2F07%2F07%2FJava%2FJavaWeb%2F%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%2F4.JSP%2F1.JSP%E5%9F%BA%E7%A1%80%2F2.JSP%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[JSP指令详解编译指令指令page用于定义整个页面相关的属性. 1234567891011121314&lt;%@ pagelanguage="java", // 当前JSP页面使用的脚本语言extends = "", //指定JSP页面编译产生的Java类继承的父类或实现的接口import = "java.sql.*", // 导包 默认的有 Java.lang.* , Javax.servlet.* , Javax.servlet.jsp* Javax.servlet.http.*session = "True/False", //是否开启HTTP回话errorPage = "地址", //指定错误处理页面pageEncoding = "UTF-8", //指定网页变编码buffer = "none|8kb|size kb" ,//指定输出缓冲区大小.autoFlush = "True/False", //当输出缓冲区快溢出,自动输出缓冲区内容.isTrheadSafe = "True/False", // 默认线程安全info = "text",isErrorPage = "True/False", // 当前JSP页面可当另一个JSP页面的错误页面contentType = "text/xml", //MIME类型%&gt; 指令include将一个外部文件引入到当前JSP文件中,同时解析这个页面中的JSP语句. include指令分为动态指令和静态指令. 静态指令1&lt;%@ include file="相对路径" %&gt; 动态指令1&lt;jsp:include page=”/user/test” /&gt; 指令taglib动作指令在JSP中主要包含以下7个动作指令. 响应转发 指令forward123&lt;jsp:forward page="other_page.jsp"&gt; &lt;jsp:param name="parameterName" value="parameterValue"/&gt;&lt;/jsp:forward&gt; 动态include指令123&lt;jsp:include page = "page" flush="ture"&gt; &lt;jsp:param name = "name" value="hdr"&gt;&lt;/jsp:include&gt; useBean、setProperty、getProperty指令useBean:在JSP页面中实例化一个Java实例. setProperty:用于为JavaBean实例的属性设置值. getProperty:用于输出JavaBean实例的属性. useBean1&lt;jsp:useBean id="name" class="classname" scope="page/request/session/application"/&gt; page:该JavaBean实例仅在该页面有效. request:该JavaBean实例在本次请求有效. seesion:该JavaBean实例在本次session内有效. application:该JavaBean实例在本应用内一直有效. setProperty1&lt;jsp:setProperty name="BeanName" proterty="propertyName" value="value"/&gt; getProperty1&lt;jsp:getProperty name="BeanName" property="propertyName"/&gt;]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>Jsp</category>
        <category>Jsp基础</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[3.Servlet处理表单]]></title>
    <url>%2F2018%2F07%2F05%2FJava%2FJavaWeb%2F3.Servlet%2F3_Servlet%E5%A4%84%E7%90%86%E8%A1%A8%E5%8D%95%2F</url>
    <content type="text"><![CDATA[Servlets - Form DataYou must have come across many situations when you need to pass some information from your browser to web server and ultimately to your backend program. The browser uses two methods to pass this information to web server. These methods are GET Method and POST Method. GET MethodThe GET method sends the encoded user information appended to the page request. The page and the encoded information are separated by the ?(question mark) symbol as follows − 1http://www.test.com/hello?key1 = value1&amp;key2 = value2 The GET method is the default method to pass information from browser to web server and it produces a long string that appears in your browser’s Location:box. Never use the GET method if you have password or other sensitive information to pass to the server. The GET method has size limitation: only 1024 characters can be used in a request string. This information is passed using QUERY_STRING header and will be accessible through QUERY_STRING environment variable and Servlet handles this type of requests using doGet() method. POST MethodA generally more reliable method of passing information to a backend program is the POST method. This packages the information in exactly the same way as GET method, but instead of sending it as a text string after a ? (question mark) in the URL it sends it as a separate message. This message comes to the backend program in the form of the standard input which you can parse and use for your processing. Servlet handles this type of requests using doPost() method. Reading Form Data using ServletServlets handles form data parsing automatically using the following methods depending on the situation − getParameter() − You call request.getParameter() method to get the value of a form parameter. getParameterValues() − Call this method if the parameter appears more than once and returns multiple values, for example checkbox. getParameterNames() − Call this method if you want a complete list of all parameters in the current request. 1234567891011121314151617181920212223242526272829303132333435package com.hdr.firstWeb;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;@WebServlet(name = "HelloGet")public class HelloGet extends HttpServlet &#123; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; response.setContentType("text/html"); PrintWriter writer = response.getWriter(); String title = "Using GET Method to Read Form Data"; String docType = "&lt;!doctype html public \"-//w3c//dtd html 4.0 " + "transitional//en\"&gt;\n"; writer.println(docType + "&lt;html&gt;\n" + "&lt;head&gt;&lt;title&gt;" + title + "&lt;/title&gt;&lt;/head&gt;\n" + "&lt;body bgcolor = \"#f0f0f0\"&gt;\n" + "&lt;h1 align = \"center\"&gt;" + title + "&lt;/h1&gt;\n" + "&lt;ul&gt;\n" + " &lt;li&gt;&lt;b&gt;First Name&lt;/b&gt;: " + request.getParameter("first_name") + "\n" + " &lt;li&gt;&lt;b&gt;Last Name&lt;/b&gt;: " + request.getParameter("last_name") + "\n" + "&lt;/ul&gt;\n" + "&lt;/body&gt;&lt;/html&gt; " ); &#125;&#125; Reading All Form ParametersFollowing is the generic example which uses getParameterNames() method of HttpServletRequest to read all the available form parameters. This method returns an Enumeration that contains the parameter names in an unspecified order Once we have an Enumeration, we can loop down the Enumeration in standard way by, using hasMoreElements() method to determine when to stop and using nextElement() method to get each parameter name.]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>Servlet</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[2.Servlet生命周期]]></title>
    <url>%2F2018%2F07%2F04%2FJava%2FJavaWeb%2F3.Servlet%2F2_Servlet%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%2F</url>
    <content type="text"><![CDATA[Servlet life cycleA servlet life cycle can be defined as the entire process from its creation till the destruction. The following are the paths followed by a servlet. The servlet is initialized by calling the init() method. The servlet calls service() method to process a client’s request. The servlet is terminated by calling the destroy() method. Finally, servlet is garbage collected by the garbage collector of the JVM. Now let us discuss the life cycle methods in detail. The init() MethodThe init method is called only once. It is called only when the servlet is created, and not called for any user requests afterwards. So, it is used for one-time initializations, just as with the init method of applets. The servlet is normally created when a user first invokes a URL corresponding to the servlet, but you can also specify that the servlet be loaded when the server is first started. When a user invokes a servlet, a single instance of each servlet gets created, with each user request resulting in a new thread that is handed off to doGet or doPost as appropriate. The init() method simply creates or loads some data that will be used throughout the life of the servlet. The init method definition looks like this − 123public void init() throws ServletException &#123; // Initialization code...&#125; The service() MethodThe service() method is the main method to perform the actual task. The servlet container (i.e. web server) calls the service() method to handle requests coming from the client( browsers) and to write the formatted response back to the client. Each time the server receives a request for a servlet, the server spawns a new thread and calls service. The service() method checks the HTTP request type (GET, POST, PUT, DELETE, etc.) and calls doGet, doPost, doPut, doDelete, etc. methods as appropriate. Here is the signature of this method − 123public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException &#123;&#125; The service () method is called by the container and service method invokes doGet, doPost, doPut, doDelete, etc. methods as appropriate. So you have nothing to do with service() method but you override either doGet() or doPost() depending on what type of request you receive from the client. The doGet() and doPost() are most frequently used methods with in each service request. Here is the signature of these two methods. The doGet() MethodA GET request results from a normal request for a URL or from an HTML form that has no METHOD specified and it should be handled by doGet() method. 1234public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // Servlet code&#125; The doPost() MethodA POST request results from an HTML form that specifically lists POST as the METHOD and it should be handled by doPost() method. 1234public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // Servlet code&#125; The destroy() MethodThe destroy() method is called only once at the end of the life cycle of a servlet. This method gives your servlet a chance to close database connections, halt（停止） background threads, write cookie lists or hit counts to disk, and perform other such cleanup activities. After the destroy() method is called, the servlet object is marked for garbage collection. The destroy method definition looks like this − 123public void destroy() &#123; // Finalization code...&#125; Architecture DiagramThe following figure（图表） depicts（描述） a typical servlet life-cycle scenario（方案/情节）. First the HTTP requests coming to the server are delegated to（委托给） the servlet container. The servlet container loads the servlet before invoking the service() method. Then the servlet container handles multiple requests by spawning（大量生成） multiple threads, each thread executing the service() method of a single instance of the servlet.]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>Servlet</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[4.Servlet请求]]></title>
    <url>%2F2018%2F07%2F04%2FJava%2FJavaWeb%2F3.Servlet%2F4_Client%20Request%2F</url>
    <content type="text"><![CDATA[Client RequestMethods to read HTTP HeaderThere are following methods which can be used to read HTTP header in your servlet program. These methods are available with HttpServletRequest object.]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>Servlet</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1.Servlet概述]]></title>
    <url>%2F2018%2F07%2F03%2FJava%2FJavaWeb%2F3.Servlet%2F1_Servlet%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[Servlet什么是Servlet？Java Servlets 是一个运行在Web服务器或Application服务器上的程序，是浏览器或HTTP客户端与HTTP服务器上的数据库或应用进行交互的中间人。 Servlets是一种实现了 javax.servlet.Servlet 接口用来处理HTTP请求的类。Web application developers typically write servlets that extend javax.servlet.http.HttpServlet, an abstract class that implements the Servlet interface and is specially designed to handle HTTP requests. Servlets Architecture下图向你展示Servlets在Web应用中的位置。 Servlets TasksServlets主要任务 读取显式（explicit）发送到服务器的数据。This includes an HTML form on a Web page or it could also come from an applet or a custom HTTP client program. 读取隐式（implicit）发送到服务器的数据。This includes cookies, media types and compression schemes the browser understands, and so forth. 处理数据并且返回结果。This process may require talking to a database, executing an RMI or CORBA call, invoking a Web service, or computing the response directly. 发送显式数据回客户端。This document can be sent in a variety of formats, including text (HTML or XML), binary (GIF images), Excel, etc. 发送隐式数据回客户端。 This includes telling the browsers or other clients what type of document is being returned (e.g., HTML), setting cookies and caching parameters, and other such tasks.]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>Servlet</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Tomcat安装与基本配置]]></title>
    <url>%2F2018%2F07%2F02%2FJava%2FJavaWeb%2F1.Tomcat%2Ftomcat%2F</url>
    <content type="text"><![CDATA[TomcatTomcat是一个执行Java Servlet然后渲染包含JSP代码网页的应用服务器。 Tomcat安装与运行安装:https://tomcat.apache.org/download-90.cgi 配置: 在环境变量中添加JAVA_HOME 在环境变量中添加CATALINA_HTOM 3.添加环境变量 运行:打开tomcat安装路径下的bin文件夹,双击start.bat. 检验:打开浏览器,输入127.0.0.1:8080,看看是否出现了Tomcat的网页. Tomcat目录结构 bin: 存放着启动和关闭tomcat的脚本 conf: 存放着tomcat的配置文件 lib: 存放着tomcat服务器和web应用依赖的jar文件 logs: 存放着tomcat运行产生的日志文件 temp: 运行产生的临时文件 webapps: web应用目录以及他的资源文件 work: tomcat将JSP文件翻译成servlet源码以及编译字节码 Web应用基础知识什么是web应用?​ 浏览器访问的程序. 组成web应用的资源有哪些? html css js image JSP Java 支持的jar 配置文件 什么是网站的根目录? 包裹全部web应用资源的目录 虚拟目录的映射 http://127.0.0.1:8080/ 对应的就是tomcat/webapps这个目录 虚拟目录的配置 因为我们不可能所有东西都放到webapss这个目录里面,所以我们需要修改虚拟目录的映射 配置方式1: ​ 修改tomcat/conf/server.xml ​ 在Host标签中插入Content标签 12&lt;Context path="/blog" docBase="D:\apache-tomcat-9.0.7\webapps\FirstWebProject"&gt;&lt;/Context&gt;&lt;!-- path虚拟目录名称 docBase Web应用所在的目录 --&gt; 注意:官方不推荐这种配置方式 ​ 配置方式2: ​ 在tomcat/conf/catalina/localhost目录下创建一个xml ​ xml文件的名字会作为虚拟目录名 1&lt;Context docBase="D:\apache-tomcat-9.0.7\webapps\FirstWebProject"&gt;&lt;/Context&gt; ​ 缺省配置:ROOT.xml(需要重启) JavaWeb动态项目的目录结构123456|-- webapp # 站点根目录 |--html,css,js image 可以被外界直接访问 |--WEB-INF 浏览器无法访问的目录 |--lib 存放web依赖的jar文件 |--classes 存放当前web项目源码生成的class文件 |--web.xml web项目配置文件(必须的) 注意:webapp是存放在tomcat安装目录下的webapps目录中 网络资源访问流程 其他问题https://www.bilibili.com/video/av19008301/?p=10]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>Tomcat</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1.Web请求的过程]]></title>
    <url>%2F2018%2F07%2F01%2FJava%2FJavaWeb%2F0.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F1.Web%E8%AF%B7%E6%B1%82%E7%9A%84%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[Web请求的过程打开网页的基本流程 浏览器输入网址 对网址进行域名解析,获取IP地址 根据IP地址对服务器发起HTTP请求 服务接受请求、处理请求、返回响应 HTTPDNSDNS是Domain Name System域名系统的简称，它是域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。 根据域名获取对应IP地址的行为叫做域名解析。 浏览器会对域名解析进行缓存。 操作系统会对域名解析进行缓存。 windows系统域名解析缓存文件: C:\Windows\System32\drivers\etc\hosts linux系统域名解析缓存文件: /etc/hosts 如果浏览器,和操作系统都没有对该域名的解析缓存。 LDNS 本地区的域名服务器,网络供应提供的对域名解析进行缓存的服务器。 gTLDS generic Top level 域名服务器,如.com .cn等等 Name Server 通常就是你注册的域名服务器。例如你在阿里云买了域名,这个域名解析任务就由域名提高商的服务器来完成。 TTL time to live 保留时间 几种域名解析方式 A记录 MX记录 CNAME记录 NS记录 TXT记录 A记录,A是Address的意思,就是把该域名指向一个IP地址。 MX记录,MX是 Mail Exchange的意思,它指向一个邮件服务器，用于电子邮件系统发邮件时根据 收信人的地址后缀来定位邮件服务器。 CNAME记录,Canonical Name(别名解析),把该域名指向另一个域名。 NS记录,为某个域名指定DNS解析服务器 TXT记录,为某个主机名/域名设置说明 CDN工作机制CDN content delivery network(内容传输网络), CDN主要功能是在不同的地点缓存内容，通过负载均衡技术，将用户的请求定向到最合适的缓存服务器上去获取内容，比如说，是北京的用户，我们让他访问北京的节点，深圳的用户，我们让他访问深圳的节点。通过就近访问，加速用户对网站的访问。解决Internet网络拥堵状况，提高用户访问网络的响应速度。 CDN网络是在用户和服务器之间增加缓存层，将用户的访问请求引导到最优的缓存节点而不是服务器源站点，从而加速访问速度。 完整的CDN工作流程： Servlet与Web容器什么是Servlet?servlet是能完成特定功能的Java代码,这个特定功能就是接收HttpServletRequest对象,返回HttpServletResponse对象。 什么是Web容器?Web应用服务器,是一个Servlet/JSP容器 拆包装:接收客户发来的http请求文本并解析，然后转化成Java servlet能处理的HttpServletRequest类型对象. 打包装:把Java servlet返回的HttpResponse类型对象包装成响应文本的格式,然后返回给客户. 总结 Java Servlet运行在Tomcat中,Tomcat运行在服务器中. 服务器接收请求,把请求交给Tomcat,Tomcat对请求进行解析后,把内容交给Java Servlet处理，然后Servlet返回响应，容器再对响应进行处理，然后返回给用户。]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>基础知识</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1.Spring的学习路线]]></title>
    <url>%2F2018%2F07%2F01%2FJava%2FJavaWeb%2F6.%E4%B8%9A%E5%8A%A1%E5%B1%82%2FSpring%2F1.%E5%89%8D%E8%A8%80%2F</url>
    <content type="text"><![CDATA[Spring的学习路线 IOC 什么是IOC Spring的IoC容器与Bean 如何创建,使用容器 如何配置Bean Spring AOP 什么是AOP 《AspectJ in action》 横切关注点与AOP AOP术语 Spring AOP 例子 Spring AOP原理 @AspectJ注解详解 Spring AOP实战 更多 《AspectJ in action》、《Pro Spring 5》 Resource &amp; Environment 注解驱动与常用注解]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1.泛型的引入]]></title>
    <url>%2F2018%2F05%2F23%2FJava%2FJavaSE%2Fch8_%E6%B3%9B%E5%9E%8B%2F1.%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%BC%95%E5%85%A5%2F</url>
    <content type="text"><![CDATA[泛型的引入以Java集合框架为例，介绍泛型的作用与使用方法 在JDK5之前，集合中的元素都是Object类型，从集合中获取对象以后常常需要进行强制类型转化。 下面代码向ArrayList中加入一个String，接下去取出这个String对象，然后再把它强制转换成Integer对象。 123List arrayList = new ArrayList();arrayList.add("hello");Integer num = (Integer) arrayList.get(0); 上面的代码编译时不会报错，会在运行时报错。为了尽可能早的发现这种错误，JDK5中引入了泛型机制。 就是在生命集合变量和创建集合对象时，可以用&lt;&gt;指定集合中元素的类型： 12List&lt;String&gt; list = new ArrayList&lt;String&gt;(); // 这是JDK5的写法List&lt;String&gt; list = new ArrayList&lt;&gt;(); // 具体我忘了，反正JDK8的话已经有类型推断了 这时候如果你往list添加其它类型数据，编译就会报错，从而避免了运行时类型转化错误。 定义泛型类和泛型接口泛型的本质其实就是把类参数化，由于事先并不知道运行时会接受一个什么样的类，因此用一个参数来代表类，等运行时再用传递过来的实际类赋给参数，本质就跟方法参数的作用一样。 定义泛型类 12345678910111213141516171819/*** 类名后面使用&lt;T&gt; T只是一个参数名，具体用什么随你喜欢* 在运行时T的值就会变成传递过来的类*/public class Bag&lt;T&gt; &#123; private T content; public Bag(T content)&#123; this.content = content; &#125; public T getContent() &#123; return content; &#125; public void setContent(T content) &#123; this.content = content; &#125;&#125; 定义泛型接口 123456/*** 定义泛型接口也一样*/public interface Bag&lt;T&gt;&#123; // 不多讲了&#125; 定义泛型方法注意：泛型方法不一定定义在泛型类中。 123456789public class ArrayAlg &#123; public static &lt;T&gt; T getMiddle(T... a) &#123; return a[a.length / 2]; &#125;&#125;// 调用泛型方法String middle = ArrayAlg.&lt;String&gt;getMiddle("J", "k", "L");// 不过其实也没必要写&lt;String&gt;，因为编译器能推断出它的类型String middle = ArrayAlg.getMiddle("J", "k", "L"); extends和Super关键字在定义泛型类时，可以用extends和Super关键字来限定类型参数 123public class Bag&lt;T extends Food&gt; &#123; // 指名T必须是Food或Food的子类&#125; 123public class Bag&lt;T super Food&gt; &#123; // 指名T必须是Apple或Apple的父类&#125; 使用？通配符?和T区别：？是一个不确定类，？和T都表示不确定的类型 ，但如果是T的话，函数里面可以对T进行操作，比方 T car = getCar()，而不能用？ car = getCar()。 12345678910111213141516171819202122232425262728293031323334353637383940414243public class TestDifferenceBetweenObjectAndT &#123; public static void printObjectList(List&lt;Object&gt; list) &#123; for (Object elem : list) &#123; System.out.println(elem + " "); &#125; System.out.println(); &#125; public static &lt;T&gt; void printTList(List&lt;T&gt; list) &#123; for (T elem : list) &#123; System.out.println(elem + " "); &#125; System.out.println(); &#125; public static void printWildCastList(List&lt;?&gt; list) &#123; for (int i = 0; i &lt; list.size(); i++) &#123; System.out.println(list.get(i) + " "); &#125; System.out.println(); &#125; public static void main(String[] args) &#123; List&lt;Integer&gt; integerList = Arrays.asList(1, 2, 3); List&lt;String&gt; stringList = Arrays.asList("one", "two", "three"); List&lt;Object&gt; objectList = Arrays.asList(1, "two", 1.23); List&lt;Fruit&gt; fruitList = Arrays.asList(new Apple(), new Banana()); /* * 下面这句会编译报错，因为参数不能转化成功 * */ printObjectList(fruitList); printObjectList(objectList); printTList(integerList); printTList(stringList); printTList(objectList); printWildCastList(integerList); printWildCastList(stringList); printWildCastList(objectList); &#125; &#125;]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch8泛型</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[7.集合的工具类]]></title>
    <url>%2F2018%2F05%2F22%2FJava%2FJavaSE%2Fch7_%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%2F7.%E9%9B%86%E5%90%88%E5%B7%A5%E5%85%B7%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[集合的工具类Array有工具类Arrays，集合也不落后，集合也有个Collections类。 Collections类有一部分静态方法用于操作List，有一部分可以操作所有Collection，还有一部分可以操作Map。 线程安全的集合Set、List、Queue和Map的实现类都是没有采用同步机制的，在多线程的情况下会有并发问题。 有一下解决方案 对程序中有可能出现并发问题的代码块进行同步。 利用Collections的synchronizedXXX()方法获得原始集合的同步版本。 。。。。。。。。。。。。。 集合与数组的互换数组转集合Arrays.asList(array) 集合转数组 Object[] toArray(); T[] toArray(T[] a); Integer[] arr = list.toArray(new Integer[0]); new Integer[0] 只是表明类型的作用]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch7Java容器</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[8.历史集合类]]></title>
    <url>%2F2018%2F05%2F22%2FJava%2FJavaSE%2Fch7_%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%2F8.%E5%8E%86%E5%8F%B2%E9%9B%86%E5%90%88%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[历史集合类在早期的JDK1.0版本中，代表集合的类只有Vector、Stack、Enumeration、Hashtable、Properties和BitSet类。直到JDK1.2才出现了Collection、Set、List、Map接口以及各种实现类，它们构成了比较完整的Java集合框架，在JDK5中又增加了Queue接口以及各种实现类。JDK1.0中的集合类也被称为历史集合类。 历史集合类 描述 缺点 替代类 Vector 采用了同步机制，性能不好 ArrayList LinkedList Stack 表示栈 采用了同步机制，继承了Vectory支持随机访问 LinkedList Hashtable 采用了同步机制 HashMap Properties 采用了同步机制 无 Enumeration 需要与上面的历史集合类配套使用 Iterator 可以看出除了Properties，其他基本都没有使用的必要了。 事实上Properties类还是挺常用的，下面我们来看看怎么用它。 Properties类Properties类是一种特殊的Map类，它继承了Hashtable&lt;Object,Object&gt;类，Properties类的load（）方法可以用来从输入流中读取键与值。 12void load(InputStream inStream);void load(Reader reader); 123456public static void main(Stirng[] args) thorws IOException&#123; Properties ps = new Properties(); InputStream input = PropertiesTester.class.getResourceAsStream("myapp.properties"); ps.load(input);&#125; Java中getResourceAsStream的用法 Class.getResourceAsStream(String path) ： path 不以’/‘开头时默认是从此类的字节码文件所在的包下取资源，以’/‘开头则是从ClassPath根下获取。其只是通过path构造一个绝对路径，最终还是由ClassLoader获取资源。 Class.getClassLoader.getResourceAsStream(String path) ：默认则是从ClassPath根下获取，path不能以’/‘开头，最终是由ClassLoader获取资源。 ServletContext. getResourceAsStream(String path)：默认从WebAPP根目录下取资源，Tomcat下path是否以’/‘开头无所谓，当然这和具体的容器实现有关。]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch7Java容器</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1.反射基础]]></title>
    <url>%2F2018%2F05%2F22%2FJava%2FJavaSE%2Fch9_%E5%8F%8D%E5%B0%84%2F1.%E5%8F%8D%E5%B0%84%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[反射基础什么是反射?反射(Reflection),它在允许运行中的 Java 程序获取自身的信息，并且可以操作类或对象的内部属性。 通过反射，我们可以在运行时获得程序或程序集中每一个类型的成员和成员的信息。 Java反射框架主要提供以下功能: 在运行时判断任意一个对象所属的类。 在运行时构造任意一个类的对象。 在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法） 。 在运行时调用任意一个对象的方法。 Class类因为类都有构造器、成员变量、方法等等,所以可以对类进行抽象. Class类就是类的抽象,Class类的实例代表某个类. 获取Class类实例① 通过对象的getClass()方法 ② 通过类.class ③ 通过Class.forName() 12345678910111213// 通过对象的getClass方法 Dog dog = new Dog("叉烧",2,"White"); Class&lt;? extends Dog&gt; aClass = dog.getClass(); // 通过类.class Class&lt;Dog&gt; dogClass = Dog.class; // 通过Class.forName方法 try &#123; Class.forName("ch17_Reflection.Dog"); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; 获取包信息1234Class&lt;Dog&gt; dogClass = Dog.class;Package aPackage = dogClass.getPackage();String packageName = aPackage.getName();System.out.println(packageName); 获取构造器调用无参数构造器实例化对象 123456789Class&lt;Dog&gt; dogClass = Dog.class; try &#123; // 通过Class对象实例化对象 Dog dog = (Dog) dogClass.newInstance(); &#125; catch (InstantiationException e) &#123; e.printStackTrace(); &#125; catch (IllegalAccessException e) &#123; e.printStackTrace(); &#125; 获取所有构造器 12345678910111213Class&lt;Dog&gt; dogClass = Dog.class; // 获取dogClass的所有构造器 Constructor&lt;?&gt;[] constructors = dogClass.getConstructors(); for (int i = 0; i &lt; constructors.length; i++) &#123; System.out.println(constructors[i].getName()); System.out.println(constructors[i].getParameterCount()); // 获取构造器所需要的参数的类型 Class&lt;?&gt;[] parameterTypes = constructors[i].getParameterTypes(); for(int j =0; j&lt;parameterTypes.length;j++) &#123; System.out.println(parameterTypes[j].toString()); &#125; &#125; 使用指定构造器实例化对象 12345678910111213141516Class&lt;Dog&gt; dogClass = Dog.class; try &#123; // 获取指定的构造器 Constructor&lt;Dog&gt; constructor = dogClass.getConstructor(String.class, int.class, String.class); // 使用构造器实例化对象 Dog dog = constructor.newInstance("cookie", 2, "yellow"); dog.sayHello(); &#125; catch (NoSuchMethodException e) &#123; e.printStackTrace(); &#125; catch (IllegalAccessException e) &#123; e.printStackTrace(); &#125; catch (InstantiationException e) &#123; e.printStackTrace(); &#125; catch (InvocationTargetException e) &#123; e.printStackTrace(); &#125; 获取fields12345678910111213141516Class&lt;Dog&gt; dogClass = Dog.class; // 获取非private修饰的fields Field[] fields = dogClass.getFields(); // 获取所有fields Field[] declaredFields = dogClass.getDeclaredFields(); for (int i = 0; i &lt; declaredFields.length; i++) &#123; // 获取field的修饰符 String modifier = Modifier.toString(declaredFields[i].getModifiers()); // 获取field的类型 String type = declaredFields[i].getType().getName(); // 获取field的名字 String name = declaredFields[i].getName(); System.out.println(modifier + " " + type + " " + name); &#125; 获取类方法123456789101112131415161718Dog dog = new Dog("flash",2,"white"); Class&lt;Dog&gt; dogClass = Dog.class; // 获取所有非private方法,包括父类的 Method[] methods = dogClass.getMethods(); for (int i = 0; i &lt; methods.length; i++) &#123; //调用toString方法 if(methods[i].getName().equals("toString")) &#123; try &#123; String s = (String) methods[i].invoke(dog); System.out.println(s); &#125; catch (IllegalAccessException e) &#123; e.printStackTrace(); &#125; catch (InvocationTargetException e) &#123; e.printStackTrace(); &#125; &#125; &#125; 12345678910111213141516171819Dog dog = new Dog("cookie",2,"white"); Class&lt;Dog&gt; dogClass = Dog.class; //获取该类的所有方法,不包括父类的 Method[] declaredMethods = dogClass.getDeclaredMethods(); for (int i = 0; i &lt; declaredMethods.length; i++) &#123; //System.out.println(declaredMethods[i].getName()); if(declaredMethods[i].getName().equals("sayHello")) &#123; // 让其它类可以调用该private修饰的方法 declaredMethods[i].setAccessible(true); try &#123; declaredMethods[i].invoke(dog); &#125; catch (IllegalAccessException e) &#123; e.printStackTrace(); &#125; catch (InvocationTargetException e) &#123; e.printStackTrace(); &#125; &#125; &#125; 调用类方法12public Object invoke(Object obj, Object... args)// obj 调用该方法的对象 后面是参数]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch9反射</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[3.Set]]></title>
    <url>%2F2018%2F05%2F21%2FJava%2FJavaSE%2Fch7_%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%2F3.Set%2F</url>
    <content type="text"><![CDATA[SetSet是最简单的集合，集合中的对象无序且不重复。 Set接口主要有两个实现类：HashSet、TreeSet。 HashSet按照哈希算法来存取对象，速度比较快。 TreeSet实现了SortedSet接口，具有排序功能。 HashSetHashSet按照哈希算法来存取对象，具有很好的存取和查找性能。当向集合中加入一个对象时，HashSet会调用对象的hashCode方法获取哈希码，然后根据哈希码进一步计算出对象在集合中的存储位置。 注意：如果两个对象相等（equals方法返回真）但是他们的hashcode却不一样，这会使HashSet无法正常工作。相等的对象hashcode必须相等，不等的对象，hashcode是否相等不做要求。 TreeSetTreeSet类实现了SortedSet接口，能够对集合中的对象进行 排序。 TreeSet支持两种排序方式，自然排序和自定义排序。 自然排序调用对象的CompareTo方法进行比较，然后进行升序排列，这种排列方式叫做自然排序。 自定义排序在创建TreeSet的时候传递一个Comparator对象。然后在加入对象的时候，就会调用Comparator对象的compare方法进行比较，然后排序。]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch7Java容器</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[4.List]]></title>
    <url>%2F2018%2F05%2F21%2FJava%2FJavaSE%2Fch7_%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%2F4.List%2F</url>
    <content type="text"><![CDATA[ListList的主要特征是其元素以线性的方式存储，集合中允许存放重复对象。 List接口的主要实现类 ArrayList 数据获取速度快，插入和删除慢。 LinkedList 数据获取的速度慢，插入和删除快。它是一个双链表，可以作为栈、队列、双向队列使用。 ArrayList类Java的ArrayList (数组列表) , 使用动态数组来存储元素. 关于数组列表的重点 可以储存相同的元素 会记住元素的插入顺序 是非异步的 通过索引实现随机存取 插入和删除操作很慢 数组列表的构造方法123ArrayList(); // 创建一个空的数组列表ArrayList(Collection c); ArrayList(int capacity); // 创建一个数组列表,指定容量 数组列表的操作方法12345678910boolean add(Object element);// 添加元素到数组列表末端void add(int index,Object element);// 添加元素到指定索引boolean addAll(Collection c);// 除去交集boolean addAll(int index , Coolection c);void clear();int indexOf(Object o);int lastIndexOf(Object o);void trimToSize(); //使数组列表容量等于当前元素个数.Object[] toArray();Object clone(); 例子1234567891011121314151617public class ArrayListDemo &#123; public static void main(String[] args)&#123; ArrayList&lt;String&gt; nameList = new ArrayList&lt;&gt;(); nameList.add("hdr"); nameList.add("hyc"); //遍历 for(String name : nameList)&#123; System.out.println(name); &#125; //iterable接口的forEach方法 nameList.forEach(name-&gt; System.out.println(name)); // Iterator&lt;String&gt; iterator = nameList.iterator(); iterator.forEachRemaining(name-&gt; System.out.println(name)); &#125;&#125; LinkedList类Java LinkedList (链表) 使用双重链表来存储数据. 重点 可以存储重复元素 可以保留插入顺序 非异步 插入和删除操作很快 可以用作列表,队列,栈 构造方法12LinkedList();LinkedList(Collection c) 操作方法12345678910boolean add(Object o); void add(int index,Object o);void addFirst(Object o);void addLast(Object o);boolean remove(Object o);boolean contains(Object o);Object getFirst();Object getLast();int indexOf(Object o);int lastIndexOf(Object o); 数组列表与链表的区别数组列表适合与排序与查找 链表适合用于添加和删除]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch7Java容器</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[5.Queue]]></title>
    <url>%2F2018%2F05%2F21%2FJava%2FJavaSE%2Fch7_%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%2F5.Queue%2F</url>
    <content type="text"><![CDATA[QueueQueue接口具有以下方法 123456789// 插入元素boolean add(E element); // 如果队列满了，抛出IllegalStateExceptionboolean offer(E element); // 如果队列满了，返回false// 返回并删除元素E remove(); // 如果队列为空，抛出NoSuchElementExceptionE pool(); // 如果队列为空，返回null// 返回但不删除元素E element(); // 如果队列为空，抛出NoSuchElementExceptionE peel(); // 如果队列为空，返回null Deque双向队列 PriorityQueue优先级队列，元素必须是Comparable，有趣的是遍历的时候并没有排序，remove的时候会从小到大删除并返回元素。]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch7Java容器</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[6.Map]]></title>
    <url>%2F2018%2F05%2F21%2FJava%2FJavaSE%2Fch7_%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%2F6.Map%2F</url>
    <content type="text"><![CDATA[MapMap是一种把键对象和值对象进行映射的集合。 键不可以重复，值可以重复。 常用方法 12345678910111213void clear();boolean containsKey(Object key);boolean containsValue(Object value);Set entrySet();//返回Map.Entry对象所组成的Set集合,一个Entry对象包含Map的一对Key-Value对.Object get(Object key);boolean isEmpty();Set KeySet();Object put(Object key,Object value);void putAll(Map m);Object remove(Object key);boolean remove(Object key,Object value); //Java8 新增方法int size();Collection values(); HashMapTreeMap]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch7Java容器</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[2.基础知识]]></title>
    <url>%2F2018%2F05%2F20%2FJava%2FJavaSE%2Fch7_%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%2F2.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[在正式接触Collection和Map之前，我们需要了解一些基本知识。 Iterable、Iterator、for-each循环、forEach方法Iterator是迭代器，真正起迭代作用。 Iterable是可迭代的意思，但它并不能起到迭代的作用，它仅仅用于说明这个类是可迭代的。 Iterable接口具有一个iterator方法，该方法要求返回一个Iterator，我们通过这个Iterator实现迭代。 只要实现了Iterable接口，该类就能使用for-each循环。 for-each循环 123for(String str :someIterable)&#123; System.out.println(str);&#125; for-each循环其实就是个语法糖，它最后会变成 123for (Iterator&lt;String&gt; i = someIterable.iterator(); i.hasNext();) &#123; System.out.println(i.next());&#125; forEach方法 Comparable、ComparatorComparable接口说明这个类是可以比较的。 Comparable接口具有一个compareTo的抽象方法，我们通过实现该方法来实现比较。 1public int compareTo(T o); Comparator是比较器]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch7Java容器</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1.Java集合概述]]></title>
    <url>%2F2018%2F05%2F20%2FJava%2FJavaSE%2Fch7_%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%2F1.Java%E9%9B%86%E5%90%88%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[Java集合在创建数组的时候，我们需要指定数组的长度，数组一旦被创建，其长度就不能被改变。 但是有些时候，数据的数量是不确定的，这时候我们就可以时候Java集合。 Java集合主要分为四种类型 Set List Queue Map Collection接口表示集合，Set、List、Queue接口都是它的子接口。 Map接口没有继承Collection接口。 Collection接口collection只保存对象,数组既可以保存对象,也可以保存基本类型. Collection接口中定义的方法Collection接口声明了适用于Set、List、Queue类型的方法。 1234567891011121314boolean add(Object o) ; //添加元素,成功返回true;boolean addAll(Collection c) ;//把集合c添加到指定集合.boolean remove(Object o);//从集合中移除对象boolean removeAll(Collection c);//从集合中移除集合C中的对象boolean retainAll(Collection c);//删除集合中不属于集合C的对象void clear() ;//清除集合里所有元素boolean isEmpty(); // 判断集合是否为空int size();//返回集合中对象个数boolean contains(Object o);//判断是否包含Object oboolean containsALL(Collection c);//判断集合是否包含集合CObject[] toArray();//把集合转换成一个数组Iterator iterator(); //返回一个Iterator对象. Map接口Map是一种把键对象和值对象进行映射的集合。 键不可以重复，值可以重复。 常用方法 12345678910111213void clear();boolean containsKey(Object key);boolean containsValue(Object value);Set entrySet();//返回Map中包含的Key-Value对所组成的Set集合,集合中每个元素都是Map.Entry对象.Object get(Object key);boolean isEmpty();Set KeySet();Object put(Object key,Object value);void putAll(Map m);Object remove(Object key);boolean remove(Object key,Object value); //Java8 新增方法int size();Collection values();]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch7Java容器</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[5.NIO]]></title>
    <url>%2F2018%2F05%2F18%2FJava%2FJavaSE%2Fch6_IO%2F5_NIO%2F</url>
    <content type="text"><![CDATA[NIO从JDK1.4开始,Java提供了一系列改进的输入输出处理的新功能,这些功能被称为NIO. NIO 与 传统IO的区别在于,数据打包和传输的方法. 传统IO以流的方式处理数据,而NIO以块的方式处理数据. NIO原理NIO与IO的区别首先来讲一下传统的IO和NIO的区别，传统的IO又称BIO，即阻塞式IO，NIO就是非阻塞IO了。还有一种AIO就是异步IO，这里不加阐述了。 Java IO的各种流是阻塞的。这意味着，当一个线程调用read() 或 write()时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了。 Java NIO的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取。而不是保持线程阻塞，所以直至数据变的可以读取之前，该线程可以继续做其他的事情。 非阻塞写也是如此。一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。 线程通常将非阻塞IO的空闲时间用于在其它通道上执行IO操作，所以一个单独的线程现在可以管理多个输入和输出通道（channel）。 NIO的工作原理在系统文件与缓冲区(buffer)之间建立通道(channel),程序从缓冲区中读取或写入数据,从而实现文件的读写. 缓冲区BufferBuffer是一个抽象类,其常用的子类是ByteBuffer 和 CharBuffer. Buffer对象是一个固定数量的数据的容器,在这里数据可被存储并在之后用于检索。 Buffer有四个重要的属性: 容量（Capacity）：缓冲区能够容纳的数据元素的最大数量。这一个容量在缓冲区创建时被设定，并且永远不能改变。 上界(Limit)：缓冲区的第一个不能被读或写的元素。或者说,缓冲区中现存元素的计数。 位置(Position)：下一个要被读或写的元素的索引。位置会自动由相应的 get( )和 put( )函数更新。 标记(Mark)：做个标志,使用reset()方法把position转到这个标记位置. 1234567891011121314151617181920212223242526272829303132333435363738394041424344package NIO;import java.nio.ByteBuffer;public class BufferDemo &#123; public static void main(String[] args) &#123; // 创建一个字节缓冲区,容量是1024个字节. ByteBuffer buf = ByteBuffer.allocate(1024); // 把数据放入缓冲区 buf.put((byte)10); buf.put((byte)20); buf.put((byte)30); System.out.println("position:"+buf.position()); System.out.println("limit:"+buf.limit()); System.out.println("capacity:"+buf.capacity()); System.out.println("----------------"); // 缓冲区反转 buf.flip(); /* * 这是干嘛的呢? * 其实就是 limit = position; position = 0; */ System.out.println("position:"+buf.position()); System.out.println("limit:"+buf.limit()); System.out.println("capacity:"+buf.capacity()); System.out.println("----------------"); // 获取数据 if(buf.hasRemaining()) // 判断缓冲区是否有数据 &#123; for(int i=0; i&lt;buf.remaining();i++) &#123; Byte b = buf.get(i); System.out.println(b); &#125; &#125; &#125;&#125; Buffer 常用方法 1234567891011int capacity(); //获取Buffer的容量boolean hasRemaining(); // 判断position到limit之间是否还有元素可处理int limit(); Buffer limit(int newLt); //获取具有新的limit的缓冲区对象.Buffer mark(); // 设置markBuffer reset(); // 将position弄到mark的位置int postion();Buffer position(int newPs);int remaining();Buffer rewind(); //将position设置为0,清除markBuffer clear(); //清楚Buffer的内容. channel12345678910111213141516171819202122232425262728package NIO;import java.io.FileInputStream;import java.io.FileOutputStream;import java.nio.ByteBuffer;import java.nio.channels.FileChannel;public class ChannelDemo &#123; public static void main(String[] args) throws Exception &#123; //创建文件通道 FileChannel fcIn = new FileInputStream("C:\\Users\\Administrator\\Desktop\\test.doc").getChannel(); FileChannel fcOut = new FileOutputStream("C:\\Users\\Administrator\\Desktop\\test2.doc").getChannel(); ByteBuffer buf = ByteBuffer.allocate(1024); while(fcIn.read(buf)!=-1) &#123; buf.flip(); //防止buffer没有被填满 fcOut.write(buf); buf.clear(); &#125; fcIn.close(); fcOut.close(); System.out.println("done"); &#125;&#125; 字符集和CharsetJava.nio.charset.Charset 1234567891011121314151617181920212223242526//获取Java支持的全部字符集SortedMap&lt;String,Charset&gt; map = Charset.availableCharsets();for (String alias:map.keySet())&#123; System.out.println(alias+":"+map.get(alias));&#125;// 创建字符集对象Charset cs = Charset.forName("GBK");// 创建编码对象CharsetEncoder csEncoder = cn.newEncoder();// 创建解码对象CharsetDecoder csDecoder = cn.newDecoder();// 创建字符缓冲区CharBuffer cbuff = CharBuffer.allocate(8);cbuff.put("黄");cbuff.put("大");cbuff.put("仁");cbuff.flip();ByteBuffer bbuff = csEncoder.encode(cbuff);// ByteBuffer bbuff = cs.encode(cbuff);for(int i=0; i&lt;bbuff.capacity();i++)&#123; System.out.print(bbuff.get(i)+" ");&#125;System.out.println("\n"+ csDecoder.decode(bbuff)); 文件锁在NIO中,Java提供了FileLock来支持文件锁定功能,在FileChannel中提供的lock() / tryLock()方法可以获得文件锁FileLock对象. 12345lock(Long postion,long size,boolean shared)// 对文件从postion开始,长度为size的内容加锁,该方法是阻塞式的tryLock(long position,long size ,boolean shared)// 同上,该方法是非阻塞式的shared 表示该锁是否共享.默认为false; 1234567891011121314151617181920212223package NIO;import java.nio.*;import java.nio.channels.FileChannel;import java.nio.channels.FileLock;import java.io.*;public class FileLockDemo &#123; public static void main(String[] args) throws Exception&#123; // TODO Auto-generated method stub try ( FileChannel fcOut = new FileOutputStream("C:\\Users\\Administrator\\Desktop\\test.doc").getChannel(); ) &#123; FileLock lock = fcOut.tryLock(); Thread.sleep(1000); lock.release(); &#125; &#125;&#125; 文件锁的注意点① 在某些平台上,一个程序不能获得文件锁,它也能对该文件进行读写. ② 在某些平台上,不能同步地锁定一个文件并把他映射到内存中. ③ 文件锁是由Java虚拟机所持有的,如果两个Java程序使用同一个Java虚拟机运行,则他们不能对同一个文件进行加锁. ④ 在某些平台上,关闭FileChannel时,会释放Java虚拟机在该文件上的所有锁,因此应该皮面对同一个被锁定的文件打开多个FileChannel. Java7的NIOJava7对NIO进行了重大改进 ① 提供了全面的文件IO和文件系统访问支持. ② 基于异步Channel的IO Path早起Java只提供了一个File类来访问文件系统,为了弥补不足,Java7中引入了一个Path接口. Path接口代表一个平台无关的平台路径. 同时还加入Files 和 Paths两个工具类. 具体请看API并且总结出来]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch6IO</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[4.对象序列化]]></title>
    <url>%2F2018%2F05%2F17%2FJava%2FJavaSE%2Fch6_IO%2F4_%E5%AF%B9%E8%B1%A1%E5%BA%8F%E5%88%97%E5%8C%96%2F</url>
    <content type="text"><![CDATA[对象序列化对象序列化的目的是将对象保存到磁盘上,或允许在网络中直接传输对象. 对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流. 实现对象的序列化如果需要让某个对象支持序列化机制,则必须让它的类是可序列化的. 也就是要这个类实现Serializable(可序列化)或Externalizable(可外部化)接口 有两种方法实现对象的序列化 序列化步骤:①实现可序列化类 ②用对象流输出对象 12345678910111213//实现可序列化类import java.io.*;class Person implements Serializable &#123; public String name; public int age; // 不要重写无参构造器 public Person(String name, int age) &#123; this.name = name; this.age = age; &#125;&#125; 12345678910111213141516171819//用对象流输出对象import java.io.*;public class SerializableObject &#123; public static void main(String[] args) &#123; Person p = new Person("黄大仁", 21); File saveObj = new File("C:\\Users\\Administrator\\Desktop\\persons.txt"); try &#123; if (!saveObj.exists()) &#123; saveObj.createNewFile(); &#125; ObjectOutputStream ops = new ObjectOutputStream(new FileOutputStream(saveObj)); ops.writeObject(p); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; 反序列化123456789101112131415161718192021222324package File;import java.io.*;import File.Person;public class LoadPerson &#123; public static void main(String[] args) &#123; // TODO Auto-generated method stub File file = new File("C:\\Users\\Administrator\\Desktop\\persons.txt"); try &#123; ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file)); Person p = (Person) ois.readObject(); System.out.println(p.name); System.out.println(p.age); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; 注意事项: ① 可序列化类的父类必要有无参数构造器或者本身也是个可序列化类. ② 如果对象的实例变量,是个引用类型,那么该引用类型也需要实现可序列化. ③ 所有保存到磁盘中的对象都有一个序列化编号 ④ 当程序试图序列化一个对象时,程序将先检查该对象是否已经被序列化过,只有该对象从未在本次虚拟机中被序列化过,系统才会将该对象转换成字节序列并输出. ⑤ 如果该对象已经序列化过,那么程序会直接输出一个序列化编号. ⑥ 也就是说,如果对象被序列化后,对象发生了改变,在下一次序列化中,这些改变也不会被记录下来. 过滤功能我现在用的是Java8,改天再写,702页 Java9新特性. Java9中,ObjectInputStream增加了setObjectInputFilter()和getObjectInputFilter()两个方法. 第一个方法用于为对象输入设置过滤器,当程序通过ObjectInputStream反序列化对象时. 过滤器的checkInput()方法会被自动激发, 自定义序列化transient关键字如果想禁止对某实例变量进行序列化,只需使用transient关键字修饰那个实例变量即可. 当然,这种简单粗暴的方法也有它不好的地方,那就是反序列化后无法得到该变量的真实值. 自定义序列化要想实现自定义序列化的类,必须提供下面这些方法. 123private void writeObject(java.io.ObjectOutputSream out) throws IOExceptionprivate void readObject(java.io.ObjectInputStream in) throws IOException,Class NotFoundExceptionprivate void readObjectNoDate() throws ObjectStreamException 通过重写writeObject()方法,可以控制哪些实例变量需要序列化,需要如何序列化. 通过重写readObject()方法,可以控制哪些实例变量需要反序列化,需要如何反序列化. 当序列化流不完整时,readObjectNoData()方法可以用来正确地初始化反序列化的对象. WTF?? 123456789101112131415161718192021222324import java.io.*;class Person implements Serializable &#123; public String name; public transient int age; // 不要重写无参构造器??? public Person(String name, int age) &#123; this.name = name; this.age = age; &#125; private void writeObject(ObjectOutputStream out) throws IOException &#123; out.writeObject(new StringBuffer(name).reverse()); out.writeInt(age); &#125; private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException &#123; StringBuffer name = (StringBuffer) in.readObject(); this.name = name.reverse().toString(); this.age = in.readInt(); &#125;&#125; 另一种自定义序列化机制Java还提供了另一种序列化机制,这种序列化方式完全由程序员决定存储和回复对象数据. 要实现这个目标,Java类需要实现Externalizable接口 该接口定义了两个方法 12void readExternal(ObjectInput in);void writeExternal(ObjectOutput out); 123456789101112131415161718192021222324252627282930import java.io.*;class Person implements Externalizable &#123; public String name; public int age; // 必须提供无参数构造器 public Person() &#123; &#125; public Person(String name, int age) &#123; this.name = name; this.age = age; &#125; public void writeExternal(ObjectOutput out) throws IOException &#123; out.writeObject(new StringBuffer(name).reverse()); out.writeInt(age); &#125; public void readExternal(ObjectInput in) throws IOException , ClassNotFoundException &#123; StringBuffer name = (StringBuffer) in.readObject(); this.name = name.reverse().toString(); this.age = in.readInt(); &#125;&#125; 两种序列化机制对比 实现serializable接口 实现Externalizable接口 系统自动存储必要信息 自定义存储那些信息 Java内建支持,易于实现 需要完成两个方法 性能稍微差,但是方便 性能好,但是繁琐 版本根据前面介绍可知,反序列化Java对象时必须提供该对象的class文件,那么问题是, 随着项目的升级,这个class文件也会升级,如何保证两个class文件的兼容性? Java序列化机制允许序列化类提供一个 private static final的 serialVersionUID值, 该值标志该Java类的序列化版本. 可以通过bin文件夹下的serialver 工具查看某个类的版本号 serialver Person]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch6IO</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[4.RandomAccessFile]]></title>
    <url>%2F2018%2F05%2F16%2FJava%2FJavaSE%2Fch6_IO%2F4_RandomAccessFile%2F</url>
    <content type="text"><![CDATA[RandomAccessFile前面我们讲的InputStream、OutputStream、Reader、Writer都是按照数据的先后顺序读写数据的。 而RandomAccessFile具有随机读写的能力，它既可以读取文件内容,也可以向文件输出数据.更重要的是,程序可以直接跳转到文件的任意地方来读写数据. 操作文件记录指针的方法12long getFilePointer();void seek(long pos); 读取模式创建RandomAccessFile对象时,需要指定一个mode参数. r 只读 rw 可读写,如果文件不存在则创建文件 rws 可读写,并且要求文件的内容或元数据的每个更新都同步写入底层存储设备. （最慢） rwd 可读写,并且要求文件内容的每个更新都同步写入底层存储设备. （慢） rws flushes the contents of the file and the modification date of the file. rwd flushs the contents of the file, but the modification date might not change until the file is closed. rw only flushes when you tell it to and doesn’t change the modifcation date until you close the file. BTW rwd is much slower for writes than rw, and rws is slower again. 12345678910111213141516171819package File;import java.io.*;public class TestFile &#123; public static void main(String[] args) throws IOException &#123; File file = new File("C:\\Users\\Administrator\\Desktop\\新区块链.txt"); RandomAccessFile raf = new RandomAccessFile(file,"rw"); byte[] b = new byte[1024]; int hasRead; while((hasRead=raf.read(b))&gt;0) &#123; System.out.println(new String(b)); &#125; raf.close(); &#125;&#125;]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch6IO</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[3.标准IO]]></title>
    <url>%2F2018%2F05%2F16%2FJava%2FJavaSE%2Fch6_IO%2F3_%E6%A0%87%E5%87%86IO%2F</url>
    <content type="text"><![CDATA[标准IO对于某些应用程序，需要在程序运行的整个生命周期中，从同一个数据源读入数据，或者向同一个数据汇输出数据，例如日志信息。 在JDK的java.lang.System类中，java提供了三个静态变量 System.in InputStream 默认读取键盘输入的内容 System.out PrintStream 默认把信息输出到控制台 System.err PrintStream 默认把信息输出到控制台 123456789public static void main(String[] args) throws IOException &#123; BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); String data = br.readLine(); while (data != null &amp;&amp; !data.equals("exit")) &#123; System.out.println("echo:"+data); data = br.readLine(); &#125;&#125; 重定向标准I/O123setIn(InputStream in);setOut(OutputStream out);setErr(OutputStream out);]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch6IO</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[0.IO概述]]></title>
    <url>%2F2018%2F05%2F15%2FJava%2FJavaSE%2Fch6_IO%2F0_IO%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[Java IO 概述程序的主要任务是操纵数据，在运行时，这些数据都必须位于内存中，并且属于特定的类型，这样程序才能处理它们。 本章介绍如何从数据源中读取数据供程序使用，以及如何把程序处理后的数据写到数据目的地。 Java.io包是java提供的用于处理程序输入输出的类库。 节点流与处理流 按照流是否直接与特定的地方(如磁盘、内存、设备等)相连，分为节点流和处理流两类。 节点流：可以从或向一个特定的地方(节点)读写数据 处理流：对一个已存在的流的连接和封装，通过所封装的流的功能调用实现数据读写 下面四个类的子类都是处理流 FilterInputStream FilterOutputStream FilterReader FilterWriter 不是上面四个类的子类，也有可能是处理流。]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch6IO</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1.Path与File]]></title>
    <url>%2F2018%2F05%2F15%2FJava%2FJavaSE%2Fch6_IO%2F1_Path%E4%B8%8EFile%2F</url>
    <content type="text"><![CDATA[File、Path、Path、Files我们知道IO就是从某个地方获取或写入数据，毫无疑问，文件是我们非常常用的获取和写入数据的地方。 所以我们很有必要了解一下Java中如何处理文件。 File类 File类就是文件和目录的路径名的抽象，就是File对象代表的是文件和目录的路径名 Path接口 看到File类居然代表的是一个路径，是不是觉得很变扭？ 所以在Java7就引入了java.nio.file.Path这个接口，Path接口里面具有大量的方法，File能做的，它都能做，而且做的更好。 Paths 既然Path是接口，那它的实现类是什么呢？我看jdk8的文档好像没看到，那么怎么获取Path类型的对象呢？ 就是通过Paths类了，Paths是个工厂类，它提供了两个静态方法让我们获取Path类型的对象。 我看到Paths的时候，还以为是path的工具类0.0，没想到居然是工厂类 12Path get(String first, String... more);Path get(URI uri); Files 看到Files的时候，我以为它是File的工具类，没想到居然是Path的工具类0.0 Path1234567891011121314151617181920212223242526272829int compareTo(Path other); // 按字典顺序比较两条抽象路径boolean endsWith(Path other);// 测试此路径是否以给定路径结束。boolean endsWith(String other);// 测试此路径是否以给定路径结束。boolean equals(Object other);//测试此路径是否与给定对象相等。Path getFileName();//返回此路径表示的文件或目录的名称作为Path对象。FileSystem getFileSystem();//返回创建该文件的文件系统Path getName(int index);//以Path对象的形式返回此路径的名称元素int getNameCount();//返回路径中的名称元素个数。Path getParent();//Path getRoot()int hashCode()boolean isAbsolute()Iterator&lt;Path&gt; iterator()Path normalize()WatchKey register(WatchService watcher, WatchEvent.Kind&lt;?&gt;... events)WatchKey register(WatchService watcher, WatchEvent.Kind&lt;?&gt;[] events, WatchEvent.Modifier... modifiers)Path relativize(Path other)Path resolve(Path other)Path resolve(String other)Path resolveSibling(Path other)Path resolveSibling(String other)boolean startsWith(Path other)boolean startsWith(String other)Path subpath(int beginIndex, int endIndex)Path toAbsolutePath()File toFile()Path toRealPath(LinkOption... options)String toString()URI toUri() Paths12static Path get(String first, String... more)static Path get(URI uri) Files额。。。 方法很多很多，具体要自己看文档。 复制 创建目录、文件 创建链接 创建软链接 创建临时目录、文件 存在、删除、删除如果存在 ……..真的太多了…….. File通过java.io.File类我们可以访问文件系统，通过File类，你可以做到以下几点： 检测文件是否存在 读取文件长度 重命名或移动文件 删除文件 检测某个路径是文件还是目录 读取目录中的文件列表 File类代表的文件，而不是文件里面的内容. 路径相关123456String getName(); //返回该File对象代表的文件或目录的名字.String getPath();//返回该File对象对应的路径String getAbsolutePath();//返回该File对象对应的绝对路径.String getParent(); //返回此File对象的父目录的名字File getAbsoluteFile(); // 返回代表此File对象的绝对路径的File对象.boolean isAbsolute(); 文件操作1234567boolean creatNewFile();//当该File对象对应的文件不存在时,创建这个对象.static File createTempFile(String prefix,String suffix);// 在默认的路径下创建指定的文件,并返回代表该文件的File对象.static File createTempFile(String prefix,String suffix,File director);// 在指定的文件夹下创建指定的文件,并返回代表该文件的File对象.boolean delete();void deleteOnExit(); 目录操作1234boolean mkdir();String[] list();File listFiles();static File[] listRoots();//WTF??????? 其他12345678boolean renameTo(File newFile)boolean exists();boolean isFile();boolean isDirectory();boolean canRead();boolean canWrite();long lastModified();long length(); // 返回文件内容长度 文件过滤器list()方法可以接受一FilenameFilter参数,FilenameFilter是各函数式接口,你懂的 12345678910111213141516171819package File;import java.io.File;import java.io.FilenameFilter;import java.io.IOException;public class TestFile &#123; public static void main(String[] args) throws IOException &#123; File desktop = new File("C:\\Users\\Administrator\\Desktop"); FilenameFilter ff = (dir, name) -&gt; name.equals("English"); for (String f : desktop.list(ff)) &#123; System.out.println(f); &#125; &#125;&#125;]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch6IO</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1.字节流]]></title>
    <url>%2F2018%2F05%2F15%2FJava%2FJavaSE%2Fch6_IO%2F1_%E5%AD%97%E8%8A%82%E6%B5%81%2F</url>
    <content type="text"><![CDATA[字节流概述在字节流中，数据是以字节的形式展现的。字节流分为字节输入流（InputStream）、字节输出流（OutputStream），这两者都是抽象类，无法被实例化。 我们来看看他们具有的方法 InputStream123456789101112int read(); // 从数据源读取下一个字节（Byte），如果到结尾则返回-1int read(byte[] b); // 从数据源读取若干字节，把它们保存到数组中，如果到结尾则返回-1int read(byte[] b, int off, int len); // 从数组下标off开始存储读取到的数据void close(); // 关闭输入流int available(); // 返回从输入流中读取的字节数目。void skip(long n); // 从输入流中跳过参数n指定数目的字节// 从流中重复读入数据boolean markSupported(); // 判断是否支持重复读入数据void mark(int readLimit); // 从当前位置做标志，直到readLimit，调用read()读取该范围内的数据void reset(); //回到做标记的地方，从而实现重复读取 OutputStream123456void write(int b);void write(byte[] b);void wirte(byte[] b, int off, int len);void close();void flush(); // 只有那些具有缓冲区的子类才重写了该方法 字节流的子类 字节数组输入流与字节数组输出流ByteArrayInputStream 字节数组输入流从内存中的byte数组中读取数据。 构造方法 12ByteArrayInputStream(byte[] buf);ByteArrayInputStream(byte[] buf,int offset,int length); ByteArrayOutpuStream字节数组输出流把数组写入到内存中的byte数组,这个类内部会创建一个byte数组来存储数据。 构造方法 12ByteArrayOutputStream();ByteArrayOutputStream(int size); 例子下面我们通过一个例子来感受了这两个类，我们把字符串写进字节数组，再从字节数组获取字符串内容。 1234567891011121314151617181920public static void main(String[] args) throws IOException &#123; // OutputStream String text = "Hello World"; ByteArrayOutputStream out = new ByteArrayOutputStream(); // 把text的内容写入ByteArrayOutputStream内部的byte数组中 out.write(text.getBytes("UTF-8")); // 获取ByteArrayOutputStream内部的byte数组中的内容 byte[] byteArray = out.toByteArray(); out.close(); // InputStream ByteArrayInputStream in = new ByteArrayInputStream(byteArray); int len = in.available(); byte[] array = new byte[len]; in.read(array); in.close(); System.out.println(new String(array,"UTF-8"));&#125; byte与int之间的转换十进制15，转换成byte是00001111 00001111转换成int是00000000 00000000 00000000 00001111 00000000 00000000 00000000 00001111转换成十进制还是15 十进制-1，转换成byte是11111111 11111111转换成int是00000000 00000000 00000000 11111111 00000000 00000000 00000000 11111111转换成十进制是255 文件输入流与文件输出流FIleInputStream 文件输入流从文件中读取数据。 构造方法 12FileInputStream(File file); // File对象代表文件 仅仅是代表文件，不代表文件里面的内容。FileInputStream(String name); // name就是文件的路径 FIleOutputStream 文件输出流输出数据到文件 构造方法 1234FileOutputStream(File);FileOutputStream(String name);FileOutputStream(String name, boolean append); // 是否在数据后写入数据// 如果文件不存在则会创建，如果file和name指向的是一个目录，则会报错 例子从文件中读取数据，再把数据写入到另一个文件 1234567891011121314public static void main(String[] args) throws IOException &#123; String oldFile = "/home/hdr/Desktop/oldFile"; String newFile = "/home/hdr/Desktop/newFile"; FileInputStream in = new FileInputStream(oldFile); FileOutputStream out = new FileOutputStream(newFile); int data = in.read(); while (data != -1) &#123; out.write(data); data = in.read(); &#125; in.close(); out.close();&#125; 管道输入流与管道输出流管道输入输出流用于多线程之间传输数据 PipedInputStream 管道输入流构造器 1234PipedInputStream();PipedInputStream(int pipeSize);PipedInputStream(PipedOutputStream src);PipedInputStream(PipedOutputStream src, int pipeSize) PipedOutputStream 管道输出流构造器 12PipedOutputStream()；PipedOutputStream(PipedInputStream snk) 对象输入流与对象输出流SequenceInputStream 顺序输入流SequenceInputStream可以把几个输入流串联在一起，合并为一个输入流。 构造器 123SequenceInputStream(InputStream a，InputStream b);SequenceInputStream(Enumeration e);// 可以看出是很老旧的东西了 缓冲输入流和缓冲输出流BufferedInputStream利用缓冲区来提高读取数据的效率。先把一批数据读入到缓冲区，接下来调用read()方法从缓冲区获取数据。 构造器 12BufferedInputStream(InputStream in); // 需要被装饰的输入流BufferedInputStream(InputStream in, int size); // 需要被装饰的输入流以及缓冲区的大小 BufferedOutputStream利用缓冲区来提高写入数据的效率。先把一批数据写入到缓冲区，接下来调用write方法把缓冲区数据写入目的地。 构造器 12BufferedOutputStream(OutputStream in); // 需要被装饰的输入流BufferedOutputStream(OutputStream in, int size); // 需要被装饰的输入流以及缓冲区的大小]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch6IO</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[2.字符流]]></title>
    <url>%2F2018%2F05%2F15%2FJava%2FJavaSE%2Fch6_IO%2F2_%E5%AD%97%E7%AC%A6%E6%B5%81%2F</url>
    <content type="text"><![CDATA[字符流概述字符流分为字符输入流（Reader）和字符输出流（Writer），这两者都是抽象类，无法被实例化。 我们来看看他们具有的方法。 ReaderJava8 Reader官方文档 123456789101112int read(); // 读取单个字符int read(char[] cbuf); // 读取字符到数组abstract int read(char[] cbuf, int off, int len); // 读取字符到数组的一部分int read(charBuffer target); // 从特定的字符缓冲区读取数据boolean ready()； // 判断是否可以读取数据abstract void close();long skip(long n);boolean markSupported();void mark(int readAheadLimint); // 在当前流的位置做标记void reset(); WriterJava8 Writer官方文档 12345678void write(int c);void write(char[] cbuf);abstract void write(char[] cbuf, int off, int len);void write(String str);void write(String str, int off, int len);abstract void close();abstract void flush(); 编码问题说道处理字符，那就不能不提编码问题了。 Java语义采用Unicode字符编码。 获取本地操作系统的默认字符编码 123System.getProperty("file.encoding");// 或者Charset.defaultCharset(); Reader类能够将输入流中采用其他编码类型的字符转换为Unicode字符，然后在内存中为这些Unicode字符分配内存。 Writer类能够将内存中的Unicode字符转换为其他编码类型的字符，再写入到输出流中。 默认情况下，Reader和Writer会在本地平台的字符编码和Unicode编码之间进行编码转换。 如果需要用到其他类型的编码，可以在构造的时候指定编码类型。 字符流的子类 字符数组Rader和字符数组WriterCharArrayReader构造器 12CharArrayReader(char[] buf);CharArrayReader(char[] buf, int offset, int length); CharArrayWriter构造器 12CharArrayWriter();CharArrayWriter(int initialSize); 缓冲字符Reader和缓冲字符WriterBufferedReader构造器 12BufferedReader(Reader in);BufferedReader(Reader in, int sz); BufferedWriter构造器 12BufferedWriter(Writer out);BufferedWriter(Writer out, int sz); 文件Reader和文件WriterFileReader构造器 123FileReader(File file);FileReader(FileDescriptor fd);FileReader(String fileName); FileWriter构造器 12345FileWriter(File file);FileWriter(File file, boolean append);FileWriter(FileDescriptor fd);FileWriter(String fileName);FileWriter(String fileName, boolean append); 字符串Reader和字符串WriterStringReader构造器 1StringReader(String s)； StringWriter12StringWriter()；StringWriter(int initialSize)]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch6IO</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[6.枚举类]]></title>
    <url>%2F2018%2F05%2F10%2FJava%2FJavaSE%2Fch3_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%2F6.%E6%9E%9A%E4%B8%BE%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[枚举类123public enum Gender&#123; FEMALE，MALE；&#125; 枚举类具有以下非抽象的方法 int compareTo(E o)比较当前枚举常量与制定对象的顺序 Class getDeclaringClass String name int ordinal String toString static Enum[] values() 枚举类型的构造方法 枚举类可以有构造方法，不过必须是private的。 1234567891011public enum Gender&#123; FEMALE("女"),MALE("男"); private String desc; private Gender(String desc)&#123; this.desc = desc; &#125; public String getDesc()&#123;return desc&#125;; &#125; EnumSet和EnumMap在java API中，还为Enum类提供了两个适配器： EnumSet：把枚举类型转换成集合类型。它的静态方法allOf()方法能把枚举类的所有常量实例存放到EnumSet类型的集合中。 EnumMap：把枚举类型转换成映射类型。 123456789101112public static void main(String[] args) &#123; EnumSet&lt;Gender&gt; genderSet = EnumSet.allOf(Gender.class); genderSet.forEach(gender -&gt; System.out.println(gender.getDesc()) ); EnumMap&lt;Gender, String&gt; map = new EnumMap&lt;&gt;(Gender.class); map.put(Gender.FEMALE,"女"); map.put(Gender.MALE,"男"); map.put(Gender.FEMALE,"女"); map.forEach((key,value)-&gt;System.out.println("key:"+key+" Value:"+value));&#125;]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch3面向对象</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1.Java异常处理机制概述]]></title>
    <url>%2F2018%2F05%2F10%2FJava%2FJavaSE%2Fch5_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%2F1.Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[Java异常处理机制概述当一个新方法被调用时，Java虚拟机会把方法包装成一种叫栈帧的数据结构，然后放入虚拟机栈，当方法执行过程中出现了异常，虚拟机首先查看该方法是否带有处理该异常的代码块，如果有，则执行该代码块，否则弹出该方法，从它的调用者中寻找处理该异常的代码，不停重复，如果异常到最后都还没被处理，那么就会执行以下步骤： 调用异常对象的printStackTrace()方法，打印来自方法调用栈的异常信息。 如果该线程不是主线程，那么终止这个线程，其他线程继续正常运行，否则整个应用程序被终止。 throws与throwthrows表明该方法无法处理这些异常，把异常处理交由它的调用者去负责 123public void update(User user)throws SQLException&#123; // .....&#125; throw表示在方法内部抛出一个异常 12thorw new MyException("出现了异常");// 抛出的异常对象必须是Throwable类或其子类 异常处理代码块1234567try&#123; &#125;catch(SQLExcetion e)&#123; // 处理异常&#125;final&#123; // 无论是否出现异常都会执行的语句&#125;]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch5异常处理</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[2.Java异常]]></title>
    <url>%2F2018%2F05%2F10%2FJava%2FJavaSE%2Fch5_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%2F2.Java%E5%BC%82%E5%B8%B8%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[Java异常类java.lang.Throwable类是所有异常类的父类，常用方法有 getMessage()打印异常错误信息 printStackTrace()打印跟踪方法调用栈而获得的详细异常信息 Throwable类有两个直接的子类： Error：表示单靠程序自身无法恢复的严重错误，建议终止程序 Exception：表示程序本身可以处理的异常 运行时异常RuntimeException及其子类都是运行时异常，这种异常的特点是Java编译器不会去检查它。 受检查异常除了RuntimeException异常，其他Exception都是受检查异常，这中异常的特点是Java编译器会检查它，也就是说，当程序中出现这类异常时，要么用try-catch捕获它，要么用throws抛出它，否则编译不会通过。 两者区别运行时异常与受检查异常受检查异常表示程序可以处理的异常。 运行时异常表示无法让程序恢复运行的异常。 运行时异常与错误Error错误类通常是由Java虚拟机抛出的在JDK中预定义的一些错误类，在编写程序的时候很少继承Error。 RuntimeException表示程序代码中的错误，开发人员可根据实际需要来扩展它。 自定义异常类可以通过继承Exception或RuntimeException类来创建自定义的异常。 异常转译：所谓的异常转译就是将一种异常转换另一种新的异常，也许这种新的异常更能准确表达程序发生异常。]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch5异常处理</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[4.内部类]]></title>
    <url>%2F2018%2F05%2F09%2FJava%2FJavaSE%2Fch3_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%2F4.%E5%86%85%E9%83%A8%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[内部类定义在另一个类中的类称为内部类。 使用内部类的原因： 内部类是外部类的成员，因此内部类可以使用外部类的所有数据和方法，包括private修饰的。 内部类可以对同一个包中的其他类隐藏起来。 当想要定义一个回调函数且不想编写大量代码时，使用匿名内部类比较便捷。 内部类的分类 成员内部类 实例内部类 静态内部类 局部内部类（没有使用意义） 实例内部类 当外部类实例存在的时候，才能创建内部类 1234Outer.Inner inner = new Outer().new Inner();// 或者Outer outer = new Outer();Outer.Inner inner = outer.new Inner(); 在内部类中，可以直接访问外部类的所有成员，包括成员方法和成员变量 在外部类中不能直接访问内部类的成员，必须通过内部类的实例去访问 在实例内部类中不能定义静态成员，只能定义实例成员 如果实例内部类B与外部类A包含同名的成员，那么在类B中this.var表示类B的成员，A.this.var表示类A的成员 静态内部类 静态内部类不会自动持有外部类的特定实例的引用，在创建静态内部类的实例时，不必创建外部类的实例 静态内部类可以直接访问外部类的静态成员，如果访问外部类的实例成员，要通过外部类的实例去访问 静态内部类中可以定义静态成员和实例成员 局部内部类 局部内部类不能包含静态成员 匿名内部类匿名内部类存在的意义：有些实现类或子类我们只需要使用一次，没必要特意编写这个类，这时候我们就可以使用匿名内部类。匿名内部类仅能被使用一次，创建匿名内部类时它会立即创建一个该类的实例，该类的定义会立即消失，所以匿名内部类是不能够被重复使用。 创建匿名内部类 1234new 父类构造器（参数列表）|实现接口（） &#123; //匿名内部类的类体部分 &#125; 在这里我们看到使用匿名内部类我们必须要继承一个父类或者实现一个接口，当然也仅能只继承一个父类或者实现一个接口。同时它也是没有class关键字，这是因为匿名内部类是直接使用new来生成一个对象的引用。 注意事项 1、使用匿名内部类时，我们必须是继承一个类或者实现一个接口，但是两者不可兼得，同时也只能继承一个类或者实现一个接口。 2、匿名内部类中是不能定义构造函数的。 3、匿名内部类中不能存在任何的静态成员变量和静态方法。 4、匿名内部类为局部内部类，所以局部内部类的所有限制同样对匿名内部类生效。 5、匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。 6、给匿名内部类传递参数的时候，若该形参在内部类中需要被使用，那么该形参必须要为final 123456789public class OuterClass &#123; public void display(final String name,String age)&#123; class InnerClass&#123; void display()&#123; System.out.println(name); &#125; &#125; &#125;&#125; 匿名内部类初始化 我们一般都是利用构造器来完成某个实例的初始化工作的，但是匿名内部类是没有构造器的，我们需要使用构造代码块来初始化匿名内部类。 123456789101112131415161718return new InnerClass() &#123; int age_ ; String name_; //构造代码块完成初始化工作 &#123; if(0 &lt; age &amp;&amp; age &lt; 200)&#123; age_ = age; name_ = name; &#125; &#125; public String getName() &#123; return name_; &#125; public int getAge() &#123; return age_; &#125; &#125;; 继承内部类子类与父类中的内部类同名]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch3面向对象</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[5.lamdba表达式]]></title>
    <url>%2F2018%2F05%2F09%2FJava%2FJavaSE%2Fch3_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%2F5.lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[lambd表达式为什么引入lambda表达式？]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch3面向对象</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[3.抽象类与接口]]></title>
    <url>%2F2018%2F05%2F08%2FJava%2FJavaSE%2Fch3_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%2F3.%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3%2F</url>
    <content type="text"><![CDATA[抽象类定义：在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。 作用：在某些情况下，类会无法确定其方法的实现方式，例如图形类，它要计算周长，但是不同的图形有不同的周长公式，那就导致图形类无法确定计算周长这个方法的实现方式。这个时候使用抽象类就是个不错的解决方法。 抽象类除了不能实例化对象之外，类的其它功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样。由于抽象类不能实例化对象，所以抽象类必须被继承，才能被使用。也是因为这个原因，通常在设计阶段决定要不要设计抽象类。 abstract修饰符可以修饰类和方法。被abstract修饰符修饰的类叫做抽象类。被abstract修饰符修饰的方法叫做抽象方法。 注意： 抽象类不能被实例化。 抽象类可以有非抽象方法。 抽象类可以没有抽象方法，但是定义了抽象方法的类必须要抽象类。 抽象方法没方法体。（看下面的例子） 12public abstract void absMethod();// 方法体就是&#123;&#125;和它里面的东西。 接口接口的概念与基本特征在java中，接口有两种意思。 一是概念性的接口，指系统对外提供的所有服务。类的所有能被外部使用者访问的方法构成了类的接口。 二是指用interface关键字定义的实实在在的接口，也称为接口类型。 我们这里要讲的是接口类型，它表面上与抽象类有点相似，都是不能被实例化。 类实现接口的关键字是implements 123public class MyDate implements Comparable&#123; &#125; 注意： 接口中的成员变量默认都是public static final修饰的，必须被显示初始化。 12345public interface A&#123; int var1; // 报错 没有赋值 protected int var2=2; // 报错 只能用public修饰 int var3 = 3; // 可以&#125; 接口中的方法默认是public、abstract修饰的。 JDK8之前，接口只能包含抽象方法。JDK8之后，允许在接口中定义默认方法和静态方法。 123456789public interface MyInterface&#123; default void defMethod()&#123; System.out.println("默认方法要用default来修饰"); &#125; static void staMethod()&#123; System.out.println("我们是接口中的静态方法"); &#125;&#125; 接口不能实现另一个接口，但是可以继承多个其他接口 12public interface MyInterface extends A,B&#123;&#125; 比较接口和抽象类1）抽象类是对一种事物的抽象，即对类抽象，而接口是对行为的抽象。抽象类是对整个类整体进行抽象，包括属性、行为，但是接口却是对类局部（行为）进行抽象。举个简单的例子，飞机和鸟是不同类的事物，但是它们都有一个共性，就是都会飞。那么在设计的时候，可以将飞机设计为一个类Airplane，将鸟设计为一个类Bird，但是不能将 飞行 这个特性也设计为类，因此它只是一个行为特性，并不是对一类事物的抽象描述。此时可以将 飞行 设计为一个接口Fly，包含方法fly( )，然后Airplane和Bird分别根据自己的需要实现Fly这个接口。然后至于有不同种类的飞机，比如战斗机、民用飞机等直接继承Airplane即可，对于鸟也是类似的，不同种类的鸟直接继承Bird类即可。从这里可以看出，继承是一个 “是不是”的关系，而 接口 实现则是 “有没有”的关系。如果一个类继承了某个抽象类，则子类必定是抽象类的种类，而接口实现则是有没有、具备不具备的关系，比如鸟是否能飞（或者是否具备飞行这个特点），能飞行则可以实现这个接口，不能飞行就不实现这个接口。 2）设计层面不同，抽象类作为很多子类的父类，它是一种模板式设计。而接口是一种行为规范，它是一种辐射式设计。什么是模板式设计？最简单例子，大家都用过ppt里面的模板，如果用模板A设计了ppt B和ppt C，ppt B和ppt C公共的部分就是模板A了，如果它们的公共部分需要改动，则只需要改动模板A就可以了，不需要重新对ppt B和ppt C进行改动。而辐射式设计，比如某个电梯都装了某种报警器，一旦要更新报警器，就必须全部更新。也就是说对于抽象类，如果需要添加新的方法，可以直接在抽象类中添加具体的实现，子类可以不进行变更；而对于接口则不行，如果接口进行了变更，则所有实现这个接口的类都必须进行相应的改动。]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch3面向对象</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1.类与对象]]></title>
    <url>%2F2018%2F05%2F07%2FJava%2FJavaSE%2Fch3_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%2F1.%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[类和对象类是对象的模版,对象是类的实例. 类里面可以有: 定义类12345[public/abstract/final] class 类名&#123; 零到多个构造器; 零到多个成员变量; 零到多个方法;&#125; 注意: public修饰的类,类名必须跟文件名一样. static修饰的成员,不能直接访问没有static修饰的成员. 构造器是类创建对象的根本途径,如果类没有构造器,系统会自动提供一个默认的构造器. 初始化块类初始化块12345static&#123; &#125;// 初始化块可以有多个,先定义的先执行// 先执行父类的类初始化块,然后再执行本类的初始化块 实例初始化块12345&#123; &#125;// 先实例初始化,然后再执行构造器// 其实实例初始化块是假的,它会被系统"还原"到每个构造器中 定义构造器123[public/protected/private] 类名(args)&#123; // 构造器名跟类名相同 // to do&#125; 定义成员变量1[ [public/protected/private] [static] [final/abstract] ] dataType name; 定义成员方法123[[public/protected/private] [static] [final/abstract]] returnType name(args)&#123; // to do&#125; 补充: 1. this关键字:代表调用该方法的对象 2.方法重载: 方法名相同,方法参数不同 3.构造器重载:名字相同,方法参数不同 内部类 Java中变量的分类]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch3面向对象</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[2.继承]]></title>
    <url>%2F2018%2F05%2F07%2FJava%2FJavaSE%2Fch3_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%2F2.%E7%BB%A7%E6%89%BF%2F</url>
    <content type="text"><![CDATA[继承1.什么是继承继承是面向对象三大特性之一，继承允许我们基于已经存在的类来构造新的类，从而实现类的复用和扩展。 2.继承的基本语法123public class Manager extends Employee&#123; // ...............&#125; 通过extends关键字说明Manager类继承了Employee类，这时候Manager类是Employee类的子类，相对的，Employee类就是Manager类的父类。 不同情况下，子类继承父类的东西会有所不同 两个类位于同一个包时，子类继承父类public、protected、默认访问级别的成员变量和成员方法。 两个类不在同一个包时，子类只能继承父类pulibc、protectd访问级别的成员变量和成员方法。 3.方法重载与方法重写方法重载（Overload）有时候，类的同一种功能有多种实现方式，到底采用那种方式，取决于调用者给定的参数。 例如唱歌，有独唱，有合唱。 123public void singAlone()&#123; // 独唱.....&#125; 123public void chorus()&#123; // 合唱&#125; 如果每一种唱法都要写一个新的方法来实现，那么无论是想方法名，还是记方法名都是很难受的。 这时候我们就可以通过方法重载来解决这个难题. 1234567public void sing()&#123; // 独唱&#125;public void sing(String chorus)&#123; // 合唱&#125; 看上面的，在同一个类中，方法名相同，但是方法参数列表不同，这就是方法重载。 注意: 方法重载与修饰符、返回类型无关。 方法签名：方法名+参数列表。 方法重写（Overwrite）正如上面所述，子类会继承父类的方法，有些时候父类的方法并不能满足我们的需求，那么我们可以对父类的方法进行重写。 123456789101112public class Parent&#123; public void sayHello()&#123; System.out.println("Hello,I am parent"); &#125;&#125;public class Son extends Parent&#123; @Override public void sayHello()&#123; System.out.println("Hello,I am son"); &#125;&#125; 方法重写：子类中的某个方法，其方法名、参数列表、返回类型都与父类中某个方法相对应。 注意: 方法重写最好使用@Override注解修饰，这样不仅代码直观，还会帮你检查返回参数，方法名，参数列表，是否跟父类方法相同。 子类不能缩小父类方法的访问权限。 子类方法不能抛出比父类方法更多的异常。 因为子类无法继承父类的私有方法，自然，子类也就无法重写父类的私有方法。 4.this与superthis代表的是当前类，super代表的是当前类的父类。 例如this() 调用当前类的构造方法, super()调用当前类的父类的构造方法。 this.var 获取当前类的实例变量。super.var 获取父类的实例变量 5.Object类Object类是所有类的始祖，所有类都是源自于它。 因此我们很有必要了解这个类所提供的服务。 这里我们挑几个重中之重来讲，剩余的自己看文档去。 equals方法equlas方法用于检测一个对象是否等于另外一个对象。 说道equals就必须讲一讲 == 了。 == 对于基本数据类型，==比较的是他们的值 对于引用类型，==比较的是他们在内存中存放的地址 基本数据类型用==比较，引用类型用equals比较。 让我们看看Object类中equlas方法的源码。 123public boolean equals(Object obj) &#123; return (this == obj);&#125; 可知它这个方法就是在判断着两个对象是否具有相同引用，如果有相同引用，这两个对象必然是相等的，但是在实际开发中，这种判断并没有什么意义。 也就是说！我们需要学会自己写equlas方法 java规范要求equlas方法具有以下特性 自反性 当x != null x.equlas(x) 要返回true； 对称性 x.qeuals(y)与 y.equals(x) 结果要相同; 传递性 如果x.qeuals(y)和x.qeuals(z)都为true，则y.quals(z)也为true； 一致性 如果x和y的引用对象没有发生变化，那么x.qeuals(y)的结果也不会变； 当x != null x.equlas(null) 要返回false； equals方法在同一个类的两个对象间的比较还是容易理解的。但是如果是子类与父类混合比较，那么情况就不太简单了。 编写一个完美的equals方法 1234567891011121314@Overridepublic boolean equals(Object otherObject)&#123; if (this==otherObject) return true; if (otherObject==null) return false; // 比较this与otherObject是否属于同一个类。 // 如果子类对于判断equlas，具有自己的标准，那就要使用getClass if (getClass()!=otherObject.getClass()) return false; // 如果子类对于判断equlas，是跟随超类的，那就使用instanceOf检测 if (!otherObject instanceOf ClassName) return false; // 暂时还不能理解，还是选用getClass吧。 // ClassName是当前类的类型 ClassName other = (ClassName) otherObject; return field1 == other.field1 &amp;&amp; .......&#125; hashCode方法hash code（散列码）是由对象导出的一个整型值。它是没有规律的。如果x和y是两个不同的对象，那么它们的hash code基本不会相同。 如果两个对象相等（equals方法返回真）但是他们的hashcode却不一样，这会使HashSet无法正常工作。相等的对象hashcode必须相等，不等的对象，hashcode是否相等不做要求。 标准的hashCode方法 123456789@Overridepublic int hashCode() &#123; int hash = 7; hash = 31 * hash + (int) id; hash = 31 * hash + (name == null ? 0 : name.hashCode()); hash = 31 * hash + (email == null ? 0 : email.hashCode()); return hash;&#125;// 使用两个私有成员，减少重复的可能性。 这个方法一般也不用我们自己写，直接用IDE生成就可以了。 不过equals方法倒是真的要好好记住。 toString方法6.final修饰符final具有“不可改变”的含义，它可以修饰非抽象类、非抽象方法、变量。 用final修饰的类的不能被继承； 用final修饰的方法不能被子类重写； 用final修饰的变量只能赋值一次； 7.封装封装也是面向对象的三大特性之一。 封装指的是将对象的状态信息隐藏在对象内部,不允许外部程序直接访问对象内部信息,而是通过该类提供的方法来实现对内部信息的操作和访问. 封装的目的: 隐藏类的实现细节 让使用者只能通过特定的方法来访问数据,从而保证数据的安全合理 便于修改,提高代码可维护性 封装的实现: 面向对象的编程语言主要是通过访问控制机制来进行封装的。 Java提供了四种访问控制符,灵活运用它们就能有效控制对象的封装程度。 private default protected public 同一个类中 √ √ √ √ 同一个包中 √ √ √ 子类中 √ √ 全局范围内 √ 8.多态面向对象的三大特性：封装、继承、多态。 多态性允许你将父对象设置成为和一个或更多的他的子对象相等的技术，赋值之后，父对象就可以根据当前赋值给它的子对象的特性以不同的方式运作。 以后再补充 9.继承的利弊和使用原则10.比较组合与继承]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch3面向对象</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[5.多表操作]]></title>
    <url>%2F2018%2F05%2F05%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2FMySQL%2F1.CRUD%2F5.%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[多表操作多表检索1.使用连接实现多表检索连接（join） 内连接一个表的的所有行与另一个表的所有行，排列组合。 我们可以通过ON子句来添加排列组合的规则,从而减少排列组合的结果数 1SELECT * FROM t1 INNER JOIN t2 ON t1.i1 = t2.i2 左（外）连接和右（外）连接内连接只会显示在连个表里都匹配上的行。外连接除了显示同样的结果，还可以把其中一个表在另一个表没有匹配的行也显示出来。左连接就是把左表里没有匹配的内容也显示出来。 1234SELECT *FROM t1 LEFT JOIN t2 on t1.i1 = t2.i2ORDER BY t1.i1 ASC; 2.使用子查询实现多表检索子查询：用括号括起来，并嵌入另一条语句里的那条SELECT语句。 1SELECT * FROM socre WHERE event_id IN (SELECT event_id FROM grade_event WHERE category = 'T'); 子查询可以返回各种不同类型的信息 标量子查询：返回一个值 列子查询：返回一个由一个值或多个值构成的列 行子查询：返回一个由一个值或多个值构成的行 表子查询：返回一个由一个行或多个行组成的表 IN 和 NOT IN 子查询1234# 查询逃课学生SELECT * FROM student WHERE student_id IN (SELECT student_id FROM absence);# 查询全勤学生SELECT * FROM student WHERE student_id NOT IN (SELECT student_id FROM absence); ALL、ANY和SOME子查询123456# 外查询找出比子查询的到的生日都要小的生日SELECT last_name ,first_name birth FORM persident WHERE birth &lt;= ALL (SELECT birth FROM president);SELECT last_name ,first_name birth FORM persident WHERE birth &lt;= ANY (SELECT birth FROM president);SELECT last_name ,first_name , state , city FORM persident WHERE (state,city) = ANY (SELECT state , city FORM persident WHERE last_name = 'Roosevelt'); EXISTS 和 NOT EXISTS 子查询这两个运算符只会测试某个子查询是否返回了行。如果有返回，EXISTS结果为真。 FORM子句里的子查询1SELECT * FROM (SELECT 1,2) AS t1 INNER JOIN (SELECT 3,4) AS t2; 3.使用UNION实现多表检索如果想把多个查询的结果合并成一个结果集，那么需要使用UNION语句。 1SELECT i FROM t1 UNION SELECT j FROM t2 UNION SELECT k FROM t3; UNION的特性 列名和数据类型 UNION结果集里的列名来自第一个SELECT里的列名。UNION选取的列数，必须跟第一个SELECT选取的列数相同。各列不需要名字相同，甚至数据结构也不需要相同，MySQL会进行必要的类型转换。 重复行处理 默认情况下，UNION会将结果集里的重复行剔除掉 如果想保留重复的行，则需要把UNION 改为 UNION ALL ORDER BY 和 LIMIT处理 如果想对UNION结果作为一个整天进行排序，那么需要用括号把每个SELECT语句括起来，并在最后加上ORDER BY子句。ORDER BY子句必须引用第一个SELECT语句选中的列名。 12(SELECT i FROM t1) UNION ALL (SELECT j FROM t2) UNION ALL (SELECT k FROM t3) ORDER BY i; 多表删除在编写涉及多表的DELETE语句时，需要把所有涉及的表全部列在FROM子句里，并把用来匹配表中各行的检索条件写在WHERE子句里。 1234567DELETE t1 FROM t1 INNDER JOIN t2 ON t1.id=t2.id;DELETE t1,t2 FROM t1 INNER JOIN t2 ON t1.id = t2.id;DELETE t1 FROM t1 LEAF JOIN t2 ON t1.id = t2.id WHERE t2.id IS NULL;DELETE FROM t1 USING t1 INNDER JOIN t2 ON t1.id = t2.id;DELETE FROM t1,t2 USING t1 INNDER JOIN t2 ON t1.id = t2.id;DELETE FROM t1 USING t1 LEFT JOIN t2 ON t1.id = t2.id WHERE t2.id IS NULL; 多表更新12345UPDATE score, grade_event SET score.score = score.score + 1WHERE score.event_id = grade_event.event_idAND grade_event.date = '2012-09-23' AND grade_event.category = 'Q';UPDATE t1, t2 SET t2.a = t1.a WHERE t2.id = t1.id;]]></content>
      <categories>
        <category>DataBase</category>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1.数据库的CRUD]]></title>
    <url>%2F2018%2F05%2F05%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2FMySQL%2F1.CRUD%2F1.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84CRUD%2F</url>
    <content type="text"><![CDATA[数据库的CRUD在讲数据库的CRUD之前我们需要了解两样东西。 SQL语句大小写规则 SQL关键字和函数名是不区分大小写的。 数据库名、表名和视图名跟操作系统的文件系统有关，例如Windows是不区分大小写，而Linux是区分的。 因为MySQL使用主机上的文件和目录来表示数据库和表。 存储函数、过程和时间的名字都不区分大小写 列名和索引名不区分大小写 别名，默认情况下表的别名区分大小写 字符串值 字符集的支持MySQL支持多种字符集，而且允许在服务器、数据库、表、列和字符串常量等不同层次单独指定字符集。 一个给定的字符集可以有一种或多种排序规则，所谓排序规则就是该字符集是通过什么方式来进行比较的。 我们可以通过以下例子说明： 1234567891011121314151617181920212223242526mysql&gt; show character set like &apos;%gbk%&apos;;+---------+------------------------+-------------------+--------+| Charset | Description | Default collation | Maxlen |+---------+------------------------+-------------------+--------+| gbk | GBK Simplified Chinese | gbk_chinese_ci | 2 | +---------+------------------------+-------------------+--------+1 row in set (0.00 sec)mysql&gt; show collation like &apos;%gbk%&apos;;+----------------+---------+----+---------+----------+---------+| Collation | Charset | Id | Default | Compiled | Sortlen |+----------------+---------+----+---------+----------+---------+| gbk_chinese_ci | gbk | 28 | Yes | Yes | 1 | | gbk_bin | gbk | 87 | | Yes | 1 | +----------------+---------+----+---------+----------+---------+2 rows in set (0.00 sec)从上例中我们可以看出字符集gbk有两个排序方式（分别为gbk_chinese_ci何gbk_bin），其中默认的排序方式为gbk_chinese_ci。排序方式的命名规则为：字符集名字_语言_后缀，其中各个典型后缀的含义如下：1）_ci：不区分大小写的排序方式2）_cs：区分大小写的排序方式3）_bin：二进制排序方式，大小比较将根据字符编码，不涉及人类语言，因此_bin的排序方式不包含人类语言因此，gbk_chinese_ci排序方式就表示：字符集为gbk，人类语言使用中文来比较大小，比较时区分大小写。 指定字符集和排序规则在用于创建数据库和表的SQL语句里，有两个句子可用于指定数据库、表和列的字符集和排序规则。 123456# 指定字符集CHARACTER SET charset# 指定字符集的排序方式COLLATE collation# 例子 使用utf8字符集，区分大小写的排序方法CREATE DATABASE learn_mysql CHARACTER SET utf8 COLLATE utf8_general_cs; 数据库的CRUD创建数据库12CREATE DATABASE [IF NOT EXISTS] learn_mysql [CHARACTER SET charset] [COLLATE collation]; 删除数据库1DROP DATABASE learn_mysql; 查看数据库1SHOW DATABASES； 使用数据库1USE learn_mysql; 更改数据库12# 这里说的更改数据库的全局属性，也就是默认字符集和排序规则，而不是数据库的名字ALTER DATABASE learn_mysql [CHARACTER SET charset] [COLLATE collation];]]></content>
      <categories>
        <category>DataBase</category>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[2.存储引擎与表的CRUD]]></title>
    <url>%2F2018%2F05%2F05%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2FMySQL%2F1.CRUD%2F2.%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B8%8E%E8%A1%A8%E7%9A%84CRUD%2F</url>
    <content type="text"><![CDATA[存储引擎与表的CRUD存储引擎MySQL支持多种存储引擎（以前被称为表处理器），存储引擎有好几种，其中最常用的是InnoDB和MyISAM 存储引擎 描述 InnoDB 具备外键支持功能的事务处理引擎 MyISAM 主要的非事务处理存储引擎 查看空的存储引擎 1SHOW ENGINES; 表的磁盘存储方式每次创建表时，MySQL都会创建一个磁盘文件，用于保存该表的格式（即它的定义）。该文件名与表名一致，后缀是.frm。个别存储引擎还可能会为表再创建接特定的文件，用于存储表的内容。 存储引擎 磁盘文件 InnoDB .ibd（数据和索引） MyISAM .MVD(数据) .MYI(索引) CSV .CSV(数据) .CSM(元数据) InnoDBInnoDB是MySQL的默认存储引擎，它具有以下功能： 其表在执行提交和回滚操作时是事物安全的。 在系统崩溃后可以自动回复。 外键和引用完整性支持，包括级联删除和更新。 额。。。。。目前还不懂，所以也就不深究了 表的CRUD创建表123456CREATE Table user( name VARCHAR(20) , birth DATE NOT NULL , weight INT(11) , gender ENUM('F','M')) 指定存储引擎 在创建表的时候，我们可以为它指定存储引擎。 1234567CREATE Table user( name VARCHAR(20) , birth DATE NOT NULL , weight INT(11) , gender ENUM('F','M'))ENGINE=InnoDB;# 引擎名字不区分大小写 创建临时表在创建表的时候加上TEMPORARY关键字，那么服务器讲创建出一个临时表 123456CREATE TEMPORARY TABLE user( name VARCHAR(20) , birth DATE NOT NULL , weight INT(11) , gender ENUM('F','M'))ENGINE=InnoDB; 注意： 与服务器终止连接后，临时表将会消失 临时表只对创建该表的客户端可见 如果临时表与永久表的名字相同，那么在临时表消失之前，所有操作都会用在临时表身上 根据其他表或查询结果来创建表MySQL提供了两条语句，可用于根据其它表或根据查询结果创建新表。 CREATE TABLE ... LIKE 根据原有表创建一个新表，该表是原有表的一个空副本，会把原有表的结构丝毫不差的复制过来。 1CREATE TABLE new_user LIKE user; CREATE TABLE ... SELECT 根据查询结果创建一个新表,该表不会复制所有的列属性，如AUTO_INCREMENT列就不会被复制 1CREATE TABLE new_user SELECT * FROM user; 注意：新的列会根据你所选择的列来命名，如果某个列是以表达式的计算结果生成的，那么该列的名字就是该表达式的问题表示，例如 1234567mysql&gt; CREATE TABLE mytbl SELECT PI()*2;mysql&gt; SELECT * FROM mytbl;+----------+| PI()*2 | # 注意这个列名+----------+| 6.283185 |+----------+ 为了避免这个状况，我们可以使用别名 1mysql&gt; CREATE TABLE mytbl SELECT PI()*2 AS mycol; 特别是多表查询时，如果不同的表具有相同列，如果不指定列别名，那么就会报错。 前面说过这种方式创建的表不会复制所有的列属性，如果想解决这个问题，请查看cast()函数的内容。 使用分区表MySQL支持表分区，让表的内容分散存储在不同的物理存储位置。 假设你想要创建一个表，用于存储日期和性别的数据，并且假设有累计多年的数据需要加载到这个表里。那么我们可以根据日期，使用范围分区的方式，按年份讲各行分配到某个给定的分区。 1234567891011CREATE TABLE log_partition ( dt DATETIME NOT NULL, info VARCHAR(100) NOT NULL, INDEX (dt))PARTITION BY RANGE (YEAR(dt)) ( PARTITION p0 VALUES LESS THAN (2010), partition p1 VALUES LESS THAN (2011), partition p2 VALUES LESS THAN (2012), partition p3 VALUES LESS THAN (2013), partition PMAX VALUES LESS THAN MAXVALUE); 当2014过完后 123456ALTER TABLE log_partitionREORGANIZE PARTITION pamxINTO ( partition p4 VALUES LESS THAN (2014), partition pamx VALUES LESS THAN MAXVALUE); 默认情况下，MySQL会将分区存储在专属于分区表的数据库目录里。如果想存储分散到其他地方，则需要分区选项DATA_DIRECTORY和INDEX_DIRECTORY，具体使用方式上网查询。 删除表1234DROP TABLE table_name;DROP TABLE t1,t2;DROP TABLE IF EXISTS table_name;DROP TEMPORARY TABLE IF EXISTS table_name; 查看表123SHOW CREATE TABLE table_name；SHOW TABLE STATUS;DESC TABLE table_name; 修改表结构我们可以通过ALTER TABLE语句来对表结构进行修改。 1ALTER TABLE tb_name1 action [,action] ...; 其中的每个action是指对表所做的修改。 改变列的数据类型1234ALTER TABLE user MODIFY password int(11);ALTER TABLE user CHANGE password password varchar(50);# 为什么使用CHANGE需要写两次列名？# 因为CHANGE不仅能改变列的数据结构，还能改变列名 修改列的数据类型的一个重要原因是，提高多表连接的查询效率。索引经常用于两个相似类型之间的连接比较，如果两个类型完全相同，比较速度会更快。 让表使用另一种存储引擎1ALTER TABLE user ENGINE=InnoDB; 重新命名表12ALTER TABLE user RENAME TO old_user; RENAME TABLE user TO old_user,table2 TO old_table2; 表的转移12ALTER TABLE db1.user RENAME TO db2.user; RENAME TABLE db1.user TO db2.user;]]></content>
      <categories>
        <category>DataBase</category>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java数组]]></title>
    <url>%2F2018%2F05%2F05%2FJava%2FJavaSE%2Fch2_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%95%B0%E7%BB%84%2F%E6%95%B0%E7%BB%84%2F</url>
    <content type="text"><![CDATA[数组什么是数组?数组是一种非常常见的数据结构,可以用于存储多个数据. 特点: ① 数组内的元素必须是同一种类型. ② 数组既可以存储基本数据类型,也可以存储引用类型. ③ 一旦数组的初始化完成,数组的长度就不可改变. ④ 数组是一种引用类型. 使用数组定义数组:12// type[] arrayName;int[] nums; 初始化数组:静态初始化1234// arrayName = new type[]&#123;ele1,ele2,ele3&#125;;nums = new int[]&#123;1,2,3&#125;;// 或者nums = &#123;1,2,3&#125;; 动态初始化12// arrayName = new type[number]nums = new int[4]; // 可以存储四个int类型数 获取数组元素:12// arrayName[index]int n = nums[1]; 遍历数组:123for(int n:num)&#123; System.out.println(n);&#125; 深入数组在深入数组前,必须先了解下Java中的栈和堆 栈和堆JAVA在程序运行时，在内存中划分5片空间进行数据的存储。分别是：1：寄存器。2：本地方法区。3：方法区。4：栈。5：堆。 栈:存放局部变量的地方. 堆:存放对象的地方. 栈和堆的特点 栈： 函数中定义的基本类型变量，对象的引用变量都在函数的栈内存中分配。栈内存特点，数据一执行完毕，变量会立即释放，节约内存空间。栈内存中的数据，没有默认初始化值，需要手动设置。 堆： 堆内存用来存放new创建的对象和数组。堆内存中所有的实体都有内存地址值。堆内存中的实体是用来封装数据的，这些数据都有默认初始化值。堆内存中的实体不再被指向时，JVM启动垃圾回收机制，自动清除。 下面来几个例子帮助理解. 例子1 1234567public static void main(String[] args) &#123; int i = 1; show(); &#125; public static void show() &#123; int j = 2; &#125; 以上程序执行步骤： 第1步——main()函数是程序入口，JVM先执行，在栈内存中开辟一个空间，存放int类型变量x，同时附值1。 第2步——JVM执行show()函数，在栈内存中又开辟一个新的空间，存放int类型变量x，同时附值2。 此时main空间与show空间并存，同时运行，互不影响。 第3步——show()执行完毕，变量x立即释放，空间消失。但是main()函数空间仍存在，main中的变量x仍然存在，不受影响。 例子2 1234public static void main(String[] args) &#123; int[] x = new int[3]; x[0] = 20; &#125; 以上程序执行步骤第1步——执行int[] x=new int[3]; 隐藏以下几分支 JVM执行main()函数，在栈内存中开辟一个空间，存放x变量（x变量是局部变量）。 同时，在堆内存中也开辟一个空间，存放new int[3]数组，数组在堆内存中的地址值，会附给x，这样x也有地址值。所以，x就指向（引用）了这个数组。此时，所有元素均未附值，但都有默认初始化值0。 第2步——执行x[0]=20 即在堆内存中将20附给[0]这个数组元素。这样，数组的三个元素值分别为20,0,0 例子3 12345public static void main(String[] args) &#123; int[] x = new int[3]; x[0] = 20; x = null; &#125; 第1、2步——与示例2完全一样，略。 第3步——执行x=null; null表示空值，即x的引用数组内存地址0x0045被删除了，则不再指向栈内存中的数组。此时，堆中的数组不再被x使用了，即被视为垃圾，JVM会启动垃圾回收机制，不定时自动删除。 123456public static void main(String[] args) &#123; int[] x = new int[3]; int[] y = x; y[1] = 100; x = null; &#125; 第1步——与示例2第1步一致，略。第2步——执行int[] y=x， 在栈内存定义了新的数组变量内存y，同时将x的值0x0045附给了y。所以，y也指向了堆内存中的同一个数组。第3步——执行y[1]=100 即在堆内存中将20附给[0]这个数组元素。这样，数组的三个元素值分别为0,100,0第4步——执行x=null 则变量x不再指向栈内存中的数组了。但是，变量y仍然指向，所以数组不消失。 基本类型初始化123public static void main(String[] args) &#123; int[] i = &#123;1,2,3&#125;; &#125; 引用类型初始化12345public static void main(String[] args) &#123; Student tom = new Student("tom"); Student jack = new Student("jack"); Student[] students = &#123;tom,jack&#125;; &#125; 通过上面栈和堆的内容,自己看看这两种初始化的执行过程. Arrays类Arrays类是一个工具类,里面有大量对数组进行操作的方法.]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch2流程控制与数组</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[3.获取数据库元数据]]></title>
    <url>%2F2018%2F05%2F05%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2FMySQL%2F1.CRUD%2F3.%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%83%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[获取数据库元数据SHOW语句123456789SHOW DATABASES;SHOW CREATE DATABASE db_name;SHOW TABLES;SHOW TABLE STATUS;SHOW CREATE TABLE table_name;SHOW COLUMNS FROM table_name;SHOW INDEX FROM table_name; INFORMATION_SCHEMAINFORMATION_SCHEMA是一个数据库。 查看该数据库具有哪些表 1SHOW TABLES IN INFORMATION_SCHEMA; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566+---------------------------------------+| Tables_in_information_schema |+---------------------------------------+| CHARACTER_SETS || COLLATIONS || COLLATION_CHARACTER_SET_APPLICABILITY || COLUMNS || COLUMN_PRIVILEGES || COLUMN_STATISTICS || ENGINES || EVENTS || FILES || INNODB_BUFFER_PAGE || INNODB_BUFFER_PAGE_LRU || INNODB_BUFFER_POOL_STATS || INNODB_CACHED_INDEXES || INNODB_CMP || INNODB_CMPMEM || INNODB_CMPMEM_RESET || INNODB_CMP_PER_INDEX || INNODB_CMP_PER_INDEX_RESET || INNODB_CMP_RESET || INNODB_COLUMNS || INNODB_DATAFILES || INNODB_FIELDS || INNODB_FOREIGN || INNODB_FOREIGN_COLS || INNODB_FT_BEING_DELETED || INNODB_FT_CONFIG || INNODB_FT_DEFAULT_STOPWORD || INNODB_FT_DELETED || INNODB_FT_INDEX_CACHE || INNODB_FT_INDEX_TABLE || INNODB_INDEXES || INNODB_METRICS || INNODB_TABLES || INNODB_TABLESPACES || INNODB_TABLESPACES_BRIEF || INNODB_TABLESTATS || INNODB_TEMP_TABLE_INFO || INNODB_TRX || INNODB_VIRTUAL || KEYWORDS || KEY_COLUMN_USAGE || OPTIMIZER_TRACE || PARAMETERS || PARTITIONS || PLUGINS || PROCESSLIST || PROFILING || REFERENTIAL_CONSTRAINTS || RESOURCE_GROUPS || ROUTINES || SCHEMATA || SCHEMA_PRIVILEGES || STATISTICS || ST_GEOMETRY_COLUMNS || ST_SPATIAL_REFERENCE_SYSTEMS || TABLES || TABLESPACES || TABLE_CONSTRAINTS || TABLE_PRIVILEGES || TRIGGERS || USER_PRIVILEGES || VIEWS |+---------------------------------------+]]></content>
      <categories>
        <category>DataBase</category>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[4.基本的CRUD]]></title>
    <url>%2F2018%2F05%2F05%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2FMySQL%2F1.CRUD%2F4.%E5%9F%BA%E6%9C%AC%E7%9A%84CRUD%2F</url>
    <content type="text"><![CDATA[基本的CRUDSELECTSELECT的基本语法 1234567SELECT select_listFROM table_listWHERE row_constraintGROUP BY grouping_columns # GROUP BY sex;ORDER BY sorting_columns # ORDER BY last_name DESC, first_name ASC;HAVING group_constraintLIMIT count;]]></content>
      <categories>
        <category>DataBase</category>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java流程控制]]></title>
    <url>%2F2018%2F05%2F05%2FJava%2FJavaSE%2Fch2_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%95%B0%E7%BB%84%2F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%2F</url>
    <content type="text"><![CDATA[流程控制分支语句if语句123456789101112if(logic expression)&#123;&#125;//-------------------------------if(logic expression)&#123; &#125;else&#123;&#125;//-------------------------------if(logic expression)&#123; &#125;else if(logic expression)&#123; &#125;else&#123;&#125; switch语句12345678910111213switch(expression/value)&#123;// 可以是byte short char int Stirng 枚举类型 case value1:&#123; // to do break; &#125; case value2:&#123; // to do break; &#125; default&#123; // to do &#125;&#125; 循环结构while循环语句123while(boolean expression)&#123; // to do&#125; do while循环语句123do&#123; // to do&#125;while(); for循环123for([init_statement];[test_expression];[iteration_statement])&#123; &#125; 控制循环关键字1break; continue; return;]]></content>
      <categories>
        <category>JavaSE</category>
        <category>ch2流程控制与数组</category>
      </categories>
  </entry>
</search>
